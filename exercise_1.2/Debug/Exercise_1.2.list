
Exercise_1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002344  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080024d4  080024d4  000124d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002570  08002570  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08002570  08002570  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002570  08002570  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002570  08002570  00012570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002574  08002574  00012574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000090  08002608  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08002608  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004686  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ec3  00000000  00000000  00024746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000548  00000000  00000000  00025610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004c0  00000000  00000000  00025b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000033ef  00000000  00000000  00026018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004dab  00000000  00000000  00029407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a117  00000000  00000000  0002e1b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000882c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001eac  00000000  00000000  0008831c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080024bc 	.word	0x080024bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080024bc 	.word	0x080024bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8000270:	b480      	push	{r7}
 8000272:	b087      	sub	sp, #28
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]
 800027e:	2300      	movs	r3, #0
 8000280:	613b      	str	r3, [r7, #16]
 8000282:	2300      	movs	r3, #0
 8000284:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000286:	2300      	movs	r3, #0
 8000288:	617b      	str	r3, [r7, #20]
 800028a:	e07c      	b.n	8000386 <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800028c:	2201      	movs	r2, #1
 800028e:	697b      	ldr	r3, [r7, #20]
 8000290:	fa02 f303 	lsl.w	r3, r2, r3
 8000294:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	693a      	ldr	r2, [r7, #16]
 800029c:	4013      	ands	r3, r2
 800029e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	693b      	ldr	r3, [r7, #16]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d16b      	bne.n	8000380 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	791b      	ldrb	r3, [r3, #4]
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d003      	beq.n	80002b8 <GPIO_Init+0x48>
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	791b      	ldrb	r3, [r3, #4]
 80002b4:	2b02      	cmp	r3, #2
 80002b6:	d134      	bne.n	8000322 <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	689a      	ldr	r2, [r3, #8]
 80002bc:	697b      	ldr	r3, [r7, #20]
 80002be:	005b      	lsls	r3, r3, #1
 80002c0:	2103      	movs	r1, #3
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43db      	mvns	r3, r3
 80002c8:	401a      	ands	r2, r3
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	689a      	ldr	r2, [r3, #8]
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	795b      	ldrb	r3, [r3, #5]
 80002d6:	4619      	mov	r1, r3
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	fa01 f303 	lsl.w	r3, r1, r3
 80002e0:	431a      	orrs	r2, r3
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	889b      	ldrh	r3, [r3, #4]
 80002ea:	b29a      	uxth	r2, r3
 80002ec:	697b      	ldr	r3, [r7, #20]
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	4619      	mov	r1, r3
 80002f2:	2301      	movs	r3, #1
 80002f4:	408b      	lsls	r3, r1
 80002f6:	b29b      	uxth	r3, r3
 80002f8:	43db      	mvns	r3, r3
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	4013      	ands	r3, r2
 80002fe:	b29a      	uxth	r2, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	889b      	ldrh	r3, [r3, #4]
 8000308:	b29a      	uxth	r2, r3
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	799b      	ldrb	r3, [r3, #6]
 800030e:	4619      	mov	r1, r3
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	b29b      	uxth	r3, r3
 8000314:	fa01 f303 	lsl.w	r3, r1, r3
 8000318:	b29b      	uxth	r3, r3
 800031a:	4313      	orrs	r3, r2
 800031c:	b29a      	uxth	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	2103      	movs	r1, #3
 800032c:	fa01 f303 	lsl.w	r3, r1, r3
 8000330:	43db      	mvns	r3, r3
 8000332:	401a      	ands	r2, r3
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681a      	ldr	r2, [r3, #0]
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	791b      	ldrb	r3, [r3, #4]
 8000340:	4619      	mov	r1, r3
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	431a      	orrs	r2, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	68da      	ldr	r2, [r3, #12]
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	b29b      	uxth	r3, r3
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	2103      	movs	r1, #3
 800035c:	fa01 f303 	lsl.w	r3, r1, r3
 8000360:	43db      	mvns	r3, r3
 8000362:	401a      	ands	r2, r3
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	68da      	ldr	r2, [r3, #12]
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	79db      	ldrb	r3, [r3, #7]
 8000370:	4619      	mov	r1, r3
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	005b      	lsls	r3, r3, #1
 8000376:	fa01 f303 	lsl.w	r3, r1, r3
 800037a:	431a      	orrs	r2, r3
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	3301      	adds	r3, #1
 8000384:	617b      	str	r3, [r7, #20]
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	2b0f      	cmp	r3, #15
 800038a:	f67f af7f 	bls.w	800028c <GPIO_Init+0x1c>
    }
  }
}
 800038e:	bf00      	nop
 8000390:	bf00      	nop
 8000392:	371c      	adds	r7, #28
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2200      	movs	r2, #0
 80003b0:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2202      	movs	r2, #2
 80003b6:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2200      	movs	r2, #0
 80003bc:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2200      	movs	r2, #0
 80003c2:	71da      	strb	r2, [r3, #7]
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <GPIO_ReadInputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	460b      	mov	r3, r1
 80003da:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80003dc:	2300      	movs	r3, #0
 80003de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	8a1b      	ldrh	r3, [r3, #16]
 80003e4:	b29a      	uxth	r2, r3
 80003e6:	887b      	ldrh	r3, [r7, #2]
 80003e8:	4013      	ands	r3, r2
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d002      	beq.n	80003f6 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 80003f0:	2301      	movs	r3, #1
 80003f2:	73fb      	strb	r3, [r7, #15]
 80003f4:	e001      	b.n	80003fa <GPIO_ReadInputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80003f6:	2300      	movs	r3, #0
 80003f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80003fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	3714      	adds	r7, #20
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	460b      	mov	r3, r1
 8000412:	807b      	strh	r3, [r7, #2]
 8000414:	4613      	mov	r3, r2
 8000416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8000418:	787b      	ldrb	r3, [r7, #1]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d003      	beq.n	8000426 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800041e:	887a      	ldrh	r2, [r7, #2]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000424:	e002      	b.n	800042c <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin ;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	887a      	ldrh	r2, [r7, #2]
 800042a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000438:	b480      	push	{r7}
 800043a:	b08b      	sub	sp, #44	; 0x2c
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	623b      	str	r3, [r7, #32]
 8000444:	2300      	movs	r3, #0
 8000446:	61fb      	str	r3, [r7, #28]
 8000448:	2300      	movs	r3, #0
 800044a:	61bb      	str	r3, [r7, #24]
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]
 8000450:	2300      	movs	r3, #0
 8000452:	613b      	str	r3, [r7, #16]
 8000454:	2300      	movs	r3, #0
 8000456:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	2300      	movs	r3, #0
 800045e:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000460:	4b8b      	ldr	r3, [pc, #556]	; (8000690 <RCC_GetClocksFreq+0x258>)
 8000462:	685b      	ldr	r3, [r3, #4]
 8000464:	f003 030c 	and.w	r3, r3, #12
 8000468:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 800046a:	6a3b      	ldr	r3, [r7, #32]
 800046c:	2b08      	cmp	r3, #8
 800046e:	d011      	beq.n	8000494 <RCC_GetClocksFreq+0x5c>
 8000470:	6a3b      	ldr	r3, [r7, #32]
 8000472:	2b08      	cmp	r3, #8
 8000474:	d837      	bhi.n	80004e6 <RCC_GetClocksFreq+0xae>
 8000476:	6a3b      	ldr	r3, [r7, #32]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d003      	beq.n	8000484 <RCC_GetClocksFreq+0x4c>
 800047c:	6a3b      	ldr	r3, [r7, #32]
 800047e:	2b04      	cmp	r3, #4
 8000480:	d004      	beq.n	800048c <RCC_GetClocksFreq+0x54>
 8000482:	e030      	b.n	80004e6 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a83      	ldr	r2, [pc, #524]	; (8000694 <RCC_GetClocksFreq+0x25c>)
 8000488:	601a      	str	r2, [r3, #0]
      break;
 800048a:	e030      	b.n	80004ee <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4a81      	ldr	r2, [pc, #516]	; (8000694 <RCC_GetClocksFreq+0x25c>)
 8000490:	601a      	str	r2, [r3, #0]
      break;
 8000492:	e02c      	b.n	80004ee <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000494:	4b7e      	ldr	r3, [pc, #504]	; (8000690 <RCC_GetClocksFreq+0x258>)
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800049c:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800049e:	4b7c      	ldr	r3, [pc, #496]	; (8000690 <RCC_GetClocksFreq+0x258>)
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004a6:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80004a8:	69fb      	ldr	r3, [r7, #28]
 80004aa:	0c9b      	lsrs	r3, r3, #18
 80004ac:	3302      	adds	r3, #2
 80004ae:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80004b0:	69bb      	ldr	r3, [r7, #24]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d105      	bne.n	80004c2 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80004b6:	69fb      	ldr	r3, [r7, #28]
 80004b8:	4a77      	ldr	r2, [pc, #476]	; (8000698 <RCC_GetClocksFreq+0x260>)
 80004ba:	fb02 f303 	mul.w	r3, r2, r3
 80004be:	627b      	str	r3, [r7, #36]	; 0x24
 80004c0:	e00d      	b.n	80004de <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80004c2:	4b73      	ldr	r3, [pc, #460]	; (8000690 <RCC_GetClocksFreq+0x258>)
 80004c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004c6:	f003 030f 	and.w	r3, r3, #15
 80004ca:	3301      	adds	r3, #1
 80004cc:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80004ce:	4a71      	ldr	r2, [pc, #452]	; (8000694 <RCC_GetClocksFreq+0x25c>)
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80004d6:	69fb      	ldr	r3, [r7, #28]
 80004d8:	fb02 f303 	mul.w	r3, r2, r3
 80004dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004e2:	601a      	str	r2, [r3, #0]
      break;
 80004e4:	e003      	b.n	80004ee <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a6a      	ldr	r2, [pc, #424]	; (8000694 <RCC_GetClocksFreq+0x25c>)
 80004ea:	601a      	str	r2, [r3, #0]
      break;
 80004ec:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80004ee:	4b68      	ldr	r3, [pc, #416]	; (8000690 <RCC_GetClocksFreq+0x258>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80004f6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80004f8:	6a3b      	ldr	r3, [r7, #32]
 80004fa:	091b      	lsrs	r3, r3, #4
 80004fc:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 80004fe:	4a67      	ldr	r2, [pc, #412]	; (800069c <RCC_GetClocksFreq+0x264>)
 8000500:	6a3b      	ldr	r3, [r7, #32]
 8000502:	4413      	add	r3, r2
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	b2db      	uxtb	r3, r3
 8000508:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	40da      	lsrs	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000516:	4b5e      	ldr	r3, [pc, #376]	; (8000690 <RCC_GetClocksFreq+0x258>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800051e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000520:	6a3b      	ldr	r3, [r7, #32]
 8000522:	0a1b      	lsrs	r3, r3, #8
 8000524:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000526:	4a5d      	ldr	r2, [pc, #372]	; (800069c <RCC_GetClocksFreq+0x264>)
 8000528:	6a3b      	ldr	r3, [r7, #32]
 800052a:	4413      	add	r3, r2
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	685a      	ldr	r2, [r3, #4]
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	40da      	lsrs	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800053e:	4b54      	ldr	r3, [pc, #336]	; (8000690 <RCC_GetClocksFreq+0x258>)
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000546:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000548:	6a3b      	ldr	r3, [r7, #32]
 800054a:	0adb      	lsrs	r3, r3, #11
 800054c:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 800054e:	4a53      	ldr	r2, [pc, #332]	; (800069c <RCC_GetClocksFreq+0x264>)
 8000550:	6a3b      	ldr	r3, [r7, #32]
 8000552:	4413      	add	r3, r2
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	685a      	ldr	r2, [r3, #4]
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	40da      	lsrs	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000566:	4b4a      	ldr	r3, [pc, #296]	; (8000690 <RCC_GetClocksFreq+0x258>)
 8000568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800056a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800056e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000570:	6a3b      	ldr	r3, [r7, #32]
 8000572:	091b      	lsrs	r3, r3, #4
 8000574:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000576:	4a4a      	ldr	r2, [pc, #296]	; (80006a0 <RCC_GetClocksFreq+0x268>)
 8000578:	6a3b      	ldr	r3, [r7, #32]
 800057a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800057e:	b29b      	uxth	r3, r3
 8000580:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000582:	693b      	ldr	r3, [r7, #16]
 8000584:	f003 0310 	and.w	r3, r3, #16
 8000588:	2b00      	cmp	r3, #0
 800058a:	d006      	beq.n	800059a <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 800058c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800058e:	693b      	ldr	r3, [r7, #16]
 8000590:	fbb2 f2f3 	udiv	r2, r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	611a      	str	r2, [r3, #16]
 8000598:	e003      	b.n	80005a2 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80005a2:	4b3b      	ldr	r3, [pc, #236]	; (8000690 <RCC_GetClocksFreq+0x258>)
 80005a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005a6:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80005aa:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80005ac:	6a3b      	ldr	r3, [r7, #32]
 80005ae:	0a5b      	lsrs	r3, r3, #9
 80005b0:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80005b2:	4a3b      	ldr	r2, [pc, #236]	; (80006a0 <RCC_GetClocksFreq+0x268>)
 80005b4:	6a3b      	ldr	r3, [r7, #32]
 80005b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80005be:	693b      	ldr	r3, [r7, #16]
 80005c0:	f003 0310 	and.w	r3, r3, #16
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d006      	beq.n	80005d6 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 80005c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005ca:	693b      	ldr	r3, [r7, #16]
 80005cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	615a      	str	r2, [r3, #20]
 80005d4:	e003      	b.n	80005de <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80005de:	4b2c      	ldr	r3, [pc, #176]	; (8000690 <RCC_GetClocksFreq+0x258>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0310 	and.w	r3, r3, #16
 80005e6:	2b10      	cmp	r3, #16
 80005e8:	d003      	beq.n	80005f2 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4a29      	ldr	r2, [pc, #164]	; (8000694 <RCC_GetClocksFreq+0x25c>)
 80005ee:	619a      	str	r2, [r3, #24]
 80005f0:	e003      	b.n	80005fa <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 80005fa:	4b25      	ldr	r3, [pc, #148]	; (8000690 <RCC_GetClocksFreq+0x258>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0320 	and.w	r3, r3, #32
 8000602:	2b20      	cmp	r3, #32
 8000604:	d003      	beq.n	800060e <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a22      	ldr	r2, [pc, #136]	; (8000694 <RCC_GetClocksFreq+0x25c>)
 800060a:	61da      	str	r2, [r3, #28]
 800060c:	e003      	b.n	8000616 <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <RCC_GetClocksFreq+0x258>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800061e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000622:	d10d      	bne.n	8000640 <RCC_GetClocksFreq+0x208>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800062a:	429a      	cmp	r2, r3
 800062c:	d108      	bne.n	8000640 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	429a      	cmp	r2, r3
 8000634:	d104      	bne.n	8000640 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000638:	005a      	lsls	r2, r3, #1
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	621a      	str	r2, [r3, #32]
 800063e:	e003      	b.n	8000648 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	68da      	ldr	r2, [r3, #12]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <RCC_GetClocksFreq+0x258>)
 800064a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000654:	d10d      	bne.n	8000672 <RCC_GetClocksFreq+0x23a>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800065c:	429a      	cmp	r2, r3
 800065e:	d108      	bne.n	8000672 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000660:	68fa      	ldr	r2, [r7, #12]
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	429a      	cmp	r2, r3
 8000666:	d104      	bne.n	8000672 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066a:	005a      	lsls	r2, r3, #1
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	625a      	str	r2, [r3, #36]	; 0x24
 8000670:	e003      	b.n	800067a <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	68da      	ldr	r2, [r3, #12]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <RCC_GetClocksFreq+0x258>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0303 	and.w	r3, r3, #3
 8000682:	2b00      	cmp	r3, #0
 8000684:	d10e      	bne.n	80006a4 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	68da      	ldr	r2, [r3, #12]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	629a      	str	r2, [r3, #40]	; 0x28
 800068e:	e028      	b.n	80006e2 <RCC_GetClocksFreq+0x2aa>
 8000690:	40021000 	.word	0x40021000
 8000694:	007a1200 	.word	0x007a1200
 8000698:	003d0900 	.word	0x003d0900
 800069c:	20000000 	.word	0x20000000
 80006a0:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80006a4:	4b6c      	ldr	r3, [pc, #432]	; (8000858 <RCC_GetClocksFreq+0x420>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a8:	f003 0303 	and.w	r3, r3, #3
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d104      	bne.n	80006ba <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	629a      	str	r2, [r3, #40]	; 0x28
 80006b8:	e013      	b.n	80006e2 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80006ba:	4b67      	ldr	r3, [pc, #412]	; (8000858 <RCC_GetClocksFreq+0x420>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0303 	and.w	r3, r3, #3
 80006c2:	2b02      	cmp	r3, #2
 80006c4:	d104      	bne.n	80006d0 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
 80006ce:	e008      	b.n	80006e2 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 80006d0:	4b61      	ldr	r3, [pc, #388]	; (8000858 <RCC_GetClocksFreq+0x420>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d4:	f003 0303 	and.w	r3, r3, #3
 80006d8:	2b03      	cmp	r3, #3
 80006da:	d102      	bne.n	80006e2 <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a5f      	ldr	r2, [pc, #380]	; (800085c <RCC_GetClocksFreq+0x424>)
 80006e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 80006e2:	4b5d      	ldr	r3, [pc, #372]	; (8000858 <RCC_GetClocksFreq+0x420>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d104      	bne.n	80006f8 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	689a      	ldr	r2, [r3, #8]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006f6:	e021      	b.n	800073c <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 80006f8:	4b57      	ldr	r3, [pc, #348]	; (8000858 <RCC_GetClocksFreq+0x420>)
 80006fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000704:	d104      	bne.n	8000710 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	62da      	str	r2, [r3, #44]	; 0x2c
 800070e:	e015      	b.n	800073c <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000710:	4b51      	ldr	r3, [pc, #324]	; (8000858 <RCC_GetClocksFreq+0x420>)
 8000712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000714:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000718:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800071c:	d104      	bne.n	8000728 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000724:	62da      	str	r2, [r3, #44]	; 0x2c
 8000726:	e009      	b.n	800073c <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000728:	4b4b      	ldr	r3, [pc, #300]	; (8000858 <RCC_GetClocksFreq+0x420>)
 800072a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000730:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000734:	d102      	bne.n	800073c <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a48      	ldr	r2, [pc, #288]	; (800085c <RCC_GetClocksFreq+0x424>)
 800073a:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 800073c:	4b46      	ldr	r3, [pc, #280]	; (8000858 <RCC_GetClocksFreq+0x420>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000740:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000744:	2b00      	cmp	r3, #0
 8000746:	d104      	bne.n	8000752 <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	689a      	ldr	r2, [r3, #8]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	631a      	str	r2, [r3, #48]	; 0x30
 8000750:	e021      	b.n	8000796 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000752:	4b41      	ldr	r3, [pc, #260]	; (8000858 <RCC_GetClocksFreq+0x420>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800075a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800075e:	d104      	bne.n	800076a <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	631a      	str	r2, [r3, #48]	; 0x30
 8000768:	e015      	b.n	8000796 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 800076a:	4b3b      	ldr	r3, [pc, #236]	; (8000858 <RCC_GetClocksFreq+0x420>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000772:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000776:	d104      	bne.n	8000782 <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800077e:	631a      	str	r2, [r3, #48]	; 0x30
 8000780:	e009      	b.n	8000796 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000782:	4b35      	ldr	r3, [pc, #212]	; (8000858 <RCC_GetClocksFreq+0x420>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800078a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800078e:	d102      	bne.n	8000796 <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a32      	ldr	r2, [pc, #200]	; (800085c <RCC_GetClocksFreq+0x424>)
 8000794:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8000796:	4b30      	ldr	r3, [pc, #192]	; (8000858 <RCC_GetClocksFreq+0x420>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d104      	bne.n	80007ac <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	689a      	ldr	r2, [r3, #8]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	635a      	str	r2, [r3, #52]	; 0x34
 80007aa:	e021      	b.n	80007f0 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80007ac:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <RCC_GetClocksFreq+0x420>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80007b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80007b8:	d104      	bne.n	80007c4 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	635a      	str	r2, [r3, #52]	; 0x34
 80007c2:	e015      	b.n	80007f0 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 80007c4:	4b24      	ldr	r3, [pc, #144]	; (8000858 <RCC_GetClocksFreq+0x420>)
 80007c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80007cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80007d0:	d104      	bne.n	80007dc <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007d8:	635a      	str	r2, [r3, #52]	; 0x34
 80007da:	e009      	b.n	80007f0 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 80007dc:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <RCC_GetClocksFreq+0x420>)
 80007de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80007e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80007e8:	d102      	bne.n	80007f0 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a1b      	ldr	r2, [pc, #108]	; (800085c <RCC_GetClocksFreq+0x424>)
 80007ee:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 80007f0:	4b19      	ldr	r3, [pc, #100]	; (8000858 <RCC_GetClocksFreq+0x420>)
 80007f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d104      	bne.n	8000806 <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	689a      	ldr	r2, [r3, #8]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000804:	e021      	b.n	800084a <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <RCC_GetClocksFreq+0x420>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800080e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000812:	d104      	bne.n	800081e <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800081c:	e015      	b.n	800084a <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <RCC_GetClocksFreq+0x420>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000826:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800082a:	d104      	bne.n	8000836 <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000832:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000834:	e009      	b.n	800084a <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <RCC_GetClocksFreq+0x420>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800083e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000842:	d102      	bne.n	800084a <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4a05      	ldr	r2, [pc, #20]	; (800085c <RCC_GetClocksFreq+0x424>)
 8000848:	639a      	str	r2, [r3, #56]	; 0x38
}
 800084a:	bf00      	nop
 800084c:	372c      	adds	r7, #44	; 0x2c
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000
 800085c:	007a1200 	.word	0x007a1200

08000860 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d006      	beq.n	8000880 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <RCC_AHBPeriphClockCmd+0x3c>)
 8000874:	695a      	ldr	r2, [r3, #20]
 8000876:	4909      	ldr	r1, [pc, #36]	; (800089c <RCC_AHBPeriphClockCmd+0x3c>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4313      	orrs	r3, r2
 800087c:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 800087e:	e006      	b.n	800088e <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <RCC_AHBPeriphClockCmd+0x3c>)
 8000882:	695a      	ldr	r2, [r3, #20]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	43db      	mvns	r3, r3
 8000888:	4904      	ldr	r1, [pc, #16]	; (800089c <RCC_AHBPeriphClockCmd+0x3c>)
 800088a:	4013      	ands	r3, r2
 800088c:	614b      	str	r3, [r1, #20]
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000

080008a0 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80008ac:	887b      	ldrh	r3, [r7, #2]
 80008ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b089      	sub	sp, #36	; 0x24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	4613      	mov	r3, r2
 80008d0:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	0a1b      	lsrs	r3, r3, #8
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80008f6:	2201      	movs	r2, #1
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	2b02      	cmp	r3, #2
 8000904:	d103      	bne.n	800090e <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	3304      	adds	r3, #4
 800090a:	61fb      	str	r3, [r7, #28]
 800090c:	e005      	b.n	800091a <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	2b03      	cmp	r3, #3
 8000912:	d102      	bne.n	800091a <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	3308      	adds	r3, #8
 8000918:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d006      	beq.n	800092e <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	6819      	ldr	r1, [r3, #0]
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	430a      	orrs	r2, r1
 800092a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800092c:	e006      	b.n	800093c <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	6819      	ldr	r1, [r3, #0]
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	43da      	mvns	r2, r3
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	400a      	ands	r2, r1
 800093a:	601a      	str	r2, [r3, #0]
}
 800093c:	bf00      	nop
 800093e:	3724      	adds	r7, #36	; 0x24
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000952:	2300      	movs	r3, #0
 8000954:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	69da      	ldr	r2, [r3, #28]
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	4013      	ands	r3, r2
 800095e:	2b00      	cmp	r3, #0
 8000960:	d002      	beq.n	8000968 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8000962:	2301      	movs	r3, #1
 8000964:	73fb      	strb	r3, [r7, #15]
 8000966:	e001      	b.n	800096c <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800096c:	7bfb      	ldrb	r3, [r7, #15]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 800097a:	b480      	push	{r7}
 800097c:	b087      	sub	sp, #28
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
 8000982:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000990:	2300      	movs	r3, #0
 8000992:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	b29b      	uxth	r3, r3
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	b29b      	uxth	r3, r3
 800099c:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80009a4:	2201      	movs	r2, #1
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d105      	bne.n	80009c0 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	697a      	ldr	r2, [r7, #20]
 80009ba:	4013      	ands	r3, r2
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	e00d      	b.n	80009dc <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d105      	bne.n	80009d2 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	697a      	ldr	r2, [r7, #20]
 80009cc:	4013      	ands	r3, r2
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	e004      	b.n	80009dc <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	697a      	ldr	r2, [r7, #20]
 80009d8:	4013      	ands	r3, r2
 80009da:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	0c1b      	lsrs	r3, r3, #16
 80009e0:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80009e2:	2201      	movs	r2, #1
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	69db      	ldr	r3, [r3, #28]
 80009f0:	68fa      	ldr	r2, [r7, #12]
 80009f2:	4013      	ands	r3, r2
 80009f4:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d005      	beq.n	8000a08 <USART_GetITStatus+0x8e>
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d002      	beq.n	8000a08 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8000a02:	2301      	movs	r3, #1
 8000a04:	74fb      	strb	r3, [r7, #19]
 8000a06:	e001      	b.n	8000a0c <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000a0c:	7cfb      	ldrb	r3, [r7, #19]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	371c      	adds	r7, #28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	f003 031f 	and.w	r3, r3, #31
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	fa02 f103 	lsl.w	r1, r2, r3
 8000a32:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <NVIC_EnableIRQ+0x30>)
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	095b      	lsrs	r3, r3, #5
 8000a3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000e100 	.word	0xe000e100

08000a50 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4807      	ldr	r0, [pc, #28]	; (8000a80 <uart_put_char+0x30>)
 8000a62:	f7ff ff1d 	bl	80008a0 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8000a66:	bf00      	nop
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <uart_put_char+0x30>)
 8000a6c:	f7ff ff6c 	bl	8000948 <USART_GetFlagStatus>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d0f8      	beq.n	8000a68 <uart_put_char+0x18>
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40004400 	.word	0x40004400

08000a84 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
 8000a90:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	e012      	b.n	8000abe <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b0a      	cmp	r3, #10
 8000aa2:	d102      	bne.n	8000aaa <_write_r+0x26>
            uart_put_char('\r');
 8000aa4:	200d      	movs	r0, #13
 8000aa6:	f7ff ffd3 	bl	8000a50 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	4413      	add	r3, r2
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff ffcc 	bl	8000a50 <uart_put_char>
    for (n = 0; n < len; n++) {
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	3301      	adds	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	697a      	ldr	r2, [r7, #20]
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	dbe8      	blt.n	8000a98 <_write_r+0x14>
    }

    return len;
 8000ac6:	683b      	ldr	r3, [r7, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000ad4:	4915      	ldr	r1, [pc, #84]	; (8000b2c <USART2_IRQHandler+0x5c>)
 8000ad6:	4816      	ldr	r0, [pc, #88]	; (8000b30 <USART2_IRQHandler+0x60>)
 8000ad8:	f7ff ff4f 	bl	800097a <USART_GetITStatus>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d021      	beq.n	8000b26 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8000ae2:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <USART2_IRQHandler+0x60>)
 8000ae4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000ae6:	b299      	uxth	r1, r3
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <USART2_IRQHandler+0x64>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	b2d0      	uxtb	r0, r2
 8000af2:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <USART2_IRQHandler+0x64>)
 8000af4:	7010      	strb	r0, [r2, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	b2c9      	uxtb	r1, r1
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <USART2_IRQHandler+0x68>)
 8000afc:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <USART2_IRQHandler+0x6c>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2bff      	cmp	r3, #255	; 0xff
 8000b06:	d107      	bne.n	8000b18 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000b08:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <USART2_IRQHandler+0x70>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	3301      	adds	r3, #1
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <USART2_IRQHandler+0x70>)
 8000b14:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8000b16:	e006      	b.n	8000b26 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <USART2_IRQHandler+0x6c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	3301      	adds	r3, #1
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <USART2_IRQHandler+0x6c>)
 8000b24:	701a      	strb	r2, [r3, #0]
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	00050105 	.word	0x00050105
 8000b30:	40004400 	.word	0x40004400
 8000b34:	200001ac 	.word	0x200001ac
 8000b38:	200000ac 	.word	0x200000ac
 8000b3c:	200001ae 	.word	0x200001ae
 8000b40:	200001ad 	.word	0x200001ad

08000b44 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b094      	sub	sp, #80	; 0x50
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000b4c:	4b86      	ldr	r3, [pc, #536]	; (8000d68 <uart_init+0x224>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 fc2f 	bl	80013b8 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8000b5a:	4b83      	ldr	r3, [pc, #524]	; (8000d68 <uart_init+0x224>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 fc28 	bl	80013b8 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8000b68:	4b80      	ldr	r3, [pc, #512]	; (8000d6c <uart_init+0x228>)
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	4a7f      	ldr	r2, [pc, #508]	; (8000d6c <uart_init+0x228>)
 8000b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b72:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8000b74:	4b7d      	ldr	r3, [pc, #500]	; (8000d6c <uart_init+0x228>)
 8000b76:	69db      	ldr	r3, [r3, #28]
 8000b78:	4a7c      	ldr	r2, [pc, #496]	; (8000d6c <uart_init+0x228>)
 8000b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7e:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000b80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b84:	6a1b      	ldr	r3, [r3, #32]
 8000b86:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000b8e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000b90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b94:	6a1b      	ldr	r3, [r3, #32]
 8000b96:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000b9e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000ba0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ba4:	6a1b      	ldr	r3, [r3, #32]
 8000ba6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000baa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000bae:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000bb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bb4:	6a1b      	ldr	r3, [r3, #32]
 8000bb6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bba:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000bbe:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000bc0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000bce:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000bd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bda:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000bde:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8000be0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000be4:	889b      	ldrh	r3, [r3, #4]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bec:	f023 030c 	bic.w	r3, r3, #12
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000bf4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bf8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bfc:	8892      	ldrh	r2, [r2, #4]
 8000bfe:	b292      	uxth	r2, r2
 8000c00:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000c02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c10:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000c12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c1c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000c20:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000c22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c30:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000c32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c3c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000c40:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000c42:	4b4b      	ldr	r3, [pc, #300]	; (8000d70 <uart_init+0x22c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a4a      	ldr	r2, [pc, #296]	; (8000d70 <uart_init+0x22c>)
 8000c48:	f023 0301 	bic.w	r3, r3, #1
 8000c4c:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000c4e:	4b48      	ldr	r3, [pc, #288]	; (8000d70 <uart_init+0x22c>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	4a47      	ldr	r2, [pc, #284]	; (8000d70 <uart_init+0x22c>)
 8000c54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c58:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000c5a:	4b45      	ldr	r3, [pc, #276]	; (8000d70 <uart_init+0x22c>)
 8000c5c:	4a44      	ldr	r2, [pc, #272]	; (8000d70 <uart_init+0x22c>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000c62:	4b43      	ldr	r3, [pc, #268]	; (8000d70 <uart_init+0x22c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a42      	ldr	r2, [pc, #264]	; (8000d70 <uart_init+0x22c>)
 8000c68:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000c6c:	f023 030c 	bic.w	r3, r3, #12
 8000c70:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000c72:	4b3f      	ldr	r3, [pc, #252]	; (8000d70 <uart_init+0x22c>)
 8000c74:	4a3e      	ldr	r2, [pc, #248]	; (8000d70 <uart_init+0x22c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000c7a:	4b3d      	ldr	r3, [pc, #244]	; (8000d70 <uart_init+0x22c>)
 8000c7c:	4a3c      	ldr	r2, [pc, #240]	; (8000d70 <uart_init+0x22c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000c82:	4b3b      	ldr	r3, [pc, #236]	; (8000d70 <uart_init+0x22c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a3a      	ldr	r2, [pc, #232]	; (8000d70 <uart_init+0x22c>)
 8000c88:	f043 030c 	orr.w	r3, r3, #12
 8000c8c:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000c8e:	4b38      	ldr	r3, [pc, #224]	; (8000d70 <uart_init+0x22c>)
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	4a37      	ldr	r2, [pc, #220]	; (8000d70 <uart_init+0x22c>)
 8000c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c98:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000c9a:	4b35      	ldr	r3, [pc, #212]	; (8000d70 <uart_init+0x22c>)
 8000c9c:	4a34      	ldr	r2, [pc, #208]	; (8000d70 <uart_init+0x22c>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	647b      	str	r3, [r7, #68]	; 0x44
 8000caa:	2300      	movs	r3, #0
 8000cac:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fbc0 	bl	8000438 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cba:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000cbc:	4b2c      	ldr	r3, [pc, #176]	; (8000d70 <uart_init+0x22c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d010      	beq.n	8000cea <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cca:	005a      	lsls	r2, r3, #1
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	fbb3 f2f2 	udiv	r2, r3, r2
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	fb01 f202 	mul.w	r2, r1, r2
 8000ce4:	1a9b      	subs	r3, r3, r2
 8000ce6:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ce8:	e00d      	b.n	8000d06 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000cea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	fbb3 f2f2 	udiv	r2, r3, r2
 8000cfc:	6879      	ldr	r1, [r7, #4]
 8000cfe:	fb01 f202 	mul.w	r2, r1, r2
 8000d02:	1a9b      	subs	r3, r3, r2
 8000d04:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	085b      	lsrs	r3, r3, #1
 8000d0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d302      	bcc.n	8000d16 <uart_init+0x1d2>
        divider++;
 8000d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d12:	3301      	adds	r3, #1
 8000d14:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <uart_init+0x22c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00b      	beq.n	8000d3a <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d24:	085b      	lsrs	r3, r3, #1
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000d2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d2e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000d32:	4013      	ands	r3, r2
 8000d34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d36:	4313      	orrs	r3, r2
 8000d38:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <uart_init+0x22c>)
 8000d3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d3e:	b292      	uxth	r2, r2
 8000d40:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <uart_init+0x22c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <uart_init+0x22c>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4908      	ldr	r1, [pc, #32]	; (8000d74 <uart_init+0x230>)
 8000d52:	4807      	ldr	r0, [pc, #28]	; (8000d70 <uart_init+0x22c>)
 8000d54:	f7ff fdb6 	bl	80008c4 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000d58:	2026      	movs	r0, #38	; 0x26
 8000d5a:	f7ff fe5f 	bl	8000a1c <NVIC_EnableIRQ>
}
 8000d5e:	bf00      	nop
 8000d60:	3750      	adds	r7, #80	; 0x50
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	2000002c 	.word	0x2000002c
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40004400 	.word	0x40004400
 8000d74:	00050105 	.word	0x00050105

08000d78 <initJoystick>:
#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" // Input/output library for this course

void initJoystick(void){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC,ENABLE); // Enable clock for GPIO Port C
 8000d7e:	2101      	movs	r1, #1
 8000d80:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000d84:	f7ff fd6c 	bl	8000860 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB,ENABLE); // Enable clock for GPIO Port B
 8000d88:	2101      	movs	r1, #1
 8000d8a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000d8e:	f7ff fd67 	bl	8000860 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE); // Enable clock for GPIO Port A
 8000d92:	2101      	movs	r1, #1
 8000d94:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d98:	f7ff fd62 	bl	8000860 <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructAll; // Define typedef struct for setting pins

	GPIO_StructInit(&GPIO_InitStructAll); // Initialize GPIO struct
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fafc 	bl	800039c <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN; // Set as input
 8000da4:	2300      	movs	r3, #0
 8000da6:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN; // Set as pull down
 8000da8:	2302      	movs	r3, #2
 8000daa:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4; // Set so the configuration is on pin 4
 8000dac:	2310      	movs	r3, #16
 8000dae:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 8000db0:	463b      	mov	r3, r7
 8000db2:	4619      	mov	r1, r3
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f7ff fa5a 	bl	8000270 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll); // Initialize GPIO struct
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff faec 	bl	800039c <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN; // Set as input
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN; // Set as pull down
 8000dc8:	2302      	movs	r3, #2
 8000dca:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_0; // Set so the configuration is on pin 0
 8000dcc:	2301      	movs	r3, #1
 8000dce:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4819      	ldr	r0, [pc, #100]	; (8000e3c <initJoystick+0xc4>)
 8000dd6:	f7ff fa4b 	bl	8000270 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll); // Initialize GPIO struct
 8000dda:	463b      	mov	r3, r7
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fadd 	bl	800039c <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN; // Set as input
 8000de2:	2300      	movs	r3, #0
 8000de4:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN; // Set as pull down
 8000de6:	2302      	movs	r3, #2
 8000de8:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_5; // Set so the configuration is on pin 5
 8000dea:	2320      	movs	r3, #32
 8000dec:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 8000dee:	463b      	mov	r3, r7
 8000df0:	4619      	mov	r1, r3
 8000df2:	4812      	ldr	r0, [pc, #72]	; (8000e3c <initJoystick+0xc4>)
 8000df4:	f7ff fa3c 	bl	8000270 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll); // Initialize GPIO struct
 8000df8:	463b      	mov	r3, r7
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff face 	bl	800039c <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN; // Set as input
 8000e00:	2300      	movs	r3, #0
 8000e02:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN; // Set as pull down
 8000e04:	2302      	movs	r3, #2
 8000e06:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_0; // Set so the configuration is on pin 0
 8000e08:	2301      	movs	r3, #1
 8000e0a:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480b      	ldr	r0, [pc, #44]	; (8000e40 <initJoystick+0xc8>)
 8000e12:	f7ff fa2d 	bl	8000270 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll); // Initialize GPIO struct
 8000e16:	463b      	mov	r3, r7
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fabf 	bl	800039c <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN; // Set as input
 8000e1e:	2300      	movs	r3, #0
 8000e20:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN; // Set as pull down
 8000e22:	2302      	movs	r3, #2
 8000e24:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_1; // Set so the configuration is on pin 1
 8000e26:	2302      	movs	r3, #2
 8000e28:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4804      	ldr	r0, [pc, #16]	; (8000e40 <initJoystick+0xc8>)
 8000e30:	f7ff fa1e 	bl	8000270 <GPIO_Init>

}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	48000400 	.word	0x48000400
 8000e40:	48000800 	.word	0x48000800

08000e44 <initLed>:

void initLed(void){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC,ENABLE); // Enable clock for GPIO Port C
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000e50:	f7ff fd06 	bl	8000860 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB,ENABLE); // Enable clock for GPIO Port B
 8000e54:	2101      	movs	r1, #1
 8000e56:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000e5a:	f7ff fd01 	bl	8000860 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE); // Enable clock for GPIO Port A
 8000e5e:	2101      	movs	r1, #1
 8000e60:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e64:	f7ff fcfc 	bl	8000860 <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructAll; // Define typedef struct for setting pins

	// Sets PA9 to output
	GPIO_StructInit(&GPIO_InitStructAll); // Initialize GPIO struct
 8000e68:	463b      	mov	r3, r7
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fa96 	bl	800039c <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT; // Set as output
 8000e70:	2301      	movs	r3, #1
 8000e72:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP; // Set as Push-Pull
 8000e74:	2300      	movs	r3, #0
 8000e76:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_9; // Set so the configuration is on pin 9
 8000e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e7c:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz; // Set speed to 2 MHz
 8000e7e:	2302      	movs	r3, #2
 8000e80:	717b      	strb	r3, [r7, #5]
	// For all options see SPL/inc/stm32f30x_gpio.h
	GPIO_Init(GPIOA, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 8000e82:	463b      	mov	r3, r7
 8000e84:	4619      	mov	r1, r3
 8000e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8a:	f7ff f9f1 	bl	8000270 <GPIO_Init>

	// Sets PA9 to output
	GPIO_StructInit(&GPIO_InitStructAll); // Initialize GPIO struct
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fa83 	bl	800039c <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT; // Set as output
 8000e96:	2301      	movs	r3, #1
 8000e98:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP; // Set as Push-Pull
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4; // Set so the configuration is on pin 4
 8000e9e:	2310      	movs	r3, #16
 8000ea0:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz; // Set speed to 2 MHz
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	717b      	strb	r3, [r7, #5]
	// For all options see SPL/inc/stm32f30x_gpio.h
	GPIO_Init(GPIOB, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480c      	ldr	r0, [pc, #48]	; (8000edc <initLed+0x98>)
 8000eac:	f7ff f9e0 	bl	8000270 <GPIO_Init>

	// Sets PA9 to output
	GPIO_StructInit(&GPIO_InitStructAll); // Initialize GPIO struct
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fa72 	bl	800039c <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT; // Set as output
 8000eb8:	2301      	movs	r3, #1
 8000eba:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP; // Set as Push-Pull
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_7; // Set so the configuration is on pin 7
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz; // Set speed to 2 MHz
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	717b      	strb	r3, [r7, #5]
	// For all options see SPL/inc/stm32f30x_gpio.h
	GPIO_Init(GPIOC, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 8000ec8:	463b      	mov	r3, r7
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <initLed+0x9c>)
 8000ece:	f7ff f9cf 	bl	8000270 <GPIO_Init>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	48000400 	.word	0x48000400
 8000ee0:	48000800 	.word	0x48000800

08000ee4 <readJoystick>:

uint8_t readJoystick(void){ //function to load input data to the array
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
	uint8_t array = (GPIO_ReadInputDataBit ( GPIOA, GPIO_Pin_4) << 7) |\
 8000eea:	2110      	movs	r1, #16
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef0:	f7ff fa6e 	bl	80003d0 <GPIO_ReadInputDataBit>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	01db      	lsls	r3, r3, #7
 8000ef8:	b25c      	sxtb	r4, r3
			(GPIO_ReadInputDataBit ( GPIOB, GPIO_Pin_0) << 6) |\
 8000efa:	2101      	movs	r1, #1
 8000efc:	482e      	ldr	r0, [pc, #184]	; (8000fb8 <readJoystick+0xd4>)
 8000efe:	f7ff fa67 	bl	80003d0 <GPIO_ReadInputDataBit>
 8000f02:	4603      	mov	r3, r0
 8000f04:	019b      	lsls	r3, r3, #6
	uint8_t array = (GPIO_ReadInputDataBit ( GPIOA, GPIO_Pin_4) << 7) |\
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	4323      	orrs	r3, r4
 8000f0a:	b25c      	sxtb	r4, r3
			(GPIO_ReadInputDataBit ( GPIOC, GPIO_Pin_1) << 5) |\
 8000f0c:	2102      	movs	r1, #2
 8000f0e:	482b      	ldr	r0, [pc, #172]	; (8000fbc <readJoystick+0xd8>)
 8000f10:	f7ff fa5e 	bl	80003d0 <GPIO_ReadInputDataBit>
 8000f14:	4603      	mov	r3, r0
 8000f16:	015b      	lsls	r3, r3, #5
			(GPIO_ReadInputDataBit ( GPIOB, GPIO_Pin_0) << 6) |\
 8000f18:	b25b      	sxtb	r3, r3
 8000f1a:	4323      	orrs	r3, r4
 8000f1c:	b25c      	sxtb	r4, r3
			(GPIO_ReadInputDataBit ( GPIOC, GPIO_Pin_0) << 4) |\
 8000f1e:	2101      	movs	r1, #1
 8000f20:	4826      	ldr	r0, [pc, #152]	; (8000fbc <readJoystick+0xd8>)
 8000f22:	f7ff fa55 	bl	80003d0 <GPIO_ReadInputDataBit>
 8000f26:	4603      	mov	r3, r0
 8000f28:	011b      	lsls	r3, r3, #4
			(GPIO_ReadInputDataBit ( GPIOC, GPIO_Pin_1) << 5) |\
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	4323      	orrs	r3, r4
 8000f2e:	b25c      	sxtb	r4, r3
			(GPIO_ReadInputDataBit ( GPIOB, GPIO_Pin_5) << 3) |\
 8000f30:	2120      	movs	r1, #32
 8000f32:	4821      	ldr	r0, [pc, #132]	; (8000fb8 <readJoystick+0xd4>)
 8000f34:	f7ff fa4c 	bl	80003d0 <GPIO_ReadInputDataBit>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	00db      	lsls	r3, r3, #3
			(0 << 2) | (0 << 1) | (0 << 0); //Create array for serial data
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	4323      	orrs	r3, r4
 8000f40:	b25b      	sxtb	r3, r3
	uint8_t array = (GPIO_ReadInputDataBit ( GPIOA, GPIO_Pin_4) << 7) |\
 8000f42:	71fb      	strb	r3, [r7, #7]

	switch (array){
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	2b80      	cmp	r3, #128	; 0x80
 8000f48:	d026      	beq.n	8000f98 <readJoystick+0xb4>
 8000f4a:	2b80      	cmp	r3, #128	; 0x80
 8000f4c:	dc2a      	bgt.n	8000fa4 <readJoystick+0xc0>
 8000f4e:	2b40      	cmp	r3, #64	; 0x40
 8000f50:	d01c      	beq.n	8000f8c <readJoystick+0xa8>
 8000f52:	2b40      	cmp	r3, #64	; 0x40
 8000f54:	dc26      	bgt.n	8000fa4 <readJoystick+0xc0>
 8000f56:	2b20      	cmp	r3, #32
 8000f58:	d012      	beq.n	8000f80 <readJoystick+0x9c>
 8000f5a:	2b20      	cmp	r3, #32
 8000f5c:	dc22      	bgt.n	8000fa4 <readJoystick+0xc0>
 8000f5e:	2b08      	cmp	r3, #8
 8000f60:	d002      	beq.n	8000f68 <readJoystick+0x84>
 8000f62:	2b10      	cmp	r3, #16
 8000f64:	d006      	beq.n	8000f74 <readJoystick+0x90>
 8000f66:	e01d      	b.n	8000fa4 <readJoystick+0xc0>
			case 8: //array value=8 when center pressed
				setLed(0,1,1);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f000 f827 	bl	8000fc0 <setLed>
				break;
 8000f72:	e01c      	b.n	8000fae <readJoystick+0xca>

			case 16: //array value=16 when right pressed
				setLed(1,0,1);
 8000f74:	2201      	movs	r2, #1
 8000f76:	2100      	movs	r1, #0
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f000 f821 	bl	8000fc0 <setLed>
				break;
 8000f7e:	e016      	b.n	8000fae <readJoystick+0xca>

			case 32: //array value=32 when left pressed
				setLed(0,0,1);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2100      	movs	r1, #0
 8000f84:	2000      	movs	r0, #0
 8000f86:	f000 f81b 	bl	8000fc0 <setLed>
				break;
 8000f8a:	e010      	b.n	8000fae <readJoystick+0xca>

			case 64: //array value=64 when down pressed
				setLed(1,0,0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2001      	movs	r0, #1
 8000f92:	f000 f815 	bl	8000fc0 <setLed>
				break;
 8000f96:	e00a      	b.n	8000fae <readJoystick+0xca>

			case 128: //array value=128 when up pressed
				setLed(0,1,0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f000 f80f 	bl	8000fc0 <setLed>
				break;
 8000fa2:	e004      	b.n	8000fae <readJoystick+0xca>

			default: //joystick not used or faulty (several directions at the same time)
				setLed(1,1,1);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f000 f809 	bl	8000fc0 <setLed>
			}

	return(array);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd90      	pop	{r4, r7, pc}
 8000fb8:	48000400 	.word	0x48000400
 8000fbc:	48000800 	.word	0x48000800

08000fc0 <setLed>:

void setLed(uint8_t r, uint8_t g, uint8_t b){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	71bb      	strb	r3, [r7, #6]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	717b      	strb	r3, [r7, #5]
	GPIO_WriteBit(GPIOB , GPIO_Pin_4, r); //set red led to enabled or disabled
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	2110      	movs	r1, #16
 8000fd8:	480a      	ldr	r0, [pc, #40]	; (8001004 <setLed+0x44>)
 8000fda:	f7ff fa15 	bl	8000408 <GPIO_WriteBit>
	GPIO_WriteBit(GPIOC , GPIO_Pin_7, g); //set green led to enabled or disabled
 8000fde:	79bb      	ldrb	r3, [r7, #6]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	2180      	movs	r1, #128	; 0x80
 8000fe4:	4808      	ldr	r0, [pc, #32]	; (8001008 <setLed+0x48>)
 8000fe6:	f7ff fa0f 	bl	8000408 <GPIO_WriteBit>
	GPIO_WriteBit(GPIOA , GPIO_Pin_9, b); //set blue led to enabled or disabled
 8000fea:	797b      	ldrb	r3, [r7, #5]
 8000fec:	461a      	mov	r2, r3
 8000fee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff6:	f7ff fa07 	bl	8000408 <GPIO_WriteBit>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	48000400 	.word	0x48000400
 8001008:	48000800 	.word	0x48000800

0800100c <main>:

int main(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	initJoystick();
 8001012:	f7ff feb1 	bl	8000d78 <initJoystick>
	initLed();
 8001016:	f7ff ff15 	bl	8000e44 <initLed>
	uint8_t array=0;
 800101a:	2300      	movs	r3, #0
 800101c:	71fb      	strb	r3, [r7, #7]
	uart_init( 9600 ); // Initialize USB serial at 9600 baud
 800101e:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001022:	f7ff fd8f 	bl	8000b44 <uart_init>
	setLed(1,1,1); //set all leds to off state
 8001026:	2201      	movs	r2, #1
 8001028:	2101      	movs	r1, #1
 800102a:	2001      	movs	r0, #1
 800102c:	f7ff ffc8 	bl	8000fc0 <setLed>

	while(1){ // set led color depending on joystick position

		if(array != readJoystick()){ //display only when input change occurs
 8001030:	f7ff ff58 	bl	8000ee4 <readJoystick>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	4293      	cmp	r3, r2
 800103c:	d0f8      	beq.n	8001030 <main+0x24>
			array=readJoystick();
 800103e:	f7ff ff51 	bl	8000ee4 <readJoystick>
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
			for(int i=7; i>=0; i--) printf("%1d", (array & (1 << i)) >> i );
 8001046:	2307      	movs	r3, #7
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	e00f      	b.n	800106c <main+0x60>
 800104c:	79fa      	ldrb	r2, [r7, #7]
 800104e:	2101      	movs	r1, #1
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	fa01 f303 	lsl.w	r3, r1, r3
 8001056:	401a      	ands	r2, r3
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	fa42 f303 	asr.w	r3, r2, r3
 800105e:	4619      	mov	r1, r3
 8001060:	4806      	ldr	r0, [pc, #24]	; (800107c <main+0x70>)
 8001062:	f000 f97b 	bl	800135c <iprintf>
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	3b01      	subs	r3, #1
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	daec      	bge.n	800104c <main+0x40>
			printf("\n");
 8001072:	200a      	movs	r0, #10
 8001074:	f000 f98a 	bl	800138c <putchar>
		if(array != readJoystick()){ //display only when input change occurs
 8001078:	e7da      	b.n	8001030 <main+0x24>
 800107a:	bf00      	nop
 800107c:	080024d4 	.word	0x080024d4

08001080 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	e00a      	b.n	80010a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001092:	f3af 8000 	nop.w
 8001096:	4601      	mov	r1, r0
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	60ba      	str	r2, [r7, #8]
 800109e:	b2ca      	uxtb	r2, r1
 80010a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3301      	adds	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	dbf0      	blt.n	8001092 <_read+0x12>
	}

return len;
 80010b0:	687b      	ldr	r3, [r7, #4]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
	return -1;
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010e2:	605a      	str	r2, [r3, #4]
	return 0;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <_isatty>:

int _isatty(int file)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
	return 1;
 80010fa:	2301      	movs	r3, #1
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
	return 0;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <_sbrk+0x50>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d102      	bne.n	800113a <_sbrk+0x16>
		heap_end = &end;
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <_sbrk+0x50>)
 8001136:	4a10      	ldr	r2, [pc, #64]	; (8001178 <_sbrk+0x54>)
 8001138:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <_sbrk+0x50>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <_sbrk+0x50>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4413      	add	r3, r2
 8001148:	466a      	mov	r2, sp
 800114a:	4293      	cmp	r3, r2
 800114c:	d907      	bls.n	800115e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800114e:	f000 f8d3 	bl	80012f8 <__errno>
 8001152:	4603      	mov	r3, r0
 8001154:	220c      	movs	r2, #12
 8001156:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800115c:	e006      	b.n	800116c <_sbrk+0x48>
	}

	heap_end += incr;
 800115e:	4b05      	ldr	r3, [pc, #20]	; (8001174 <_sbrk+0x50>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	4a03      	ldr	r2, [pc, #12]	; (8001174 <_sbrk+0x50>)
 8001168:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800116a:	68fb      	ldr	r3, [r7, #12]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200001b0 	.word	0x200001b0
 8001178:	200001c8 	.word	0x200001c8

0800117c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001180:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <SystemInit+0x84>)
 8001182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001186:	4a1e      	ldr	r2, [pc, #120]	; (8001200 <SystemInit+0x84>)
 8001188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800118c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <SystemInit+0x88>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <SystemInit+0x88>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <SystemInit+0x88>)
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	4918      	ldr	r1, [pc, #96]	; (8001204 <SystemInit+0x88>)
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <SystemInit+0x8c>)
 80011a4:	4013      	ands	r3, r2
 80011a6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <SystemInit+0x88>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a15      	ldr	r2, [pc, #84]	; (8001204 <SystemInit+0x88>)
 80011ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80011b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <SystemInit+0x88>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a11      	ldr	r2, [pc, #68]	; (8001204 <SystemInit+0x88>)
 80011be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <SystemInit+0x88>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <SystemInit+0x88>)
 80011ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80011ce:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <SystemInit+0x88>)
 80011d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d4:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <SystemInit+0x88>)
 80011d6:	f023 030f 	bic.w	r3, r3, #15
 80011da:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <SystemInit+0x88>)
 80011de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011e0:	4908      	ldr	r1, [pc, #32]	; (8001204 <SystemInit+0x88>)
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <SystemInit+0x90>)
 80011e4:	4013      	ands	r3, r2
 80011e6:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <SystemInit+0x88>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80011ee:	f000 f80f 	bl	8001210 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80011f2:	4b03      	ldr	r3, [pc, #12]	; (8001200 <SystemInit+0x84>)
 80011f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011f8:	609a      	str	r2, [r3, #8]
#endif  
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	e000ed00 	.word	0xe000ed00
 8001204:	40021000 	.word	0x40021000
 8001208:	f87fc00c 	.word	0xf87fc00c
 800120c:	ff00fccc 	.word	0xff00fccc

08001210 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8001214:	4b21      	ldr	r3, [pc, #132]	; (800129c <SetSysClock+0x8c>)
 8001216:	2212      	movs	r2, #18
 8001218:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800121a:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <SetSysClock+0x90>)
 800121c:	4a20      	ldr	r2, [pc, #128]	; (80012a0 <SetSysClock+0x90>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <SetSysClock+0x90>)
 8001224:	4a1e      	ldr	r2, [pc, #120]	; (80012a0 <SetSysClock+0x90>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800122a:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <SetSysClock+0x90>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <SetSysClock+0x90>)
 8001230:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001234:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <SetSysClock+0x90>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	4a19      	ldr	r2, [pc, #100]	; (80012a0 <SetSysClock+0x90>)
 800123c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001240:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <SetSysClock+0x90>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	4a16      	ldr	r2, [pc, #88]	; (80012a0 <SetSysClock+0x90>)
 8001248:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 800124c:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <SetSysClock+0x90>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a13      	ldr	r2, [pc, #76]	; (80012a0 <SetSysClock+0x90>)
 8001254:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001258:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800125a:	bf00      	nop
 800125c:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <SetSysClock+0x90>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f9      	beq.n	800125c <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <SetSysClock+0x90>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	4a0c      	ldr	r2, [pc, #48]	; (80012a0 <SetSysClock+0x90>)
 800126e:	f023 0303 	bic.w	r3, r3, #3
 8001272:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <SetSysClock+0x90>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	4a09      	ldr	r2, [pc, #36]	; (80012a0 <SetSysClock+0x90>)
 800127a:	f043 0302 	orr.w	r3, r3, #2
 800127e:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001280:	bf00      	nop
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <SetSysClock+0x90>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b08      	cmp	r3, #8
 800128c:	d1f9      	bne.n	8001282 <SetSysClock+0x72>
  {
  }
}
 800128e:	bf00      	nop
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40022000 	.word	0x40022000
 80012a0:	40021000 	.word	0x40021000

080012a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012a4:	480d      	ldr	r0, [pc, #52]	; (80012dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a8:	480d      	ldr	r0, [pc, #52]	; (80012e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80012aa:	490e      	ldr	r1, [pc, #56]	; (80012e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012ac:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <LoopForever+0xe>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80012c0:	4c0b      	ldr	r4, [pc, #44]	; (80012f0 <LoopForever+0x16>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012ce:	f7ff ff55 	bl	800117c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80012d2:	f000 f817 	bl	8001304 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012d6:	f7ff fe99 	bl	800100c <main>

080012da <LoopForever>:

LoopForever:
    b LoopForever
 80012da:	e7fe      	b.n	80012da <LoopForever>
  ldr   r0, =_estack
 80012dc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80012e8:	08002578 	.word	0x08002578
  ldr r2, =_sbss
 80012ec:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80012f0:	200001c4 	.word	0x200001c4

080012f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <ADC1_2_IRQHandler>
	...

080012f8 <__errno>:
 80012f8:	4b01      	ldr	r3, [pc, #4]	; (8001300 <__errno+0x8>)
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	2000002c 	.word	0x2000002c

08001304 <__libc_init_array>:
 8001304:	b570      	push	{r4, r5, r6, lr}
 8001306:	4d0d      	ldr	r5, [pc, #52]	; (800133c <__libc_init_array+0x38>)
 8001308:	4c0d      	ldr	r4, [pc, #52]	; (8001340 <__libc_init_array+0x3c>)
 800130a:	1b64      	subs	r4, r4, r5
 800130c:	10a4      	asrs	r4, r4, #2
 800130e:	2600      	movs	r6, #0
 8001310:	42a6      	cmp	r6, r4
 8001312:	d109      	bne.n	8001328 <__libc_init_array+0x24>
 8001314:	4d0b      	ldr	r5, [pc, #44]	; (8001344 <__libc_init_array+0x40>)
 8001316:	4c0c      	ldr	r4, [pc, #48]	; (8001348 <__libc_init_array+0x44>)
 8001318:	f001 f8d0 	bl	80024bc <_init>
 800131c:	1b64      	subs	r4, r4, r5
 800131e:	10a4      	asrs	r4, r4, #2
 8001320:	2600      	movs	r6, #0
 8001322:	42a6      	cmp	r6, r4
 8001324:	d105      	bne.n	8001332 <__libc_init_array+0x2e>
 8001326:	bd70      	pop	{r4, r5, r6, pc}
 8001328:	f855 3b04 	ldr.w	r3, [r5], #4
 800132c:	4798      	blx	r3
 800132e:	3601      	adds	r6, #1
 8001330:	e7ee      	b.n	8001310 <__libc_init_array+0xc>
 8001332:	f855 3b04 	ldr.w	r3, [r5], #4
 8001336:	4798      	blx	r3
 8001338:	3601      	adds	r6, #1
 800133a:	e7f2      	b.n	8001322 <__libc_init_array+0x1e>
 800133c:	08002570 	.word	0x08002570
 8001340:	08002570 	.word	0x08002570
 8001344:	08002570 	.word	0x08002570
 8001348:	08002574 	.word	0x08002574

0800134c <memset>:
 800134c:	4402      	add	r2, r0
 800134e:	4603      	mov	r3, r0
 8001350:	4293      	cmp	r3, r2
 8001352:	d100      	bne.n	8001356 <memset+0xa>
 8001354:	4770      	bx	lr
 8001356:	f803 1b01 	strb.w	r1, [r3], #1
 800135a:	e7f9      	b.n	8001350 <memset+0x4>

0800135c <iprintf>:
 800135c:	b40f      	push	{r0, r1, r2, r3}
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <iprintf+0x2c>)
 8001360:	b513      	push	{r0, r1, r4, lr}
 8001362:	681c      	ldr	r4, [r3, #0]
 8001364:	b124      	cbz	r4, 8001370 <iprintf+0x14>
 8001366:	69a3      	ldr	r3, [r4, #24]
 8001368:	b913      	cbnz	r3, 8001370 <iprintf+0x14>
 800136a:	4620      	mov	r0, r4
 800136c:	f000 fa0c 	bl	8001788 <__sinit>
 8001370:	ab05      	add	r3, sp, #20
 8001372:	9a04      	ldr	r2, [sp, #16]
 8001374:	68a1      	ldr	r1, [r4, #8]
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	4620      	mov	r0, r4
 800137a:	f000 fc1d 	bl	8001bb8 <_vfiprintf_r>
 800137e:	b002      	add	sp, #8
 8001380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001384:	b004      	add	sp, #16
 8001386:	4770      	bx	lr
 8001388:	2000002c 	.word	0x2000002c

0800138c <putchar>:
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <putchar+0x28>)
 800138e:	b513      	push	{r0, r1, r4, lr}
 8001390:	681c      	ldr	r4, [r3, #0]
 8001392:	4601      	mov	r1, r0
 8001394:	b134      	cbz	r4, 80013a4 <putchar+0x18>
 8001396:	69a3      	ldr	r3, [r4, #24]
 8001398:	b923      	cbnz	r3, 80013a4 <putchar+0x18>
 800139a:	9001      	str	r0, [sp, #4]
 800139c:	4620      	mov	r0, r4
 800139e:	f000 f9f3 	bl	8001788 <__sinit>
 80013a2:	9901      	ldr	r1, [sp, #4]
 80013a4:	68a2      	ldr	r2, [r4, #8]
 80013a6:	4620      	mov	r0, r4
 80013a8:	b002      	add	sp, #8
 80013aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013ae:	f000 bec7 	b.w	8002140 <_putc_r>
 80013b2:	bf00      	nop
 80013b4:	2000002c 	.word	0x2000002c

080013b8 <setbuf>:
 80013b8:	2900      	cmp	r1, #0
 80013ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013be:	bf0c      	ite	eq
 80013c0:	2202      	moveq	r2, #2
 80013c2:	2200      	movne	r2, #0
 80013c4:	f000 b800 	b.w	80013c8 <setvbuf>

080013c8 <setvbuf>:
 80013c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80013cc:	461d      	mov	r5, r3
 80013ce:	4b5d      	ldr	r3, [pc, #372]	; (8001544 <setvbuf+0x17c>)
 80013d0:	681f      	ldr	r7, [r3, #0]
 80013d2:	4604      	mov	r4, r0
 80013d4:	460e      	mov	r6, r1
 80013d6:	4690      	mov	r8, r2
 80013d8:	b127      	cbz	r7, 80013e4 <setvbuf+0x1c>
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	b913      	cbnz	r3, 80013e4 <setvbuf+0x1c>
 80013de:	4638      	mov	r0, r7
 80013e0:	f000 f9d2 	bl	8001788 <__sinit>
 80013e4:	4b58      	ldr	r3, [pc, #352]	; (8001548 <setvbuf+0x180>)
 80013e6:	429c      	cmp	r4, r3
 80013e8:	d167      	bne.n	80014ba <setvbuf+0xf2>
 80013ea:	687c      	ldr	r4, [r7, #4]
 80013ec:	f1b8 0f02 	cmp.w	r8, #2
 80013f0:	d006      	beq.n	8001400 <setvbuf+0x38>
 80013f2:	f1b8 0f01 	cmp.w	r8, #1
 80013f6:	f200 809f 	bhi.w	8001538 <setvbuf+0x170>
 80013fa:	2d00      	cmp	r5, #0
 80013fc:	f2c0 809c 	blt.w	8001538 <setvbuf+0x170>
 8001400:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001402:	07db      	lsls	r3, r3, #31
 8001404:	d405      	bmi.n	8001412 <setvbuf+0x4a>
 8001406:	89a3      	ldrh	r3, [r4, #12]
 8001408:	0598      	lsls	r0, r3, #22
 800140a:	d402      	bmi.n	8001412 <setvbuf+0x4a>
 800140c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800140e:	f000 fa59 	bl	80018c4 <__retarget_lock_acquire_recursive>
 8001412:	4621      	mov	r1, r4
 8001414:	4638      	mov	r0, r7
 8001416:	f000 f923 	bl	8001660 <_fflush_r>
 800141a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800141c:	b141      	cbz	r1, 8001430 <setvbuf+0x68>
 800141e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001422:	4299      	cmp	r1, r3
 8001424:	d002      	beq.n	800142c <setvbuf+0x64>
 8001426:	4638      	mov	r0, r7
 8001428:	f000 fabc 	bl	80019a4 <_free_r>
 800142c:	2300      	movs	r3, #0
 800142e:	6363      	str	r3, [r4, #52]	; 0x34
 8001430:	2300      	movs	r3, #0
 8001432:	61a3      	str	r3, [r4, #24]
 8001434:	6063      	str	r3, [r4, #4]
 8001436:	89a3      	ldrh	r3, [r4, #12]
 8001438:	0619      	lsls	r1, r3, #24
 800143a:	d503      	bpl.n	8001444 <setvbuf+0x7c>
 800143c:	6921      	ldr	r1, [r4, #16]
 800143e:	4638      	mov	r0, r7
 8001440:	f000 fab0 	bl	80019a4 <_free_r>
 8001444:	89a3      	ldrh	r3, [r4, #12]
 8001446:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800144a:	f023 0303 	bic.w	r3, r3, #3
 800144e:	f1b8 0f02 	cmp.w	r8, #2
 8001452:	81a3      	strh	r3, [r4, #12]
 8001454:	d06c      	beq.n	8001530 <setvbuf+0x168>
 8001456:	ab01      	add	r3, sp, #4
 8001458:	466a      	mov	r2, sp
 800145a:	4621      	mov	r1, r4
 800145c:	4638      	mov	r0, r7
 800145e:	f000 fa33 	bl	80018c8 <__swhatbuf_r>
 8001462:	89a3      	ldrh	r3, [r4, #12]
 8001464:	4318      	orrs	r0, r3
 8001466:	81a0      	strh	r0, [r4, #12]
 8001468:	2d00      	cmp	r5, #0
 800146a:	d130      	bne.n	80014ce <setvbuf+0x106>
 800146c:	9d00      	ldr	r5, [sp, #0]
 800146e:	4628      	mov	r0, r5
 8001470:	f000 fa90 	bl	8001994 <malloc>
 8001474:	4606      	mov	r6, r0
 8001476:	2800      	cmp	r0, #0
 8001478:	d155      	bne.n	8001526 <setvbuf+0x15e>
 800147a:	f8dd 9000 	ldr.w	r9, [sp]
 800147e:	45a9      	cmp	r9, r5
 8001480:	d14a      	bne.n	8001518 <setvbuf+0x150>
 8001482:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001486:	2200      	movs	r2, #0
 8001488:	60a2      	str	r2, [r4, #8]
 800148a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800148e:	6022      	str	r2, [r4, #0]
 8001490:	6122      	str	r2, [r4, #16]
 8001492:	2201      	movs	r2, #1
 8001494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001498:	6162      	str	r2, [r4, #20]
 800149a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	07d2      	lsls	r2, r2, #31
 80014a2:	81a3      	strh	r3, [r4, #12]
 80014a4:	d405      	bmi.n	80014b2 <setvbuf+0xea>
 80014a6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80014aa:	d102      	bne.n	80014b2 <setvbuf+0xea>
 80014ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014ae:	f000 fa0a 	bl	80018c6 <__retarget_lock_release_recursive>
 80014b2:	4628      	mov	r0, r5
 80014b4:	b003      	add	sp, #12
 80014b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014ba:	4b24      	ldr	r3, [pc, #144]	; (800154c <setvbuf+0x184>)
 80014bc:	429c      	cmp	r4, r3
 80014be:	d101      	bne.n	80014c4 <setvbuf+0xfc>
 80014c0:	68bc      	ldr	r4, [r7, #8]
 80014c2:	e793      	b.n	80013ec <setvbuf+0x24>
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <setvbuf+0x188>)
 80014c6:	429c      	cmp	r4, r3
 80014c8:	bf08      	it	eq
 80014ca:	68fc      	ldreq	r4, [r7, #12]
 80014cc:	e78e      	b.n	80013ec <setvbuf+0x24>
 80014ce:	2e00      	cmp	r6, #0
 80014d0:	d0cd      	beq.n	800146e <setvbuf+0xa6>
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	b913      	cbnz	r3, 80014dc <setvbuf+0x114>
 80014d6:	4638      	mov	r0, r7
 80014d8:	f000 f956 	bl	8001788 <__sinit>
 80014dc:	f1b8 0f01 	cmp.w	r8, #1
 80014e0:	bf08      	it	eq
 80014e2:	89a3      	ldrheq	r3, [r4, #12]
 80014e4:	6026      	str	r6, [r4, #0]
 80014e6:	bf04      	itt	eq
 80014e8:	f043 0301 	orreq.w	r3, r3, #1
 80014ec:	81a3      	strheq	r3, [r4, #12]
 80014ee:	89a2      	ldrh	r2, [r4, #12]
 80014f0:	f012 0308 	ands.w	r3, r2, #8
 80014f4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80014f8:	d01c      	beq.n	8001534 <setvbuf+0x16c>
 80014fa:	07d3      	lsls	r3, r2, #31
 80014fc:	bf41      	itttt	mi
 80014fe:	2300      	movmi	r3, #0
 8001500:	426d      	negmi	r5, r5
 8001502:	60a3      	strmi	r3, [r4, #8]
 8001504:	61a5      	strmi	r5, [r4, #24]
 8001506:	bf58      	it	pl
 8001508:	60a5      	strpl	r5, [r4, #8]
 800150a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800150c:	f015 0501 	ands.w	r5, r5, #1
 8001510:	d115      	bne.n	800153e <setvbuf+0x176>
 8001512:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001516:	e7c8      	b.n	80014aa <setvbuf+0xe2>
 8001518:	4648      	mov	r0, r9
 800151a:	f000 fa3b 	bl	8001994 <malloc>
 800151e:	4606      	mov	r6, r0
 8001520:	2800      	cmp	r0, #0
 8001522:	d0ae      	beq.n	8001482 <setvbuf+0xba>
 8001524:	464d      	mov	r5, r9
 8001526:	89a3      	ldrh	r3, [r4, #12]
 8001528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800152c:	81a3      	strh	r3, [r4, #12]
 800152e:	e7d0      	b.n	80014d2 <setvbuf+0x10a>
 8001530:	2500      	movs	r5, #0
 8001532:	e7a8      	b.n	8001486 <setvbuf+0xbe>
 8001534:	60a3      	str	r3, [r4, #8]
 8001536:	e7e8      	b.n	800150a <setvbuf+0x142>
 8001538:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800153c:	e7b9      	b.n	80014b2 <setvbuf+0xea>
 800153e:	2500      	movs	r5, #0
 8001540:	e7b7      	b.n	80014b2 <setvbuf+0xea>
 8001542:	bf00      	nop
 8001544:	2000002c 	.word	0x2000002c
 8001548:	080024fc 	.word	0x080024fc
 800154c:	0800251c 	.word	0x0800251c
 8001550:	080024dc 	.word	0x080024dc

08001554 <__sflush_r>:
 8001554:	898a      	ldrh	r2, [r1, #12]
 8001556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800155a:	4605      	mov	r5, r0
 800155c:	0710      	lsls	r0, r2, #28
 800155e:	460c      	mov	r4, r1
 8001560:	d458      	bmi.n	8001614 <__sflush_r+0xc0>
 8001562:	684b      	ldr	r3, [r1, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	dc05      	bgt.n	8001574 <__sflush_r+0x20>
 8001568:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800156a:	2b00      	cmp	r3, #0
 800156c:	dc02      	bgt.n	8001574 <__sflush_r+0x20>
 800156e:	2000      	movs	r0, #0
 8001570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001574:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001576:	2e00      	cmp	r6, #0
 8001578:	d0f9      	beq.n	800156e <__sflush_r+0x1a>
 800157a:	2300      	movs	r3, #0
 800157c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001580:	682f      	ldr	r7, [r5, #0]
 8001582:	602b      	str	r3, [r5, #0]
 8001584:	d032      	beq.n	80015ec <__sflush_r+0x98>
 8001586:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001588:	89a3      	ldrh	r3, [r4, #12]
 800158a:	075a      	lsls	r2, r3, #29
 800158c:	d505      	bpl.n	800159a <__sflush_r+0x46>
 800158e:	6863      	ldr	r3, [r4, #4]
 8001590:	1ac0      	subs	r0, r0, r3
 8001592:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001594:	b10b      	cbz	r3, 800159a <__sflush_r+0x46>
 8001596:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001598:	1ac0      	subs	r0, r0, r3
 800159a:	2300      	movs	r3, #0
 800159c:	4602      	mov	r2, r0
 800159e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015a0:	6a21      	ldr	r1, [r4, #32]
 80015a2:	4628      	mov	r0, r5
 80015a4:	47b0      	blx	r6
 80015a6:	1c43      	adds	r3, r0, #1
 80015a8:	89a3      	ldrh	r3, [r4, #12]
 80015aa:	d106      	bne.n	80015ba <__sflush_r+0x66>
 80015ac:	6829      	ldr	r1, [r5, #0]
 80015ae:	291d      	cmp	r1, #29
 80015b0:	d82c      	bhi.n	800160c <__sflush_r+0xb8>
 80015b2:	4a2a      	ldr	r2, [pc, #168]	; (800165c <__sflush_r+0x108>)
 80015b4:	40ca      	lsrs	r2, r1
 80015b6:	07d6      	lsls	r6, r2, #31
 80015b8:	d528      	bpl.n	800160c <__sflush_r+0xb8>
 80015ba:	2200      	movs	r2, #0
 80015bc:	6062      	str	r2, [r4, #4]
 80015be:	04d9      	lsls	r1, r3, #19
 80015c0:	6922      	ldr	r2, [r4, #16]
 80015c2:	6022      	str	r2, [r4, #0]
 80015c4:	d504      	bpl.n	80015d0 <__sflush_r+0x7c>
 80015c6:	1c42      	adds	r2, r0, #1
 80015c8:	d101      	bne.n	80015ce <__sflush_r+0x7a>
 80015ca:	682b      	ldr	r3, [r5, #0]
 80015cc:	b903      	cbnz	r3, 80015d0 <__sflush_r+0x7c>
 80015ce:	6560      	str	r0, [r4, #84]	; 0x54
 80015d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80015d2:	602f      	str	r7, [r5, #0]
 80015d4:	2900      	cmp	r1, #0
 80015d6:	d0ca      	beq.n	800156e <__sflush_r+0x1a>
 80015d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80015dc:	4299      	cmp	r1, r3
 80015de:	d002      	beq.n	80015e6 <__sflush_r+0x92>
 80015e0:	4628      	mov	r0, r5
 80015e2:	f000 f9df 	bl	80019a4 <_free_r>
 80015e6:	2000      	movs	r0, #0
 80015e8:	6360      	str	r0, [r4, #52]	; 0x34
 80015ea:	e7c1      	b.n	8001570 <__sflush_r+0x1c>
 80015ec:	6a21      	ldr	r1, [r4, #32]
 80015ee:	2301      	movs	r3, #1
 80015f0:	4628      	mov	r0, r5
 80015f2:	47b0      	blx	r6
 80015f4:	1c41      	adds	r1, r0, #1
 80015f6:	d1c7      	bne.n	8001588 <__sflush_r+0x34>
 80015f8:	682b      	ldr	r3, [r5, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0c4      	beq.n	8001588 <__sflush_r+0x34>
 80015fe:	2b1d      	cmp	r3, #29
 8001600:	d001      	beq.n	8001606 <__sflush_r+0xb2>
 8001602:	2b16      	cmp	r3, #22
 8001604:	d101      	bne.n	800160a <__sflush_r+0xb6>
 8001606:	602f      	str	r7, [r5, #0]
 8001608:	e7b1      	b.n	800156e <__sflush_r+0x1a>
 800160a:	89a3      	ldrh	r3, [r4, #12]
 800160c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001610:	81a3      	strh	r3, [r4, #12]
 8001612:	e7ad      	b.n	8001570 <__sflush_r+0x1c>
 8001614:	690f      	ldr	r7, [r1, #16]
 8001616:	2f00      	cmp	r7, #0
 8001618:	d0a9      	beq.n	800156e <__sflush_r+0x1a>
 800161a:	0793      	lsls	r3, r2, #30
 800161c:	680e      	ldr	r6, [r1, #0]
 800161e:	bf08      	it	eq
 8001620:	694b      	ldreq	r3, [r1, #20]
 8001622:	600f      	str	r7, [r1, #0]
 8001624:	bf18      	it	ne
 8001626:	2300      	movne	r3, #0
 8001628:	eba6 0807 	sub.w	r8, r6, r7
 800162c:	608b      	str	r3, [r1, #8]
 800162e:	f1b8 0f00 	cmp.w	r8, #0
 8001632:	dd9c      	ble.n	800156e <__sflush_r+0x1a>
 8001634:	6a21      	ldr	r1, [r4, #32]
 8001636:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001638:	4643      	mov	r3, r8
 800163a:	463a      	mov	r2, r7
 800163c:	4628      	mov	r0, r5
 800163e:	47b0      	blx	r6
 8001640:	2800      	cmp	r0, #0
 8001642:	dc06      	bgt.n	8001652 <__sflush_r+0xfe>
 8001644:	89a3      	ldrh	r3, [r4, #12]
 8001646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800164a:	81a3      	strh	r3, [r4, #12]
 800164c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001650:	e78e      	b.n	8001570 <__sflush_r+0x1c>
 8001652:	4407      	add	r7, r0
 8001654:	eba8 0800 	sub.w	r8, r8, r0
 8001658:	e7e9      	b.n	800162e <__sflush_r+0xda>
 800165a:	bf00      	nop
 800165c:	20400001 	.word	0x20400001

08001660 <_fflush_r>:
 8001660:	b538      	push	{r3, r4, r5, lr}
 8001662:	690b      	ldr	r3, [r1, #16]
 8001664:	4605      	mov	r5, r0
 8001666:	460c      	mov	r4, r1
 8001668:	b913      	cbnz	r3, 8001670 <_fflush_r+0x10>
 800166a:	2500      	movs	r5, #0
 800166c:	4628      	mov	r0, r5
 800166e:	bd38      	pop	{r3, r4, r5, pc}
 8001670:	b118      	cbz	r0, 800167a <_fflush_r+0x1a>
 8001672:	6983      	ldr	r3, [r0, #24]
 8001674:	b90b      	cbnz	r3, 800167a <_fflush_r+0x1a>
 8001676:	f000 f887 	bl	8001788 <__sinit>
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <_fflush_r+0x6c>)
 800167c:	429c      	cmp	r4, r3
 800167e:	d11b      	bne.n	80016b8 <_fflush_r+0x58>
 8001680:	686c      	ldr	r4, [r5, #4]
 8001682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0ef      	beq.n	800166a <_fflush_r+0xa>
 800168a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800168c:	07d0      	lsls	r0, r2, #31
 800168e:	d404      	bmi.n	800169a <_fflush_r+0x3a>
 8001690:	0599      	lsls	r1, r3, #22
 8001692:	d402      	bmi.n	800169a <_fflush_r+0x3a>
 8001694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001696:	f000 f915 	bl	80018c4 <__retarget_lock_acquire_recursive>
 800169a:	4628      	mov	r0, r5
 800169c:	4621      	mov	r1, r4
 800169e:	f7ff ff59 	bl	8001554 <__sflush_r>
 80016a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016a4:	07da      	lsls	r2, r3, #31
 80016a6:	4605      	mov	r5, r0
 80016a8:	d4e0      	bmi.n	800166c <_fflush_r+0xc>
 80016aa:	89a3      	ldrh	r3, [r4, #12]
 80016ac:	059b      	lsls	r3, r3, #22
 80016ae:	d4dd      	bmi.n	800166c <_fflush_r+0xc>
 80016b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016b2:	f000 f908 	bl	80018c6 <__retarget_lock_release_recursive>
 80016b6:	e7d9      	b.n	800166c <_fflush_r+0xc>
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <_fflush_r+0x70>)
 80016ba:	429c      	cmp	r4, r3
 80016bc:	d101      	bne.n	80016c2 <_fflush_r+0x62>
 80016be:	68ac      	ldr	r4, [r5, #8]
 80016c0:	e7df      	b.n	8001682 <_fflush_r+0x22>
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <_fflush_r+0x74>)
 80016c4:	429c      	cmp	r4, r3
 80016c6:	bf08      	it	eq
 80016c8:	68ec      	ldreq	r4, [r5, #12]
 80016ca:	e7da      	b.n	8001682 <_fflush_r+0x22>
 80016cc:	080024fc 	.word	0x080024fc
 80016d0:	0800251c 	.word	0x0800251c
 80016d4:	080024dc 	.word	0x080024dc

080016d8 <std>:
 80016d8:	2300      	movs	r3, #0
 80016da:	b510      	push	{r4, lr}
 80016dc:	4604      	mov	r4, r0
 80016de:	e9c0 3300 	strd	r3, r3, [r0]
 80016e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80016e6:	6083      	str	r3, [r0, #8]
 80016e8:	8181      	strh	r1, [r0, #12]
 80016ea:	6643      	str	r3, [r0, #100]	; 0x64
 80016ec:	81c2      	strh	r2, [r0, #14]
 80016ee:	6183      	str	r3, [r0, #24]
 80016f0:	4619      	mov	r1, r3
 80016f2:	2208      	movs	r2, #8
 80016f4:	305c      	adds	r0, #92	; 0x5c
 80016f6:	f7ff fe29 	bl	800134c <memset>
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <std+0x38>)
 80016fc:	6263      	str	r3, [r4, #36]	; 0x24
 80016fe:	4b05      	ldr	r3, [pc, #20]	; (8001714 <std+0x3c>)
 8001700:	62a3      	str	r3, [r4, #40]	; 0x28
 8001702:	4b05      	ldr	r3, [pc, #20]	; (8001718 <std+0x40>)
 8001704:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001706:	4b05      	ldr	r3, [pc, #20]	; (800171c <std+0x44>)
 8001708:	6224      	str	r4, [r4, #32]
 800170a:	6323      	str	r3, [r4, #48]	; 0x30
 800170c:	bd10      	pop	{r4, pc}
 800170e:	bf00      	nop
 8001710:	080021f1 	.word	0x080021f1
 8001714:	08002213 	.word	0x08002213
 8001718:	0800224b 	.word	0x0800224b
 800171c:	0800226f 	.word	0x0800226f

08001720 <_cleanup_r>:
 8001720:	4901      	ldr	r1, [pc, #4]	; (8001728 <_cleanup_r+0x8>)
 8001722:	f000 b8af 	b.w	8001884 <_fwalk_reent>
 8001726:	bf00      	nop
 8001728:	08001661 	.word	0x08001661

0800172c <__sfmoreglue>:
 800172c:	b570      	push	{r4, r5, r6, lr}
 800172e:	2268      	movs	r2, #104	; 0x68
 8001730:	1e4d      	subs	r5, r1, #1
 8001732:	4355      	muls	r5, r2
 8001734:	460e      	mov	r6, r1
 8001736:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800173a:	f000 f99f 	bl	8001a7c <_malloc_r>
 800173e:	4604      	mov	r4, r0
 8001740:	b140      	cbz	r0, 8001754 <__sfmoreglue+0x28>
 8001742:	2100      	movs	r1, #0
 8001744:	e9c0 1600 	strd	r1, r6, [r0]
 8001748:	300c      	adds	r0, #12
 800174a:	60a0      	str	r0, [r4, #8]
 800174c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001750:	f7ff fdfc 	bl	800134c <memset>
 8001754:	4620      	mov	r0, r4
 8001756:	bd70      	pop	{r4, r5, r6, pc}

08001758 <__sfp_lock_acquire>:
 8001758:	4801      	ldr	r0, [pc, #4]	; (8001760 <__sfp_lock_acquire+0x8>)
 800175a:	f000 b8b3 	b.w	80018c4 <__retarget_lock_acquire_recursive>
 800175e:	bf00      	nop
 8001760:	200001b5 	.word	0x200001b5

08001764 <__sfp_lock_release>:
 8001764:	4801      	ldr	r0, [pc, #4]	; (800176c <__sfp_lock_release+0x8>)
 8001766:	f000 b8ae 	b.w	80018c6 <__retarget_lock_release_recursive>
 800176a:	bf00      	nop
 800176c:	200001b5 	.word	0x200001b5

08001770 <__sinit_lock_acquire>:
 8001770:	4801      	ldr	r0, [pc, #4]	; (8001778 <__sinit_lock_acquire+0x8>)
 8001772:	f000 b8a7 	b.w	80018c4 <__retarget_lock_acquire_recursive>
 8001776:	bf00      	nop
 8001778:	200001b6 	.word	0x200001b6

0800177c <__sinit_lock_release>:
 800177c:	4801      	ldr	r0, [pc, #4]	; (8001784 <__sinit_lock_release+0x8>)
 800177e:	f000 b8a2 	b.w	80018c6 <__retarget_lock_release_recursive>
 8001782:	bf00      	nop
 8001784:	200001b6 	.word	0x200001b6

08001788 <__sinit>:
 8001788:	b510      	push	{r4, lr}
 800178a:	4604      	mov	r4, r0
 800178c:	f7ff fff0 	bl	8001770 <__sinit_lock_acquire>
 8001790:	69a3      	ldr	r3, [r4, #24]
 8001792:	b11b      	cbz	r3, 800179c <__sinit+0x14>
 8001794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001798:	f7ff bff0 	b.w	800177c <__sinit_lock_release>
 800179c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80017a0:	6523      	str	r3, [r4, #80]	; 0x50
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <__sinit+0x68>)
 80017a4:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <__sinit+0x6c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80017aa:	42a3      	cmp	r3, r4
 80017ac:	bf04      	itt	eq
 80017ae:	2301      	moveq	r3, #1
 80017b0:	61a3      	streq	r3, [r4, #24]
 80017b2:	4620      	mov	r0, r4
 80017b4:	f000 f820 	bl	80017f8 <__sfp>
 80017b8:	6060      	str	r0, [r4, #4]
 80017ba:	4620      	mov	r0, r4
 80017bc:	f000 f81c 	bl	80017f8 <__sfp>
 80017c0:	60a0      	str	r0, [r4, #8]
 80017c2:	4620      	mov	r0, r4
 80017c4:	f000 f818 	bl	80017f8 <__sfp>
 80017c8:	2200      	movs	r2, #0
 80017ca:	60e0      	str	r0, [r4, #12]
 80017cc:	2104      	movs	r1, #4
 80017ce:	6860      	ldr	r0, [r4, #4]
 80017d0:	f7ff ff82 	bl	80016d8 <std>
 80017d4:	68a0      	ldr	r0, [r4, #8]
 80017d6:	2201      	movs	r2, #1
 80017d8:	2109      	movs	r1, #9
 80017da:	f7ff ff7d 	bl	80016d8 <std>
 80017de:	68e0      	ldr	r0, [r4, #12]
 80017e0:	2202      	movs	r2, #2
 80017e2:	2112      	movs	r1, #18
 80017e4:	f7ff ff78 	bl	80016d8 <std>
 80017e8:	2301      	movs	r3, #1
 80017ea:	61a3      	str	r3, [r4, #24]
 80017ec:	e7d2      	b.n	8001794 <__sinit+0xc>
 80017ee:	bf00      	nop
 80017f0:	080024d8 	.word	0x080024d8
 80017f4:	08001721 	.word	0x08001721

080017f8 <__sfp>:
 80017f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017fa:	4607      	mov	r7, r0
 80017fc:	f7ff ffac 	bl	8001758 <__sfp_lock_acquire>
 8001800:	4b1e      	ldr	r3, [pc, #120]	; (800187c <__sfp+0x84>)
 8001802:	681e      	ldr	r6, [r3, #0]
 8001804:	69b3      	ldr	r3, [r6, #24]
 8001806:	b913      	cbnz	r3, 800180e <__sfp+0x16>
 8001808:	4630      	mov	r0, r6
 800180a:	f7ff ffbd 	bl	8001788 <__sinit>
 800180e:	3648      	adds	r6, #72	; 0x48
 8001810:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001814:	3b01      	subs	r3, #1
 8001816:	d503      	bpl.n	8001820 <__sfp+0x28>
 8001818:	6833      	ldr	r3, [r6, #0]
 800181a:	b30b      	cbz	r3, 8001860 <__sfp+0x68>
 800181c:	6836      	ldr	r6, [r6, #0]
 800181e:	e7f7      	b.n	8001810 <__sfp+0x18>
 8001820:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001824:	b9d5      	cbnz	r5, 800185c <__sfp+0x64>
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <__sfp+0x88>)
 8001828:	60e3      	str	r3, [r4, #12]
 800182a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800182e:	6665      	str	r5, [r4, #100]	; 0x64
 8001830:	f000 f847 	bl	80018c2 <__retarget_lock_init_recursive>
 8001834:	f7ff ff96 	bl	8001764 <__sfp_lock_release>
 8001838:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800183c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001840:	6025      	str	r5, [r4, #0]
 8001842:	61a5      	str	r5, [r4, #24]
 8001844:	2208      	movs	r2, #8
 8001846:	4629      	mov	r1, r5
 8001848:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800184c:	f7ff fd7e 	bl	800134c <memset>
 8001850:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001854:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001858:	4620      	mov	r0, r4
 800185a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800185c:	3468      	adds	r4, #104	; 0x68
 800185e:	e7d9      	b.n	8001814 <__sfp+0x1c>
 8001860:	2104      	movs	r1, #4
 8001862:	4638      	mov	r0, r7
 8001864:	f7ff ff62 	bl	800172c <__sfmoreglue>
 8001868:	4604      	mov	r4, r0
 800186a:	6030      	str	r0, [r6, #0]
 800186c:	2800      	cmp	r0, #0
 800186e:	d1d5      	bne.n	800181c <__sfp+0x24>
 8001870:	f7ff ff78 	bl	8001764 <__sfp_lock_release>
 8001874:	230c      	movs	r3, #12
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	e7ee      	b.n	8001858 <__sfp+0x60>
 800187a:	bf00      	nop
 800187c:	080024d8 	.word	0x080024d8
 8001880:	ffff0001 	.word	0xffff0001

08001884 <_fwalk_reent>:
 8001884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001888:	4606      	mov	r6, r0
 800188a:	4688      	mov	r8, r1
 800188c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001890:	2700      	movs	r7, #0
 8001892:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001896:	f1b9 0901 	subs.w	r9, r9, #1
 800189a:	d505      	bpl.n	80018a8 <_fwalk_reent+0x24>
 800189c:	6824      	ldr	r4, [r4, #0]
 800189e:	2c00      	cmp	r4, #0
 80018a0:	d1f7      	bne.n	8001892 <_fwalk_reent+0xe>
 80018a2:	4638      	mov	r0, r7
 80018a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018a8:	89ab      	ldrh	r3, [r5, #12]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d907      	bls.n	80018be <_fwalk_reent+0x3a>
 80018ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80018b2:	3301      	adds	r3, #1
 80018b4:	d003      	beq.n	80018be <_fwalk_reent+0x3a>
 80018b6:	4629      	mov	r1, r5
 80018b8:	4630      	mov	r0, r6
 80018ba:	47c0      	blx	r8
 80018bc:	4307      	orrs	r7, r0
 80018be:	3568      	adds	r5, #104	; 0x68
 80018c0:	e7e9      	b.n	8001896 <_fwalk_reent+0x12>

080018c2 <__retarget_lock_init_recursive>:
 80018c2:	4770      	bx	lr

080018c4 <__retarget_lock_acquire_recursive>:
 80018c4:	4770      	bx	lr

080018c6 <__retarget_lock_release_recursive>:
 80018c6:	4770      	bx	lr

080018c8 <__swhatbuf_r>:
 80018c8:	b570      	push	{r4, r5, r6, lr}
 80018ca:	460e      	mov	r6, r1
 80018cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018d0:	2900      	cmp	r1, #0
 80018d2:	b096      	sub	sp, #88	; 0x58
 80018d4:	4614      	mov	r4, r2
 80018d6:	461d      	mov	r5, r3
 80018d8:	da08      	bge.n	80018ec <__swhatbuf_r+0x24>
 80018da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	602a      	str	r2, [r5, #0]
 80018e2:	061a      	lsls	r2, r3, #24
 80018e4:	d410      	bmi.n	8001908 <__swhatbuf_r+0x40>
 80018e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ea:	e00e      	b.n	800190a <__swhatbuf_r+0x42>
 80018ec:	466a      	mov	r2, sp
 80018ee:	f000 fd93 	bl	8002418 <_fstat_r>
 80018f2:	2800      	cmp	r0, #0
 80018f4:	dbf1      	blt.n	80018da <__swhatbuf_r+0x12>
 80018f6:	9a01      	ldr	r2, [sp, #4]
 80018f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80018fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001900:	425a      	negs	r2, r3
 8001902:	415a      	adcs	r2, r3
 8001904:	602a      	str	r2, [r5, #0]
 8001906:	e7ee      	b.n	80018e6 <__swhatbuf_r+0x1e>
 8001908:	2340      	movs	r3, #64	; 0x40
 800190a:	2000      	movs	r0, #0
 800190c:	6023      	str	r3, [r4, #0]
 800190e:	b016      	add	sp, #88	; 0x58
 8001910:	bd70      	pop	{r4, r5, r6, pc}
	...

08001914 <__smakebuf_r>:
 8001914:	898b      	ldrh	r3, [r1, #12]
 8001916:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001918:	079d      	lsls	r5, r3, #30
 800191a:	4606      	mov	r6, r0
 800191c:	460c      	mov	r4, r1
 800191e:	d507      	bpl.n	8001930 <__smakebuf_r+0x1c>
 8001920:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001924:	6023      	str	r3, [r4, #0]
 8001926:	6123      	str	r3, [r4, #16]
 8001928:	2301      	movs	r3, #1
 800192a:	6163      	str	r3, [r4, #20]
 800192c:	b002      	add	sp, #8
 800192e:	bd70      	pop	{r4, r5, r6, pc}
 8001930:	ab01      	add	r3, sp, #4
 8001932:	466a      	mov	r2, sp
 8001934:	f7ff ffc8 	bl	80018c8 <__swhatbuf_r>
 8001938:	9900      	ldr	r1, [sp, #0]
 800193a:	4605      	mov	r5, r0
 800193c:	4630      	mov	r0, r6
 800193e:	f000 f89d 	bl	8001a7c <_malloc_r>
 8001942:	b948      	cbnz	r0, 8001958 <__smakebuf_r+0x44>
 8001944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001948:	059a      	lsls	r2, r3, #22
 800194a:	d4ef      	bmi.n	800192c <__smakebuf_r+0x18>
 800194c:	f023 0303 	bic.w	r3, r3, #3
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	81a3      	strh	r3, [r4, #12]
 8001956:	e7e3      	b.n	8001920 <__smakebuf_r+0xc>
 8001958:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <__smakebuf_r+0x7c>)
 800195a:	62b3      	str	r3, [r6, #40]	; 0x28
 800195c:	89a3      	ldrh	r3, [r4, #12]
 800195e:	6020      	str	r0, [r4, #0]
 8001960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001964:	81a3      	strh	r3, [r4, #12]
 8001966:	9b00      	ldr	r3, [sp, #0]
 8001968:	6163      	str	r3, [r4, #20]
 800196a:	9b01      	ldr	r3, [sp, #4]
 800196c:	6120      	str	r0, [r4, #16]
 800196e:	b15b      	cbz	r3, 8001988 <__smakebuf_r+0x74>
 8001970:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001974:	4630      	mov	r0, r6
 8001976:	f000 fd61 	bl	800243c <_isatty_r>
 800197a:	b128      	cbz	r0, 8001988 <__smakebuf_r+0x74>
 800197c:	89a3      	ldrh	r3, [r4, #12]
 800197e:	f023 0303 	bic.w	r3, r3, #3
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	81a3      	strh	r3, [r4, #12]
 8001988:	89a0      	ldrh	r0, [r4, #12]
 800198a:	4305      	orrs	r5, r0
 800198c:	81a5      	strh	r5, [r4, #12]
 800198e:	e7cd      	b.n	800192c <__smakebuf_r+0x18>
 8001990:	08001721 	.word	0x08001721

08001994 <malloc>:
 8001994:	4b02      	ldr	r3, [pc, #8]	; (80019a0 <malloc+0xc>)
 8001996:	4601      	mov	r1, r0
 8001998:	6818      	ldr	r0, [r3, #0]
 800199a:	f000 b86f 	b.w	8001a7c <_malloc_r>
 800199e:	bf00      	nop
 80019a0:	2000002c 	.word	0x2000002c

080019a4 <_free_r>:
 80019a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80019a6:	2900      	cmp	r1, #0
 80019a8:	d044      	beq.n	8001a34 <_free_r+0x90>
 80019aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019ae:	9001      	str	r0, [sp, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f1a1 0404 	sub.w	r4, r1, #4
 80019b6:	bfb8      	it	lt
 80019b8:	18e4      	addlt	r4, r4, r3
 80019ba:	f000 fd61 	bl	8002480 <__malloc_lock>
 80019be:	4a1e      	ldr	r2, [pc, #120]	; (8001a38 <_free_r+0x94>)
 80019c0:	9801      	ldr	r0, [sp, #4]
 80019c2:	6813      	ldr	r3, [r2, #0]
 80019c4:	b933      	cbnz	r3, 80019d4 <_free_r+0x30>
 80019c6:	6063      	str	r3, [r4, #4]
 80019c8:	6014      	str	r4, [r2, #0]
 80019ca:	b003      	add	sp, #12
 80019cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80019d0:	f000 bd5c 	b.w	800248c <__malloc_unlock>
 80019d4:	42a3      	cmp	r3, r4
 80019d6:	d908      	bls.n	80019ea <_free_r+0x46>
 80019d8:	6825      	ldr	r5, [r4, #0]
 80019da:	1961      	adds	r1, r4, r5
 80019dc:	428b      	cmp	r3, r1
 80019de:	bf01      	itttt	eq
 80019e0:	6819      	ldreq	r1, [r3, #0]
 80019e2:	685b      	ldreq	r3, [r3, #4]
 80019e4:	1949      	addeq	r1, r1, r5
 80019e6:	6021      	streq	r1, [r4, #0]
 80019e8:	e7ed      	b.n	80019c6 <_free_r+0x22>
 80019ea:	461a      	mov	r2, r3
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	b10b      	cbz	r3, 80019f4 <_free_r+0x50>
 80019f0:	42a3      	cmp	r3, r4
 80019f2:	d9fa      	bls.n	80019ea <_free_r+0x46>
 80019f4:	6811      	ldr	r1, [r2, #0]
 80019f6:	1855      	adds	r5, r2, r1
 80019f8:	42a5      	cmp	r5, r4
 80019fa:	d10b      	bne.n	8001a14 <_free_r+0x70>
 80019fc:	6824      	ldr	r4, [r4, #0]
 80019fe:	4421      	add	r1, r4
 8001a00:	1854      	adds	r4, r2, r1
 8001a02:	42a3      	cmp	r3, r4
 8001a04:	6011      	str	r1, [r2, #0]
 8001a06:	d1e0      	bne.n	80019ca <_free_r+0x26>
 8001a08:	681c      	ldr	r4, [r3, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	6053      	str	r3, [r2, #4]
 8001a0e:	4421      	add	r1, r4
 8001a10:	6011      	str	r1, [r2, #0]
 8001a12:	e7da      	b.n	80019ca <_free_r+0x26>
 8001a14:	d902      	bls.n	8001a1c <_free_r+0x78>
 8001a16:	230c      	movs	r3, #12
 8001a18:	6003      	str	r3, [r0, #0]
 8001a1a:	e7d6      	b.n	80019ca <_free_r+0x26>
 8001a1c:	6825      	ldr	r5, [r4, #0]
 8001a1e:	1961      	adds	r1, r4, r5
 8001a20:	428b      	cmp	r3, r1
 8001a22:	bf04      	itt	eq
 8001a24:	6819      	ldreq	r1, [r3, #0]
 8001a26:	685b      	ldreq	r3, [r3, #4]
 8001a28:	6063      	str	r3, [r4, #4]
 8001a2a:	bf04      	itt	eq
 8001a2c:	1949      	addeq	r1, r1, r5
 8001a2e:	6021      	streq	r1, [r4, #0]
 8001a30:	6054      	str	r4, [r2, #4]
 8001a32:	e7ca      	b.n	80019ca <_free_r+0x26>
 8001a34:	b003      	add	sp, #12
 8001a36:	bd30      	pop	{r4, r5, pc}
 8001a38:	200001b8 	.word	0x200001b8

08001a3c <sbrk_aligned>:
 8001a3c:	b570      	push	{r4, r5, r6, lr}
 8001a3e:	4e0e      	ldr	r6, [pc, #56]	; (8001a78 <sbrk_aligned+0x3c>)
 8001a40:	460c      	mov	r4, r1
 8001a42:	6831      	ldr	r1, [r6, #0]
 8001a44:	4605      	mov	r5, r0
 8001a46:	b911      	cbnz	r1, 8001a4e <sbrk_aligned+0x12>
 8001a48:	f000 fbc2 	bl	80021d0 <_sbrk_r>
 8001a4c:	6030      	str	r0, [r6, #0]
 8001a4e:	4621      	mov	r1, r4
 8001a50:	4628      	mov	r0, r5
 8001a52:	f000 fbbd 	bl	80021d0 <_sbrk_r>
 8001a56:	1c43      	adds	r3, r0, #1
 8001a58:	d00a      	beq.n	8001a70 <sbrk_aligned+0x34>
 8001a5a:	1cc4      	adds	r4, r0, #3
 8001a5c:	f024 0403 	bic.w	r4, r4, #3
 8001a60:	42a0      	cmp	r0, r4
 8001a62:	d007      	beq.n	8001a74 <sbrk_aligned+0x38>
 8001a64:	1a21      	subs	r1, r4, r0
 8001a66:	4628      	mov	r0, r5
 8001a68:	f000 fbb2 	bl	80021d0 <_sbrk_r>
 8001a6c:	3001      	adds	r0, #1
 8001a6e:	d101      	bne.n	8001a74 <sbrk_aligned+0x38>
 8001a70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001a74:	4620      	mov	r0, r4
 8001a76:	bd70      	pop	{r4, r5, r6, pc}
 8001a78:	200001bc 	.word	0x200001bc

08001a7c <_malloc_r>:
 8001a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a80:	1ccd      	adds	r5, r1, #3
 8001a82:	f025 0503 	bic.w	r5, r5, #3
 8001a86:	3508      	adds	r5, #8
 8001a88:	2d0c      	cmp	r5, #12
 8001a8a:	bf38      	it	cc
 8001a8c:	250c      	movcc	r5, #12
 8001a8e:	2d00      	cmp	r5, #0
 8001a90:	4607      	mov	r7, r0
 8001a92:	db01      	blt.n	8001a98 <_malloc_r+0x1c>
 8001a94:	42a9      	cmp	r1, r5
 8001a96:	d905      	bls.n	8001aa4 <_malloc_r+0x28>
 8001a98:	230c      	movs	r3, #12
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	2600      	movs	r6, #0
 8001a9e:	4630      	mov	r0, r6
 8001aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001aa4:	4e2e      	ldr	r6, [pc, #184]	; (8001b60 <_malloc_r+0xe4>)
 8001aa6:	f000 fceb 	bl	8002480 <__malloc_lock>
 8001aaa:	6833      	ldr	r3, [r6, #0]
 8001aac:	461c      	mov	r4, r3
 8001aae:	bb34      	cbnz	r4, 8001afe <_malloc_r+0x82>
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	4638      	mov	r0, r7
 8001ab4:	f7ff ffc2 	bl	8001a3c <sbrk_aligned>
 8001ab8:	1c43      	adds	r3, r0, #1
 8001aba:	4604      	mov	r4, r0
 8001abc:	d14d      	bne.n	8001b5a <_malloc_r+0xde>
 8001abe:	6834      	ldr	r4, [r6, #0]
 8001ac0:	4626      	mov	r6, r4
 8001ac2:	2e00      	cmp	r6, #0
 8001ac4:	d140      	bne.n	8001b48 <_malloc_r+0xcc>
 8001ac6:	6823      	ldr	r3, [r4, #0]
 8001ac8:	4631      	mov	r1, r6
 8001aca:	4638      	mov	r0, r7
 8001acc:	eb04 0803 	add.w	r8, r4, r3
 8001ad0:	f000 fb7e 	bl	80021d0 <_sbrk_r>
 8001ad4:	4580      	cmp	r8, r0
 8001ad6:	d13a      	bne.n	8001b4e <_malloc_r+0xd2>
 8001ad8:	6821      	ldr	r1, [r4, #0]
 8001ada:	3503      	adds	r5, #3
 8001adc:	1a6d      	subs	r5, r5, r1
 8001ade:	f025 0503 	bic.w	r5, r5, #3
 8001ae2:	3508      	adds	r5, #8
 8001ae4:	2d0c      	cmp	r5, #12
 8001ae6:	bf38      	it	cc
 8001ae8:	250c      	movcc	r5, #12
 8001aea:	4629      	mov	r1, r5
 8001aec:	4638      	mov	r0, r7
 8001aee:	f7ff ffa5 	bl	8001a3c <sbrk_aligned>
 8001af2:	3001      	adds	r0, #1
 8001af4:	d02b      	beq.n	8001b4e <_malloc_r+0xd2>
 8001af6:	6823      	ldr	r3, [r4, #0]
 8001af8:	442b      	add	r3, r5
 8001afa:	6023      	str	r3, [r4, #0]
 8001afc:	e00e      	b.n	8001b1c <_malloc_r+0xa0>
 8001afe:	6822      	ldr	r2, [r4, #0]
 8001b00:	1b52      	subs	r2, r2, r5
 8001b02:	d41e      	bmi.n	8001b42 <_malloc_r+0xc6>
 8001b04:	2a0b      	cmp	r2, #11
 8001b06:	d916      	bls.n	8001b36 <_malloc_r+0xba>
 8001b08:	1961      	adds	r1, r4, r5
 8001b0a:	42a3      	cmp	r3, r4
 8001b0c:	6025      	str	r5, [r4, #0]
 8001b0e:	bf18      	it	ne
 8001b10:	6059      	strne	r1, [r3, #4]
 8001b12:	6863      	ldr	r3, [r4, #4]
 8001b14:	bf08      	it	eq
 8001b16:	6031      	streq	r1, [r6, #0]
 8001b18:	5162      	str	r2, [r4, r5]
 8001b1a:	604b      	str	r3, [r1, #4]
 8001b1c:	4638      	mov	r0, r7
 8001b1e:	f104 060b 	add.w	r6, r4, #11
 8001b22:	f000 fcb3 	bl	800248c <__malloc_unlock>
 8001b26:	f026 0607 	bic.w	r6, r6, #7
 8001b2a:	1d23      	adds	r3, r4, #4
 8001b2c:	1af2      	subs	r2, r6, r3
 8001b2e:	d0b6      	beq.n	8001a9e <_malloc_r+0x22>
 8001b30:	1b9b      	subs	r3, r3, r6
 8001b32:	50a3      	str	r3, [r4, r2]
 8001b34:	e7b3      	b.n	8001a9e <_malloc_r+0x22>
 8001b36:	6862      	ldr	r2, [r4, #4]
 8001b38:	42a3      	cmp	r3, r4
 8001b3a:	bf0c      	ite	eq
 8001b3c:	6032      	streq	r2, [r6, #0]
 8001b3e:	605a      	strne	r2, [r3, #4]
 8001b40:	e7ec      	b.n	8001b1c <_malloc_r+0xa0>
 8001b42:	4623      	mov	r3, r4
 8001b44:	6864      	ldr	r4, [r4, #4]
 8001b46:	e7b2      	b.n	8001aae <_malloc_r+0x32>
 8001b48:	4634      	mov	r4, r6
 8001b4a:	6876      	ldr	r6, [r6, #4]
 8001b4c:	e7b9      	b.n	8001ac2 <_malloc_r+0x46>
 8001b4e:	230c      	movs	r3, #12
 8001b50:	603b      	str	r3, [r7, #0]
 8001b52:	4638      	mov	r0, r7
 8001b54:	f000 fc9a 	bl	800248c <__malloc_unlock>
 8001b58:	e7a1      	b.n	8001a9e <_malloc_r+0x22>
 8001b5a:	6025      	str	r5, [r4, #0]
 8001b5c:	e7de      	b.n	8001b1c <_malloc_r+0xa0>
 8001b5e:	bf00      	nop
 8001b60:	200001b8 	.word	0x200001b8

08001b64 <__sfputc_r>:
 8001b64:	6893      	ldr	r3, [r2, #8]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	b410      	push	{r4}
 8001b6c:	6093      	str	r3, [r2, #8]
 8001b6e:	da08      	bge.n	8001b82 <__sfputc_r+0x1e>
 8001b70:	6994      	ldr	r4, [r2, #24]
 8001b72:	42a3      	cmp	r3, r4
 8001b74:	db01      	blt.n	8001b7a <__sfputc_r+0x16>
 8001b76:	290a      	cmp	r1, #10
 8001b78:	d103      	bne.n	8001b82 <__sfputc_r+0x1e>
 8001b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b7e:	f000 bb7b 	b.w	8002278 <__swbuf_r>
 8001b82:	6813      	ldr	r3, [r2, #0]
 8001b84:	1c58      	adds	r0, r3, #1
 8001b86:	6010      	str	r0, [r2, #0]
 8001b88:	7019      	strb	r1, [r3, #0]
 8001b8a:	4608      	mov	r0, r1
 8001b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <__sfputs_r>:
 8001b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b94:	4606      	mov	r6, r0
 8001b96:	460f      	mov	r7, r1
 8001b98:	4614      	mov	r4, r2
 8001b9a:	18d5      	adds	r5, r2, r3
 8001b9c:	42ac      	cmp	r4, r5
 8001b9e:	d101      	bne.n	8001ba4 <__sfputs_r+0x12>
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	e007      	b.n	8001bb4 <__sfputs_r+0x22>
 8001ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ba8:	463a      	mov	r2, r7
 8001baa:	4630      	mov	r0, r6
 8001bac:	f7ff ffda 	bl	8001b64 <__sfputc_r>
 8001bb0:	1c43      	adds	r3, r0, #1
 8001bb2:	d1f3      	bne.n	8001b9c <__sfputs_r+0xa>
 8001bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001bb8 <_vfiprintf_r>:
 8001bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bbc:	460d      	mov	r5, r1
 8001bbe:	b09d      	sub	sp, #116	; 0x74
 8001bc0:	4614      	mov	r4, r2
 8001bc2:	4698      	mov	r8, r3
 8001bc4:	4606      	mov	r6, r0
 8001bc6:	b118      	cbz	r0, 8001bd0 <_vfiprintf_r+0x18>
 8001bc8:	6983      	ldr	r3, [r0, #24]
 8001bca:	b90b      	cbnz	r3, 8001bd0 <_vfiprintf_r+0x18>
 8001bcc:	f7ff fddc 	bl	8001788 <__sinit>
 8001bd0:	4b89      	ldr	r3, [pc, #548]	; (8001df8 <_vfiprintf_r+0x240>)
 8001bd2:	429d      	cmp	r5, r3
 8001bd4:	d11b      	bne.n	8001c0e <_vfiprintf_r+0x56>
 8001bd6:	6875      	ldr	r5, [r6, #4]
 8001bd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001bda:	07d9      	lsls	r1, r3, #31
 8001bdc:	d405      	bmi.n	8001bea <_vfiprintf_r+0x32>
 8001bde:	89ab      	ldrh	r3, [r5, #12]
 8001be0:	059a      	lsls	r2, r3, #22
 8001be2:	d402      	bmi.n	8001bea <_vfiprintf_r+0x32>
 8001be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001be6:	f7ff fe6d 	bl	80018c4 <__retarget_lock_acquire_recursive>
 8001bea:	89ab      	ldrh	r3, [r5, #12]
 8001bec:	071b      	lsls	r3, r3, #28
 8001bee:	d501      	bpl.n	8001bf4 <_vfiprintf_r+0x3c>
 8001bf0:	692b      	ldr	r3, [r5, #16]
 8001bf2:	b9eb      	cbnz	r3, 8001c30 <_vfiprintf_r+0x78>
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	4630      	mov	r0, r6
 8001bf8:	f000 fb90 	bl	800231c <__swsetup_r>
 8001bfc:	b1c0      	cbz	r0, 8001c30 <_vfiprintf_r+0x78>
 8001bfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c00:	07dc      	lsls	r4, r3, #31
 8001c02:	d50e      	bpl.n	8001c22 <_vfiprintf_r+0x6a>
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c08:	b01d      	add	sp, #116	; 0x74
 8001c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c0e:	4b7b      	ldr	r3, [pc, #492]	; (8001dfc <_vfiprintf_r+0x244>)
 8001c10:	429d      	cmp	r5, r3
 8001c12:	d101      	bne.n	8001c18 <_vfiprintf_r+0x60>
 8001c14:	68b5      	ldr	r5, [r6, #8]
 8001c16:	e7df      	b.n	8001bd8 <_vfiprintf_r+0x20>
 8001c18:	4b79      	ldr	r3, [pc, #484]	; (8001e00 <_vfiprintf_r+0x248>)
 8001c1a:	429d      	cmp	r5, r3
 8001c1c:	bf08      	it	eq
 8001c1e:	68f5      	ldreq	r5, [r6, #12]
 8001c20:	e7da      	b.n	8001bd8 <_vfiprintf_r+0x20>
 8001c22:	89ab      	ldrh	r3, [r5, #12]
 8001c24:	0598      	lsls	r0, r3, #22
 8001c26:	d4ed      	bmi.n	8001c04 <_vfiprintf_r+0x4c>
 8001c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c2a:	f7ff fe4c 	bl	80018c6 <__retarget_lock_release_recursive>
 8001c2e:	e7e9      	b.n	8001c04 <_vfiprintf_r+0x4c>
 8001c30:	2300      	movs	r3, #0
 8001c32:	9309      	str	r3, [sp, #36]	; 0x24
 8001c34:	2320      	movs	r3, #32
 8001c36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c3e:	2330      	movs	r3, #48	; 0x30
 8001c40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001e04 <_vfiprintf_r+0x24c>
 8001c44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c48:	f04f 0901 	mov.w	r9, #1
 8001c4c:	4623      	mov	r3, r4
 8001c4e:	469a      	mov	sl, r3
 8001c50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c54:	b10a      	cbz	r2, 8001c5a <_vfiprintf_r+0xa2>
 8001c56:	2a25      	cmp	r2, #37	; 0x25
 8001c58:	d1f9      	bne.n	8001c4e <_vfiprintf_r+0x96>
 8001c5a:	ebba 0b04 	subs.w	fp, sl, r4
 8001c5e:	d00b      	beq.n	8001c78 <_vfiprintf_r+0xc0>
 8001c60:	465b      	mov	r3, fp
 8001c62:	4622      	mov	r2, r4
 8001c64:	4629      	mov	r1, r5
 8001c66:	4630      	mov	r0, r6
 8001c68:	f7ff ff93 	bl	8001b92 <__sfputs_r>
 8001c6c:	3001      	adds	r0, #1
 8001c6e:	f000 80aa 	beq.w	8001dc6 <_vfiprintf_r+0x20e>
 8001c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001c74:	445a      	add	r2, fp
 8001c76:	9209      	str	r2, [sp, #36]	; 0x24
 8001c78:	f89a 3000 	ldrb.w	r3, [sl]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80a2 	beq.w	8001dc6 <_vfiprintf_r+0x20e>
 8001c82:	2300      	movs	r3, #0
 8001c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c8c:	f10a 0a01 	add.w	sl, sl, #1
 8001c90:	9304      	str	r3, [sp, #16]
 8001c92:	9307      	str	r3, [sp, #28]
 8001c94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c98:	931a      	str	r3, [sp, #104]	; 0x68
 8001c9a:	4654      	mov	r4, sl
 8001c9c:	2205      	movs	r2, #5
 8001c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ca2:	4858      	ldr	r0, [pc, #352]	; (8001e04 <_vfiprintf_r+0x24c>)
 8001ca4:	f7fe fa94 	bl	80001d0 <memchr>
 8001ca8:	9a04      	ldr	r2, [sp, #16]
 8001caa:	b9d8      	cbnz	r0, 8001ce4 <_vfiprintf_r+0x12c>
 8001cac:	06d1      	lsls	r1, r2, #27
 8001cae:	bf44      	itt	mi
 8001cb0:	2320      	movmi	r3, #32
 8001cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001cb6:	0713      	lsls	r3, r2, #28
 8001cb8:	bf44      	itt	mi
 8001cba:	232b      	movmi	r3, #43	; 0x2b
 8001cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8001cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8001cc6:	d015      	beq.n	8001cf4 <_vfiprintf_r+0x13c>
 8001cc8:	9a07      	ldr	r2, [sp, #28]
 8001cca:	4654      	mov	r4, sl
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f04f 0c0a 	mov.w	ip, #10
 8001cd2:	4621      	mov	r1, r4
 8001cd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001cd8:	3b30      	subs	r3, #48	; 0x30
 8001cda:	2b09      	cmp	r3, #9
 8001cdc:	d94e      	bls.n	8001d7c <_vfiprintf_r+0x1c4>
 8001cde:	b1b0      	cbz	r0, 8001d0e <_vfiprintf_r+0x156>
 8001ce0:	9207      	str	r2, [sp, #28]
 8001ce2:	e014      	b.n	8001d0e <_vfiprintf_r+0x156>
 8001ce4:	eba0 0308 	sub.w	r3, r0, r8
 8001ce8:	fa09 f303 	lsl.w	r3, r9, r3
 8001cec:	4313      	orrs	r3, r2
 8001cee:	9304      	str	r3, [sp, #16]
 8001cf0:	46a2      	mov	sl, r4
 8001cf2:	e7d2      	b.n	8001c9a <_vfiprintf_r+0xe2>
 8001cf4:	9b03      	ldr	r3, [sp, #12]
 8001cf6:	1d19      	adds	r1, r3, #4
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	9103      	str	r1, [sp, #12]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	bfbb      	ittet	lt
 8001d00:	425b      	neglt	r3, r3
 8001d02:	f042 0202 	orrlt.w	r2, r2, #2
 8001d06:	9307      	strge	r3, [sp, #28]
 8001d08:	9307      	strlt	r3, [sp, #28]
 8001d0a:	bfb8      	it	lt
 8001d0c:	9204      	strlt	r2, [sp, #16]
 8001d0e:	7823      	ldrb	r3, [r4, #0]
 8001d10:	2b2e      	cmp	r3, #46	; 0x2e
 8001d12:	d10c      	bne.n	8001d2e <_vfiprintf_r+0x176>
 8001d14:	7863      	ldrb	r3, [r4, #1]
 8001d16:	2b2a      	cmp	r3, #42	; 0x2a
 8001d18:	d135      	bne.n	8001d86 <_vfiprintf_r+0x1ce>
 8001d1a:	9b03      	ldr	r3, [sp, #12]
 8001d1c:	1d1a      	adds	r2, r3, #4
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	9203      	str	r2, [sp, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	bfb8      	it	lt
 8001d26:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001d2a:	3402      	adds	r4, #2
 8001d2c:	9305      	str	r3, [sp, #20]
 8001d2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001e14 <_vfiprintf_r+0x25c>
 8001d32:	7821      	ldrb	r1, [r4, #0]
 8001d34:	2203      	movs	r2, #3
 8001d36:	4650      	mov	r0, sl
 8001d38:	f7fe fa4a 	bl	80001d0 <memchr>
 8001d3c:	b140      	cbz	r0, 8001d50 <_vfiprintf_r+0x198>
 8001d3e:	2340      	movs	r3, #64	; 0x40
 8001d40:	eba0 000a 	sub.w	r0, r0, sl
 8001d44:	fa03 f000 	lsl.w	r0, r3, r0
 8001d48:	9b04      	ldr	r3, [sp, #16]
 8001d4a:	4303      	orrs	r3, r0
 8001d4c:	3401      	adds	r4, #1
 8001d4e:	9304      	str	r3, [sp, #16]
 8001d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d54:	482c      	ldr	r0, [pc, #176]	; (8001e08 <_vfiprintf_r+0x250>)
 8001d56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001d5a:	2206      	movs	r2, #6
 8001d5c:	f7fe fa38 	bl	80001d0 <memchr>
 8001d60:	2800      	cmp	r0, #0
 8001d62:	d03f      	beq.n	8001de4 <_vfiprintf_r+0x22c>
 8001d64:	4b29      	ldr	r3, [pc, #164]	; (8001e0c <_vfiprintf_r+0x254>)
 8001d66:	bb1b      	cbnz	r3, 8001db0 <_vfiprintf_r+0x1f8>
 8001d68:	9b03      	ldr	r3, [sp, #12]
 8001d6a:	3307      	adds	r3, #7
 8001d6c:	f023 0307 	bic.w	r3, r3, #7
 8001d70:	3308      	adds	r3, #8
 8001d72:	9303      	str	r3, [sp, #12]
 8001d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d76:	443b      	add	r3, r7
 8001d78:	9309      	str	r3, [sp, #36]	; 0x24
 8001d7a:	e767      	b.n	8001c4c <_vfiprintf_r+0x94>
 8001d7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d80:	460c      	mov	r4, r1
 8001d82:	2001      	movs	r0, #1
 8001d84:	e7a5      	b.n	8001cd2 <_vfiprintf_r+0x11a>
 8001d86:	2300      	movs	r3, #0
 8001d88:	3401      	adds	r4, #1
 8001d8a:	9305      	str	r3, [sp, #20]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f04f 0c0a 	mov.w	ip, #10
 8001d92:	4620      	mov	r0, r4
 8001d94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d98:	3a30      	subs	r2, #48	; 0x30
 8001d9a:	2a09      	cmp	r2, #9
 8001d9c:	d903      	bls.n	8001da6 <_vfiprintf_r+0x1ee>
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0c5      	beq.n	8001d2e <_vfiprintf_r+0x176>
 8001da2:	9105      	str	r1, [sp, #20]
 8001da4:	e7c3      	b.n	8001d2e <_vfiprintf_r+0x176>
 8001da6:	fb0c 2101 	mla	r1, ip, r1, r2
 8001daa:	4604      	mov	r4, r0
 8001dac:	2301      	movs	r3, #1
 8001dae:	e7f0      	b.n	8001d92 <_vfiprintf_r+0x1da>
 8001db0:	ab03      	add	r3, sp, #12
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	462a      	mov	r2, r5
 8001db6:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <_vfiprintf_r+0x258>)
 8001db8:	a904      	add	r1, sp, #16
 8001dba:	4630      	mov	r0, r6
 8001dbc:	f3af 8000 	nop.w
 8001dc0:	4607      	mov	r7, r0
 8001dc2:	1c78      	adds	r0, r7, #1
 8001dc4:	d1d6      	bne.n	8001d74 <_vfiprintf_r+0x1bc>
 8001dc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001dc8:	07d9      	lsls	r1, r3, #31
 8001dca:	d405      	bmi.n	8001dd8 <_vfiprintf_r+0x220>
 8001dcc:	89ab      	ldrh	r3, [r5, #12]
 8001dce:	059a      	lsls	r2, r3, #22
 8001dd0:	d402      	bmi.n	8001dd8 <_vfiprintf_r+0x220>
 8001dd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001dd4:	f7ff fd77 	bl	80018c6 <__retarget_lock_release_recursive>
 8001dd8:	89ab      	ldrh	r3, [r5, #12]
 8001dda:	065b      	lsls	r3, r3, #25
 8001ddc:	f53f af12 	bmi.w	8001c04 <_vfiprintf_r+0x4c>
 8001de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001de2:	e711      	b.n	8001c08 <_vfiprintf_r+0x50>
 8001de4:	ab03      	add	r3, sp, #12
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	462a      	mov	r2, r5
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <_vfiprintf_r+0x258>)
 8001dec:	a904      	add	r1, sp, #16
 8001dee:	4630      	mov	r0, r6
 8001df0:	f000 f880 	bl	8001ef4 <_printf_i>
 8001df4:	e7e4      	b.n	8001dc0 <_vfiprintf_r+0x208>
 8001df6:	bf00      	nop
 8001df8:	080024fc 	.word	0x080024fc
 8001dfc:	0800251c 	.word	0x0800251c
 8001e00:	080024dc 	.word	0x080024dc
 8001e04:	0800253c 	.word	0x0800253c
 8001e08:	08002546 	.word	0x08002546
 8001e0c:	00000000 	.word	0x00000000
 8001e10:	08001b93 	.word	0x08001b93
 8001e14:	08002542 	.word	0x08002542

08001e18 <_printf_common>:
 8001e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e1c:	4616      	mov	r6, r2
 8001e1e:	4699      	mov	r9, r3
 8001e20:	688a      	ldr	r2, [r1, #8]
 8001e22:	690b      	ldr	r3, [r1, #16]
 8001e24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	bfb8      	it	lt
 8001e2c:	4613      	movlt	r3, r2
 8001e2e:	6033      	str	r3, [r6, #0]
 8001e30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e34:	4607      	mov	r7, r0
 8001e36:	460c      	mov	r4, r1
 8001e38:	b10a      	cbz	r2, 8001e3e <_printf_common+0x26>
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	6033      	str	r3, [r6, #0]
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	0699      	lsls	r1, r3, #26
 8001e42:	bf42      	ittt	mi
 8001e44:	6833      	ldrmi	r3, [r6, #0]
 8001e46:	3302      	addmi	r3, #2
 8001e48:	6033      	strmi	r3, [r6, #0]
 8001e4a:	6825      	ldr	r5, [r4, #0]
 8001e4c:	f015 0506 	ands.w	r5, r5, #6
 8001e50:	d106      	bne.n	8001e60 <_printf_common+0x48>
 8001e52:	f104 0a19 	add.w	sl, r4, #25
 8001e56:	68e3      	ldr	r3, [r4, #12]
 8001e58:	6832      	ldr	r2, [r6, #0]
 8001e5a:	1a9b      	subs	r3, r3, r2
 8001e5c:	42ab      	cmp	r3, r5
 8001e5e:	dc26      	bgt.n	8001eae <_printf_common+0x96>
 8001e60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001e64:	1e13      	subs	r3, r2, #0
 8001e66:	6822      	ldr	r2, [r4, #0]
 8001e68:	bf18      	it	ne
 8001e6a:	2301      	movne	r3, #1
 8001e6c:	0692      	lsls	r2, r2, #26
 8001e6e:	d42b      	bmi.n	8001ec8 <_printf_common+0xb0>
 8001e70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e74:	4649      	mov	r1, r9
 8001e76:	4638      	mov	r0, r7
 8001e78:	47c0      	blx	r8
 8001e7a:	3001      	adds	r0, #1
 8001e7c:	d01e      	beq.n	8001ebc <_printf_common+0xa4>
 8001e7e:	6823      	ldr	r3, [r4, #0]
 8001e80:	68e5      	ldr	r5, [r4, #12]
 8001e82:	6832      	ldr	r2, [r6, #0]
 8001e84:	f003 0306 	and.w	r3, r3, #6
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	bf08      	it	eq
 8001e8c:	1aad      	subeq	r5, r5, r2
 8001e8e:	68a3      	ldr	r3, [r4, #8]
 8001e90:	6922      	ldr	r2, [r4, #16]
 8001e92:	bf0c      	ite	eq
 8001e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e98:	2500      	movne	r5, #0
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	bfc4      	itt	gt
 8001e9e:	1a9b      	subgt	r3, r3, r2
 8001ea0:	18ed      	addgt	r5, r5, r3
 8001ea2:	2600      	movs	r6, #0
 8001ea4:	341a      	adds	r4, #26
 8001ea6:	42b5      	cmp	r5, r6
 8001ea8:	d11a      	bne.n	8001ee0 <_printf_common+0xc8>
 8001eaa:	2000      	movs	r0, #0
 8001eac:	e008      	b.n	8001ec0 <_printf_common+0xa8>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	4652      	mov	r2, sl
 8001eb2:	4649      	mov	r1, r9
 8001eb4:	4638      	mov	r0, r7
 8001eb6:	47c0      	blx	r8
 8001eb8:	3001      	adds	r0, #1
 8001eba:	d103      	bne.n	8001ec4 <_printf_common+0xac>
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ec4:	3501      	adds	r5, #1
 8001ec6:	e7c6      	b.n	8001e56 <_printf_common+0x3e>
 8001ec8:	18e1      	adds	r1, r4, r3
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	2030      	movs	r0, #48	; 0x30
 8001ece:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ed2:	4422      	add	r2, r4
 8001ed4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ed8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001edc:	3302      	adds	r3, #2
 8001ede:	e7c7      	b.n	8001e70 <_printf_common+0x58>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	4622      	mov	r2, r4
 8001ee4:	4649      	mov	r1, r9
 8001ee6:	4638      	mov	r0, r7
 8001ee8:	47c0      	blx	r8
 8001eea:	3001      	adds	r0, #1
 8001eec:	d0e6      	beq.n	8001ebc <_printf_common+0xa4>
 8001eee:	3601      	adds	r6, #1
 8001ef0:	e7d9      	b.n	8001ea6 <_printf_common+0x8e>
	...

08001ef4 <_printf_i>:
 8001ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ef8:	7e0f      	ldrb	r7, [r1, #24]
 8001efa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001efc:	2f78      	cmp	r7, #120	; 0x78
 8001efe:	4691      	mov	r9, r2
 8001f00:	4680      	mov	r8, r0
 8001f02:	460c      	mov	r4, r1
 8001f04:	469a      	mov	sl, r3
 8001f06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001f0a:	d807      	bhi.n	8001f1c <_printf_i+0x28>
 8001f0c:	2f62      	cmp	r7, #98	; 0x62
 8001f0e:	d80a      	bhi.n	8001f26 <_printf_i+0x32>
 8001f10:	2f00      	cmp	r7, #0
 8001f12:	f000 80d8 	beq.w	80020c6 <_printf_i+0x1d2>
 8001f16:	2f58      	cmp	r7, #88	; 0x58
 8001f18:	f000 80a3 	beq.w	8002062 <_printf_i+0x16e>
 8001f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001f24:	e03a      	b.n	8001f9c <_printf_i+0xa8>
 8001f26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001f2a:	2b15      	cmp	r3, #21
 8001f2c:	d8f6      	bhi.n	8001f1c <_printf_i+0x28>
 8001f2e:	a101      	add	r1, pc, #4	; (adr r1, 8001f34 <_printf_i+0x40>)
 8001f30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001f34:	08001f8d 	.word	0x08001f8d
 8001f38:	08001fa1 	.word	0x08001fa1
 8001f3c:	08001f1d 	.word	0x08001f1d
 8001f40:	08001f1d 	.word	0x08001f1d
 8001f44:	08001f1d 	.word	0x08001f1d
 8001f48:	08001f1d 	.word	0x08001f1d
 8001f4c:	08001fa1 	.word	0x08001fa1
 8001f50:	08001f1d 	.word	0x08001f1d
 8001f54:	08001f1d 	.word	0x08001f1d
 8001f58:	08001f1d 	.word	0x08001f1d
 8001f5c:	08001f1d 	.word	0x08001f1d
 8001f60:	080020ad 	.word	0x080020ad
 8001f64:	08001fd1 	.word	0x08001fd1
 8001f68:	0800208f 	.word	0x0800208f
 8001f6c:	08001f1d 	.word	0x08001f1d
 8001f70:	08001f1d 	.word	0x08001f1d
 8001f74:	080020cf 	.word	0x080020cf
 8001f78:	08001f1d 	.word	0x08001f1d
 8001f7c:	08001fd1 	.word	0x08001fd1
 8001f80:	08001f1d 	.word	0x08001f1d
 8001f84:	08001f1d 	.word	0x08001f1d
 8001f88:	08002097 	.word	0x08002097
 8001f8c:	682b      	ldr	r3, [r5, #0]
 8001f8e:	1d1a      	adds	r2, r3, #4
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	602a      	str	r2, [r5, #0]
 8001f94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0a3      	b.n	80020e8 <_printf_i+0x1f4>
 8001fa0:	6820      	ldr	r0, [r4, #0]
 8001fa2:	6829      	ldr	r1, [r5, #0]
 8001fa4:	0606      	lsls	r6, r0, #24
 8001fa6:	f101 0304 	add.w	r3, r1, #4
 8001faa:	d50a      	bpl.n	8001fc2 <_printf_i+0xce>
 8001fac:	680e      	ldr	r6, [r1, #0]
 8001fae:	602b      	str	r3, [r5, #0]
 8001fb0:	2e00      	cmp	r6, #0
 8001fb2:	da03      	bge.n	8001fbc <_printf_i+0xc8>
 8001fb4:	232d      	movs	r3, #45	; 0x2d
 8001fb6:	4276      	negs	r6, r6
 8001fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001fbc:	485e      	ldr	r0, [pc, #376]	; (8002138 <_printf_i+0x244>)
 8001fbe:	230a      	movs	r3, #10
 8001fc0:	e019      	b.n	8001ff6 <_printf_i+0x102>
 8001fc2:	680e      	ldr	r6, [r1, #0]
 8001fc4:	602b      	str	r3, [r5, #0]
 8001fc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001fca:	bf18      	it	ne
 8001fcc:	b236      	sxthne	r6, r6
 8001fce:	e7ef      	b.n	8001fb0 <_printf_i+0xbc>
 8001fd0:	682b      	ldr	r3, [r5, #0]
 8001fd2:	6820      	ldr	r0, [r4, #0]
 8001fd4:	1d19      	adds	r1, r3, #4
 8001fd6:	6029      	str	r1, [r5, #0]
 8001fd8:	0601      	lsls	r1, r0, #24
 8001fda:	d501      	bpl.n	8001fe0 <_printf_i+0xec>
 8001fdc:	681e      	ldr	r6, [r3, #0]
 8001fde:	e002      	b.n	8001fe6 <_printf_i+0xf2>
 8001fe0:	0646      	lsls	r6, r0, #25
 8001fe2:	d5fb      	bpl.n	8001fdc <_printf_i+0xe8>
 8001fe4:	881e      	ldrh	r6, [r3, #0]
 8001fe6:	4854      	ldr	r0, [pc, #336]	; (8002138 <_printf_i+0x244>)
 8001fe8:	2f6f      	cmp	r7, #111	; 0x6f
 8001fea:	bf0c      	ite	eq
 8001fec:	2308      	moveq	r3, #8
 8001fee:	230a      	movne	r3, #10
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ff6:	6865      	ldr	r5, [r4, #4]
 8001ff8:	60a5      	str	r5, [r4, #8]
 8001ffa:	2d00      	cmp	r5, #0
 8001ffc:	bfa2      	ittt	ge
 8001ffe:	6821      	ldrge	r1, [r4, #0]
 8002000:	f021 0104 	bicge.w	r1, r1, #4
 8002004:	6021      	strge	r1, [r4, #0]
 8002006:	b90e      	cbnz	r6, 800200c <_printf_i+0x118>
 8002008:	2d00      	cmp	r5, #0
 800200a:	d04d      	beq.n	80020a8 <_printf_i+0x1b4>
 800200c:	4615      	mov	r5, r2
 800200e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002012:	fb03 6711 	mls	r7, r3, r1, r6
 8002016:	5dc7      	ldrb	r7, [r0, r7]
 8002018:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800201c:	4637      	mov	r7, r6
 800201e:	42bb      	cmp	r3, r7
 8002020:	460e      	mov	r6, r1
 8002022:	d9f4      	bls.n	800200e <_printf_i+0x11a>
 8002024:	2b08      	cmp	r3, #8
 8002026:	d10b      	bne.n	8002040 <_printf_i+0x14c>
 8002028:	6823      	ldr	r3, [r4, #0]
 800202a:	07de      	lsls	r6, r3, #31
 800202c:	d508      	bpl.n	8002040 <_printf_i+0x14c>
 800202e:	6923      	ldr	r3, [r4, #16]
 8002030:	6861      	ldr	r1, [r4, #4]
 8002032:	4299      	cmp	r1, r3
 8002034:	bfde      	ittt	le
 8002036:	2330      	movle	r3, #48	; 0x30
 8002038:	f805 3c01 	strble.w	r3, [r5, #-1]
 800203c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002040:	1b52      	subs	r2, r2, r5
 8002042:	6122      	str	r2, [r4, #16]
 8002044:	f8cd a000 	str.w	sl, [sp]
 8002048:	464b      	mov	r3, r9
 800204a:	aa03      	add	r2, sp, #12
 800204c:	4621      	mov	r1, r4
 800204e:	4640      	mov	r0, r8
 8002050:	f7ff fee2 	bl	8001e18 <_printf_common>
 8002054:	3001      	adds	r0, #1
 8002056:	d14c      	bne.n	80020f2 <_printf_i+0x1fe>
 8002058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800205c:	b004      	add	sp, #16
 800205e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002062:	4835      	ldr	r0, [pc, #212]	; (8002138 <_printf_i+0x244>)
 8002064:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002068:	6829      	ldr	r1, [r5, #0]
 800206a:	6823      	ldr	r3, [r4, #0]
 800206c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002070:	6029      	str	r1, [r5, #0]
 8002072:	061d      	lsls	r5, r3, #24
 8002074:	d514      	bpl.n	80020a0 <_printf_i+0x1ac>
 8002076:	07df      	lsls	r7, r3, #31
 8002078:	bf44      	itt	mi
 800207a:	f043 0320 	orrmi.w	r3, r3, #32
 800207e:	6023      	strmi	r3, [r4, #0]
 8002080:	b91e      	cbnz	r6, 800208a <_printf_i+0x196>
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	f023 0320 	bic.w	r3, r3, #32
 8002088:	6023      	str	r3, [r4, #0]
 800208a:	2310      	movs	r3, #16
 800208c:	e7b0      	b.n	8001ff0 <_printf_i+0xfc>
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	f043 0320 	orr.w	r3, r3, #32
 8002094:	6023      	str	r3, [r4, #0]
 8002096:	2378      	movs	r3, #120	; 0x78
 8002098:	4828      	ldr	r0, [pc, #160]	; (800213c <_printf_i+0x248>)
 800209a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800209e:	e7e3      	b.n	8002068 <_printf_i+0x174>
 80020a0:	0659      	lsls	r1, r3, #25
 80020a2:	bf48      	it	mi
 80020a4:	b2b6      	uxthmi	r6, r6
 80020a6:	e7e6      	b.n	8002076 <_printf_i+0x182>
 80020a8:	4615      	mov	r5, r2
 80020aa:	e7bb      	b.n	8002024 <_printf_i+0x130>
 80020ac:	682b      	ldr	r3, [r5, #0]
 80020ae:	6826      	ldr	r6, [r4, #0]
 80020b0:	6961      	ldr	r1, [r4, #20]
 80020b2:	1d18      	adds	r0, r3, #4
 80020b4:	6028      	str	r0, [r5, #0]
 80020b6:	0635      	lsls	r5, r6, #24
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	d501      	bpl.n	80020c0 <_printf_i+0x1cc>
 80020bc:	6019      	str	r1, [r3, #0]
 80020be:	e002      	b.n	80020c6 <_printf_i+0x1d2>
 80020c0:	0670      	lsls	r0, r6, #25
 80020c2:	d5fb      	bpl.n	80020bc <_printf_i+0x1c8>
 80020c4:	8019      	strh	r1, [r3, #0]
 80020c6:	2300      	movs	r3, #0
 80020c8:	6123      	str	r3, [r4, #16]
 80020ca:	4615      	mov	r5, r2
 80020cc:	e7ba      	b.n	8002044 <_printf_i+0x150>
 80020ce:	682b      	ldr	r3, [r5, #0]
 80020d0:	1d1a      	adds	r2, r3, #4
 80020d2:	602a      	str	r2, [r5, #0]
 80020d4:	681d      	ldr	r5, [r3, #0]
 80020d6:	6862      	ldr	r2, [r4, #4]
 80020d8:	2100      	movs	r1, #0
 80020da:	4628      	mov	r0, r5
 80020dc:	f7fe f878 	bl	80001d0 <memchr>
 80020e0:	b108      	cbz	r0, 80020e6 <_printf_i+0x1f2>
 80020e2:	1b40      	subs	r0, r0, r5
 80020e4:	6060      	str	r0, [r4, #4]
 80020e6:	6863      	ldr	r3, [r4, #4]
 80020e8:	6123      	str	r3, [r4, #16]
 80020ea:	2300      	movs	r3, #0
 80020ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020f0:	e7a8      	b.n	8002044 <_printf_i+0x150>
 80020f2:	6923      	ldr	r3, [r4, #16]
 80020f4:	462a      	mov	r2, r5
 80020f6:	4649      	mov	r1, r9
 80020f8:	4640      	mov	r0, r8
 80020fa:	47d0      	blx	sl
 80020fc:	3001      	adds	r0, #1
 80020fe:	d0ab      	beq.n	8002058 <_printf_i+0x164>
 8002100:	6823      	ldr	r3, [r4, #0]
 8002102:	079b      	lsls	r3, r3, #30
 8002104:	d413      	bmi.n	800212e <_printf_i+0x23a>
 8002106:	68e0      	ldr	r0, [r4, #12]
 8002108:	9b03      	ldr	r3, [sp, #12]
 800210a:	4298      	cmp	r0, r3
 800210c:	bfb8      	it	lt
 800210e:	4618      	movlt	r0, r3
 8002110:	e7a4      	b.n	800205c <_printf_i+0x168>
 8002112:	2301      	movs	r3, #1
 8002114:	4632      	mov	r2, r6
 8002116:	4649      	mov	r1, r9
 8002118:	4640      	mov	r0, r8
 800211a:	47d0      	blx	sl
 800211c:	3001      	adds	r0, #1
 800211e:	d09b      	beq.n	8002058 <_printf_i+0x164>
 8002120:	3501      	adds	r5, #1
 8002122:	68e3      	ldr	r3, [r4, #12]
 8002124:	9903      	ldr	r1, [sp, #12]
 8002126:	1a5b      	subs	r3, r3, r1
 8002128:	42ab      	cmp	r3, r5
 800212a:	dcf2      	bgt.n	8002112 <_printf_i+0x21e>
 800212c:	e7eb      	b.n	8002106 <_printf_i+0x212>
 800212e:	2500      	movs	r5, #0
 8002130:	f104 0619 	add.w	r6, r4, #25
 8002134:	e7f5      	b.n	8002122 <_printf_i+0x22e>
 8002136:	bf00      	nop
 8002138:	0800254d 	.word	0x0800254d
 800213c:	0800255e 	.word	0x0800255e

08002140 <_putc_r>:
 8002140:	b570      	push	{r4, r5, r6, lr}
 8002142:	460d      	mov	r5, r1
 8002144:	4614      	mov	r4, r2
 8002146:	4606      	mov	r6, r0
 8002148:	b118      	cbz	r0, 8002152 <_putc_r+0x12>
 800214a:	6983      	ldr	r3, [r0, #24]
 800214c:	b90b      	cbnz	r3, 8002152 <_putc_r+0x12>
 800214e:	f7ff fb1b 	bl	8001788 <__sinit>
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <_putc_r+0x84>)
 8002154:	429c      	cmp	r4, r3
 8002156:	d124      	bne.n	80021a2 <_putc_r+0x62>
 8002158:	6874      	ldr	r4, [r6, #4]
 800215a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800215c:	07d8      	lsls	r0, r3, #31
 800215e:	d405      	bmi.n	800216c <_putc_r+0x2c>
 8002160:	89a3      	ldrh	r3, [r4, #12]
 8002162:	0599      	lsls	r1, r3, #22
 8002164:	d402      	bmi.n	800216c <_putc_r+0x2c>
 8002166:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002168:	f7ff fbac 	bl	80018c4 <__retarget_lock_acquire_recursive>
 800216c:	68a3      	ldr	r3, [r4, #8]
 800216e:	3b01      	subs	r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	60a3      	str	r3, [r4, #8]
 8002174:	da05      	bge.n	8002182 <_putc_r+0x42>
 8002176:	69a2      	ldr	r2, [r4, #24]
 8002178:	4293      	cmp	r3, r2
 800217a:	db1c      	blt.n	80021b6 <_putc_r+0x76>
 800217c:	b2eb      	uxtb	r3, r5
 800217e:	2b0a      	cmp	r3, #10
 8002180:	d019      	beq.n	80021b6 <_putc_r+0x76>
 8002182:	6823      	ldr	r3, [r4, #0]
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	6022      	str	r2, [r4, #0]
 8002188:	701d      	strb	r5, [r3, #0]
 800218a:	b2ed      	uxtb	r5, r5
 800218c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800218e:	07da      	lsls	r2, r3, #31
 8002190:	d405      	bmi.n	800219e <_putc_r+0x5e>
 8002192:	89a3      	ldrh	r3, [r4, #12]
 8002194:	059b      	lsls	r3, r3, #22
 8002196:	d402      	bmi.n	800219e <_putc_r+0x5e>
 8002198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800219a:	f7ff fb94 	bl	80018c6 <__retarget_lock_release_recursive>
 800219e:	4628      	mov	r0, r5
 80021a0:	bd70      	pop	{r4, r5, r6, pc}
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <_putc_r+0x88>)
 80021a4:	429c      	cmp	r4, r3
 80021a6:	d101      	bne.n	80021ac <_putc_r+0x6c>
 80021a8:	68b4      	ldr	r4, [r6, #8]
 80021aa:	e7d6      	b.n	800215a <_putc_r+0x1a>
 80021ac:	4b07      	ldr	r3, [pc, #28]	; (80021cc <_putc_r+0x8c>)
 80021ae:	429c      	cmp	r4, r3
 80021b0:	bf08      	it	eq
 80021b2:	68f4      	ldreq	r4, [r6, #12]
 80021b4:	e7d1      	b.n	800215a <_putc_r+0x1a>
 80021b6:	4629      	mov	r1, r5
 80021b8:	4622      	mov	r2, r4
 80021ba:	4630      	mov	r0, r6
 80021bc:	f000 f85c 	bl	8002278 <__swbuf_r>
 80021c0:	4605      	mov	r5, r0
 80021c2:	e7e3      	b.n	800218c <_putc_r+0x4c>
 80021c4:	080024fc 	.word	0x080024fc
 80021c8:	0800251c 	.word	0x0800251c
 80021cc:	080024dc 	.word	0x080024dc

080021d0 <_sbrk_r>:
 80021d0:	b538      	push	{r3, r4, r5, lr}
 80021d2:	4d06      	ldr	r5, [pc, #24]	; (80021ec <_sbrk_r+0x1c>)
 80021d4:	2300      	movs	r3, #0
 80021d6:	4604      	mov	r4, r0
 80021d8:	4608      	mov	r0, r1
 80021da:	602b      	str	r3, [r5, #0]
 80021dc:	f7fe ffa2 	bl	8001124 <_sbrk>
 80021e0:	1c43      	adds	r3, r0, #1
 80021e2:	d102      	bne.n	80021ea <_sbrk_r+0x1a>
 80021e4:	682b      	ldr	r3, [r5, #0]
 80021e6:	b103      	cbz	r3, 80021ea <_sbrk_r+0x1a>
 80021e8:	6023      	str	r3, [r4, #0]
 80021ea:	bd38      	pop	{r3, r4, r5, pc}
 80021ec:	200001c0 	.word	0x200001c0

080021f0 <__sread>:
 80021f0:	b510      	push	{r4, lr}
 80021f2:	460c      	mov	r4, r1
 80021f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021f8:	f000 f94e 	bl	8002498 <_read_r>
 80021fc:	2800      	cmp	r0, #0
 80021fe:	bfab      	itete	ge
 8002200:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002202:	89a3      	ldrhlt	r3, [r4, #12]
 8002204:	181b      	addge	r3, r3, r0
 8002206:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800220a:	bfac      	ite	ge
 800220c:	6563      	strge	r3, [r4, #84]	; 0x54
 800220e:	81a3      	strhlt	r3, [r4, #12]
 8002210:	bd10      	pop	{r4, pc}

08002212 <__swrite>:
 8002212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002216:	461f      	mov	r7, r3
 8002218:	898b      	ldrh	r3, [r1, #12]
 800221a:	05db      	lsls	r3, r3, #23
 800221c:	4605      	mov	r5, r0
 800221e:	460c      	mov	r4, r1
 8002220:	4616      	mov	r6, r2
 8002222:	d505      	bpl.n	8002230 <__swrite+0x1e>
 8002224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002228:	2302      	movs	r3, #2
 800222a:	2200      	movs	r2, #0
 800222c:	f000 f916 	bl	800245c <_lseek_r>
 8002230:	89a3      	ldrh	r3, [r4, #12]
 8002232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002236:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800223a:	81a3      	strh	r3, [r4, #12]
 800223c:	4632      	mov	r2, r6
 800223e:	463b      	mov	r3, r7
 8002240:	4628      	mov	r0, r5
 8002242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002246:	f7fe bc1d 	b.w	8000a84 <_write_r>

0800224a <__sseek>:
 800224a:	b510      	push	{r4, lr}
 800224c:	460c      	mov	r4, r1
 800224e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002252:	f000 f903 	bl	800245c <_lseek_r>
 8002256:	1c43      	adds	r3, r0, #1
 8002258:	89a3      	ldrh	r3, [r4, #12]
 800225a:	bf15      	itete	ne
 800225c:	6560      	strne	r0, [r4, #84]	; 0x54
 800225e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002262:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002266:	81a3      	strheq	r3, [r4, #12]
 8002268:	bf18      	it	ne
 800226a:	81a3      	strhne	r3, [r4, #12]
 800226c:	bd10      	pop	{r4, pc}

0800226e <__sclose>:
 800226e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002272:	f000 b8c1 	b.w	80023f8 <_close_r>
	...

08002278 <__swbuf_r>:
 8002278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800227a:	460e      	mov	r6, r1
 800227c:	4614      	mov	r4, r2
 800227e:	4605      	mov	r5, r0
 8002280:	b118      	cbz	r0, 800228a <__swbuf_r+0x12>
 8002282:	6983      	ldr	r3, [r0, #24]
 8002284:	b90b      	cbnz	r3, 800228a <__swbuf_r+0x12>
 8002286:	f7ff fa7f 	bl	8001788 <__sinit>
 800228a:	4b21      	ldr	r3, [pc, #132]	; (8002310 <__swbuf_r+0x98>)
 800228c:	429c      	cmp	r4, r3
 800228e:	d12b      	bne.n	80022e8 <__swbuf_r+0x70>
 8002290:	686c      	ldr	r4, [r5, #4]
 8002292:	69a3      	ldr	r3, [r4, #24]
 8002294:	60a3      	str	r3, [r4, #8]
 8002296:	89a3      	ldrh	r3, [r4, #12]
 8002298:	071a      	lsls	r2, r3, #28
 800229a:	d52f      	bpl.n	80022fc <__swbuf_r+0x84>
 800229c:	6923      	ldr	r3, [r4, #16]
 800229e:	b36b      	cbz	r3, 80022fc <__swbuf_r+0x84>
 80022a0:	6923      	ldr	r3, [r4, #16]
 80022a2:	6820      	ldr	r0, [r4, #0]
 80022a4:	1ac0      	subs	r0, r0, r3
 80022a6:	6963      	ldr	r3, [r4, #20]
 80022a8:	b2f6      	uxtb	r6, r6
 80022aa:	4283      	cmp	r3, r0
 80022ac:	4637      	mov	r7, r6
 80022ae:	dc04      	bgt.n	80022ba <__swbuf_r+0x42>
 80022b0:	4621      	mov	r1, r4
 80022b2:	4628      	mov	r0, r5
 80022b4:	f7ff f9d4 	bl	8001660 <_fflush_r>
 80022b8:	bb30      	cbnz	r0, 8002308 <__swbuf_r+0x90>
 80022ba:	68a3      	ldr	r3, [r4, #8]
 80022bc:	3b01      	subs	r3, #1
 80022be:	60a3      	str	r3, [r4, #8]
 80022c0:	6823      	ldr	r3, [r4, #0]
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	6022      	str	r2, [r4, #0]
 80022c6:	701e      	strb	r6, [r3, #0]
 80022c8:	6963      	ldr	r3, [r4, #20]
 80022ca:	3001      	adds	r0, #1
 80022cc:	4283      	cmp	r3, r0
 80022ce:	d004      	beq.n	80022da <__swbuf_r+0x62>
 80022d0:	89a3      	ldrh	r3, [r4, #12]
 80022d2:	07db      	lsls	r3, r3, #31
 80022d4:	d506      	bpl.n	80022e4 <__swbuf_r+0x6c>
 80022d6:	2e0a      	cmp	r6, #10
 80022d8:	d104      	bne.n	80022e4 <__swbuf_r+0x6c>
 80022da:	4621      	mov	r1, r4
 80022dc:	4628      	mov	r0, r5
 80022de:	f7ff f9bf 	bl	8001660 <_fflush_r>
 80022e2:	b988      	cbnz	r0, 8002308 <__swbuf_r+0x90>
 80022e4:	4638      	mov	r0, r7
 80022e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022e8:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <__swbuf_r+0x9c>)
 80022ea:	429c      	cmp	r4, r3
 80022ec:	d101      	bne.n	80022f2 <__swbuf_r+0x7a>
 80022ee:	68ac      	ldr	r4, [r5, #8]
 80022f0:	e7cf      	b.n	8002292 <__swbuf_r+0x1a>
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <__swbuf_r+0xa0>)
 80022f4:	429c      	cmp	r4, r3
 80022f6:	bf08      	it	eq
 80022f8:	68ec      	ldreq	r4, [r5, #12]
 80022fa:	e7ca      	b.n	8002292 <__swbuf_r+0x1a>
 80022fc:	4621      	mov	r1, r4
 80022fe:	4628      	mov	r0, r5
 8002300:	f000 f80c 	bl	800231c <__swsetup_r>
 8002304:	2800      	cmp	r0, #0
 8002306:	d0cb      	beq.n	80022a0 <__swbuf_r+0x28>
 8002308:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800230c:	e7ea      	b.n	80022e4 <__swbuf_r+0x6c>
 800230e:	bf00      	nop
 8002310:	080024fc 	.word	0x080024fc
 8002314:	0800251c 	.word	0x0800251c
 8002318:	080024dc 	.word	0x080024dc

0800231c <__swsetup_r>:
 800231c:	4b32      	ldr	r3, [pc, #200]	; (80023e8 <__swsetup_r+0xcc>)
 800231e:	b570      	push	{r4, r5, r6, lr}
 8002320:	681d      	ldr	r5, [r3, #0]
 8002322:	4606      	mov	r6, r0
 8002324:	460c      	mov	r4, r1
 8002326:	b125      	cbz	r5, 8002332 <__swsetup_r+0x16>
 8002328:	69ab      	ldr	r3, [r5, #24]
 800232a:	b913      	cbnz	r3, 8002332 <__swsetup_r+0x16>
 800232c:	4628      	mov	r0, r5
 800232e:	f7ff fa2b 	bl	8001788 <__sinit>
 8002332:	4b2e      	ldr	r3, [pc, #184]	; (80023ec <__swsetup_r+0xd0>)
 8002334:	429c      	cmp	r4, r3
 8002336:	d10f      	bne.n	8002358 <__swsetup_r+0x3c>
 8002338:	686c      	ldr	r4, [r5, #4]
 800233a:	89a3      	ldrh	r3, [r4, #12]
 800233c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002340:	0719      	lsls	r1, r3, #28
 8002342:	d42c      	bmi.n	800239e <__swsetup_r+0x82>
 8002344:	06dd      	lsls	r5, r3, #27
 8002346:	d411      	bmi.n	800236c <__swsetup_r+0x50>
 8002348:	2309      	movs	r3, #9
 800234a:	6033      	str	r3, [r6, #0]
 800234c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002350:	81a3      	strh	r3, [r4, #12]
 8002352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002356:	e03e      	b.n	80023d6 <__swsetup_r+0xba>
 8002358:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <__swsetup_r+0xd4>)
 800235a:	429c      	cmp	r4, r3
 800235c:	d101      	bne.n	8002362 <__swsetup_r+0x46>
 800235e:	68ac      	ldr	r4, [r5, #8]
 8002360:	e7eb      	b.n	800233a <__swsetup_r+0x1e>
 8002362:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <__swsetup_r+0xd8>)
 8002364:	429c      	cmp	r4, r3
 8002366:	bf08      	it	eq
 8002368:	68ec      	ldreq	r4, [r5, #12]
 800236a:	e7e6      	b.n	800233a <__swsetup_r+0x1e>
 800236c:	0758      	lsls	r0, r3, #29
 800236e:	d512      	bpl.n	8002396 <__swsetup_r+0x7a>
 8002370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002372:	b141      	cbz	r1, 8002386 <__swsetup_r+0x6a>
 8002374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002378:	4299      	cmp	r1, r3
 800237a:	d002      	beq.n	8002382 <__swsetup_r+0x66>
 800237c:	4630      	mov	r0, r6
 800237e:	f7ff fb11 	bl	80019a4 <_free_r>
 8002382:	2300      	movs	r3, #0
 8002384:	6363      	str	r3, [r4, #52]	; 0x34
 8002386:	89a3      	ldrh	r3, [r4, #12]
 8002388:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800238c:	81a3      	strh	r3, [r4, #12]
 800238e:	2300      	movs	r3, #0
 8002390:	6063      	str	r3, [r4, #4]
 8002392:	6923      	ldr	r3, [r4, #16]
 8002394:	6023      	str	r3, [r4, #0]
 8002396:	89a3      	ldrh	r3, [r4, #12]
 8002398:	f043 0308 	orr.w	r3, r3, #8
 800239c:	81a3      	strh	r3, [r4, #12]
 800239e:	6923      	ldr	r3, [r4, #16]
 80023a0:	b94b      	cbnz	r3, 80023b6 <__swsetup_r+0x9a>
 80023a2:	89a3      	ldrh	r3, [r4, #12]
 80023a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80023a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ac:	d003      	beq.n	80023b6 <__swsetup_r+0x9a>
 80023ae:	4621      	mov	r1, r4
 80023b0:	4630      	mov	r0, r6
 80023b2:	f7ff faaf 	bl	8001914 <__smakebuf_r>
 80023b6:	89a0      	ldrh	r0, [r4, #12]
 80023b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80023bc:	f010 0301 	ands.w	r3, r0, #1
 80023c0:	d00a      	beq.n	80023d8 <__swsetup_r+0xbc>
 80023c2:	2300      	movs	r3, #0
 80023c4:	60a3      	str	r3, [r4, #8]
 80023c6:	6963      	ldr	r3, [r4, #20]
 80023c8:	425b      	negs	r3, r3
 80023ca:	61a3      	str	r3, [r4, #24]
 80023cc:	6923      	ldr	r3, [r4, #16]
 80023ce:	b943      	cbnz	r3, 80023e2 <__swsetup_r+0xc6>
 80023d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80023d4:	d1ba      	bne.n	800234c <__swsetup_r+0x30>
 80023d6:	bd70      	pop	{r4, r5, r6, pc}
 80023d8:	0781      	lsls	r1, r0, #30
 80023da:	bf58      	it	pl
 80023dc:	6963      	ldrpl	r3, [r4, #20]
 80023de:	60a3      	str	r3, [r4, #8]
 80023e0:	e7f4      	b.n	80023cc <__swsetup_r+0xb0>
 80023e2:	2000      	movs	r0, #0
 80023e4:	e7f7      	b.n	80023d6 <__swsetup_r+0xba>
 80023e6:	bf00      	nop
 80023e8:	2000002c 	.word	0x2000002c
 80023ec:	080024fc 	.word	0x080024fc
 80023f0:	0800251c 	.word	0x0800251c
 80023f4:	080024dc 	.word	0x080024dc

080023f8 <_close_r>:
 80023f8:	b538      	push	{r3, r4, r5, lr}
 80023fa:	4d06      	ldr	r5, [pc, #24]	; (8002414 <_close_r+0x1c>)
 80023fc:	2300      	movs	r3, #0
 80023fe:	4604      	mov	r4, r0
 8002400:	4608      	mov	r0, r1
 8002402:	602b      	str	r3, [r5, #0]
 8002404:	f7fe fe59 	bl	80010ba <_close>
 8002408:	1c43      	adds	r3, r0, #1
 800240a:	d102      	bne.n	8002412 <_close_r+0x1a>
 800240c:	682b      	ldr	r3, [r5, #0]
 800240e:	b103      	cbz	r3, 8002412 <_close_r+0x1a>
 8002410:	6023      	str	r3, [r4, #0]
 8002412:	bd38      	pop	{r3, r4, r5, pc}
 8002414:	200001c0 	.word	0x200001c0

08002418 <_fstat_r>:
 8002418:	b538      	push	{r3, r4, r5, lr}
 800241a:	4d07      	ldr	r5, [pc, #28]	; (8002438 <_fstat_r+0x20>)
 800241c:	2300      	movs	r3, #0
 800241e:	4604      	mov	r4, r0
 8002420:	4608      	mov	r0, r1
 8002422:	4611      	mov	r1, r2
 8002424:	602b      	str	r3, [r5, #0]
 8002426:	f7fe fe54 	bl	80010d2 <_fstat>
 800242a:	1c43      	adds	r3, r0, #1
 800242c:	d102      	bne.n	8002434 <_fstat_r+0x1c>
 800242e:	682b      	ldr	r3, [r5, #0]
 8002430:	b103      	cbz	r3, 8002434 <_fstat_r+0x1c>
 8002432:	6023      	str	r3, [r4, #0]
 8002434:	bd38      	pop	{r3, r4, r5, pc}
 8002436:	bf00      	nop
 8002438:	200001c0 	.word	0x200001c0

0800243c <_isatty_r>:
 800243c:	b538      	push	{r3, r4, r5, lr}
 800243e:	4d06      	ldr	r5, [pc, #24]	; (8002458 <_isatty_r+0x1c>)
 8002440:	2300      	movs	r3, #0
 8002442:	4604      	mov	r4, r0
 8002444:	4608      	mov	r0, r1
 8002446:	602b      	str	r3, [r5, #0]
 8002448:	f7fe fe53 	bl	80010f2 <_isatty>
 800244c:	1c43      	adds	r3, r0, #1
 800244e:	d102      	bne.n	8002456 <_isatty_r+0x1a>
 8002450:	682b      	ldr	r3, [r5, #0]
 8002452:	b103      	cbz	r3, 8002456 <_isatty_r+0x1a>
 8002454:	6023      	str	r3, [r4, #0]
 8002456:	bd38      	pop	{r3, r4, r5, pc}
 8002458:	200001c0 	.word	0x200001c0

0800245c <_lseek_r>:
 800245c:	b538      	push	{r3, r4, r5, lr}
 800245e:	4d07      	ldr	r5, [pc, #28]	; (800247c <_lseek_r+0x20>)
 8002460:	4604      	mov	r4, r0
 8002462:	4608      	mov	r0, r1
 8002464:	4611      	mov	r1, r2
 8002466:	2200      	movs	r2, #0
 8002468:	602a      	str	r2, [r5, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	f7fe fe4c 	bl	8001108 <_lseek>
 8002470:	1c43      	adds	r3, r0, #1
 8002472:	d102      	bne.n	800247a <_lseek_r+0x1e>
 8002474:	682b      	ldr	r3, [r5, #0]
 8002476:	b103      	cbz	r3, 800247a <_lseek_r+0x1e>
 8002478:	6023      	str	r3, [r4, #0]
 800247a:	bd38      	pop	{r3, r4, r5, pc}
 800247c:	200001c0 	.word	0x200001c0

08002480 <__malloc_lock>:
 8002480:	4801      	ldr	r0, [pc, #4]	; (8002488 <__malloc_lock+0x8>)
 8002482:	f7ff ba1f 	b.w	80018c4 <__retarget_lock_acquire_recursive>
 8002486:	bf00      	nop
 8002488:	200001b4 	.word	0x200001b4

0800248c <__malloc_unlock>:
 800248c:	4801      	ldr	r0, [pc, #4]	; (8002494 <__malloc_unlock+0x8>)
 800248e:	f7ff ba1a 	b.w	80018c6 <__retarget_lock_release_recursive>
 8002492:	bf00      	nop
 8002494:	200001b4 	.word	0x200001b4

08002498 <_read_r>:
 8002498:	b538      	push	{r3, r4, r5, lr}
 800249a:	4d07      	ldr	r5, [pc, #28]	; (80024b8 <_read_r+0x20>)
 800249c:	4604      	mov	r4, r0
 800249e:	4608      	mov	r0, r1
 80024a0:	4611      	mov	r1, r2
 80024a2:	2200      	movs	r2, #0
 80024a4:	602a      	str	r2, [r5, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	f7fe fdea 	bl	8001080 <_read>
 80024ac:	1c43      	adds	r3, r0, #1
 80024ae:	d102      	bne.n	80024b6 <_read_r+0x1e>
 80024b0:	682b      	ldr	r3, [r5, #0]
 80024b2:	b103      	cbz	r3, 80024b6 <_read_r+0x1e>
 80024b4:	6023      	str	r3, [r4, #0]
 80024b6:	bd38      	pop	{r3, r4, r5, pc}
 80024b8:	200001c0 	.word	0x200001c0

080024bc <_init>:
 80024bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024be:	bf00      	nop
 80024c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024c2:	bc08      	pop	{r3}
 80024c4:	469e      	mov	lr, r3
 80024c6:	4770      	bx	lr

080024c8 <_fini>:
 80024c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ca:	bf00      	nop
 80024cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ce:	bc08      	pop	{r3}
 80024d0:	469e      	mov	lr, r3
 80024d2:	4770      	bx	lr
