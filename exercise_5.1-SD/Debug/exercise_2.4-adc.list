
exercise_2.4-adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08003838  08003838  00013838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b30  08003b30  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08003b30  08003b30  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b30  08003b30  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b30  08003b30  00013b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b34  08003b34  00013b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000090  08003bc8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08003bc8  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e5b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017a9  00000000  00000000  00029f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  0002b6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  0002c358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001124c  00000000  00000000  0002cf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009cc2  00000000  00000000  0003e174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005c10c  00000000  00000000  00047e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a3f42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000422c  00000000  00000000  000a3f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003820 	.word	0x08003820

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08003820 	.word	0x08003820

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_AUTOINJECMODE(ADC_InitStruct->ADC_AutoInjMode));
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfRegChannel));

  /*---------------------------- ADCx CFGR Configuration -----------------*/
  /* Get the ADCx CFGR value */
  tmpreg1 = ADCx->CFGR;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	68db      	ldr	r3, [r3, #12]
 8000282:	60fb      	str	r3, [r7, #12]
  /* Clear SCAN bit */
  tmpreg1 &= CFGR_CLEAR_Mask; 
 8000284:	68fa      	ldr	r2, [r7, #12]
 8000286:	4b1a      	ldr	r3, [pc, #104]	; (80002f0 <ADC_Init+0x80>)
 8000288:	4013      	ands	r3, r2
 800028a:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	681a      	ldr	r2, [r3, #0]
  ADC_InitStruct->ADC_Resolution|                 
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 8000294:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	689b      	ldr	r3, [r3, #8]
  ADC_InitStruct->ADC_Resolution|                 
 800029a:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	68db      	ldr	r3, [r3, #12]
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
 80002a0:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_DataAlign|                 
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	691b      	ldr	r3, [r3, #16]
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
 80002a6:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_OverrunMode|        
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	695b      	ldr	r3, [r3, #20]
  ADC_InitStruct->ADC_DataAlign|                 
 80002ac:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_AutoInjMode;
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	699b      	ldr	r3, [r3, #24]
  ADC_InitStruct->ADC_OverrunMode|        
 80002b2:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 80002b4:	68fa      	ldr	r2, [r7, #12]
 80002b6:	4313      	orrs	r3, r2
 80002b8:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx CFGR */
  ADCx->CFGR = tmpreg1;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	68fa      	ldr	r2, [r7, #12]
 80002be:	60da      	str	r2, [r3, #12]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c4:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= ~(uint32_t)(ADC_SQR1_L);
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	f023 030f 	bic.w	r3, r3, #15
 80002cc:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfRegChannel value */
  tmpreg1 |= (uint32_t) (ADC_InitStruct->ADC_NbrOfRegChannel - 1);
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	7f1b      	ldrb	r3, [r3, #28]
 80002d2:	3b01      	subs	r3, #1
 80002d4:	461a      	mov	r2, r3
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	4313      	orrs	r3, r2
 80002da:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1; 
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	68fa      	ldr	r2, [r7, #12]
 80002e0:	631a      	str	r2, [r3, #48]	; 0x30
   
}  
 80002e2:	bf00      	nop
 80002e4:	3714      	adds	r7, #20
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	fdffc007 	.word	0xfdffc007

080002f4 <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;                 
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2200      	movs	r2, #0
 8000306:	605a      	str	r2, [r3, #4]
  ADC_InitStruct->ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;         
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  ADC_InitStruct->ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;                 
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	2200      	movs	r2, #0
 8000318:	611a      	str	r2, [r3, #16]
  ADC_InitStruct->ADC_OverrunMode = DISABLE;   
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2200      	movs	r2, #0
 800031e:	615a      	str	r2, [r3, #20]
  ADC_InitStruct->ADC_AutoInjMode = DISABLE;  
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	2200      	movs	r2, #0
 8000324:	619a      	str	r2, [r3, #24]
  ADC_InitStruct->ADC_NbrOfRegChannel = 1; 
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	2201      	movs	r2, #1
 800032a:	771a      	strb	r2, [r3, #28]
}
 800032c:	bf00      	nop
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	460b      	mov	r3, r1
 8000342:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000344:	78fb      	ldrb	r3, [r7, #3]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d006      	beq.n	8000358 <ADC_Cmd+0x20>
  {
    /* Set the ADEN bit */
    ADCx->CR |= ADC_CR_ADEN;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	689b      	ldr	r3, [r3, #8]
 800034e:	f043 0201 	orr.w	r2, r3, #1
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral: Set the ADDIS bit */
    ADCx->CR |= ADC_CR_ADDIS;
  }
}
 8000356:	e005      	b.n	8000364 <ADC_Cmd+0x2c>
    ADCx->CR |= ADC_CR_ADDIS;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	f043 0202 	orr.w	r2, r3, #2
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	609a      	str	r2, [r3, #8]
}
 8000364:	bf00      	nop
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr

08000370 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADCAL bit */
  ADCx->CR |= ADC_CR_ADCAL;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	689b      	ldr	r3, [r3, #8]
 800037c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	609a      	str	r2, [r3, #8]
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr

08000390 <ADC_SelectCalibrationMode>:
  *          @arg ADC_CalibrationMode_Single: to select the calibration for single channel
  *          @arg ADC_CalibrationMode_Differential: to select the calibration for differential channel         
  * @retval None
  */
void ADC_SelectCalibrationMode(ADC_TypeDef* ADCx, uint32_t ADC_CalibrationMode)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CALIBRATION_MODE(ADC_CalibrationMode));
  /* Set or Reset the ADCALDIF bit */
  ADCx->CR &= (~ADC_CR_ADCALDIF);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	689b      	ldr	r3, [r3, #8]
 800039e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	609a      	str	r2, [r3, #8]
  ADCx->CR |= ADC_CalibrationMode;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	689a      	ldr	r2, [r3, #8]
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	431a      	orrs	r2, r3
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	609a      	str	r2, [r3, #8]

}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 80003be:	b480      	push	{r7}
 80003c0:	b085      	sub	sp, #20
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80003c6:	2300      	movs	r3, #0
 80003c8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR & ADC_CR_ADCAL) != (uint32_t)RESET)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	689b      	ldr	r3, [r3, #8]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	da02      	bge.n	80003d8 <ADC_GetCalibrationStatus+0x1a>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 80003d2:	2301      	movs	r3, #1
 80003d4:	73fb      	strb	r3, [r7, #15]
 80003d6:	e001      	b.n	80003dc <ADC_GetCalibrationStatus+0x1e>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 80003d8:	2300      	movs	r3, #0
 80003da:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 80003dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr

080003ea <ADC_VoltageRegulatorCmd>:
  * @param  NewState: new state of the ADCx Voltage Regulator.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VoltageRegulatorCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80003ea:	b480      	push	{r7}
 80003ec:	b083      	sub	sp, #12
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	6078      	str	r0, [r7, #4]
 80003f2:	460b      	mov	r3, r1
 80003f4:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* set the intermediate state before moving the ADC voltage regulator 
  from enable state to disable state or from disable state to enable state */
  ADCx->CR &= ~(ADC_CR_ADVREGEN);
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	689b      	ldr	r3, [r3, #8]
 80003fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	609a      	str	r2, [r3, #8]
  
  if (NewState != DISABLE)
 8000402:	78fb      	ldrb	r3, [r7, #3]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d006      	beq.n	8000416 <ADC_VoltageRegulatorCmd+0x2c>
  {
    /* Set the ADVREGEN bit 0 */
    ADCx->CR |= ADC_CR_ADVREGEN_0;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	689b      	ldr	r3, [r3, #8]
 800040c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	609a      	str	r2, [r3, #8]
  else
  {
    /* Set the ADVREGEN bit 1 */
    ADCx->CR |=ADC_CR_ADVREGEN_1;
  }
}
 8000414:	e005      	b.n	8000422 <ADC_VoltageRegulatorCmd+0x38>
    ADCx->CR |=ADC_CR_ADVREGEN_1;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	609a      	str	r2, [r3, #8]
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr

0800042e <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800042e:	b480      	push	{r7}
 8000430:	b085      	sub	sp, #20
 8000432:	af00      	add	r7, sp, #0
 8000434:	6078      	str	r0, [r7, #4]
 8000436:	4608      	mov	r0, r1
 8000438:	4611      	mov	r1, r2
 800043a:	461a      	mov	r2, r3
 800043c:	4603      	mov	r3, r0
 800043e:	70fb      	strb	r3, [r7, #3]
 8000440:	460b      	mov	r3, r1
 8000442:	70bb      	strb	r3, [r7, #2]
 8000444:	4613      	mov	r3, r2
 8000446:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	2300      	movs	r3, #0
 800044e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 8000450:	78bb      	ldrb	r3, [r7, #2]
 8000452:	2b04      	cmp	r3, #4
 8000454:	d821      	bhi.n	800049a <ADC_RegularChannelConfig+0x6c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 800045c:	78ba      	ldrb	r2, [r7, #2]
 800045e:	4613      	mov	r3, r2
 8000460:	005b      	lsls	r3, r3, #1
 8000462:	4413      	add	r3, r2
 8000464:	005b      	lsls	r3, r3, #1
 8000466:	461a      	mov	r2, r3
 8000468:	231f      	movs	r3, #31
 800046a:	4093      	lsls	r3, r2
 800046c:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	43db      	mvns	r3, r3
 8000472:	68fa      	ldr	r2, [r7, #12]
 8000474:	4013      	ands	r3, r2
 8000476:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 8000478:	78f9      	ldrb	r1, [r7, #3]
 800047a:	78ba      	ldrb	r2, [r7, #2]
 800047c:	4613      	mov	r3, r2
 800047e:	005b      	lsls	r3, r3, #1
 8000480:	4413      	add	r3, r2
 8000482:	005b      	lsls	r3, r3, #1
 8000484:	fa01 f303 	lsl.w	r3, r1, r3
 8000488:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800048a:	68fa      	ldr	r2, [r7, #12]
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	4313      	orrs	r3, r2
 8000490:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	68fa      	ldr	r2, [r7, #12]
 8000496:	631a      	str	r2, [r3, #48]	; 0x30
 8000498:	e074      	b.n	8000584 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 800049a:	78bb      	ldrb	r3, [r7, #2]
 800049c:	2b09      	cmp	r3, #9
 800049e:	d823      	bhi.n	80004e8 <ADC_RegularChannelConfig+0xba>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004a4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 80004a6:	78bb      	ldrb	r3, [r7, #2]
 80004a8:	1f5a      	subs	r2, r3, #5
 80004aa:	4613      	mov	r3, r2
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	4413      	add	r3, r2
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	461a      	mov	r2, r3
 80004b4:	231f      	movs	r3, #31
 80004b6:	4093      	lsls	r3, r2
 80004b8:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	43db      	mvns	r3, r3
 80004be:	68fa      	ldr	r2, [r7, #12]
 80004c0:	4013      	ands	r3, r2
 80004c2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 80004c4:	78f9      	ldrb	r1, [r7, #3]
 80004c6:	78bb      	ldrb	r3, [r7, #2]
 80004c8:	1f5a      	subs	r2, r3, #5
 80004ca:	4613      	mov	r3, r2
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	4413      	add	r3, r2
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80004d8:	68fa      	ldr	r2, [r7, #12]
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4313      	orrs	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	635a      	str	r2, [r3, #52]	; 0x34
 80004e6:	e04d      	b.n	8000584 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 80004e8:	78bb      	ldrb	r3, [r7, #2]
 80004ea:	2b0e      	cmp	r3, #14
 80004ec:	d825      	bhi.n	800053a <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004f2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 80004f4:	78bb      	ldrb	r3, [r7, #2]
 80004f6:	f1a3 020a 	sub.w	r2, r3, #10
 80004fa:	4613      	mov	r3, r2
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	4413      	add	r3, r2
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	461a      	mov	r2, r3
 8000504:	231f      	movs	r3, #31
 8000506:	4093      	lsls	r3, r2
 8000508:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	43db      	mvns	r3, r3
 800050e:	68fa      	ldr	r2, [r7, #12]
 8000510:	4013      	ands	r3, r2
 8000512:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 8000514:	78f9      	ldrb	r1, [r7, #3]
 8000516:	78bb      	ldrb	r3, [r7, #2]
 8000518:	f1a3 020a 	sub.w	r2, r3, #10
 800051c:	4613      	mov	r3, r2
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	4413      	add	r3, r2
 8000522:	005b      	lsls	r3, r3, #1
 8000524:	fa01 f303 	lsl.w	r3, r1, r3
 8000528:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800052a:	68fa      	ldr	r2, [r7, #12]
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	4313      	orrs	r3, r2
 8000530:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	68fa      	ldr	r2, [r7, #12]
 8000536:	639a      	str	r2, [r3, #56]	; 0x38
 8000538:	e024      	b.n	8000584 <ADC_RegularChannelConfig+0x156>
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800053e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 8000540:	78bb      	ldrb	r3, [r7, #2]
 8000542:	f1a3 020f 	sub.w	r2, r3, #15
 8000546:	4613      	mov	r3, r2
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	4413      	add	r3, r2
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	461a      	mov	r2, r3
 8000550:	231f      	movs	r3, #31
 8000552:	4093      	lsls	r3, r2
 8000554:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	43db      	mvns	r3, r3
 800055a:	68fa      	ldr	r2, [r7, #12]
 800055c:	4013      	ands	r3, r2
 800055e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 8000560:	78f9      	ldrb	r1, [r7, #3]
 8000562:	78bb      	ldrb	r3, [r7, #2]
 8000564:	f1a3 020f 	sub.w	r2, r3, #15
 8000568:	4613      	mov	r3, r2
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	4413      	add	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	fa01 f303 	lsl.w	r3, r1, r3
 8000574:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000576:	68fa      	ldr	r2, [r7, #12]
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	4313      	orrs	r3, r2
 800057c:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	68fa      	ldr	r2, [r7, #12]
 8000582:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000584:	78fb      	ldrb	r3, [r7, #3]
 8000586:	2b09      	cmp	r3, #9
 8000588:	d923      	bls.n	80005d2 <ADC_RegularChannelConfig+0x1a4>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 8000590:	78fb      	ldrb	r3, [r7, #3]
 8000592:	f1a3 020a 	sub.w	r2, r3, #10
 8000596:	4613      	mov	r3, r2
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	4413      	add	r3, r2
 800059c:	2207      	movs	r2, #7
 800059e:	fa02 f303 	lsl.w	r3, r2, r3
 80005a2:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	699a      	ldr	r2, [r3, #24]
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	43db      	mvns	r3, r3
 80005ac:	401a      	ands	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6999      	ldr	r1, [r3, #24]
 80005b6:	7878      	ldrb	r0, [r7, #1]
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	f1a3 020a 	sub.w	r2, r3, #10
 80005be:	4613      	mov	r3, r2
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	4413      	add	r3, r2
 80005c4:	fa00 f303 	lsl.w	r3, r0, r3
 80005c8:	ea41 0203 	orr.w	r2, r1, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	619a      	str	r2, [r3, #24]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
  }
}
 80005d0:	e01f      	b.n	8000612 <ADC_RegularChannelConfig+0x1e4>
    tmpreg1 = ADCx->SMPR1;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	60fb      	str	r3, [r7, #12]
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 80005d8:	78fb      	ldrb	r3, [r7, #3]
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	4613      	mov	r3, r2
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	4413      	add	r3, r2
 80005e2:	2238      	movs	r2, #56	; 0x38
 80005e4:	fa02 f303 	lsl.w	r3, r2, r3
 80005e8:	60bb      	str	r3, [r7, #8]
	ADCx->SMPR1 &= ~tmpreg2;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	695a      	ldr	r2, [r3, #20]
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	43db      	mvns	r3, r3
 80005f2:	401a      	ands	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	615a      	str	r2, [r3, #20]
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6959      	ldr	r1, [r3, #20]
 80005fc:	7878      	ldrb	r0, [r7, #1]
 80005fe:	78fa      	ldrb	r2, [r7, #3]
 8000600:	4613      	mov	r3, r2
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	4413      	add	r3, r2
 8000606:	fa00 f303 	lsl.w	r3, r0, r3
 800060a:	ea41 0203 	orr.w	r2, r1, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	615a      	str	r2, [r3, #20]
}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <ADC_StartConversion>:
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	f043 0204 	orr.w	r2, r3, #4
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	609a      	str	r2, [r3, #8]
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 800063e:	b480      	push	{r7}
 8000640:	b083      	sub	sp, #12
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064a:	b29b      	uxth	r3, r3
}
 800064c:	4618      	mov	r0, r3
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000662:	2300      	movs	r3, #0
 8000664:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	4013      	ands	r3, r2
 800066e:	2b00      	cmp	r3, #0
 8000670:	d002      	beq.n	8000678 <ADC_GetFlagStatus+0x20>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000672:	2301      	movs	r3, #1
 8000674:	73fb      	strb	r3, [r7, #15]
 8000676:	e001      	b.n	800067c <ADC_GetFlagStatus+0x24>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000678:	2300      	movs	r3, #0
 800067a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
}
 800067e:	4618      	mov	r0, r3
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 800068a:	b480      	push	{r7}
 800068c:	b087      	sub	sp, #28
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	e07c      	b.n	80007a0 <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80006a6:	2201      	movs	r2, #1
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	fa02 f303 	lsl.w	r3, r2, r3
 80006ae:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	693a      	ldr	r2, [r7, #16]
 80006b6:	4013      	ands	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80006ba:	68fa      	ldr	r2, [r7, #12]
 80006bc:	693b      	ldr	r3, [r7, #16]
 80006be:	429a      	cmp	r2, r3
 80006c0:	d16b      	bne.n	800079a <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	791b      	ldrb	r3, [r3, #4]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d003      	beq.n	80006d2 <GPIO_Init+0x48>
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	791b      	ldrb	r3, [r3, #4]
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	d134      	bne.n	800073c <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	689a      	ldr	r2, [r3, #8]
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	2103      	movs	r1, #3
 80006dc:	fa01 f303 	lsl.w	r3, r1, r3
 80006e0:	43db      	mvns	r3, r3
 80006e2:	401a      	ands	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	689a      	ldr	r2, [r3, #8]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	795b      	ldrb	r3, [r3, #5]
 80006f0:	4619      	mov	r1, r3
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	431a      	orrs	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	889b      	ldrh	r3, [r3, #4]
 8000704:	b29a      	uxth	r2, r3
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	b29b      	uxth	r3, r3
 800070a:	4619      	mov	r1, r3
 800070c:	2301      	movs	r3, #1
 800070e:	408b      	lsls	r3, r1
 8000710:	b29b      	uxth	r3, r3
 8000712:	43db      	mvns	r3, r3
 8000714:	b29b      	uxth	r3, r3
 8000716:	4013      	ands	r3, r2
 8000718:	b29a      	uxth	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	889b      	ldrh	r3, [r3, #4]
 8000722:	b29a      	uxth	r2, r3
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	799b      	ldrb	r3, [r3, #6]
 8000728:	4619      	mov	r1, r3
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	b29b      	uxth	r3, r3
 800072e:	fa01 f303 	lsl.w	r3, r1, r3
 8000732:	b29b      	uxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b29a      	uxth	r2, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	2103      	movs	r1, #3
 8000746:	fa01 f303 	lsl.w	r3, r1, r3
 800074a:	43db      	mvns	r3, r3
 800074c:	401a      	ands	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	791b      	ldrb	r3, [r3, #4]
 800075a:	4619      	mov	r1, r3
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	fa01 f303 	lsl.w	r3, r1, r3
 8000764:	431a      	orrs	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	68da      	ldr	r2, [r3, #12]
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	b29b      	uxth	r3, r3
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	2103      	movs	r1, #3
 8000776:	fa01 f303 	lsl.w	r3, r1, r3
 800077a:	43db      	mvns	r3, r3
 800077c:	401a      	ands	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	68da      	ldr	r2, [r3, #12]
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	79db      	ldrb	r3, [r3, #7]
 800078a:	4619      	mov	r1, r3
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	fa01 f303 	lsl.w	r3, r1, r3
 8000794:	431a      	orrs	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	3301      	adds	r3, #1
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	2b0f      	cmp	r3, #15
 80007a4:	f67f af7f 	bls.w	80006a6 <GPIO_Init+0x1c>
    }
  }
}
 80007a8:	bf00      	nop
 80007aa:	bf00      	nop
 80007ac:	371c      	adds	r7, #28
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b083      	sub	sp, #12
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2202      	movs	r2, #2
 80007d0:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	71da      	strb	r2, [r3, #7]
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
	...

080007ec <NVIC_PriorityGroupConfig>:
  *     @note When NVIC_PriorityGroup_0 is selected, it will no be any nested 
  *           interrupt. This interrupts priority is managed only with subpriority.                                    
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80007f4:	4a06      	ldr	r2, [pc, #24]	; (8000810 <NVIC_PriorityGroupConfig+0x24>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000800:	60d3      	str	r3, [r2, #12]
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000814:	b480      	push	{r7}
 8000816:	b087      	sub	sp, #28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	230f      	movs	r3, #15
 8000826:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	78db      	ldrb	r3, [r3, #3]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d03a      	beq.n	80008a6 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000830:	4b28      	ldr	r3, [pc, #160]	; (80008d4 <NVIC_Init+0xc0>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	43db      	mvns	r3, r3
 8000836:	0a1b      	lsrs	r3, r3, #8
 8000838:	f003 0307 	and.w	r3, r3, #7
 800083c:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	f1c3 0304 	rsb	r3, r3, #4
 8000844:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	fa22 f303 	lsr.w	r3, r2, r3
 800084e:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	785b      	ldrb	r3, [r3, #1]
 8000854:	461a      	mov	r2, r3
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	fa02 f303 	lsl.w	r3, r2, r3
 800085c:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	789b      	ldrb	r3, [r3, #2]
 8000862:	461a      	mov	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	4013      	ands	r3, r2
 8000868:	697a      	ldr	r2, [r7, #20]
 800086a:	4313      	orrs	r3, r2
 800086c:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	011b      	lsls	r3, r3, #4
 8000872:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000874:	4a18      	ldr	r2, [pc, #96]	; (80008d8 <NVIC_Init+0xc4>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	6979      	ldr	r1, [r7, #20]
 800087c:	b2c9      	uxtb	r1, r1
 800087e:	4413      	add	r3, r2
 8000880:	460a      	mov	r2, r1
 8000882:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800088e:	4912      	ldr	r1, [pc, #72]	; (80008d8 <NVIC_Init+0xc4>)
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	7812      	ldrb	r2, [r2, #0]
 8000894:	0952      	lsrs	r2, r2, #5
 8000896:	b2d2      	uxtb	r2, r2
 8000898:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800089a:	2201      	movs	r2, #1
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80008a0:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80008a4:	e00f      	b.n	80008c6 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80008ae:	490a      	ldr	r1, [pc, #40]	; (80008d8 <NVIC_Init+0xc4>)
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	7812      	ldrb	r2, [r2, #0]
 80008b4:	0952      	lsrs	r2, r2, #5
 80008b6:	b2d2      	uxtb	r2, r2
 80008b8:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80008ba:	2201      	movs	r2, #1
 80008bc:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80008be:	f100 0320 	add.w	r3, r0, #32
 80008c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008c6:	bf00      	nop
 80008c8:	371c      	adds	r7, #28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000ed00 	.word	0xe000ed00
 80008d8:	e000e100 	.word	0xe000e100

080008dc <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80008dc:	b480      	push	{r7}
 80008de:	b08b      	sub	sp, #44	; 0x2c
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
 80008ec:	2300      	movs	r3, #0
 80008ee:	61bb      	str	r3, [r7, #24]
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	2300      	movs	r3, #0
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000904:	4b8b      	ldr	r3, [pc, #556]	; (8000b34 <RCC_GetClocksFreq+0x258>)
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	f003 030c 	and.w	r3, r3, #12
 800090c:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 800090e:	6a3b      	ldr	r3, [r7, #32]
 8000910:	2b08      	cmp	r3, #8
 8000912:	d011      	beq.n	8000938 <RCC_GetClocksFreq+0x5c>
 8000914:	6a3b      	ldr	r3, [r7, #32]
 8000916:	2b08      	cmp	r3, #8
 8000918:	d837      	bhi.n	800098a <RCC_GetClocksFreq+0xae>
 800091a:	6a3b      	ldr	r3, [r7, #32]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d003      	beq.n	8000928 <RCC_GetClocksFreq+0x4c>
 8000920:	6a3b      	ldr	r3, [r7, #32]
 8000922:	2b04      	cmp	r3, #4
 8000924:	d004      	beq.n	8000930 <RCC_GetClocksFreq+0x54>
 8000926:	e030      	b.n	800098a <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a83      	ldr	r2, [pc, #524]	; (8000b38 <RCC_GetClocksFreq+0x25c>)
 800092c:	601a      	str	r2, [r3, #0]
      break;
 800092e:	e030      	b.n	8000992 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a81      	ldr	r2, [pc, #516]	; (8000b38 <RCC_GetClocksFreq+0x25c>)
 8000934:	601a      	str	r2, [r3, #0]
      break;
 8000936:	e02c      	b.n	8000992 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000938:	4b7e      	ldr	r3, [pc, #504]	; (8000b34 <RCC_GetClocksFreq+0x258>)
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000940:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000942:	4b7c      	ldr	r3, [pc, #496]	; (8000b34 <RCC_GetClocksFreq+0x258>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800094a:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	0c9b      	lsrs	r3, r3, #18
 8000950:	3302      	adds	r3, #2
 8000952:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d105      	bne.n	8000966 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	4a77      	ldr	r2, [pc, #476]	; (8000b3c <RCC_GetClocksFreq+0x260>)
 800095e:	fb02 f303 	mul.w	r3, r2, r3
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
 8000964:	e00d      	b.n	8000982 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000966:	4b73      	ldr	r3, [pc, #460]	; (8000b34 <RCC_GetClocksFreq+0x258>)
 8000968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	3301      	adds	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000972:	4a71      	ldr	r2, [pc, #452]	; (8000b38 <RCC_GetClocksFreq+0x25c>)
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	fbb2 f2f3 	udiv	r2, r2, r3
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000986:	601a      	str	r2, [r3, #0]
      break;
 8000988:	e003      	b.n	8000992 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a6a      	ldr	r2, [pc, #424]	; (8000b38 <RCC_GetClocksFreq+0x25c>)
 800098e:	601a      	str	r2, [r3, #0]
      break;
 8000990:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000992:	4b68      	ldr	r3, [pc, #416]	; (8000b34 <RCC_GetClocksFreq+0x258>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800099a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 800099c:	6a3b      	ldr	r3, [r7, #32]
 800099e:	091b      	lsrs	r3, r3, #4
 80009a0:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 80009a2:	4a67      	ldr	r2, [pc, #412]	; (8000b40 <RCC_GetClocksFreq+0x264>)
 80009a4:	6a3b      	ldr	r3, [r7, #32]
 80009a6:	4413      	add	r3, r2
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	40da      	lsrs	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80009ba:	4b5e      	ldr	r3, [pc, #376]	; (8000b34 <RCC_GetClocksFreq+0x258>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80009c2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 80009c4:	6a3b      	ldr	r3, [r7, #32]
 80009c6:	0a1b      	lsrs	r3, r3, #8
 80009c8:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80009ca:	4a5d      	ldr	r2, [pc, #372]	; (8000b40 <RCC_GetClocksFreq+0x264>)
 80009cc:	6a3b      	ldr	r3, [r7, #32]
 80009ce:	4413      	add	r3, r2
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	685a      	ldr	r2, [r3, #4]
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	40da      	lsrs	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80009e2:	4b54      	ldr	r3, [pc, #336]	; (8000b34 <RCC_GetClocksFreq+0x258>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80009ea:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 80009ec:	6a3b      	ldr	r3, [r7, #32]
 80009ee:	0adb      	lsrs	r3, r3, #11
 80009f0:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 80009f2:	4a53      	ldr	r2, [pc, #332]	; (8000b40 <RCC_GetClocksFreq+0x264>)
 80009f4:	6a3b      	ldr	r3, [r7, #32]
 80009f6:	4413      	add	r3, r2
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685a      	ldr	r2, [r3, #4]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	40da      	lsrs	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000a0a:	4b4a      	ldr	r3, [pc, #296]	; (8000b34 <RCC_GetClocksFreq+0x258>)
 8000a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000a12:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000a14:	6a3b      	ldr	r3, [r7, #32]
 8000a16:	091b      	lsrs	r3, r3, #4
 8000a18:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000a1a:	4a4a      	ldr	r2, [pc, #296]	; (8000b44 <RCC_GetClocksFreq+0x268>)
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
 8000a1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	f003 0310 	and.w	r3, r3, #16
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d006      	beq.n	8000a3e <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	611a      	str	r2, [r3, #16]
 8000a3c:	e003      	b.n	8000a46 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000a46:	4b3b      	ldr	r3, [pc, #236]	; (8000b34 <RCC_GetClocksFreq+0x258>)
 8000a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a4a:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8000a4e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000a50:	6a3b      	ldr	r3, [r7, #32]
 8000a52:	0a5b      	lsrs	r3, r3, #9
 8000a54:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000a56:	4a3b      	ldr	r2, [pc, #236]	; (8000b44 <RCC_GetClocksFreq+0x268>)
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	f003 0310 	and.w	r3, r3, #16
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d006      	beq.n	8000a7a <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	615a      	str	r2, [r3, #20]
 8000a78:	e003      	b.n	8000a82 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000a82:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <RCC_GetClocksFreq+0x258>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0310 	and.w	r3, r3, #16
 8000a8a:	2b10      	cmp	r3, #16
 8000a8c:	d003      	beq.n	8000a96 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a29      	ldr	r2, [pc, #164]	; (8000b38 <RCC_GetClocksFreq+0x25c>)
 8000a92:	619a      	str	r2, [r3, #24]
 8000a94:	e003      	b.n	8000a9e <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000a9e:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <RCC_GetClocksFreq+0x258>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0320 	and.w	r3, r3, #32
 8000aa6:	2b20      	cmp	r3, #32
 8000aa8:	d003      	beq.n	8000ab2 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a22      	ldr	r2, [pc, #136]	; (8000b38 <RCC_GetClocksFreq+0x25c>)
 8000aae:	61da      	str	r2, [r3, #28]
 8000ab0:	e003      	b.n	8000aba <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000aba:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <RCC_GetClocksFreq+0x258>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ac6:	d10d      	bne.n	8000ae4 <RCC_GetClocksFreq+0x208>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d108      	bne.n	8000ae4 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d104      	bne.n	8000ae4 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000adc:	005a      	lsls	r2, r3, #1
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	621a      	str	r2, [r3, #32]
 8000ae2:	e003      	b.n	8000aec <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	68da      	ldr	r2, [r3, #12]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <RCC_GetClocksFreq+0x258>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000af4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000af8:	d10d      	bne.n	8000b16 <RCC_GetClocksFreq+0x23a>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d108      	bne.n	8000b16 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d104      	bne.n	8000b16 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0e:	005a      	lsls	r2, r3, #1
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	625a      	str	r2, [r3, #36]	; 0x24
 8000b14:	e003      	b.n	8000b1e <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	68da      	ldr	r2, [r3, #12]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <RCC_GetClocksFreq+0x258>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0303 	and.w	r3, r3, #3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d10e      	bne.n	8000b48 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	68da      	ldr	r2, [r3, #12]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	629a      	str	r2, [r3, #40]	; 0x28
 8000b32:	e028      	b.n	8000b86 <RCC_GetClocksFreq+0x2aa>
 8000b34:	40021000 	.word	0x40021000
 8000b38:	007a1200 	.word	0x007a1200
 8000b3c:	003d0900 	.word	0x003d0900
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000b48:	4b6c      	ldr	r3, [pc, #432]	; (8000cfc <RCC_GetClocksFreq+0x420>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	f003 0303 	and.w	r3, r3, #3
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d104      	bne.n	8000b5e <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	629a      	str	r2, [r3, #40]	; 0x28
 8000b5c:	e013      	b.n	8000b86 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000b5e:	4b67      	ldr	r3, [pc, #412]	; (8000cfc <RCC_GetClocksFreq+0x420>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0303 	and.w	r3, r3, #3
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d104      	bne.n	8000b74 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b70:	629a      	str	r2, [r3, #40]	; 0x28
 8000b72:	e008      	b.n	8000b86 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000b74:	4b61      	ldr	r3, [pc, #388]	; (8000cfc <RCC_GetClocksFreq+0x420>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	f003 0303 	and.w	r3, r3, #3
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d102      	bne.n	8000b86 <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a5f      	ldr	r2, [pc, #380]	; (8000d00 <RCC_GetClocksFreq+0x424>)
 8000b84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000b86:	4b5d      	ldr	r3, [pc, #372]	; (8000cfc <RCC_GetClocksFreq+0x420>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d104      	bne.n	8000b9c <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b9a:	e021      	b.n	8000be0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000b9c:	4b57      	ldr	r3, [pc, #348]	; (8000cfc <RCC_GetClocksFreq+0x420>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ba8:	d104      	bne.n	8000bb4 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bb2:	e015      	b.n	8000be0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000bb4:	4b51      	ldr	r3, [pc, #324]	; (8000cfc <RCC_GetClocksFreq+0x420>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000bc0:	d104      	bne.n	8000bcc <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bca:	e009      	b.n	8000be0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000bcc:	4b4b      	ldr	r3, [pc, #300]	; (8000cfc <RCC_GetClocksFreq+0x420>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bd4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000bd8:	d102      	bne.n	8000be0 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a48      	ldr	r2, [pc, #288]	; (8000d00 <RCC_GetClocksFreq+0x424>)
 8000bde:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000be0:	4b46      	ldr	r3, [pc, #280]	; (8000cfc <RCC_GetClocksFreq+0x420>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d104      	bne.n	8000bf6 <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	631a      	str	r2, [r3, #48]	; 0x30
 8000bf4:	e021      	b.n	8000c3a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000bf6:	4b41      	ldr	r3, [pc, #260]	; (8000cfc <RCC_GetClocksFreq+0x420>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000bfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000c02:	d104      	bne.n	8000c0e <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	631a      	str	r2, [r3, #48]	; 0x30
 8000c0c:	e015      	b.n	8000c3a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8000c0e:	4b3b      	ldr	r3, [pc, #236]	; (8000cfc <RCC_GetClocksFreq+0x420>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000c16:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000c1a:	d104      	bne.n	8000c26 <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c22:	631a      	str	r2, [r3, #48]	; 0x30
 8000c24:	e009      	b.n	8000c3a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000c26:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <RCC_GetClocksFreq+0x420>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000c2e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000c32:	d102      	bne.n	8000c3a <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a32      	ldr	r2, [pc, #200]	; (8000d00 <RCC_GetClocksFreq+0x424>)
 8000c38:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8000c3a:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <RCC_GetClocksFreq+0x420>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d104      	bne.n	8000c50 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	689a      	ldr	r2, [r3, #8]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c4e:	e021      	b.n	8000c94 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8000c50:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <RCC_GetClocksFreq+0x420>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000c5c:	d104      	bne.n	8000c68 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	635a      	str	r2, [r3, #52]	; 0x34
 8000c66:	e015      	b.n	8000c94 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000c68:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <RCC_GetClocksFreq+0x420>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000c70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000c74:	d104      	bne.n	8000c80 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c7c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c7e:	e009      	b.n	8000c94 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000c80:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <RCC_GetClocksFreq+0x420>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000c88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000c8c:	d102      	bne.n	8000c94 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a1b      	ldr	r2, [pc, #108]	; (8000d00 <RCC_GetClocksFreq+0x424>)
 8000c92:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000c94:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <RCC_GetClocksFreq+0x420>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d104      	bne.n	8000caa <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689a      	ldr	r2, [r3, #8]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000ca8:	e021      	b.n	8000cee <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <RCC_GetClocksFreq+0x420>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000cb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000cb6:	d104      	bne.n	8000cc2 <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000cc0:	e015      	b.n	8000cee <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <RCC_GetClocksFreq+0x420>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000cca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000cce:	d104      	bne.n	8000cda <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cd6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000cd8:	e009      	b.n	8000cee <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <RCC_GetClocksFreq+0x420>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000ce2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000ce6:	d102      	bne.n	8000cee <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <RCC_GetClocksFreq+0x424>)
 8000cec:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000cee:	bf00      	nop
 8000cf0:	372c      	adds	r7, #44	; 0x2c
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	007a1200 	.word	0x007a1200

08000d04 <RCC_ADCCLKConfig>:
  *     @arg RCC_ADC34PLLCLK_Div128: ADC34 clock = PLLCLK/128                                  
  *     @arg RCC_ADC34PLLCLK_Div256: ADC34 clock = PLLCLK/256
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PLLCLK)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PLLCLK));

  tmp = (RCC_PLLCLK >> 28);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	0f1b      	lsrs	r3, r3, #28
 8000d14:	60fb      	str	r3, [r7, #12]
  
  /* Clears ADCPRE34 bits */
  if (tmp != 0)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d006      	beq.n	8000d2a <RCC_ADCCLKConfig+0x26>
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE34;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <RCC_ADCCLKConfig+0x4c>)
 8000d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d20:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <RCC_ADCCLKConfig+0x4c>)
 8000d22:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8000d26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d28:	e005      	b.n	8000d36 <RCC_ADCCLKConfig+0x32>
  }
   /* Clears ADCPRE12 bits */
  else
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12;
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <RCC_ADCCLKConfig+0x4c>)
 8000d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2e:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <RCC_ADCCLKConfig+0x4c>)
 8000d30:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000d34:	62d3      	str	r3, [r2, #44]	; 0x2c
  }
  /* Set ADCPRE bits according to RCC_PLLCLK value */
  RCC->CFGR2 |= RCC_PLLCLK;
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <RCC_ADCCLKConfig+0x4c>)
 8000d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d3a:	4905      	ldr	r1, [pc, #20]	; (8000d50 <RCC_ADCCLKConfig+0x4c>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000d42:	bf00      	nop
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000

08000d54 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d60:	78fb      	ldrb	r3, [r7, #3]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d006      	beq.n	8000d74 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000d66:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <RCC_AHBPeriphClockCmd+0x3c>)
 8000d68:	695a      	ldr	r2, [r3, #20]
 8000d6a:	4909      	ldr	r1, [pc, #36]	; (8000d90 <RCC_AHBPeriphClockCmd+0x3c>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000d72:	e006      	b.n	8000d82 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <RCC_AHBPeriphClockCmd+0x3c>)
 8000d76:	695a      	ldr	r2, [r3, #20]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	4904      	ldr	r1, [pc, #16]	; (8000d90 <RCC_AHBPeriphClockCmd+0x3c>)
 8000d7e:	4013      	ands	r3, r2
 8000d80:	614b      	str	r3, [r1, #20]
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000

08000d94 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000da0:	78fb      	ldrb	r3, [r7, #3]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d006      	beq.n	8000db4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <RCC_APB1PeriphClockCmd+0x3c>)
 8000da8:	69da      	ldr	r2, [r3, #28]
 8000daa:	4909      	ldr	r1, [pc, #36]	; (8000dd0 <RCC_APB1PeriphClockCmd+0x3c>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000db2:	e006      	b.n	8000dc2 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <RCC_APB1PeriphClockCmd+0x3c>)
 8000db6:	69da      	ldr	r2, [r3, #28]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	4904      	ldr	r1, [pc, #16]	; (8000dd0 <RCC_APB1PeriphClockCmd+0x3c>)
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	61cb      	str	r3, [r1, #28]
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <SPI_SendData8>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	70fb      	strb	r3, [r7, #3]
  uint32_t spixbase = 0x00;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	330c      	adds	r3, #12
 8000dec:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	78fa      	ldrb	r2, [r7, #3]
 8000df2:	701a      	strb	r2, [r3, #0]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	891b      	ldrh	r3, [r3, #8]
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	887b      	ldrh	r3, [r7, #2]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d002      	beq.n	8000e26 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000e20:	2301      	movs	r3, #1
 8000e22:	73fb      	strb	r3, [r7, #15]
 8000e24:	e001      	b.n	8000e2a <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a2d      	ldr	r2, [pc, #180]	; (8000f04 <TIM_TimeBaseInit+0xcc>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d00f      	beq.n	8000e74 <TIM_TimeBaseInit+0x3c>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a2c      	ldr	r2, [pc, #176]	; (8000f08 <TIM_TimeBaseInit+0xd0>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d00b      	beq.n	8000e74 <TIM_TimeBaseInit+0x3c>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e62:	d007      	beq.n	8000e74 <TIM_TimeBaseInit+0x3c>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a29      	ldr	r2, [pc, #164]	; (8000f0c <TIM_TimeBaseInit+0xd4>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d003      	beq.n	8000e74 <TIM_TimeBaseInit+0x3c>
     (TIMx == TIM3)|| (TIMx == TIM4)) 
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a28      	ldr	r2, [pc, #160]	; (8000f10 <TIM_TimeBaseInit+0xd8>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d108      	bne.n	8000e86 <TIM_TimeBaseInit+0x4e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000e74:	89fb      	ldrh	r3, [r7, #14]
 8000e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e7a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	885a      	ldrh	r2, [r3, #2]
 8000e80:	89fb      	ldrh	r3, [r7, #14]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a22      	ldr	r2, [pc, #136]	; (8000f14 <TIM_TimeBaseInit+0xdc>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d00c      	beq.n	8000ea8 <TIM_TimeBaseInit+0x70>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a21      	ldr	r2, [pc, #132]	; (8000f18 <TIM_TimeBaseInit+0xe0>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d008      	beq.n	8000ea8 <TIM_TimeBaseInit+0x70>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000e96:	89fb      	ldrh	r3, [r7, #14]
 8000e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e9c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	891a      	ldrh	r2, [r3, #8]
 8000ea2:	89fb      	ldrh	r3, [r7, #14]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	89fa      	ldrh	r2, [r7, #14]
 8000eac:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	881a      	ldrh	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15) || 
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a10      	ldr	r2, [pc, #64]	; (8000f04 <TIM_TimeBaseInit+0xcc>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d00f      	beq.n	8000ee6 <TIM_TimeBaseInit+0xae>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <TIM_TimeBaseInit+0xd0>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d00b      	beq.n	8000ee6 <TIM_TimeBaseInit+0xae>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <TIM_TimeBaseInit+0xe4>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d007      	beq.n	8000ee6 <TIM_TimeBaseInit+0xae>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a11      	ldr	r2, [pc, #68]	; (8000f20 <TIM_TimeBaseInit+0xe8>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d003      	beq.n	8000ee6 <TIM_TimeBaseInit+0xae>
      (TIMx == TIM16) || (TIMx == TIM17))  
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a10      	ldr	r2, [pc, #64]	; (8000f24 <TIM_TimeBaseInit+0xec>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d104      	bne.n	8000ef0 <TIM_TimeBaseInit+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	7a9b      	ldrb	r3, [r3, #10]
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	615a      	str	r2, [r3, #20]
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40012c00 	.word	0x40012c00
 8000f08:	40013400 	.word	0x40013400
 8000f0c:	40000400 	.word	0x40000400
 8000f10:	40000800 	.word	0x40000800
 8000f14:	40001000 	.word	0x40001000
 8000f18:	40001400 	.word	0x40001400
 8000f1c:	40014000 	.word	0x40014000
 8000f20:	40014400 	.word	0x40014400
 8000f24:	40014800 	.word	0x40014800

08000f28 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f36:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	729a      	strb	r2, [r3, #10]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000f68:	78fb      	ldrb	r3, [r7, #3]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d008      	beq.n	8000f80 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000f7e:	e007      	b.n	8000f90 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	f023 0301 	bic.w	r3, r3, #1
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	801a      	strh	r2, [r3, #0]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000fac:	787b      	ldrb	r3, [r7, #1]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d006      	beq.n	8000fc0 <TIM_ITConfig+0x24>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68da      	ldr	r2, [r3, #12]
 8000fb6:	887b      	ldrh	r3, [r7, #2]
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60da      	str	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000fbe:	e007      	b.n	8000fd0 <TIM_ITConfig+0x34>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	887a      	ldrh	r2, [r7, #2]
 8000fc6:	43d2      	mvns	r2, r2
 8000fc8:	b292      	uxth	r2, r2
 8000fca:	401a      	ands	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	60da      	str	r2, [r3, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	81bb      	strh	r3, [r7, #12]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	b29a      	uxth	r2, r3
 8001006:	887b      	ldrh	r3, [r7, #2]
 8001008:	4013      	ands	r3, r2
 800100a:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800100c:	89bb      	ldrh	r3, [r7, #12]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d005      	beq.n	800101e <TIM_GetITStatus+0x42>
 8001012:	897b      	ldrh	r3, [r7, #10]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e001      	b.n	8001022 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800103c:	887b      	ldrh	r3, [r7, #2]
 800103e:	43db      	mvns	r3, r3
 8001040:	b29b      	uxth	r3, r3
 8001042:	461a      	mov	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	611a      	str	r2, [r3, #16]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8001060:	887b      	ldrh	r3, [r7, #2]
 8001062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001066:	b29a      	uxth	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	4613      	mov	r3, r2
 8001084:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	b29b      	uxth	r3, r3
 800109e:	0a1b      	lsrs	r3, r3, #8
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80010aa:	2201      	movs	r2, #1
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d103      	bne.n	80010c2 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	61fb      	str	r3, [r7, #28]
 80010c0:	e005      	b.n	80010ce <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d102      	bne.n	80010ce <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	3308      	adds	r3, #8
 80010cc:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d006      	beq.n	80010e2 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	6819      	ldr	r1, [r3, #0]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	430a      	orrs	r2, r1
 80010de:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80010e0:	e006      	b.n	80010f0 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	6819      	ldr	r1, [r3, #0]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	43da      	mvns	r2, r3
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	400a      	ands	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]
}
 80010f0:	bf00      	nop
 80010f2:	3724      	adds	r7, #36	; 0x24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69da      	ldr	r2, [r3, #28]
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	4013      	ands	r3, r2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d002      	beq.n	800111c <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8001116:	2301      	movs	r3, #1
 8001118:	73fb      	strb	r3, [r7, #15]
 800111a:	e001      	b.n	8001120 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 800112e:	b480      	push	{r7}
 8001130:	b087      	sub	sp, #28
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b29b      	uxth	r3, r3
 800114c:	0a1b      	lsrs	r3, r3, #8
 800114e:	b29b      	uxth	r3, r3
 8001150:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001158:	2201      	movs	r2, #1
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d105      	bne.n	8001174 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	4013      	ands	r3, r2
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	e00d      	b.n	8001190 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d105      	bne.n	8001186 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	4013      	ands	r3, r2
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	e004      	b.n	8001190 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	4013      	ands	r3, r2
 800118e:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	0c1b      	lsrs	r3, r3, #16
 8001194:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001196:	2201      	movs	r2, #1
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69db      	ldr	r3, [r3, #28]
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	4013      	ands	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d005      	beq.n	80011bc <USART_GetITStatus+0x8e>
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 80011b6:	2301      	movs	r3, #1
 80011b8:	74fb      	strb	r3, [r7, #19]
 80011ba:	e001      	b.n	80011c0 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 80011bc:	2300      	movs	r3, #0
 80011be:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80011c0:	7cfb      	ldrb	r3, [r7, #19]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	371c      	adds	r7, #28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	f003 031f 	and.w	r3, r3, #31
 80011e0:	2201      	movs	r2, #1
 80011e2:	fa02 f103 	lsl.w	r1, r2, r3
 80011e6:	4a06      	ldr	r2, [pc, #24]	; (8001200 <NVIC_EnableIRQ+0x30>)
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	095b      	lsrs	r3, r3, #5
 80011ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100

08001204 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	b29b      	uxth	r3, r3
 8001212:	4619      	mov	r1, r3
 8001214:	4807      	ldr	r0, [pc, #28]	; (8001234 <uart_put_char+0x30>)
 8001216:	f7ff ff1d 	bl	8001054 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 800121a:	bf00      	nop
 800121c:	2180      	movs	r1, #128	; 0x80
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <uart_put_char+0x30>)
 8001220:	f7ff ff6c 	bl	80010fc <USART_GetFlagStatus>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f8      	beq.n	800121c <uart_put_char+0x18>
}
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40004400 	.word	0x40004400

08001238 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	e012      	b.n	8001272 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b0a      	cmp	r3, #10
 8001256:	d102      	bne.n	800125e <_write_r+0x26>
            uart_put_char('\r');
 8001258:	200d      	movs	r0, #13
 800125a:	f7ff ffd3 	bl	8001204 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	4413      	add	r3, r2
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ffcc 	bl	8001204 <uart_put_char>
    for (n = 0; n < len; n++) {
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	3301      	adds	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	dbe8      	blt.n	800124c <_write_r+0x14>
    }

    return len;
 800127a:	683b      	ldr	r3, [r7, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8001288:	4915      	ldr	r1, [pc, #84]	; (80012e0 <USART2_IRQHandler+0x5c>)
 800128a:	4816      	ldr	r0, [pc, #88]	; (80012e4 <USART2_IRQHandler+0x60>)
 800128c:	f7ff ff4f 	bl	800112e <USART_GetITStatus>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d021      	beq.n	80012da <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8001296:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <USART2_IRQHandler+0x60>)
 8001298:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800129a:	b299      	uxth	r1, r3
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <USART2_IRQHandler+0x64>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	b2d0      	uxtb	r0, r2
 80012a6:	4a10      	ldr	r2, [pc, #64]	; (80012e8 <USART2_IRQHandler+0x64>)
 80012a8:	7010      	strb	r0, [r2, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	b2c9      	uxtb	r1, r1
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <USART2_IRQHandler+0x68>)
 80012b0:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <USART2_IRQHandler+0x6c>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2bff      	cmp	r3, #255	; 0xff
 80012ba:	d107      	bne.n	80012cc <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <USART2_IRQHandler+0x70>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <USART2_IRQHandler+0x70>)
 80012c8:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 80012ca:	e006      	b.n	80012da <USART2_IRQHandler+0x56>
            UART_COUNT++;
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <USART2_IRQHandler+0x6c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	3301      	adds	r3, #1
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <USART2_IRQHandler+0x6c>)
 80012d8:	701a      	strb	r2, [r3, #0]
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	00050105 	.word	0x00050105
 80012e4:	40004400 	.word	0x40004400
 80012e8:	200001ac 	.word	0x200001ac
 80012ec:	200000ac 	.word	0x200000ac
 80012f0:	200001ae 	.word	0x200001ae
 80012f4:	200001ad 	.word	0x200001ad

080012f8 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b094      	sub	sp, #80	; 0x50
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8001300:	4b86      	ldr	r3, [pc, #536]	; (800151c <uart_init+0x224>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f001 f881 	bl	8002410 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 800130e:	4b83      	ldr	r3, [pc, #524]	; (800151c <uart_init+0x224>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f001 f87a 	bl	8002410 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 800131c:	4b80      	ldr	r3, [pc, #512]	; (8001520 <uart_init+0x228>)
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	4a7f      	ldr	r2, [pc, #508]	; (8001520 <uart_init+0x228>)
 8001322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001326:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8001328:	4b7d      	ldr	r3, [pc, #500]	; (8001520 <uart_init+0x228>)
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	4a7c      	ldr	r2, [pc, #496]	; (8001520 <uart_init+0x228>)
 800132e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001332:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8001334:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800133e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001342:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8001344:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800134e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001352:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8001354:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800135e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001362:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001364:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800136e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001372:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8001374:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800137e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001382:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001384:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800138e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001392:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8001394:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001398:	889b      	ldrh	r3, [r3, #4]
 800139a:	b29b      	uxth	r3, r3
 800139c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013a0:	f023 030c 	bic.w	r3, r3, #12
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80013a8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013b0:	8892      	ldrh	r2, [r2, #4]
 80013b2:	b292      	uxth	r2, r2
 80013b4:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 80013b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013c4:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80013c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013d0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80013d4:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 80013d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013e4:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80013e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013f0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80013f4:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 80013f6:	4b4b      	ldr	r3, [pc, #300]	; (8001524 <uart_init+0x22c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a4a      	ldr	r2, [pc, #296]	; (8001524 <uart_init+0x22c>)
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8001402:	4b48      	ldr	r3, [pc, #288]	; (8001524 <uart_init+0x22c>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4a47      	ldr	r2, [pc, #284]	; (8001524 <uart_init+0x22c>)
 8001408:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800140c:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 800140e:	4b45      	ldr	r3, [pc, #276]	; (8001524 <uart_init+0x22c>)
 8001410:	4a44      	ldr	r2, [pc, #272]	; (8001524 <uart_init+0x22c>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8001416:	4b43      	ldr	r3, [pc, #268]	; (8001524 <uart_init+0x22c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a42      	ldr	r2, [pc, #264]	; (8001524 <uart_init+0x22c>)
 800141c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001420:	f023 030c 	bic.w	r3, r3, #12
 8001424:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8001426:	4b3f      	ldr	r3, [pc, #252]	; (8001524 <uart_init+0x22c>)
 8001428:	4a3e      	ldr	r2, [pc, #248]	; (8001524 <uart_init+0x22c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 800142e:	4b3d      	ldr	r3, [pc, #244]	; (8001524 <uart_init+0x22c>)
 8001430:	4a3c      	ldr	r2, [pc, #240]	; (8001524 <uart_init+0x22c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8001436:	4b3b      	ldr	r3, [pc, #236]	; (8001524 <uart_init+0x22c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a3a      	ldr	r2, [pc, #232]	; (8001524 <uart_init+0x22c>)
 800143c:	f043 030c 	orr.w	r3, r3, #12
 8001440:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8001442:	4b38      	ldr	r3, [pc, #224]	; (8001524 <uart_init+0x22c>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	4a37      	ldr	r2, [pc, #220]	; (8001524 <uart_init+0x22c>)
 8001448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800144c:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 800144e:	4b35      	ldr	r3, [pc, #212]	; (8001524 <uart_init+0x22c>)
 8001450:	4a34      	ldr	r2, [pc, #208]	; (8001524 <uart_init+0x22c>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	64fb      	str	r3, [r7, #76]	; 0x4c
 800145a:	2300      	movs	r3, #0
 800145c:	647b      	str	r3, [r7, #68]	; 0x44
 800145e:	2300      	movs	r3, #0
 8001460:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fa38 	bl	80008dc <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 800146c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800146e:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001470:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <uart_init+0x22c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d010      	beq.n	800149e <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 800147c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800147e:	005a      	lsls	r2, r3, #1
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	fbb2 f3f3 	udiv	r3, r2, r3
 8001486:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	fb01 f202 	mul.w	r2, r1, r2
 8001498:	1a9b      	subs	r3, r3, r2
 800149a:	64bb      	str	r3, [r7, #72]	; 0x48
 800149c:	e00d      	b.n	80014ba <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 800149e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 80014a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	fb01 f202 	mul.w	r2, r1, r2
 80014b6:	1a9b      	subs	r3, r3, r2
 80014b8:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	085b      	lsrs	r3, r3, #1
 80014be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d302      	bcc.n	80014ca <uart_init+0x1d2>
        divider++;
 80014c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014c6:	3301      	adds	r3, #1
 80014c8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 80014ca:	4b16      	ldr	r3, [pc, #88]	; (8001524 <uart_init+0x22c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00b      	beq.n	80014ee <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 80014d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014d8:	085b      	lsrs	r3, r3, #1
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 80014e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80014e2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80014e6:	4013      	ands	r3, r2
 80014e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80014ea:	4313      	orrs	r3, r2
 80014ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <uart_init+0x22c>)
 80014f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80014f2:	b292      	uxth	r2, r2
 80014f4:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <uart_init+0x22c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <uart_init+0x22c>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8001502:	2201      	movs	r2, #1
 8001504:	4908      	ldr	r1, [pc, #32]	; (8001528 <uart_init+0x230>)
 8001506:	4807      	ldr	r0, [pc, #28]	; (8001524 <uart_init+0x22c>)
 8001508:	f7ff fdb6 	bl	8001078 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 800150c:	2026      	movs	r0, #38	; 0x26
 800150e:	f7ff fe5f 	bl	80011d0 <NVIC_EnableIRQ>
}
 8001512:	bf00      	nop
 8001514:	3750      	adds	r7, #80	; 0x50
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2000002c 	.word	0x2000002c
 8001520:	40021000 	.word	0x40021000
 8001524:	40004400 	.word	0x40004400
 8001528:	00050105 	.word	0x00050105

0800152c <lcd_transmit_byte>:
#include "charset.h"

/*****************************/
/*** LCD Control Functions ***/
/*****************************/
void lcd_transmit_byte(uint8_t data) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
    GPIOB->ODR &= ~(0x0001 << 6); // CS = 0 - Start Transmission
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <lcd_transmit_byte+0x5c>)
 8001538:	8a9b      	ldrh	r3, [r3, #20]
 800153a:	b29b      	uxth	r3, r3
 800153c:	4a12      	ldr	r2, [pc, #72]	; (8001588 <lcd_transmit_byte+0x5c>)
 800153e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001542:	b29b      	uxth	r3, r3
 8001544:	8293      	strh	r3, [r2, #20]
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8001546:	bf00      	nop
 8001548:	2102      	movs	r1, #2
 800154a:	4810      	ldr	r0, [pc, #64]	; (800158c <lcd_transmit_byte+0x60>)
 800154c:	f7ff fc58 	bl	8000e00 <SPI_I2S_GetFlagStatus>
 8001550:	4603      	mov	r3, r0
 8001552:	2b01      	cmp	r3, #1
 8001554:	d1f8      	bne.n	8001548 <lcd_transmit_byte+0x1c>
    SPI_SendData8(SPI2, data);
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	4619      	mov	r1, r3
 800155a:	480c      	ldr	r0, [pc, #48]	; (800158c <lcd_transmit_byte+0x60>)
 800155c:	f7ff fc3a 	bl	8000dd4 <SPI_SendData8>
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8001560:	bf00      	nop
 8001562:	2102      	movs	r1, #2
 8001564:	4809      	ldr	r0, [pc, #36]	; (800158c <lcd_transmit_byte+0x60>)
 8001566:	f7ff fc4b 	bl	8000e00 <SPI_I2S_GetFlagStatus>
 800156a:	4603      	mov	r3, r0
 800156c:	2b01      	cmp	r3, #1
 800156e:	d1f8      	bne.n	8001562 <lcd_transmit_byte+0x36>
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - End Transmission
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <lcd_transmit_byte+0x5c>)
 8001572:	8a9b      	ldrh	r3, [r3, #20]
 8001574:	b29b      	uxth	r3, r3
 8001576:	4a04      	ldr	r2, [pc, #16]	; (8001588 <lcd_transmit_byte+0x5c>)
 8001578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800157c:	b29b      	uxth	r3, r3
 800157e:	8293      	strh	r3, [r2, #20]
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	48000400 	.word	0x48000400
 800158c:	40003800 	.word	0x40003800

08001590 <lcd_push_buffer>:

void lcd_push_buffer(uint8_t* buffer)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
    int i = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]

    //page 0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 800159c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015a0:	8a9b      	ldrh	r3, [r3, #20]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 80015b0:	2000      	movs	r0, #0
 80015b2:	f7ff ffbb 	bl	800152c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 80015b6:	2010      	movs	r0, #16
 80015b8:	f7ff ffb8 	bl	800152c <lcd_transmit_byte>
    lcd_transmit_byte(0xB0);      // set page address  0
 80015bc:	20b0      	movs	r0, #176	; 0xb0
 80015be:	f7ff ffb5 	bl	800152c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 80015c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015c6:	8a9b      	ldrh	r3, [r3, #20]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	8293      	strh	r3, [r2, #20]
    for(i=0; i<128; i++) {
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	e009      	b.n	80015f0 <lcd_push_buffer+0x60>
       lcd_transmit_byte(buffer[i]);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ffa1 	bl	800152c <lcd_transmit_byte>
    for(i=0; i<128; i++) {
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	3301      	adds	r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b7f      	cmp	r3, #127	; 0x7f
 80015f4:	ddf2      	ble.n	80015dc <lcd_push_buffer+0x4c>
    }

    // page 1
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80015f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015fa:	8a9b      	ldrh	r3, [r3, #20]
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001602:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001606:	b29b      	uxth	r3, r3
 8001608:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 800160a:	2000      	movs	r0, #0
 800160c:	f7ff ff8e 	bl	800152c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8001610:	2010      	movs	r0, #16
 8001612:	f7ff ff8b 	bl	800152c <lcd_transmit_byte>
    lcd_transmit_byte(0xB1);      // set page address  1
 8001616:	20b1      	movs	r0, #177	; 0xb1
 8001618:	f7ff ff88 	bl	800152c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 800161c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001620:	8a9b      	ldrh	r3, [r3, #20]
 8001622:	b29b      	uxth	r3, r3
 8001624:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162c:	b29b      	uxth	r3, r3
 800162e:	8293      	strh	r3, [r2, #20]
    for( i = 128 ; i < 256 ; i++ ) {
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	e009      	b.n	800164a <lcd_push_buffer+0xba>
       lcd_transmit_byte(buffer[i]);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	4413      	add	r3, r2
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff74 	bl	800152c <lcd_transmit_byte>
    for( i = 128 ; i < 256 ; i++ ) {
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	3301      	adds	r3, #1
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2bff      	cmp	r3, #255	; 0xff
 800164e:	ddf2      	ble.n	8001636 <lcd_push_buffer+0xa6>
    }

    //page 2
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8001650:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001654:	8a9b      	ldrh	r3, [r3, #20]
 8001656:	b29b      	uxth	r3, r3
 8001658:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800165c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001660:	b29b      	uxth	r3, r3
 8001662:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8001664:	2000      	movs	r0, #0
 8001666:	f7ff ff61 	bl	800152c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 800166a:	2010      	movs	r0, #16
 800166c:	f7ff ff5e 	bl	800152c <lcd_transmit_byte>
    lcd_transmit_byte(0xB2);      // set page address  2
 8001670:	20b2      	movs	r0, #178	; 0xb2
 8001672:	f7ff ff5b 	bl	800152c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8001676:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800167a:	8a9b      	ldrh	r3, [r3, #20]
 800167c:	b29b      	uxth	r3, r3
 800167e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001686:	b29b      	uxth	r3, r3
 8001688:	8293      	strh	r3, [r2, #20]
    for(i=256; i<384; i++) {
 800168a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	e009      	b.n	80016a6 <lcd_push_buffer+0x116>
       lcd_transmit_byte(buffer[i]);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	4413      	add	r3, r2
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff46 	bl	800152c <lcd_transmit_byte>
    for(i=256; i<384; i++) {
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3301      	adds	r3, #1
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80016ac:	dbf1      	blt.n	8001692 <lcd_push_buffer+0x102>
    }

    //page 3
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80016ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016b2:	8a9b      	ldrh	r3, [r3, #20]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016be:	b29b      	uxth	r3, r3
 80016c0:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 80016c2:	2000      	movs	r0, #0
 80016c4:	f7ff ff32 	bl	800152c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 80016c8:	2010      	movs	r0, #16
 80016ca:	f7ff ff2f 	bl	800152c <lcd_transmit_byte>
    lcd_transmit_byte(0xB3);      // set page address  3
 80016ce:	20b3      	movs	r0, #179	; 0xb3
 80016d0:	f7ff ff2c 	bl	800152c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 80016d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016d8:	8a9b      	ldrh	r3, [r3, #20]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	8293      	strh	r3, [r2, #20]
    for(i=384; i<512; i++) {
 80016e8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	e009      	b.n	8001704 <lcd_push_buffer+0x174>
       lcd_transmit_byte(buffer[i]);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff17 	bl	800152c <lcd_transmit_byte>
    for(i=384; i<512; i++) {
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3301      	adds	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800170a:	dbf1      	blt.n	80016f0 <lcd_push_buffer+0x160>
    }
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <lcd_reset>:

void lcd_reset()
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Reset Command/Data
 800171e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001722:	8a9b      	ldrh	r3, [r3, #20]
 8001724:	b29b      	uxth	r3, r3
 8001726:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800172a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800172e:	b29b      	uxth	r3, r3
 8001730:	8293      	strh	r3, [r2, #20]
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - Reset C/S
 8001732:	4b2f      	ldr	r3, [pc, #188]	; (80017f0 <lcd_reset+0xd8>)
 8001734:	8a9b      	ldrh	r3, [r3, #20]
 8001736:	b29b      	uxth	r3, r3
 8001738:	4a2d      	ldr	r2, [pc, #180]	; (80017f0 <lcd_reset+0xd8>)
 800173a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800173e:	b29b      	uxth	r3, r3
 8001740:	8293      	strh	r3, [r2, #20]

    GPIOB->ODR &= ~(0x0001 << 14); // RESET = 0 - Reset Display
 8001742:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <lcd_reset+0xd8>)
 8001744:	8a9b      	ldrh	r3, [r3, #20]
 8001746:	b29b      	uxth	r3, r3
 8001748:	4a29      	ldr	r2, [pc, #164]	; (80017f0 <lcd_reset+0xd8>)
 800174a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800174e:	b29b      	uxth	r3, r3
 8001750:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 4680 ; i++) { asm("nop"); }; // Wait
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	e003      	b.n	8001760 <lcd_reset+0x48>
 8001758:	bf00      	nop
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3301      	adds	r3, #1
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f241 2247 	movw	r2, #4679	; 0x1247
 8001766:	4293      	cmp	r3, r2
 8001768:	d9f6      	bls.n	8001758 <lcd_reset+0x40>
    GPIOB->ODR |=  (0x0001 << 14); // RESET = 1 - Stop Reset
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <lcd_reset+0xd8>)
 800176c:	8a9b      	ldrh	r3, [r3, #20]
 800176e:	b29b      	uxth	r3, r3
 8001770:	4a1f      	ldr	r2, [pc, #124]	; (80017f0 <lcd_reset+0xd8>)
 8001772:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001776:	b29b      	uxth	r3, r3
 8001778:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 390000 ; i++) { asm("nop"); }; // Wait
 800177a:	2300      	movs	r3, #0
 800177c:	603b      	str	r3, [r7, #0]
 800177e:	e003      	b.n	8001788 <lcd_reset+0x70>
 8001780:	bf00      	nop
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	3301      	adds	r3, #1
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	4a1a      	ldr	r2, [pc, #104]	; (80017f4 <lcd_reset+0xdc>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d9f7      	bls.n	8001780 <lcd_reset+0x68>

    // Configure Display
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8001790:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001794:	8a9b      	ldrh	r3, [r3, #20]
 8001796:	b29b      	uxth	r3, r3
 8001798:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800179c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	8293      	strh	r3, [r2, #20]

    lcd_transmit_byte(0xAE);  // Turn off display
 80017a4:	20ae      	movs	r0, #174	; 0xae
 80017a6:	f7ff fec1 	bl	800152c <lcd_transmit_byte>
    lcd_transmit_byte(0xA2);  // Set bias voltage to 1/9
 80017aa:	20a2      	movs	r0, #162	; 0xa2
 80017ac:	f7ff febe 	bl	800152c <lcd_transmit_byte>

    lcd_transmit_byte(0xA0);  // Set display RAM address normal
 80017b0:	20a0      	movs	r0, #160	; 0xa0
 80017b2:	f7ff febb 	bl	800152c <lcd_transmit_byte>
    lcd_transmit_byte(0xC8);  // Set update direction
 80017b6:	20c8      	movs	r0, #200	; 0xc8
 80017b8:	f7ff feb8 	bl	800152c <lcd_transmit_byte>

    lcd_transmit_byte(0x22);  // Set internal resistor ratio
 80017bc:	2022      	movs	r0, #34	; 0x22
 80017be:	f7ff feb5 	bl	800152c <lcd_transmit_byte>
    lcd_transmit_byte(0x2F);  // Set operating mode
 80017c2:	202f      	movs	r0, #47	; 0x2f
 80017c4:	f7ff feb2 	bl	800152c <lcd_transmit_byte>
    lcd_transmit_byte(0x40);  // Set start line address
 80017c8:	2040      	movs	r0, #64	; 0x40
 80017ca:	f7ff feaf 	bl	800152c <lcd_transmit_byte>

    lcd_transmit_byte(0xAF);  // Turn on display
 80017ce:	20af      	movs	r0, #175	; 0xaf
 80017d0:	f7ff feac 	bl	800152c <lcd_transmit_byte>

    lcd_transmit_byte(0x81);  // Set output voltage
 80017d4:	2081      	movs	r0, #129	; 0x81
 80017d6:	f7ff fea9 	bl	800152c <lcd_transmit_byte>
    lcd_transmit_byte(0x17);  // Set contrast
 80017da:	2017      	movs	r0, #23
 80017dc:	f7ff fea6 	bl	800152c <lcd_transmit_byte>

    lcd_transmit_byte(0xA6);  // Set normal mode
 80017e0:	20a6      	movs	r0, #166	; 0xa6
 80017e2:	f7ff fea3 	bl	800152c <lcd_transmit_byte>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	48000400 	.word	0x48000400
 80017f4:	0005f36f 	.word	0x0005f36f

080017f8 <init_spi_lcd>:

void init_spi_lcd() {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
    // Enable Clocks
    RCC->AHBENR  |= 0x00020000 | 0x00040000;    // Enable Clock for GPIO Banks A and B
 80017fc:	4b9d      	ldr	r3, [pc, #628]	; (8001a74 <init_spi_lcd+0x27c>)
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	4a9c      	ldr	r2, [pc, #624]	; (8001a74 <init_spi_lcd+0x27c>)
 8001802:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 8001806:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= 0x00004000;                 // Enable Clock for SPI2
 8001808:	4b9a      	ldr	r3, [pc, #616]	; (8001a74 <init_spi_lcd+0x27c>)
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	4a99      	ldr	r2, [pc, #612]	; (8001a74 <init_spi_lcd+0x27c>)
 800180e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001812:	61d3      	str	r3, [r2, #28]

    // Connect pins to SPI2
    GPIOB->AFR[13 >> 0x03] &= ~(0x0000000F << ((13 & 0x00000007) * 4)); // Clear alternate function for PB13
 8001814:	4b98      	ldr	r3, [pc, #608]	; (8001a78 <init_spi_lcd+0x280>)
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	4a97      	ldr	r2, [pc, #604]	; (8001a78 <init_spi_lcd+0x280>)
 800181a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800181e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[13 >> 0x03] |=  (0x00000005 << ((13 & 0x00000007) * 4)); // Set alternate 5 function for PB13 - SCLK
 8001820:	4b95      	ldr	r3, [pc, #596]	; (8001a78 <init_spi_lcd+0x280>)
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	4a94      	ldr	r2, [pc, #592]	; (8001a78 <init_spi_lcd+0x280>)
 8001826:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800182a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] &= ~(0x0000000F << ((15 & 0x00000007) * 4)); // Clear alternate function for PB15
 800182c:	4b92      	ldr	r3, [pc, #584]	; (8001a78 <init_spi_lcd+0x280>)
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	4a91      	ldr	r2, [pc, #580]	; (8001a78 <init_spi_lcd+0x280>)
 8001832:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001836:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] |=  (0x00000005 << ((15 & 0x00000007) * 4)); // Set alternate 5 function for PB15 - MOSI
 8001838:	4b8f      	ldr	r3, [pc, #572]	; (8001a78 <init_spi_lcd+0x280>)
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	4a8e      	ldr	r2, [pc, #568]	; (8001a78 <init_spi_lcd+0x280>)
 800183e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8001842:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB13 and PB15 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear speed register
 8001844:	4b8c      	ldr	r3, [pc, #560]	; (8001a78 <init_spi_lcd+0x280>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	4a8b      	ldr	r2, [pc, #556]	; (8001a78 <init_spi_lcd+0x280>)
 800184a:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 800184e:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (13 * 2) | 0x00000001 << (15 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001850:	4b89      	ldr	r3, [pc, #548]	; (8001a78 <init_spi_lcd+0x280>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	4a88      	ldr	r2, [pc, #544]	; (8001a78 <init_spi_lcd+0x280>)
 8001856:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 800185a:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (13)     | 0x0001     << (15));        // Clear output type register
 800185c:	4b86      	ldr	r3, [pc, #536]	; (8001a78 <init_spi_lcd+0x280>)
 800185e:	889b      	ldrh	r3, [r3, #4]
 8001860:	b29a      	uxth	r2, r3
 8001862:	4985      	ldr	r1, [pc, #532]	; (8001a78 <init_spi_lcd+0x280>)
 8001864:	f645 73ff 	movw	r3, #24575	; 0x5fff
 8001868:	4013      	ands	r3, r2
 800186a:	b29b      	uxth	r3, r3
 800186c:	808b      	strh	r3, [r1, #4]
    GPIOB->OTYPER  |=  (0x0000     << (13)     | 0x0000     << (15));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 800186e:	4a82      	ldr	r2, [pc, #520]	; (8001a78 <init_spi_lcd+0x280>)
 8001870:	4b81      	ldr	r3, [pc, #516]	; (8001a78 <init_spi_lcd+0x280>)
 8001872:	8892      	ldrh	r2, [r2, #4]
 8001874:	b292      	uxth	r2, r2
 8001876:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear mode register
 8001878:	4b7f      	ldr	r3, [pc, #508]	; (8001a78 <init_spi_lcd+0x280>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a7e      	ldr	r2, [pc, #504]	; (8001a78 <init_spi_lcd+0x280>)
 800187e:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8001882:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (13 * 2) | 0x00000002 << (15 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001884:	4b7c      	ldr	r3, [pc, #496]	; (8001a78 <init_spi_lcd+0x280>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a7b      	ldr	r2, [pc, #492]	; (8001a78 <init_spi_lcd+0x280>)
 800188a:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 800188e:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear push/pull register
 8001890:	4b79      	ldr	r3, [pc, #484]	; (8001a78 <init_spi_lcd+0x280>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4a78      	ldr	r2, [pc, #480]	; (8001a78 <init_spi_lcd+0x280>)
 8001896:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 800189a:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (13 * 2) | 0x00000000 << (15 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 800189c:	4b76      	ldr	r3, [pc, #472]	; (8001a78 <init_spi_lcd+0x280>)
 800189e:	4a76      	ldr	r2, [pc, #472]	; (8001a78 <init_spi_lcd+0x280>)
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	60d3      	str	r3, [r2, #12]

    // Initialize REEST, nCS, and A0
    // Configure pins PB6 and PB14 for 10 MHz output
    GPIOB->OSPEEDR &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear speed register
 80018a4:	4b74      	ldr	r3, [pc, #464]	; (8001a78 <init_spi_lcd+0x280>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	4a73      	ldr	r2, [pc, #460]	; (8001a78 <init_spi_lcd+0x280>)
 80018aa:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 80018ae:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80018b0:	4b71      	ldr	r3, [pc, #452]	; (8001a78 <init_spi_lcd+0x280>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	4a70      	ldr	r2, [pc, #448]	; (8001a78 <init_spi_lcd+0x280>)
 80018b6:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 80018ba:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (6)     | 0x0001     << (14));        // Clear output type register
 80018bc:	4b6e      	ldr	r3, [pc, #440]	; (8001a78 <init_spi_lcd+0x280>)
 80018be:	889b      	ldrh	r3, [r3, #4]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	4a6d      	ldr	r2, [pc, #436]	; (8001a78 <init_spi_lcd+0x280>)
 80018c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0000     << (6)     | 0x0000     << (14));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80018d0:	4a69      	ldr	r2, [pc, #420]	; (8001a78 <init_spi_lcd+0x280>)
 80018d2:	4b69      	ldr	r3, [pc, #420]	; (8001a78 <init_spi_lcd+0x280>)
 80018d4:	8892      	ldrh	r2, [r2, #4]
 80018d6:	b292      	uxth	r2, r2
 80018d8:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear mode register
 80018da:	4b67      	ldr	r3, [pc, #412]	; (8001a78 <init_spi_lcd+0x280>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a66      	ldr	r2, [pc, #408]	; (8001a78 <init_spi_lcd+0x280>)
 80018e0:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 80018e4:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80018e6:	4b64      	ldr	r3, [pc, #400]	; (8001a78 <init_spi_lcd+0x280>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a63      	ldr	r2, [pc, #396]	; (8001a78 <init_spi_lcd+0x280>)
 80018ec:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 80018f0:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear push/pull register
 80018f2:	4b61      	ldr	r3, [pc, #388]	; (8001a78 <init_spi_lcd+0x280>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	4a60      	ldr	r2, [pc, #384]	; (8001a78 <init_spi_lcd+0x280>)
 80018f8:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 80018fc:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (6 * 2) | 0x00000000 << (14 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80018fe:	4b5e      	ldr	r3, [pc, #376]	; (8001a78 <init_spi_lcd+0x280>)
 8001900:	4a5d      	ldr	r2, [pc, #372]	; (8001a78 <init_spi_lcd+0x280>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	60d3      	str	r3, [r2, #12]
    // Configure pin PA8 for 10 MHz output
    GPIOA->OSPEEDR &= ~0x00000003 << (8 * 2);    // Clear speed register
 8001906:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001910:	0c9b      	lsrs	r3, r3, #18
 8001912:	049b      	lsls	r3, r3, #18
 8001914:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  0x00000001 << (8 * 2);    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001916:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001924:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~0x0001     << (8);        // Clear output type register
 8001926:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800192a:	889b      	ldrh	r3, [r3, #4]
 800192c:	b29b      	uxth	r3, r3
 800192e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001932:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001936:	f023 0301 	bic.w	r3, r3, #1
 800193a:	b29b      	uxth	r3, r3
 800193c:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  0x0000     << (8);        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 800193e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001942:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001946:	8892      	ldrh	r2, [r2, #4]
 8001948:	b292      	uxth	r2, r2
 800194a:	809a      	strh	r2, [r3, #4]


    GPIOA->MODER   &= ~0x00000003 << (8 * 2);    // Clear mode register
 800194c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001956:	0c9b      	lsrs	r3, r3, #18
 8001958:	049b      	lsls	r3, r3, #18
 800195a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  0x00000001 << (8 * 2);    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 800195c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196a:	6013      	str	r3, [r2, #0]

    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // This is needed for UART to work. It makes no sense.
 800196c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800197a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));
 800197c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001986:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800198a:	6013      	str	r3, [r2, #0]

    GPIOA->PUPDR   &= ~0x00000003 << (8 * 2);    // Clear push/pull register
 800198c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001996:	0c9b      	lsrs	r3, r3, #18
 8001998:	049b      	lsls	r3, r3, #18
 800199a:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  0x00000000 << (8 * 2);    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 800199c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80019a0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	60d3      	str	r3, [r2, #12]

    GPIOB->ODR |=  (0x0001 << 6); // CS = 1
 80019a8:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <init_spi_lcd+0x280>)
 80019aa:	8a9b      	ldrh	r3, [r3, #20]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	4a32      	ldr	r2, [pc, #200]	; (8001a78 <init_spi_lcd+0x280>)
 80019b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	8293      	strh	r3, [r2, #20]

    // Configure SPI2
    SPI2->CR1 &= 0x3040; // Clear CR1 Register
 80019b8:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <init_spi_lcd+0x284>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	4a2f      	ldr	r2, [pc, #188]	; (8001a7c <init_spi_lcd+0x284>)
 80019c0:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Configure direction (0x0000 - 2 Lines Full Duplex, 0x0400 - 2 Lines RX Only, 0x8000 - 1 Line RX, 0xC000 - 1 Line TX)
 80019c8:	4a2c      	ldr	r2, [pc, #176]	; (8001a7c <init_spi_lcd+0x284>)
 80019ca:	4b2c      	ldr	r3, [pc, #176]	; (8001a7c <init_spi_lcd+0x284>)
 80019cc:	8812      	ldrh	r2, [r2, #0]
 80019ce:	b292      	uxth	r2, r2
 80019d0:	801a      	strh	r2, [r3, #0]
    SPI2->CR1 |= 0x0104; // Configure mode (0x0000 - Slave, 0x0104 - Master)
 80019d2:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <init_spi_lcd+0x284>)
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	4a28      	ldr	r2, [pc, #160]	; (8001a7c <init_spi_lcd+0x284>)
 80019da:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 80019de:	b29b      	uxth	r3, r3
 80019e0:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0002; // Configure clock polarity (0x0000 - Low, 0x0002 - High)
 80019e2:	4b26      	ldr	r3, [pc, #152]	; (8001a7c <init_spi_lcd+0x284>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	4a24      	ldr	r2, [pc, #144]	; (8001a7c <init_spi_lcd+0x284>)
 80019ea:	f043 0302 	orr.w	r3, r3, #2
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0001; // Configure clock phase (0x0000 - 1 Edge, 0x0001 - 2 Edge)
 80019f2:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <init_spi_lcd+0x284>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	4a20      	ldr	r2, [pc, #128]	; (8001a7c <init_spi_lcd+0x284>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0200; // Configure chip select (0x0000 - Hardware based, 0x0200 - Software based)
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <init_spi_lcd+0x284>)
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	4a1c      	ldr	r2, [pc, #112]	; (8001a7c <init_spi_lcd+0x284>)
 8001a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0008; // Set Baud Rate Prescaler (0x0000 - 2, 0x0008 - 4, 0x0018 - 8, 0x0020 - 16, 0x0028 - 32, 0x0028 - 64, 0x0030 - 128, 0x0038 - 128)
 8001a12:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <init_spi_lcd+0x284>)
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	4a18      	ldr	r2, [pc, #96]	; (8001a7c <init_spi_lcd+0x284>)
 8001a1a:	f043 0308 	orr.w	r3, r3, #8
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Set Bit Order (0x0000 - MSB First, 0x0080 - LSB First)
 8001a22:	4a16      	ldr	r2, [pc, #88]	; (8001a7c <init_spi_lcd+0x284>)
 8001a24:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <init_spi_lcd+0x284>)
 8001a26:	8812      	ldrh	r2, [r2, #0]
 8001a28:	b292      	uxth	r2, r2
 8001a2a:	801a      	strh	r2, [r3, #0]
    SPI2->CR2 &= ~0x0F00; // Clear CR2 Register
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <init_spi_lcd+0x284>)
 8001a2e:	889b      	ldrh	r3, [r3, #4]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	4a12      	ldr	r2, [pc, #72]	; (8001a7c <init_spi_lcd+0x284>)
 8001a34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x0700; // Set Number of Bits (0x0300 - 4, 0x0400 - 5, 0x0500 - 6, ...);
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <init_spi_lcd+0x284>)
 8001a3e:	889b      	ldrh	r3, [r3, #4]
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	4a0e      	ldr	r2, [pc, #56]	; (8001a7c <init_spi_lcd+0x284>)
 8001a44:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	8093      	strh	r3, [r2, #4]
    SPI2->I2SCFGR &= ~0x0800; // Disable I2S
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <init_spi_lcd+0x284>)
 8001a4e:	8b9b      	ldrh	r3, [r3, #28]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <init_spi_lcd+0x284>)
 8001a54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	8393      	strh	r3, [r2, #28]
    SPI2->CRCPR = 7; // Set CRC polynomial order
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <init_spi_lcd+0x284>)
 8001a5e:	2207      	movs	r2, #7
 8001a60:	821a      	strh	r2, [r3, #16]
    SPI2->CR2 &= ~0x1000;
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <init_spi_lcd+0x284>)
 8001a64:	889b      	ldrh	r3, [r3, #4]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <init_spi_lcd+0x284>)
 8001a6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	e006      	b.n	8001a80 <init_spi_lcd+0x288>
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000
 8001a78:	48000400 	.word	0x48000400
 8001a7c:	40003800 	.word	0x40003800
 8001a80:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x1000; // Configure RXFIFO return at (0x0000 - Half-full (16 bits), 0x1000 - Quarter-full (8 bits))
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <init_spi_lcd+0x2b4>)
 8001a84:	889b      	ldrh	r3, [r3, #4]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	4a08      	ldr	r2, [pc, #32]	; (8001aac <init_spi_lcd+0x2b4>)
 8001a8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	8093      	strh	r3, [r2, #4]
    SPI2->CR1 |= 0x0040; // Enable SPI2
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <init_spi_lcd+0x2b4>)
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	4a04      	ldr	r2, [pc, #16]	; (8001aac <init_spi_lcd+0x2b4>)
 8001a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	8013      	strh	r3, [r2, #0]

    lcd_reset();
 8001aa2:	f7ff fe39 	bl	8001718 <lcd_reset>
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40003800 	.word	0x40003800

08001ab0 <generate_line_buff>:

void generate_line_buff(uint8_t * str, uint8_t * linebuff, uint16_t bufflen){
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	4613      	mov	r3, r2
 8001abc:	80fb      	strh	r3, [r7, #6]
    uint8_t idx;
    //convert each character to a 5+1 (CHAR_WIDTH) slices and add it to the line buffer
    for(int i = 0; i<bufflen; i++){
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	e06d      	b.n	8001ba0 <generate_line_buff+0xf0>
        if (str[i] == '\0'){
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4413      	add	r3, r2
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d06c      	beq.n	8001baa <generate_line_buff+0xfa>
            break;
        }
        idx = CHAR_WIDTH*i;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	0052      	lsls	r2, r2, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	74fb      	strb	r3, [r7, #19]
        linebuff[idx] = character_data[str[i]-0x20][0];
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	f1a3 0220 	sub.w	r2, r3, #32
 8001aea:	7cfb      	ldrb	r3, [r7, #19]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	4419      	add	r1, r3
 8001af0:	4831      	ldr	r0, [pc, #196]	; (8001bb8 <generate_line_buff+0x108>)
 8001af2:	4613      	mov	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	4403      	add	r3, r0
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	700b      	strb	r3, [r1, #0]
        linebuff[idx+1] = character_data[str[i]-0x20][1];
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	f1a3 0220 	sub.w	r2, r3, #32
 8001b0a:	7cfb      	ldrb	r3, [r7, #19]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	68b9      	ldr	r1, [r7, #8]
 8001b10:	4419      	add	r1, r3
 8001b12:	4829      	ldr	r0, [pc, #164]	; (8001bb8 <generate_line_buff+0x108>)
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	4403      	add	r3, r0
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	700b      	strb	r3, [r1, #0]
        linebuff[idx+2] = character_data[str[i]-0x20][2];
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	f1a3 0220 	sub.w	r2, r3, #32
 8001b2e:	7cfb      	ldrb	r3, [r7, #19]
 8001b30:	3302      	adds	r3, #2
 8001b32:	68b9      	ldr	r1, [r7, #8]
 8001b34:	4419      	add	r1, r3
 8001b36:	4820      	ldr	r0, [pc, #128]	; (8001bb8 <generate_line_buff+0x108>)
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4403      	add	r3, r0
 8001b40:	3302      	adds	r3, #2
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	700b      	strb	r3, [r1, #0]
        linebuff[idx+3] = character_data[str[i]-0x20][3];
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	f1a3 0220 	sub.w	r2, r3, #32
 8001b52:	7cfb      	ldrb	r3, [r7, #19]
 8001b54:	3303      	adds	r3, #3
 8001b56:	68b9      	ldr	r1, [r7, #8]
 8001b58:	4419      	add	r1, r3
 8001b5a:	4817      	ldr	r0, [pc, #92]	; (8001bb8 <generate_line_buff+0x108>)
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	4403      	add	r3, r0
 8001b64:	3303      	adds	r3, #3
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	700b      	strb	r3, [r1, #0]
        linebuff[idx+4] = character_data[str[i]-0x20][4];
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	f1a3 0220 	sub.w	r2, r3, #32
 8001b76:	7cfb      	ldrb	r3, [r7, #19]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	68b9      	ldr	r1, [r7, #8]
 8001b7c:	4419      	add	r1, r3
 8001b7e:	480e      	ldr	r0, [pc, #56]	; (8001bb8 <generate_line_buff+0x108>)
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	4403      	add	r3, r0
 8001b88:	3304      	adds	r3, #4
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	700b      	strb	r3, [r1, #0]
        linebuff[idx+5] = 0x00;
 8001b8e:	7cfb      	ldrb	r3, [r7, #19]
 8001b90:	3305      	adds	r3, #5
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	4413      	add	r3, r2
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i<bufflen; i++){
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	db8d      	blt.n	8001ac4 <generate_line_buff+0x14>
    }
}
 8001ba8:	e000      	b.n	8001bac <generate_line_buff+0xfc>
            break;
 8001baa:	bf00      	nop
}
 8001bac:	bf00      	nop
 8001bae:	371c      	adds	r7, #28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	080038bc 	.word	0x080038bc

08001bbc <write_line_buff>:

void write_line_buff(uint8_t * linebuff, uint8_t * lcdbuff, uint8_t xoffset, uint8_t yoffset, uint8_t scrollena){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	461a      	mov	r2, r3
 8001bca:	460b      	mov	r3, r1
 8001bcc:	71fb      	strb	r3, [r7, #7]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	71bb      	strb	r3, [r7, #6]
    //  y offset refers to the line offset
    //note:     String will be capped, if it is longer than LCD_LINE_SIZE slices (i.e. 1 line)
    //note2:    String will be capped, if it exceeds size of lcdBuffer.
    //note3:    If scrolling is enabled, the LCD line will wrap around when xoffset is large enough.
    //          Otherwise, it will be capped.
    if (scrollena > 0){
 8001bd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d019      	beq.n	8001c0e <write_line_buff+0x52>
        for(uint8_t idx = 0; idx<LCD_LINE_SIZE; idx++){
 8001bda:	2300      	movs	r3, #0
 8001bdc:	75fb      	strb	r3, [r7, #23]
 8001bde:	e011      	b.n	8001c04 <write_line_buff+0x48>
            lcdbuff[idx+yoffset*LCD_LINE_SIZE] = linebuff[(idx + xoffset) & LCD_LINE_BUFF_SIZE-1];
 8001be0:	7dfa      	ldrb	r2, [r7, #23]
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	4413      	add	r3, r2
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	441a      	add	r2, r3
 8001bec:	7df9      	ldrb	r1, [r7, #23]
 8001bee:	79bb      	ldrb	r3, [r7, #6]
 8001bf0:	01db      	lsls	r3, r3, #7
 8001bf2:	440b      	add	r3, r1
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	440b      	add	r3, r1
 8001bfa:	7812      	ldrb	r2, [r2, #0]
 8001bfc:	701a      	strb	r2, [r3, #0]
        for(uint8_t idx = 0; idx<LCD_LINE_SIZE; idx++){
 8001bfe:	7dfb      	ldrb	r3, [r7, #23]
 8001c00:	3301      	adds	r3, #1
 8001c02:	75fb      	strb	r3, [r7, #23]
 8001c04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	dae9      	bge.n	8001be0 <write_line_buff+0x24>
        }
    }else{
        memcpy(lcdbuff + xoffset+yoffset*LCD_LINE_SIZE, linebuff, sizeof(uint8_t) * LCD_LINE_SIZE-xoffset);
    }

}
 8001c0c:	e00c      	b.n	8001c28 <write_line_buff+0x6c>
        memcpy(lcdbuff + xoffset+yoffset*LCD_LINE_SIZE, linebuff, sizeof(uint8_t) * LCD_LINE_SIZE-xoffset);
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	79ba      	ldrb	r2, [r7, #6]
 8001c12:	01d2      	lsls	r2, r2, #7
 8001c14:	4413      	add	r3, r2
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	18d0      	adds	r0, r2, r3
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001c20:	461a      	mov	r2, r3
 8001c22:	68f9      	ldr	r1, [r7, #12]
 8001c24:	f000 fb50 	bl	80022c8 <memcpy>
}
 8001c28:	bf00      	nop
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <lcd_write_string>:

void lcd_write_string(uint8_t * str, uint8_t * lcdBuff, uint8_t xoffset, uint8_t yoffset){
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	b0c7      	sub	sp, #284	; 0x11c
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8001c3a:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8001c3e:	6020      	str	r0, [r4, #0]
 8001c40:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8001c44:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8001c48:	6001      	str	r1, [r0, #0]
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c50:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001c54:	701a      	strb	r2, [r3, #0]
 8001c56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c5a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001c5e:	460a      	mov	r2, r1
 8001c60:	701a      	strb	r2, [r3, #0]
    uint8_t lineBuff[256];
    memset(lineBuff,0x00,256);
 8001c62:	f107 0310 	add.w	r3, r7, #16
 8001c66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 fb39 	bl	80022e4 <memset>
    //render a string and add to the line buffer (256 slices long)
    generate_line_buff(str, lineBuff, 255);
 8001c72:	f107 0110 	add.w	r1, r7, #16
 8001c76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c7e:	22ff      	movs	r2, #255	; 0xff
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	f7ff ff15 	bl	8001ab0 <generate_line_buff>
    //add line buffer to LCD buffer at a specific x,y position
    //  (horizontal scrolling is always disabled!)
    write_line_buff(lineBuff, lcdBuff, xoffset, yoffset, 0);
 8001c86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c8a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001c8e:	781c      	ldrb	r4, [r3, #0]
 8001c90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c94:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001c98:	781a      	ldrb	r2, [r3, #0]
 8001c9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c9e:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8001ca2:	f107 0010 	add.w	r0, r7, #16
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	4623      	mov	r3, r4
 8001cac:	6809      	ldr	r1, [r1, #0]
 8001cae:	f7ff ff85 	bl	8001bbc <write_line_buff>
}
 8001cb2:	bf00      	nop
 8001cb4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd90      	pop	{r4, r7, pc}

08001cbc <ADC_setup_PA>:

uint8_t adc_flag = 0;
uint16_t measurement_channel_1 = 0;
uint16_t measurement_channel_2 = 0;

void ADC_setup_PA(){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08c      	sub	sp, #48	; 0x30
 8001cc0:	af00      	add	r7, sp, #0
	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div8); //set ADC prescaler to 8 --> ADC clock frequency 8MHz
 8001cc2:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8001cc6:	f7ff f81d 	bl	8000d04 <RCC_ADCCLKConfig>
	RCC_AHBPeriphClockCmd(ADC1, ENABLE); // enable ADC interface
 8001cca:	2101      	movs	r1, #1
 8001ccc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001cd0:	f7ff f840 	bl	8000d54 <RCC_AHBPeriphClockCmd>

	//enable clock
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE); //enable clock GPIOA
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001cda:	f7ff f83b 	bl	8000d54 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(ADC1, ENABLE);               	// enable clocking for ADC1
 8001cde:	2101      	movs	r1, #1
 8001ce0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ce4:	f7ff f836 	bl	8000d54 <RCC_AHBPeriphClockCmd>

	//configure GPIO to ADC
	//PA0
	GPIO_InitTypeDef GPIO_InitStructure_PA0;
	GPIO_StructInit(&GPIO_InitStructure_PA0);
 8001ce8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fd62 	bl	80007b6 <GPIO_StructInit>
	GPIO_InitStructure_PA0.GPIO_Pin = GPIO_Pin_0 ;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStructure_PA0.GPIO_Mode = GPIO_Mode_AN;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GPIO_InitStructure_PA0.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	GPIO_Init(GPIOA, &GPIO_InitStructure_PA0);
 8001d02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d06:	4619      	mov	r1, r3
 8001d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d0c:	f7fe fcbd 	bl	800068a <GPIO_Init>

	// PA1
	GPIO_InitTypeDef GPIO_InitStructure_PA1;
	GPIO_StructInit(&GPIO_InitStructure_PA1);
 8001d10:	f107 0320 	add.w	r3, r7, #32
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fd4e 	bl	80007b6 <GPIO_StructInit>
	GPIO_InitStructure_PA1.GPIO_Pin = GPIO_Pin_1 ;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure_PA1.GPIO_Mode = GPIO_Mode_AN;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure_PA1.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOA, &GPIO_InitStructure_PA1);
 8001d2a:	f107 0320 	add.w	r3, r7, #32
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d34:	f7fe fca9 	bl	800068a <GPIO_Init>

	//configure ADC
	ADC_InitTypeDef ADC_InitStructure;
	ADC_StructInit(&ADC_InitStructure);
 8001d38:	463b      	mov	r3, r7
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fada 	bl	80002f4 <ADC_StructInit>
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE; //single-conversion
 8001d40:	2300      	movs	r3, #0
 8001d42:	603b      	str	r3, [r7, #0]
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b; //12 bit-resolution
 8001d44:	2300      	movs	r3, #0
 8001d46:	607b      	str	r3, [r7, #4]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right; //allign data to the right
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]
	ADC_Init(ADC1, &ADC_InitStructure);
 8001d4c:	463b      	mov	r3, r7
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001d54:	f7fe fa8c 	bl	8000270 <ADC_Init>
}
 8001d58:	bf00      	nop
 8001d5a:	3730      	adds	r7, #48	; 0x30
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <adc_calibrate>:

void adc_calibrate()
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
    // Calibrate ADC
	ADC_VoltageRegulatorCmd(ADC1,ENABLE);   // set internal reference voltage source and wait
 8001d66:	2101      	movs	r1, #1
 8001d68:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001d6c:	f7fe fb3d 	bl	80003ea <ADC_VoltageRegulatorCmd>
	for(uint32_t i = 0; i<10000;i++);       //Wait for at least 10uS before continuing...
 8001d70:	2300      	movs	r3, #0
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	e002      	b.n	8001d7c <adc_calibrate+0x1c>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d9f7      	bls.n	8001d76 <adc_calibrate+0x16>

	ADC_SelectCalibrationMode(ADC1,ADC_CalibrationMode_Single);
 8001d86:	2100      	movs	r1, #0
 8001d88:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001d8c:	f7fe fb00 	bl	8000390 <ADC_SelectCalibrationMode>
	ADC_StartCalibration(ADC1);
 8001d90:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001d94:	f7fe faec 	bl	8000370 <ADC_StartCalibration>

	while(ADC_GetCalibrationStatus(ADC1)){}
 8001d98:	bf00      	nop
 8001d9a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001d9e:	f7fe fb0e 	bl	80003be <ADC_GetCalibrationStatus>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f8      	bne.n	8001d9a <adc_calibrate+0x3a>
	for(uint32_t i = 0; i<100;i++);
 8001da8:	2300      	movs	r3, #0
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	e002      	b.n	8001db4 <adc_calibrate+0x54>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	3301      	adds	r3, #1
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	2b63      	cmp	r3, #99	; 0x63
 8001db8:	d9f9      	bls.n	8001dae <adc_calibrate+0x4e>

	// Enable ADC
	ADC_Cmd(ADC1,ENABLE);
 8001dba:	2101      	movs	r1, #1
 8001dbc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001dc0:	f7fe faba 	bl	8000338 <ADC_Cmd>
	while(!ADC_GetFlagStatus(ADC1,ADC_FLAG_RDY)){}
 8001dc4:	bf00      	nop
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001dcc:	f7fe fc44 	bl	8000658 <ADC_GetFlagStatus>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f7      	beq.n	8001dc6 <adc_calibrate+0x66>
}
 8001dd6:	bf00      	nop
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <ADC_measure_PA>:

uint16_t ADC_measure_PA(uint8_t ch){
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
	if(ch == 1){
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d107      	bne.n	8001e00 <ADC_measure_PA+0x20>
		ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_1Cycles5);
 8001df0:	2300      	movs	r3, #0
 8001df2:	2201      	movs	r2, #1
 8001df4:	2101      	movs	r1, #1
 8001df6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001dfa:	f7fe fb18 	bl	800042e <ADC_RegularChannelConfig>
 8001dfe:	e006      	b.n	8001e0e <ADC_measure_PA+0x2e>
	}
	else{
		ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 1, ADC_SampleTime_1Cycles5);
 8001e00:	2300      	movs	r3, #0
 8001e02:	2201      	movs	r2, #1
 8001e04:	2102      	movs	r1, #2
 8001e06:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001e0a:	f7fe fb10 	bl	800042e <ADC_RegularChannelConfig>
	}

	ADC_StartConversion(ADC1); // Start ADC read
 8001e0e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001e12:	f7fe fc04 	bl	800061e <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 8001e16:	bf00      	nop
 8001e18:	2104      	movs	r1, #4
 8001e1a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001e1e:	f7fe fc1b 	bl	8000658 <ADC_GetFlagStatus>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f7      	beq.n	8001e18 <ADC_measure_PA+0x38>

	uint16_t x = ADC_GetConversionValue(ADC1); // Read the ADC value
 8001e28:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001e2c:	f7fe fc07 	bl	800063e <ADC_GetConversionValue>
 8001e30:	4603      	mov	r3, r0
 8001e32:	81fb      	strh	r3, [r7, #14]
	return(x);
 8001e34:	89fb      	ldrh	r3, [r7, #14]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <initTimer>:

void initTimer(){
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
    // Timer
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
 8001e44:	2101      	movs	r1, #1
 8001e46:	2001      	movs	r0, #1
 8001e48:	f7fe ffa4 	bl	8000d94 <RCC_APB1PeriphClockCmd>

    // System clock is 64 MHz
    TIM_TimeBaseInitTypeDef TIM_InitStructure;
    TIM_TimeBaseStructInit(&TIM_InitStructure);
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff f86a 	bl	8000f28 <TIM_TimeBaseStructInit>
    TIM_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8001e54:	2300      	movs	r3, #0
 8001e56:	81bb      	strh	r3, [r7, #12]
    TIM_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	80fb      	strh	r3, [r7, #6]
    TIM_InitStructure.TIM_Prescaler = 64000; // 64MHz / 64e3 = 1kHz
 8001e5c:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 8001e60:	80bb      	strh	r3, [r7, #4]
    TIM_InitStructure.TIM_Period = 100; // 1kHz/100 = 10Hz iterrput period
 8001e62:	2364      	movs	r3, #100	; 0x64
 8001e64:	60bb      	str	r3, [r7, #8]
    TIM_TimeBaseInit(TIM2,&TIM_InitStructure);
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e6e:	f7fe ffe3 	bl	8000e38 <TIM_TimeBaseInit>

    // NVIC for timer
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 8001e72:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8001e76:	f7fe fcb9 	bl	80007ec <NVIC_PriorityGroupConfig>
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8001e7a:	231c      	movs	r3, #28
 8001e7c:	703b      	strb	r3, [r7, #0]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	70fb      	strb	r3, [r7, #3]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	707b      	strb	r3, [r7, #1]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8001e86:	2301      	movs	r3, #1
 8001e88:	70bb      	strb	r3, [r7, #2]
    NVIC_Init(&NVIC_InitStructure);
 8001e8a:	463b      	mov	r3, r7
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe fcc1 	bl	8000814 <NVIC_Init>

    TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE);
 8001e92:	2201      	movs	r2, #1
 8001e94:	2101      	movs	r1, #1
 8001e96:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e9a:	f7ff f87f 	bl	8000f9c <TIM_ITConfig>

    TIM_Cmd(TIM2,ENABLE);
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ea4:	f7ff f85a 	bl	8000f5c <TIM_Cmd>
}
 8001ea8:	bf00      	nop
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
    if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001eba:	f7ff f88f 	bl	8000fdc <TIM_GetITStatus>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d007      	beq.n	8001ed4 <TIM2_IRQHandler+0x24>
    {
    	adc_flag = 1;
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <TIM2_IRQHandler+0x28>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
    	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8001eca:	2101      	movs	r1, #1
 8001ecc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ed0:	f7ff f8ae 	bl	8001030 <TIM_ClearITPendingBit>
    }
}
 8001ed4:	bf00      	nop
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	200001af 	.word	0x200001af

08001edc <main>:

int main(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	f5ad 7d40 	sub.w	sp, sp, #768	; 0x300
 8001ee2:	af00      	add	r7, sp, #0
	uart_init(9600); // Initialize USB serial at 9600 baud
 8001ee4:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001ee8:	f7ff fa06 	bl	80012f8 <uart_init>
	printf("ADC Demo\n");
 8001eec:	4838      	ldr	r0, [pc, #224]	; (8001fd0 <main+0xf4>)
 8001eee:	f000 fa87 	bl	8002400 <puts>

	//LCD
	init_spi_lcd(); //Initialize SPI LCD
 8001ef2:	f7ff fc81 	bl	80017f8 <init_spi_lcd>

	uint8_t fbuffer[512]; //Create local frame buffer
	memset(fbuffer, 0x00, 512);
 8001ef6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 f9ef 	bl	80022e4 <memset>

    //Timer
    initTimer();
 8001f06:	f7ff ff9a 	bl	8001e3e <initTimer>
    printf("Timer Init done.\n");
 8001f0a:	4832      	ldr	r0, [pc, #200]	; (8001fd4 <main+0xf8>)
 8001f0c:	f000 fa78 	bl	8002400 <puts>

    //ADC
	ADC_setup_PA(); //setup
 8001f10:	f7ff fed4 	bl	8001cbc <ADC_setup_PA>
	printf("ADC Init done.\n");
 8001f14:	4830      	ldr	r0, [pc, #192]	; (8001fd8 <main+0xfc>)
 8001f16:	f000 fa73 	bl	8002400 <puts>

	adc_calibrate(); //calibrate
 8001f1a:	f7ff ff21 	bl	8001d60 <adc_calibrate>
	printf("Calibration done.\n");
 8001f1e:	482f      	ldr	r0, [pc, #188]	; (8001fdc <main+0x100>)
 8001f20:	f000 fa6e 	bl	8002400 <puts>

    ADC_Cmd(ADC1,ENABLE); //activate
 8001f24:	2101      	movs	r1, #1
 8001f26:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f2a:	f7fe fa05 	bl	8000338 <ADC_Cmd>
    while(!ADC_GetFlagStatus(ADC1,ADC_FLAG_RDY)){}
 8001f2e:	bf00      	nop
 8001f30:	2101      	movs	r1, #1
 8001f32:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f36:	f7fe fb8f 	bl	8000658 <ADC_GetFlagStatus>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f7      	beq.n	8001f30 <main+0x54>
    printf("ADC enabled.\n");
 8001f40:	4827      	ldr	r0, [pc, #156]	; (8001fe0 <main+0x104>)
 8001f42:	f000 fa5d 	bl	8002400 <puts>



	while(1){
		if(adc_flag == 1){
 8001f46:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <main+0x108>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d110      	bne.n	8001f70 <main+0x94>
			measurement_channel_1 = ADC_measure_PA(1);
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f7ff ff46 	bl	8001de0 <ADC_measure_PA>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461a      	mov	r2, r3
 8001f58:	4b23      	ldr	r3, [pc, #140]	; (8001fe8 <main+0x10c>)
 8001f5a:	801a      	strh	r2, [r3, #0]
			measurement_channel_2 = ADC_measure_PA(2);
 8001f5c:	2002      	movs	r0, #2
 8001f5e:	f7ff ff3f 	bl	8001de0 <ADC_measure_PA>
 8001f62:	4603      	mov	r3, r0
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b21      	ldr	r3, [pc, #132]	; (8001fec <main+0x110>)
 8001f68:	801a      	strh	r2, [r3, #0]
			adc_flag = 0;
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <main+0x108>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
		}

		char line[128]; //Create character array for line 1
		sprintf(line, "Channel 1: %d", measurement_channel_1);
 8001f70:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <main+0x10c>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	461a      	mov	r2, r3
 8001f76:	463b      	mov	r3, r7
 8001f78:	491d      	ldr	r1, [pc, #116]	; (8001ff0 <main+0x114>)
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 fb16 	bl	80025ac <siprintf>

		char line1[128]; //Create character array for line 2
		sprintf(line1, "Channel 2: %d", measurement_channel_2);
 8001f80:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <main+0x110>)
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	461a      	mov	r2, r3
 8001f86:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f8a:	491a      	ldr	r1, [pc, #104]	; (8001ff4 <main+0x118>)
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 fb0d 	bl	80025ac <siprintf>

		lcd_write_string((uint8_t*)line, fbuffer, 0, 0); //write line to frame buffer
 8001f92:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001f96:	4638      	mov	r0, r7
 8001f98:	2300      	movs	r3, #0
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f7ff fe48 	bl	8001c30 <lcd_write_string>
		lcd_write_string((uint8_t*)line1, fbuffer, 0, 1); //write line to frame buffer
 8001fa0:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001fa4:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8001fa8:	2301      	movs	r3, #1
 8001faa:	2200      	movs	r2, #0
 8001fac:	f7ff fe40 	bl	8001c30 <lcd_write_string>

		lcd_push_buffer(fbuffer); //push frame buffer to lcd
 8001fb0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff faeb 	bl	8001590 <lcd_push_buffer>

		printf("1: %d, 2: %d\n", measurement_channel_1, measurement_channel_2);
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <main+0x10c>)
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <main+0x110>)
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	480c      	ldr	r0, [pc, #48]	; (8001ff8 <main+0x11c>)
 8001fc8:	f000 f994 	bl	80022f4 <iprintf>
	while(1){
 8001fcc:	e7bb      	b.n	8001f46 <main+0x6a>
 8001fce:	bf00      	nop
 8001fd0:	08003838 	.word	0x08003838
 8001fd4:	08003844 	.word	0x08003844
 8001fd8:	08003858 	.word	0x08003858
 8001fdc:	08003868 	.word	0x08003868
 8001fe0:	0800387c 	.word	0x0800387c
 8001fe4:	200001af 	.word	0x200001af
 8001fe8:	200001b0 	.word	0x200001b0
 8001fec:	200001b2 	.word	0x200001b2
 8001ff0:	0800388c 	.word	0x0800388c
 8001ff4:	0800389c 	.word	0x0800389c
 8001ff8:	080038ac 	.word	0x080038ac

08001ffc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	e00a      	b.n	8002024 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800200e:	f3af 8000 	nop.w
 8002012:	4601      	mov	r1, r0
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	60ba      	str	r2, [r7, #8]
 800201a:	b2ca      	uxtb	r2, r1
 800201c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	3301      	adds	r3, #1
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	429a      	cmp	r2, r3
 800202a:	dbf0      	blt.n	800200e <_read+0x12>
	}

return len;
 800202c:	687b      	ldr	r3, [r7, #4]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
	return -1;
 800203e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800205e:	605a      	str	r2, [r3, #4]
	return 0;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <_isatty>:

int _isatty(int file)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
	return 1;
 8002076:	2301      	movs	r3, #1
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
	return 0;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <_sbrk+0x50>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <_sbrk+0x16>
		heap_end = &end;
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <_sbrk+0x50>)
 80020b2:	4a10      	ldr	r2, [pc, #64]	; (80020f4 <_sbrk+0x54>)
 80020b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <_sbrk+0x50>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <_sbrk+0x50>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	466a      	mov	r2, sp
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d907      	bls.n	80020da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80020ca:	f000 f8d3 	bl	8002274 <__errno>
 80020ce:	4603      	mov	r3, r0
 80020d0:	220c      	movs	r2, #12
 80020d2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80020d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020d8:	e006      	b.n	80020e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80020da:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <_sbrk+0x50>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	4a03      	ldr	r2, [pc, #12]	; (80020f0 <_sbrk+0x50>)
 80020e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80020e6:	68fb      	ldr	r3, [r7, #12]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	200001b4 	.word	0x200001b4
 80020f4:	200001c8 	.word	0x200001c8

080020f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020fc:	4b1f      	ldr	r3, [pc, #124]	; (800217c <SystemInit+0x84>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002102:	4a1e      	ldr	r2, [pc, #120]	; (800217c <SystemInit+0x84>)
 8002104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800210c:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <SystemInit+0x88>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <SystemInit+0x88>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <SystemInit+0x88>)
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	4918      	ldr	r1, [pc, #96]	; (8002180 <SystemInit+0x88>)
 800211e:	4b19      	ldr	r3, [pc, #100]	; (8002184 <SystemInit+0x8c>)
 8002120:	4013      	ands	r3, r2
 8002122:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002124:	4b16      	ldr	r3, [pc, #88]	; (8002180 <SystemInit+0x88>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a15      	ldr	r2, [pc, #84]	; (8002180 <SystemInit+0x88>)
 800212a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800212e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002132:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002134:	4b12      	ldr	r3, [pc, #72]	; (8002180 <SystemInit+0x88>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a11      	ldr	r2, [pc, #68]	; (8002180 <SystemInit+0x88>)
 800213a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002140:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <SystemInit+0x88>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a0e      	ldr	r2, [pc, #56]	; (8002180 <SystemInit+0x88>)
 8002146:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800214a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <SystemInit+0x88>)
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	4a0b      	ldr	r2, [pc, #44]	; (8002180 <SystemInit+0x88>)
 8002152:	f023 030f 	bic.w	r3, r3, #15
 8002156:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <SystemInit+0x88>)
 800215a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800215c:	4908      	ldr	r1, [pc, #32]	; (8002180 <SystemInit+0x88>)
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <SystemInit+0x90>)
 8002160:	4013      	ands	r3, r2
 8002162:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <SystemInit+0x88>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800216a:	f000 f80f 	bl	800218c <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800216e:	4b03      	ldr	r3, [pc, #12]	; (800217c <SystemInit+0x84>)
 8002170:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002174:	609a      	str	r2, [r3, #8]
#endif  
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	e000ed00 	.word	0xe000ed00
 8002180:	40021000 	.word	0x40021000
 8002184:	f87fc00c 	.word	0xf87fc00c
 8002188:	ff00fccc 	.word	0xff00fccc

0800218c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8002190:	4b21      	ldr	r3, [pc, #132]	; (8002218 <SetSysClock+0x8c>)
 8002192:	2212      	movs	r2, #18
 8002194:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002196:	4b21      	ldr	r3, [pc, #132]	; (800221c <SetSysClock+0x90>)
 8002198:	4a20      	ldr	r2, [pc, #128]	; (800221c <SetSysClock+0x90>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800219e:	4b1f      	ldr	r3, [pc, #124]	; (800221c <SetSysClock+0x90>)
 80021a0:	4a1e      	ldr	r2, [pc, #120]	; (800221c <SetSysClock+0x90>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80021a6:	4b1d      	ldr	r3, [pc, #116]	; (800221c <SetSysClock+0x90>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4a1c      	ldr	r2, [pc, #112]	; (800221c <SetSysClock+0x90>)
 80021ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021b0:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80021b2:	4b1a      	ldr	r3, [pc, #104]	; (800221c <SetSysClock+0x90>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4a19      	ldr	r2, [pc, #100]	; (800221c <SetSysClock+0x90>)
 80021b8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80021bc:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 80021be:	4b17      	ldr	r3, [pc, #92]	; (800221c <SetSysClock+0x90>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4a16      	ldr	r2, [pc, #88]	; (800221c <SetSysClock+0x90>)
 80021c4:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80021c8:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80021ca:	4b14      	ldr	r3, [pc, #80]	; (800221c <SetSysClock+0x90>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a13      	ldr	r2, [pc, #76]	; (800221c <SetSysClock+0x90>)
 80021d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d4:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80021d6:	bf00      	nop
 80021d8:	4b10      	ldr	r3, [pc, #64]	; (800221c <SetSysClock+0x90>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f9      	beq.n	80021d8 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80021e4:	4b0d      	ldr	r3, [pc, #52]	; (800221c <SetSysClock+0x90>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4a0c      	ldr	r2, [pc, #48]	; (800221c <SetSysClock+0x90>)
 80021ea:	f023 0303 	bic.w	r3, r3, #3
 80021ee:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80021f0:	4b0a      	ldr	r3, [pc, #40]	; (800221c <SetSysClock+0x90>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	4a09      	ldr	r2, [pc, #36]	; (800221c <SetSysClock+0x90>)
 80021f6:	f043 0302 	orr.w	r3, r3, #2
 80021fa:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80021fc:	bf00      	nop
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <SetSysClock+0x90>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b08      	cmp	r3, #8
 8002208:	d1f9      	bne.n	80021fe <SetSysClock+0x72>
  {
  }
}
 800220a:	bf00      	nop
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40022000 	.word	0x40022000
 800221c:	40021000 	.word	0x40021000

08002220 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002220:	480d      	ldr	r0, [pc, #52]	; (8002258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002222:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002224:	480d      	ldr	r0, [pc, #52]	; (800225c <LoopForever+0x6>)
  ldr r1, =_edata
 8002226:	490e      	ldr	r1, [pc, #56]	; (8002260 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002228:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <LoopForever+0xe>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800222c:	e002      	b.n	8002234 <LoopCopyDataInit>

0800222e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002232:	3304      	adds	r3, #4

08002234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002238:	d3f9      	bcc.n	800222e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223a:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <LoopForever+0x12>)
  ldr r4, =_ebss
 800223c:	4c0b      	ldr	r4, [pc, #44]	; (800226c <LoopForever+0x16>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002240:	e001      	b.n	8002246 <LoopFillZerobss>

08002242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002244:	3204      	adds	r2, #4

08002246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002248:	d3fb      	bcc.n	8002242 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800224a:	f7ff ff55 	bl	80020f8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800224e:	f000 f817 	bl	8002280 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002252:	f7ff fe43 	bl	8001edc <main>

08002256 <LoopForever>:

LoopForever:
    b LoopForever
 8002256:	e7fe      	b.n	8002256 <LoopForever>
  ldr   r0, =_estack
 8002258:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800225c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002260:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002264:	08003b38 	.word	0x08003b38
  ldr r2, =_sbss
 8002268:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800226c:	200001c8 	.word	0x200001c8

08002270 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002270:	e7fe      	b.n	8002270 <ADC1_2_IRQHandler>
	...

08002274 <__errno>:
 8002274:	4b01      	ldr	r3, [pc, #4]	; (800227c <__errno+0x8>)
 8002276:	6818      	ldr	r0, [r3, #0]
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	2000002c 	.word	0x2000002c

08002280 <__libc_init_array>:
 8002280:	b570      	push	{r4, r5, r6, lr}
 8002282:	4d0d      	ldr	r5, [pc, #52]	; (80022b8 <__libc_init_array+0x38>)
 8002284:	4c0d      	ldr	r4, [pc, #52]	; (80022bc <__libc_init_array+0x3c>)
 8002286:	1b64      	subs	r4, r4, r5
 8002288:	10a4      	asrs	r4, r4, #2
 800228a:	2600      	movs	r6, #0
 800228c:	42a6      	cmp	r6, r4
 800228e:	d109      	bne.n	80022a4 <__libc_init_array+0x24>
 8002290:	4d0b      	ldr	r5, [pc, #44]	; (80022c0 <__libc_init_array+0x40>)
 8002292:	4c0c      	ldr	r4, [pc, #48]	; (80022c4 <__libc_init_array+0x44>)
 8002294:	f001 fac4 	bl	8003820 <_init>
 8002298:	1b64      	subs	r4, r4, r5
 800229a:	10a4      	asrs	r4, r4, #2
 800229c:	2600      	movs	r6, #0
 800229e:	42a6      	cmp	r6, r4
 80022a0:	d105      	bne.n	80022ae <__libc_init_array+0x2e>
 80022a2:	bd70      	pop	{r4, r5, r6, pc}
 80022a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80022a8:	4798      	blx	r3
 80022aa:	3601      	adds	r6, #1
 80022ac:	e7ee      	b.n	800228c <__libc_init_array+0xc>
 80022ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80022b2:	4798      	blx	r3
 80022b4:	3601      	adds	r6, #1
 80022b6:	e7f2      	b.n	800229e <__libc_init_array+0x1e>
 80022b8:	08003b30 	.word	0x08003b30
 80022bc:	08003b30 	.word	0x08003b30
 80022c0:	08003b30 	.word	0x08003b30
 80022c4:	08003b34 	.word	0x08003b34

080022c8 <memcpy>:
 80022c8:	440a      	add	r2, r1
 80022ca:	4291      	cmp	r1, r2
 80022cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80022d0:	d100      	bne.n	80022d4 <memcpy+0xc>
 80022d2:	4770      	bx	lr
 80022d4:	b510      	push	{r4, lr}
 80022d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80022da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80022de:	4291      	cmp	r1, r2
 80022e0:	d1f9      	bne.n	80022d6 <memcpy+0xe>
 80022e2:	bd10      	pop	{r4, pc}

080022e4 <memset>:
 80022e4:	4402      	add	r2, r0
 80022e6:	4603      	mov	r3, r0
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d100      	bne.n	80022ee <memset+0xa>
 80022ec:	4770      	bx	lr
 80022ee:	f803 1b01 	strb.w	r1, [r3], #1
 80022f2:	e7f9      	b.n	80022e8 <memset+0x4>

080022f4 <iprintf>:
 80022f4:	b40f      	push	{r0, r1, r2, r3}
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <iprintf+0x2c>)
 80022f8:	b513      	push	{r0, r1, r4, lr}
 80022fa:	681c      	ldr	r4, [r3, #0]
 80022fc:	b124      	cbz	r4, 8002308 <iprintf+0x14>
 80022fe:	69a3      	ldr	r3, [r4, #24]
 8002300:	b913      	cbnz	r3, 8002308 <iprintf+0x14>
 8002302:	4620      	mov	r0, r4
 8002304:	f000 fb4c 	bl	80029a0 <__sinit>
 8002308:	ab05      	add	r3, sp, #20
 800230a:	9a04      	ldr	r2, [sp, #16]
 800230c:	68a1      	ldr	r1, [r4, #8]
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	4620      	mov	r0, r4
 8002312:	f000 feb9 	bl	8003088 <_vfiprintf_r>
 8002316:	b002      	add	sp, #8
 8002318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800231c:	b004      	add	sp, #16
 800231e:	4770      	bx	lr
 8002320:	2000002c 	.word	0x2000002c

08002324 <_puts_r>:
 8002324:	b570      	push	{r4, r5, r6, lr}
 8002326:	460e      	mov	r6, r1
 8002328:	4605      	mov	r5, r0
 800232a:	b118      	cbz	r0, 8002334 <_puts_r+0x10>
 800232c:	6983      	ldr	r3, [r0, #24]
 800232e:	b90b      	cbnz	r3, 8002334 <_puts_r+0x10>
 8002330:	f000 fb36 	bl	80029a0 <__sinit>
 8002334:	69ab      	ldr	r3, [r5, #24]
 8002336:	68ac      	ldr	r4, [r5, #8]
 8002338:	b913      	cbnz	r3, 8002340 <_puts_r+0x1c>
 800233a:	4628      	mov	r0, r5
 800233c:	f000 fb30 	bl	80029a0 <__sinit>
 8002340:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <_puts_r+0xd0>)
 8002342:	429c      	cmp	r4, r3
 8002344:	d120      	bne.n	8002388 <_puts_r+0x64>
 8002346:	686c      	ldr	r4, [r5, #4]
 8002348:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800234a:	07db      	lsls	r3, r3, #31
 800234c:	d405      	bmi.n	800235a <_puts_r+0x36>
 800234e:	89a3      	ldrh	r3, [r4, #12]
 8002350:	0598      	lsls	r0, r3, #22
 8002352:	d402      	bmi.n	800235a <_puts_r+0x36>
 8002354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002356:	f000 fbc1 	bl	8002adc <__retarget_lock_acquire_recursive>
 800235a:	89a3      	ldrh	r3, [r4, #12]
 800235c:	0719      	lsls	r1, r3, #28
 800235e:	d51d      	bpl.n	800239c <_puts_r+0x78>
 8002360:	6923      	ldr	r3, [r4, #16]
 8002362:	b1db      	cbz	r3, 800239c <_puts_r+0x78>
 8002364:	3e01      	subs	r6, #1
 8002366:	68a3      	ldr	r3, [r4, #8]
 8002368:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800236c:	3b01      	subs	r3, #1
 800236e:	60a3      	str	r3, [r4, #8]
 8002370:	bb39      	cbnz	r1, 80023c2 <_puts_r+0x9e>
 8002372:	2b00      	cmp	r3, #0
 8002374:	da38      	bge.n	80023e8 <_puts_r+0xc4>
 8002376:	4622      	mov	r2, r4
 8002378:	210a      	movs	r1, #10
 800237a:	4628      	mov	r0, r5
 800237c:	f000 f936 	bl	80025ec <__swbuf_r>
 8002380:	3001      	adds	r0, #1
 8002382:	d011      	beq.n	80023a8 <_puts_r+0x84>
 8002384:	250a      	movs	r5, #10
 8002386:	e011      	b.n	80023ac <_puts_r+0x88>
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <_puts_r+0xd4>)
 800238a:	429c      	cmp	r4, r3
 800238c:	d101      	bne.n	8002392 <_puts_r+0x6e>
 800238e:	68ac      	ldr	r4, [r5, #8]
 8002390:	e7da      	b.n	8002348 <_puts_r+0x24>
 8002392:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <_puts_r+0xd8>)
 8002394:	429c      	cmp	r4, r3
 8002396:	bf08      	it	eq
 8002398:	68ec      	ldreq	r4, [r5, #12]
 800239a:	e7d5      	b.n	8002348 <_puts_r+0x24>
 800239c:	4621      	mov	r1, r4
 800239e:	4628      	mov	r0, r5
 80023a0:	f000 f976 	bl	8002690 <__swsetup_r>
 80023a4:	2800      	cmp	r0, #0
 80023a6:	d0dd      	beq.n	8002364 <_puts_r+0x40>
 80023a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80023ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80023ae:	07da      	lsls	r2, r3, #31
 80023b0:	d405      	bmi.n	80023be <_puts_r+0x9a>
 80023b2:	89a3      	ldrh	r3, [r4, #12]
 80023b4:	059b      	lsls	r3, r3, #22
 80023b6:	d402      	bmi.n	80023be <_puts_r+0x9a>
 80023b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023ba:	f000 fb90 	bl	8002ade <__retarget_lock_release_recursive>
 80023be:	4628      	mov	r0, r5
 80023c0:	bd70      	pop	{r4, r5, r6, pc}
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	da04      	bge.n	80023d0 <_puts_r+0xac>
 80023c6:	69a2      	ldr	r2, [r4, #24]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	dc06      	bgt.n	80023da <_puts_r+0xb6>
 80023cc:	290a      	cmp	r1, #10
 80023ce:	d004      	beq.n	80023da <_puts_r+0xb6>
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	6022      	str	r2, [r4, #0]
 80023d6:	7019      	strb	r1, [r3, #0]
 80023d8:	e7c5      	b.n	8002366 <_puts_r+0x42>
 80023da:	4622      	mov	r2, r4
 80023dc:	4628      	mov	r0, r5
 80023de:	f000 f905 	bl	80025ec <__swbuf_r>
 80023e2:	3001      	adds	r0, #1
 80023e4:	d1bf      	bne.n	8002366 <_puts_r+0x42>
 80023e6:	e7df      	b.n	80023a8 <_puts_r+0x84>
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	250a      	movs	r5, #10
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	6022      	str	r2, [r4, #0]
 80023f0:	701d      	strb	r5, [r3, #0]
 80023f2:	e7db      	b.n	80023ac <_puts_r+0x88>
 80023f4:	08003abc 	.word	0x08003abc
 80023f8:	08003adc 	.word	0x08003adc
 80023fc:	08003a9c 	.word	0x08003a9c

08002400 <puts>:
 8002400:	4b02      	ldr	r3, [pc, #8]	; (800240c <puts+0xc>)
 8002402:	4601      	mov	r1, r0
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	f7ff bf8d 	b.w	8002324 <_puts_r>
 800240a:	bf00      	nop
 800240c:	2000002c 	.word	0x2000002c

08002410 <setbuf>:
 8002410:	2900      	cmp	r1, #0
 8002412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002416:	bf0c      	ite	eq
 8002418:	2202      	moveq	r2, #2
 800241a:	2200      	movne	r2, #0
 800241c:	f000 b800 	b.w	8002420 <setvbuf>

08002420 <setvbuf>:
 8002420:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002424:	461d      	mov	r5, r3
 8002426:	4b5d      	ldr	r3, [pc, #372]	; (800259c <setvbuf+0x17c>)
 8002428:	681f      	ldr	r7, [r3, #0]
 800242a:	4604      	mov	r4, r0
 800242c:	460e      	mov	r6, r1
 800242e:	4690      	mov	r8, r2
 8002430:	b127      	cbz	r7, 800243c <setvbuf+0x1c>
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	b913      	cbnz	r3, 800243c <setvbuf+0x1c>
 8002436:	4638      	mov	r0, r7
 8002438:	f000 fab2 	bl	80029a0 <__sinit>
 800243c:	4b58      	ldr	r3, [pc, #352]	; (80025a0 <setvbuf+0x180>)
 800243e:	429c      	cmp	r4, r3
 8002440:	d167      	bne.n	8002512 <setvbuf+0xf2>
 8002442:	687c      	ldr	r4, [r7, #4]
 8002444:	f1b8 0f02 	cmp.w	r8, #2
 8002448:	d006      	beq.n	8002458 <setvbuf+0x38>
 800244a:	f1b8 0f01 	cmp.w	r8, #1
 800244e:	f200 809f 	bhi.w	8002590 <setvbuf+0x170>
 8002452:	2d00      	cmp	r5, #0
 8002454:	f2c0 809c 	blt.w	8002590 <setvbuf+0x170>
 8002458:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800245a:	07db      	lsls	r3, r3, #31
 800245c:	d405      	bmi.n	800246a <setvbuf+0x4a>
 800245e:	89a3      	ldrh	r3, [r4, #12]
 8002460:	0598      	lsls	r0, r3, #22
 8002462:	d402      	bmi.n	800246a <setvbuf+0x4a>
 8002464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002466:	f000 fb39 	bl	8002adc <__retarget_lock_acquire_recursive>
 800246a:	4621      	mov	r1, r4
 800246c:	4638      	mov	r0, r7
 800246e:	f000 fa03 	bl	8002878 <_fflush_r>
 8002472:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002474:	b141      	cbz	r1, 8002488 <setvbuf+0x68>
 8002476:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800247a:	4299      	cmp	r1, r3
 800247c:	d002      	beq.n	8002484 <setvbuf+0x64>
 800247e:	4638      	mov	r0, r7
 8002480:	f000 fb9c 	bl	8002bbc <_free_r>
 8002484:	2300      	movs	r3, #0
 8002486:	6363      	str	r3, [r4, #52]	; 0x34
 8002488:	2300      	movs	r3, #0
 800248a:	61a3      	str	r3, [r4, #24]
 800248c:	6063      	str	r3, [r4, #4]
 800248e:	89a3      	ldrh	r3, [r4, #12]
 8002490:	0619      	lsls	r1, r3, #24
 8002492:	d503      	bpl.n	800249c <setvbuf+0x7c>
 8002494:	6921      	ldr	r1, [r4, #16]
 8002496:	4638      	mov	r0, r7
 8002498:	f000 fb90 	bl	8002bbc <_free_r>
 800249c:	89a3      	ldrh	r3, [r4, #12]
 800249e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80024a2:	f023 0303 	bic.w	r3, r3, #3
 80024a6:	f1b8 0f02 	cmp.w	r8, #2
 80024aa:	81a3      	strh	r3, [r4, #12]
 80024ac:	d06c      	beq.n	8002588 <setvbuf+0x168>
 80024ae:	ab01      	add	r3, sp, #4
 80024b0:	466a      	mov	r2, sp
 80024b2:	4621      	mov	r1, r4
 80024b4:	4638      	mov	r0, r7
 80024b6:	f000 fb13 	bl	8002ae0 <__swhatbuf_r>
 80024ba:	89a3      	ldrh	r3, [r4, #12]
 80024bc:	4318      	orrs	r0, r3
 80024be:	81a0      	strh	r0, [r4, #12]
 80024c0:	2d00      	cmp	r5, #0
 80024c2:	d130      	bne.n	8002526 <setvbuf+0x106>
 80024c4:	9d00      	ldr	r5, [sp, #0]
 80024c6:	4628      	mov	r0, r5
 80024c8:	f000 fb70 	bl	8002bac <malloc>
 80024cc:	4606      	mov	r6, r0
 80024ce:	2800      	cmp	r0, #0
 80024d0:	d155      	bne.n	800257e <setvbuf+0x15e>
 80024d2:	f8dd 9000 	ldr.w	r9, [sp]
 80024d6:	45a9      	cmp	r9, r5
 80024d8:	d14a      	bne.n	8002570 <setvbuf+0x150>
 80024da:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80024de:	2200      	movs	r2, #0
 80024e0:	60a2      	str	r2, [r4, #8]
 80024e2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80024e6:	6022      	str	r2, [r4, #0]
 80024e8:	6122      	str	r2, [r4, #16]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024f0:	6162      	str	r2, [r4, #20]
 80024f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80024f4:	f043 0302 	orr.w	r3, r3, #2
 80024f8:	07d2      	lsls	r2, r2, #31
 80024fa:	81a3      	strh	r3, [r4, #12]
 80024fc:	d405      	bmi.n	800250a <setvbuf+0xea>
 80024fe:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002502:	d102      	bne.n	800250a <setvbuf+0xea>
 8002504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002506:	f000 faea 	bl	8002ade <__retarget_lock_release_recursive>
 800250a:	4628      	mov	r0, r5
 800250c:	b003      	add	sp, #12
 800250e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002512:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <setvbuf+0x184>)
 8002514:	429c      	cmp	r4, r3
 8002516:	d101      	bne.n	800251c <setvbuf+0xfc>
 8002518:	68bc      	ldr	r4, [r7, #8]
 800251a:	e793      	b.n	8002444 <setvbuf+0x24>
 800251c:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <setvbuf+0x188>)
 800251e:	429c      	cmp	r4, r3
 8002520:	bf08      	it	eq
 8002522:	68fc      	ldreq	r4, [r7, #12]
 8002524:	e78e      	b.n	8002444 <setvbuf+0x24>
 8002526:	2e00      	cmp	r6, #0
 8002528:	d0cd      	beq.n	80024c6 <setvbuf+0xa6>
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	b913      	cbnz	r3, 8002534 <setvbuf+0x114>
 800252e:	4638      	mov	r0, r7
 8002530:	f000 fa36 	bl	80029a0 <__sinit>
 8002534:	f1b8 0f01 	cmp.w	r8, #1
 8002538:	bf08      	it	eq
 800253a:	89a3      	ldrheq	r3, [r4, #12]
 800253c:	6026      	str	r6, [r4, #0]
 800253e:	bf04      	itt	eq
 8002540:	f043 0301 	orreq.w	r3, r3, #1
 8002544:	81a3      	strheq	r3, [r4, #12]
 8002546:	89a2      	ldrh	r2, [r4, #12]
 8002548:	f012 0308 	ands.w	r3, r2, #8
 800254c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002550:	d01c      	beq.n	800258c <setvbuf+0x16c>
 8002552:	07d3      	lsls	r3, r2, #31
 8002554:	bf41      	itttt	mi
 8002556:	2300      	movmi	r3, #0
 8002558:	426d      	negmi	r5, r5
 800255a:	60a3      	strmi	r3, [r4, #8]
 800255c:	61a5      	strmi	r5, [r4, #24]
 800255e:	bf58      	it	pl
 8002560:	60a5      	strpl	r5, [r4, #8]
 8002562:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002564:	f015 0501 	ands.w	r5, r5, #1
 8002568:	d115      	bne.n	8002596 <setvbuf+0x176>
 800256a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800256e:	e7c8      	b.n	8002502 <setvbuf+0xe2>
 8002570:	4648      	mov	r0, r9
 8002572:	f000 fb1b 	bl	8002bac <malloc>
 8002576:	4606      	mov	r6, r0
 8002578:	2800      	cmp	r0, #0
 800257a:	d0ae      	beq.n	80024da <setvbuf+0xba>
 800257c:	464d      	mov	r5, r9
 800257e:	89a3      	ldrh	r3, [r4, #12]
 8002580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002584:	81a3      	strh	r3, [r4, #12]
 8002586:	e7d0      	b.n	800252a <setvbuf+0x10a>
 8002588:	2500      	movs	r5, #0
 800258a:	e7a8      	b.n	80024de <setvbuf+0xbe>
 800258c:	60a3      	str	r3, [r4, #8]
 800258e:	e7e8      	b.n	8002562 <setvbuf+0x142>
 8002590:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002594:	e7b9      	b.n	800250a <setvbuf+0xea>
 8002596:	2500      	movs	r5, #0
 8002598:	e7b7      	b.n	800250a <setvbuf+0xea>
 800259a:	bf00      	nop
 800259c:	2000002c 	.word	0x2000002c
 80025a0:	08003abc 	.word	0x08003abc
 80025a4:	08003adc 	.word	0x08003adc
 80025a8:	08003a9c 	.word	0x08003a9c

080025ac <siprintf>:
 80025ac:	b40e      	push	{r1, r2, r3}
 80025ae:	b500      	push	{lr}
 80025b0:	b09c      	sub	sp, #112	; 0x70
 80025b2:	ab1d      	add	r3, sp, #116	; 0x74
 80025b4:	9002      	str	r0, [sp, #8]
 80025b6:	9006      	str	r0, [sp, #24]
 80025b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80025bc:	4809      	ldr	r0, [pc, #36]	; (80025e4 <siprintf+0x38>)
 80025be:	9107      	str	r1, [sp, #28]
 80025c0:	9104      	str	r1, [sp, #16]
 80025c2:	4909      	ldr	r1, [pc, #36]	; (80025e8 <siprintf+0x3c>)
 80025c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80025c8:	9105      	str	r1, [sp, #20]
 80025ca:	6800      	ldr	r0, [r0, #0]
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	a902      	add	r1, sp, #8
 80025d0:	f000 fc30 	bl	8002e34 <_svfiprintf_r>
 80025d4:	9b02      	ldr	r3, [sp, #8]
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	b01c      	add	sp, #112	; 0x70
 80025dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80025e0:	b003      	add	sp, #12
 80025e2:	4770      	bx	lr
 80025e4:	2000002c 	.word	0x2000002c
 80025e8:	ffff0208 	.word	0xffff0208

080025ec <__swbuf_r>:
 80025ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ee:	460e      	mov	r6, r1
 80025f0:	4614      	mov	r4, r2
 80025f2:	4605      	mov	r5, r0
 80025f4:	b118      	cbz	r0, 80025fe <__swbuf_r+0x12>
 80025f6:	6983      	ldr	r3, [r0, #24]
 80025f8:	b90b      	cbnz	r3, 80025fe <__swbuf_r+0x12>
 80025fa:	f000 f9d1 	bl	80029a0 <__sinit>
 80025fe:	4b21      	ldr	r3, [pc, #132]	; (8002684 <__swbuf_r+0x98>)
 8002600:	429c      	cmp	r4, r3
 8002602:	d12b      	bne.n	800265c <__swbuf_r+0x70>
 8002604:	686c      	ldr	r4, [r5, #4]
 8002606:	69a3      	ldr	r3, [r4, #24]
 8002608:	60a3      	str	r3, [r4, #8]
 800260a:	89a3      	ldrh	r3, [r4, #12]
 800260c:	071a      	lsls	r2, r3, #28
 800260e:	d52f      	bpl.n	8002670 <__swbuf_r+0x84>
 8002610:	6923      	ldr	r3, [r4, #16]
 8002612:	b36b      	cbz	r3, 8002670 <__swbuf_r+0x84>
 8002614:	6923      	ldr	r3, [r4, #16]
 8002616:	6820      	ldr	r0, [r4, #0]
 8002618:	1ac0      	subs	r0, r0, r3
 800261a:	6963      	ldr	r3, [r4, #20]
 800261c:	b2f6      	uxtb	r6, r6
 800261e:	4283      	cmp	r3, r0
 8002620:	4637      	mov	r7, r6
 8002622:	dc04      	bgt.n	800262e <__swbuf_r+0x42>
 8002624:	4621      	mov	r1, r4
 8002626:	4628      	mov	r0, r5
 8002628:	f000 f926 	bl	8002878 <_fflush_r>
 800262c:	bb30      	cbnz	r0, 800267c <__swbuf_r+0x90>
 800262e:	68a3      	ldr	r3, [r4, #8]
 8002630:	3b01      	subs	r3, #1
 8002632:	60a3      	str	r3, [r4, #8]
 8002634:	6823      	ldr	r3, [r4, #0]
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	6022      	str	r2, [r4, #0]
 800263a:	701e      	strb	r6, [r3, #0]
 800263c:	6963      	ldr	r3, [r4, #20]
 800263e:	3001      	adds	r0, #1
 8002640:	4283      	cmp	r3, r0
 8002642:	d004      	beq.n	800264e <__swbuf_r+0x62>
 8002644:	89a3      	ldrh	r3, [r4, #12]
 8002646:	07db      	lsls	r3, r3, #31
 8002648:	d506      	bpl.n	8002658 <__swbuf_r+0x6c>
 800264a:	2e0a      	cmp	r6, #10
 800264c:	d104      	bne.n	8002658 <__swbuf_r+0x6c>
 800264e:	4621      	mov	r1, r4
 8002650:	4628      	mov	r0, r5
 8002652:	f000 f911 	bl	8002878 <_fflush_r>
 8002656:	b988      	cbnz	r0, 800267c <__swbuf_r+0x90>
 8002658:	4638      	mov	r0, r7
 800265a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <__swbuf_r+0x9c>)
 800265e:	429c      	cmp	r4, r3
 8002660:	d101      	bne.n	8002666 <__swbuf_r+0x7a>
 8002662:	68ac      	ldr	r4, [r5, #8]
 8002664:	e7cf      	b.n	8002606 <__swbuf_r+0x1a>
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <__swbuf_r+0xa0>)
 8002668:	429c      	cmp	r4, r3
 800266a:	bf08      	it	eq
 800266c:	68ec      	ldreq	r4, [r5, #12]
 800266e:	e7ca      	b.n	8002606 <__swbuf_r+0x1a>
 8002670:	4621      	mov	r1, r4
 8002672:	4628      	mov	r0, r5
 8002674:	f000 f80c 	bl	8002690 <__swsetup_r>
 8002678:	2800      	cmp	r0, #0
 800267a:	d0cb      	beq.n	8002614 <__swbuf_r+0x28>
 800267c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002680:	e7ea      	b.n	8002658 <__swbuf_r+0x6c>
 8002682:	bf00      	nop
 8002684:	08003abc 	.word	0x08003abc
 8002688:	08003adc 	.word	0x08003adc
 800268c:	08003a9c 	.word	0x08003a9c

08002690 <__swsetup_r>:
 8002690:	4b32      	ldr	r3, [pc, #200]	; (800275c <__swsetup_r+0xcc>)
 8002692:	b570      	push	{r4, r5, r6, lr}
 8002694:	681d      	ldr	r5, [r3, #0]
 8002696:	4606      	mov	r6, r0
 8002698:	460c      	mov	r4, r1
 800269a:	b125      	cbz	r5, 80026a6 <__swsetup_r+0x16>
 800269c:	69ab      	ldr	r3, [r5, #24]
 800269e:	b913      	cbnz	r3, 80026a6 <__swsetup_r+0x16>
 80026a0:	4628      	mov	r0, r5
 80026a2:	f000 f97d 	bl	80029a0 <__sinit>
 80026a6:	4b2e      	ldr	r3, [pc, #184]	; (8002760 <__swsetup_r+0xd0>)
 80026a8:	429c      	cmp	r4, r3
 80026aa:	d10f      	bne.n	80026cc <__swsetup_r+0x3c>
 80026ac:	686c      	ldr	r4, [r5, #4]
 80026ae:	89a3      	ldrh	r3, [r4, #12]
 80026b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80026b4:	0719      	lsls	r1, r3, #28
 80026b6:	d42c      	bmi.n	8002712 <__swsetup_r+0x82>
 80026b8:	06dd      	lsls	r5, r3, #27
 80026ba:	d411      	bmi.n	80026e0 <__swsetup_r+0x50>
 80026bc:	2309      	movs	r3, #9
 80026be:	6033      	str	r3, [r6, #0]
 80026c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80026c4:	81a3      	strh	r3, [r4, #12]
 80026c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026ca:	e03e      	b.n	800274a <__swsetup_r+0xba>
 80026cc:	4b25      	ldr	r3, [pc, #148]	; (8002764 <__swsetup_r+0xd4>)
 80026ce:	429c      	cmp	r4, r3
 80026d0:	d101      	bne.n	80026d6 <__swsetup_r+0x46>
 80026d2:	68ac      	ldr	r4, [r5, #8]
 80026d4:	e7eb      	b.n	80026ae <__swsetup_r+0x1e>
 80026d6:	4b24      	ldr	r3, [pc, #144]	; (8002768 <__swsetup_r+0xd8>)
 80026d8:	429c      	cmp	r4, r3
 80026da:	bf08      	it	eq
 80026dc:	68ec      	ldreq	r4, [r5, #12]
 80026de:	e7e6      	b.n	80026ae <__swsetup_r+0x1e>
 80026e0:	0758      	lsls	r0, r3, #29
 80026e2:	d512      	bpl.n	800270a <__swsetup_r+0x7a>
 80026e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026e6:	b141      	cbz	r1, 80026fa <__swsetup_r+0x6a>
 80026e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80026ec:	4299      	cmp	r1, r3
 80026ee:	d002      	beq.n	80026f6 <__swsetup_r+0x66>
 80026f0:	4630      	mov	r0, r6
 80026f2:	f000 fa63 	bl	8002bbc <_free_r>
 80026f6:	2300      	movs	r3, #0
 80026f8:	6363      	str	r3, [r4, #52]	; 0x34
 80026fa:	89a3      	ldrh	r3, [r4, #12]
 80026fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002700:	81a3      	strh	r3, [r4, #12]
 8002702:	2300      	movs	r3, #0
 8002704:	6063      	str	r3, [r4, #4]
 8002706:	6923      	ldr	r3, [r4, #16]
 8002708:	6023      	str	r3, [r4, #0]
 800270a:	89a3      	ldrh	r3, [r4, #12]
 800270c:	f043 0308 	orr.w	r3, r3, #8
 8002710:	81a3      	strh	r3, [r4, #12]
 8002712:	6923      	ldr	r3, [r4, #16]
 8002714:	b94b      	cbnz	r3, 800272a <__swsetup_r+0x9a>
 8002716:	89a3      	ldrh	r3, [r4, #12]
 8002718:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800271c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002720:	d003      	beq.n	800272a <__swsetup_r+0x9a>
 8002722:	4621      	mov	r1, r4
 8002724:	4630      	mov	r0, r6
 8002726:	f000 fa01 	bl	8002b2c <__smakebuf_r>
 800272a:	89a0      	ldrh	r0, [r4, #12]
 800272c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002730:	f010 0301 	ands.w	r3, r0, #1
 8002734:	d00a      	beq.n	800274c <__swsetup_r+0xbc>
 8002736:	2300      	movs	r3, #0
 8002738:	60a3      	str	r3, [r4, #8]
 800273a:	6963      	ldr	r3, [r4, #20]
 800273c:	425b      	negs	r3, r3
 800273e:	61a3      	str	r3, [r4, #24]
 8002740:	6923      	ldr	r3, [r4, #16]
 8002742:	b943      	cbnz	r3, 8002756 <__swsetup_r+0xc6>
 8002744:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002748:	d1ba      	bne.n	80026c0 <__swsetup_r+0x30>
 800274a:	bd70      	pop	{r4, r5, r6, pc}
 800274c:	0781      	lsls	r1, r0, #30
 800274e:	bf58      	it	pl
 8002750:	6963      	ldrpl	r3, [r4, #20]
 8002752:	60a3      	str	r3, [r4, #8]
 8002754:	e7f4      	b.n	8002740 <__swsetup_r+0xb0>
 8002756:	2000      	movs	r0, #0
 8002758:	e7f7      	b.n	800274a <__swsetup_r+0xba>
 800275a:	bf00      	nop
 800275c:	2000002c 	.word	0x2000002c
 8002760:	08003abc 	.word	0x08003abc
 8002764:	08003adc 	.word	0x08003adc
 8002768:	08003a9c 	.word	0x08003a9c

0800276c <__sflush_r>:
 800276c:	898a      	ldrh	r2, [r1, #12]
 800276e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002772:	4605      	mov	r5, r0
 8002774:	0710      	lsls	r0, r2, #28
 8002776:	460c      	mov	r4, r1
 8002778:	d458      	bmi.n	800282c <__sflush_r+0xc0>
 800277a:	684b      	ldr	r3, [r1, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	dc05      	bgt.n	800278c <__sflush_r+0x20>
 8002780:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002782:	2b00      	cmp	r3, #0
 8002784:	dc02      	bgt.n	800278c <__sflush_r+0x20>
 8002786:	2000      	movs	r0, #0
 8002788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800278c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800278e:	2e00      	cmp	r6, #0
 8002790:	d0f9      	beq.n	8002786 <__sflush_r+0x1a>
 8002792:	2300      	movs	r3, #0
 8002794:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002798:	682f      	ldr	r7, [r5, #0]
 800279a:	602b      	str	r3, [r5, #0]
 800279c:	d032      	beq.n	8002804 <__sflush_r+0x98>
 800279e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80027a0:	89a3      	ldrh	r3, [r4, #12]
 80027a2:	075a      	lsls	r2, r3, #29
 80027a4:	d505      	bpl.n	80027b2 <__sflush_r+0x46>
 80027a6:	6863      	ldr	r3, [r4, #4]
 80027a8:	1ac0      	subs	r0, r0, r3
 80027aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80027ac:	b10b      	cbz	r3, 80027b2 <__sflush_r+0x46>
 80027ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80027b0:	1ac0      	subs	r0, r0, r3
 80027b2:	2300      	movs	r3, #0
 80027b4:	4602      	mov	r2, r0
 80027b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80027b8:	6a21      	ldr	r1, [r4, #32]
 80027ba:	4628      	mov	r0, r5
 80027bc:	47b0      	blx	r6
 80027be:	1c43      	adds	r3, r0, #1
 80027c0:	89a3      	ldrh	r3, [r4, #12]
 80027c2:	d106      	bne.n	80027d2 <__sflush_r+0x66>
 80027c4:	6829      	ldr	r1, [r5, #0]
 80027c6:	291d      	cmp	r1, #29
 80027c8:	d82c      	bhi.n	8002824 <__sflush_r+0xb8>
 80027ca:	4a2a      	ldr	r2, [pc, #168]	; (8002874 <__sflush_r+0x108>)
 80027cc:	40ca      	lsrs	r2, r1
 80027ce:	07d6      	lsls	r6, r2, #31
 80027d0:	d528      	bpl.n	8002824 <__sflush_r+0xb8>
 80027d2:	2200      	movs	r2, #0
 80027d4:	6062      	str	r2, [r4, #4]
 80027d6:	04d9      	lsls	r1, r3, #19
 80027d8:	6922      	ldr	r2, [r4, #16]
 80027da:	6022      	str	r2, [r4, #0]
 80027dc:	d504      	bpl.n	80027e8 <__sflush_r+0x7c>
 80027de:	1c42      	adds	r2, r0, #1
 80027e0:	d101      	bne.n	80027e6 <__sflush_r+0x7a>
 80027e2:	682b      	ldr	r3, [r5, #0]
 80027e4:	b903      	cbnz	r3, 80027e8 <__sflush_r+0x7c>
 80027e6:	6560      	str	r0, [r4, #84]	; 0x54
 80027e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80027ea:	602f      	str	r7, [r5, #0]
 80027ec:	2900      	cmp	r1, #0
 80027ee:	d0ca      	beq.n	8002786 <__sflush_r+0x1a>
 80027f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80027f4:	4299      	cmp	r1, r3
 80027f6:	d002      	beq.n	80027fe <__sflush_r+0x92>
 80027f8:	4628      	mov	r0, r5
 80027fa:	f000 f9df 	bl	8002bbc <_free_r>
 80027fe:	2000      	movs	r0, #0
 8002800:	6360      	str	r0, [r4, #52]	; 0x34
 8002802:	e7c1      	b.n	8002788 <__sflush_r+0x1c>
 8002804:	6a21      	ldr	r1, [r4, #32]
 8002806:	2301      	movs	r3, #1
 8002808:	4628      	mov	r0, r5
 800280a:	47b0      	blx	r6
 800280c:	1c41      	adds	r1, r0, #1
 800280e:	d1c7      	bne.n	80027a0 <__sflush_r+0x34>
 8002810:	682b      	ldr	r3, [r5, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0c4      	beq.n	80027a0 <__sflush_r+0x34>
 8002816:	2b1d      	cmp	r3, #29
 8002818:	d001      	beq.n	800281e <__sflush_r+0xb2>
 800281a:	2b16      	cmp	r3, #22
 800281c:	d101      	bne.n	8002822 <__sflush_r+0xb6>
 800281e:	602f      	str	r7, [r5, #0]
 8002820:	e7b1      	b.n	8002786 <__sflush_r+0x1a>
 8002822:	89a3      	ldrh	r3, [r4, #12]
 8002824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002828:	81a3      	strh	r3, [r4, #12]
 800282a:	e7ad      	b.n	8002788 <__sflush_r+0x1c>
 800282c:	690f      	ldr	r7, [r1, #16]
 800282e:	2f00      	cmp	r7, #0
 8002830:	d0a9      	beq.n	8002786 <__sflush_r+0x1a>
 8002832:	0793      	lsls	r3, r2, #30
 8002834:	680e      	ldr	r6, [r1, #0]
 8002836:	bf08      	it	eq
 8002838:	694b      	ldreq	r3, [r1, #20]
 800283a:	600f      	str	r7, [r1, #0]
 800283c:	bf18      	it	ne
 800283e:	2300      	movne	r3, #0
 8002840:	eba6 0807 	sub.w	r8, r6, r7
 8002844:	608b      	str	r3, [r1, #8]
 8002846:	f1b8 0f00 	cmp.w	r8, #0
 800284a:	dd9c      	ble.n	8002786 <__sflush_r+0x1a>
 800284c:	6a21      	ldr	r1, [r4, #32]
 800284e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002850:	4643      	mov	r3, r8
 8002852:	463a      	mov	r2, r7
 8002854:	4628      	mov	r0, r5
 8002856:	47b0      	blx	r6
 8002858:	2800      	cmp	r0, #0
 800285a:	dc06      	bgt.n	800286a <__sflush_r+0xfe>
 800285c:	89a3      	ldrh	r3, [r4, #12]
 800285e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002862:	81a3      	strh	r3, [r4, #12]
 8002864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002868:	e78e      	b.n	8002788 <__sflush_r+0x1c>
 800286a:	4407      	add	r7, r0
 800286c:	eba8 0800 	sub.w	r8, r8, r0
 8002870:	e7e9      	b.n	8002846 <__sflush_r+0xda>
 8002872:	bf00      	nop
 8002874:	20400001 	.word	0x20400001

08002878 <_fflush_r>:
 8002878:	b538      	push	{r3, r4, r5, lr}
 800287a:	690b      	ldr	r3, [r1, #16]
 800287c:	4605      	mov	r5, r0
 800287e:	460c      	mov	r4, r1
 8002880:	b913      	cbnz	r3, 8002888 <_fflush_r+0x10>
 8002882:	2500      	movs	r5, #0
 8002884:	4628      	mov	r0, r5
 8002886:	bd38      	pop	{r3, r4, r5, pc}
 8002888:	b118      	cbz	r0, 8002892 <_fflush_r+0x1a>
 800288a:	6983      	ldr	r3, [r0, #24]
 800288c:	b90b      	cbnz	r3, 8002892 <_fflush_r+0x1a>
 800288e:	f000 f887 	bl	80029a0 <__sinit>
 8002892:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <_fflush_r+0x6c>)
 8002894:	429c      	cmp	r4, r3
 8002896:	d11b      	bne.n	80028d0 <_fflush_r+0x58>
 8002898:	686c      	ldr	r4, [r5, #4]
 800289a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0ef      	beq.n	8002882 <_fflush_r+0xa>
 80028a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80028a4:	07d0      	lsls	r0, r2, #31
 80028a6:	d404      	bmi.n	80028b2 <_fflush_r+0x3a>
 80028a8:	0599      	lsls	r1, r3, #22
 80028aa:	d402      	bmi.n	80028b2 <_fflush_r+0x3a>
 80028ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028ae:	f000 f915 	bl	8002adc <__retarget_lock_acquire_recursive>
 80028b2:	4628      	mov	r0, r5
 80028b4:	4621      	mov	r1, r4
 80028b6:	f7ff ff59 	bl	800276c <__sflush_r>
 80028ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028bc:	07da      	lsls	r2, r3, #31
 80028be:	4605      	mov	r5, r0
 80028c0:	d4e0      	bmi.n	8002884 <_fflush_r+0xc>
 80028c2:	89a3      	ldrh	r3, [r4, #12]
 80028c4:	059b      	lsls	r3, r3, #22
 80028c6:	d4dd      	bmi.n	8002884 <_fflush_r+0xc>
 80028c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028ca:	f000 f908 	bl	8002ade <__retarget_lock_release_recursive>
 80028ce:	e7d9      	b.n	8002884 <_fflush_r+0xc>
 80028d0:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <_fflush_r+0x70>)
 80028d2:	429c      	cmp	r4, r3
 80028d4:	d101      	bne.n	80028da <_fflush_r+0x62>
 80028d6:	68ac      	ldr	r4, [r5, #8]
 80028d8:	e7df      	b.n	800289a <_fflush_r+0x22>
 80028da:	4b04      	ldr	r3, [pc, #16]	; (80028ec <_fflush_r+0x74>)
 80028dc:	429c      	cmp	r4, r3
 80028de:	bf08      	it	eq
 80028e0:	68ec      	ldreq	r4, [r5, #12]
 80028e2:	e7da      	b.n	800289a <_fflush_r+0x22>
 80028e4:	08003abc 	.word	0x08003abc
 80028e8:	08003adc 	.word	0x08003adc
 80028ec:	08003a9c 	.word	0x08003a9c

080028f0 <std>:
 80028f0:	2300      	movs	r3, #0
 80028f2:	b510      	push	{r4, lr}
 80028f4:	4604      	mov	r4, r0
 80028f6:	e9c0 3300 	strd	r3, r3, [r0]
 80028fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80028fe:	6083      	str	r3, [r0, #8]
 8002900:	8181      	strh	r1, [r0, #12]
 8002902:	6643      	str	r3, [r0, #100]	; 0x64
 8002904:	81c2      	strh	r2, [r0, #14]
 8002906:	6183      	str	r3, [r0, #24]
 8002908:	4619      	mov	r1, r3
 800290a:	2208      	movs	r2, #8
 800290c:	305c      	adds	r0, #92	; 0x5c
 800290e:	f7ff fce9 	bl	80022e4 <memset>
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <std+0x38>)
 8002914:	6263      	str	r3, [r4, #36]	; 0x24
 8002916:	4b05      	ldr	r3, [pc, #20]	; (800292c <std+0x3c>)
 8002918:	62a3      	str	r3, [r4, #40]	; 0x28
 800291a:	4b05      	ldr	r3, [pc, #20]	; (8002930 <std+0x40>)
 800291c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800291e:	4b05      	ldr	r3, [pc, #20]	; (8002934 <std+0x44>)
 8002920:	6224      	str	r4, [r4, #32]
 8002922:	6323      	str	r3, [r4, #48]	; 0x30
 8002924:	bd10      	pop	{r4, pc}
 8002926:	bf00      	nop
 8002928:	08003631 	.word	0x08003631
 800292c:	08003653 	.word	0x08003653
 8002930:	0800368b 	.word	0x0800368b
 8002934:	080036af 	.word	0x080036af

08002938 <_cleanup_r>:
 8002938:	4901      	ldr	r1, [pc, #4]	; (8002940 <_cleanup_r+0x8>)
 800293a:	f000 b8af 	b.w	8002a9c <_fwalk_reent>
 800293e:	bf00      	nop
 8002940:	08002879 	.word	0x08002879

08002944 <__sfmoreglue>:
 8002944:	b570      	push	{r4, r5, r6, lr}
 8002946:	2268      	movs	r2, #104	; 0x68
 8002948:	1e4d      	subs	r5, r1, #1
 800294a:	4355      	muls	r5, r2
 800294c:	460e      	mov	r6, r1
 800294e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002952:	f000 f99f 	bl	8002c94 <_malloc_r>
 8002956:	4604      	mov	r4, r0
 8002958:	b140      	cbz	r0, 800296c <__sfmoreglue+0x28>
 800295a:	2100      	movs	r1, #0
 800295c:	e9c0 1600 	strd	r1, r6, [r0]
 8002960:	300c      	adds	r0, #12
 8002962:	60a0      	str	r0, [r4, #8]
 8002964:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002968:	f7ff fcbc 	bl	80022e4 <memset>
 800296c:	4620      	mov	r0, r4
 800296e:	bd70      	pop	{r4, r5, r6, pc}

08002970 <__sfp_lock_acquire>:
 8002970:	4801      	ldr	r0, [pc, #4]	; (8002978 <__sfp_lock_acquire+0x8>)
 8002972:	f000 b8b3 	b.w	8002adc <__retarget_lock_acquire_recursive>
 8002976:	bf00      	nop
 8002978:	200001b9 	.word	0x200001b9

0800297c <__sfp_lock_release>:
 800297c:	4801      	ldr	r0, [pc, #4]	; (8002984 <__sfp_lock_release+0x8>)
 800297e:	f000 b8ae 	b.w	8002ade <__retarget_lock_release_recursive>
 8002982:	bf00      	nop
 8002984:	200001b9 	.word	0x200001b9

08002988 <__sinit_lock_acquire>:
 8002988:	4801      	ldr	r0, [pc, #4]	; (8002990 <__sinit_lock_acquire+0x8>)
 800298a:	f000 b8a7 	b.w	8002adc <__retarget_lock_acquire_recursive>
 800298e:	bf00      	nop
 8002990:	200001ba 	.word	0x200001ba

08002994 <__sinit_lock_release>:
 8002994:	4801      	ldr	r0, [pc, #4]	; (800299c <__sinit_lock_release+0x8>)
 8002996:	f000 b8a2 	b.w	8002ade <__retarget_lock_release_recursive>
 800299a:	bf00      	nop
 800299c:	200001ba 	.word	0x200001ba

080029a0 <__sinit>:
 80029a0:	b510      	push	{r4, lr}
 80029a2:	4604      	mov	r4, r0
 80029a4:	f7ff fff0 	bl	8002988 <__sinit_lock_acquire>
 80029a8:	69a3      	ldr	r3, [r4, #24]
 80029aa:	b11b      	cbz	r3, 80029b4 <__sinit+0x14>
 80029ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029b0:	f7ff bff0 	b.w	8002994 <__sinit_lock_release>
 80029b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80029b8:	6523      	str	r3, [r4, #80]	; 0x50
 80029ba:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <__sinit+0x68>)
 80029bc:	4a13      	ldr	r2, [pc, #76]	; (8002a0c <__sinit+0x6c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80029c2:	42a3      	cmp	r3, r4
 80029c4:	bf04      	itt	eq
 80029c6:	2301      	moveq	r3, #1
 80029c8:	61a3      	streq	r3, [r4, #24]
 80029ca:	4620      	mov	r0, r4
 80029cc:	f000 f820 	bl	8002a10 <__sfp>
 80029d0:	6060      	str	r0, [r4, #4]
 80029d2:	4620      	mov	r0, r4
 80029d4:	f000 f81c 	bl	8002a10 <__sfp>
 80029d8:	60a0      	str	r0, [r4, #8]
 80029da:	4620      	mov	r0, r4
 80029dc:	f000 f818 	bl	8002a10 <__sfp>
 80029e0:	2200      	movs	r2, #0
 80029e2:	60e0      	str	r0, [r4, #12]
 80029e4:	2104      	movs	r1, #4
 80029e6:	6860      	ldr	r0, [r4, #4]
 80029e8:	f7ff ff82 	bl	80028f0 <std>
 80029ec:	68a0      	ldr	r0, [r4, #8]
 80029ee:	2201      	movs	r2, #1
 80029f0:	2109      	movs	r1, #9
 80029f2:	f7ff ff7d 	bl	80028f0 <std>
 80029f6:	68e0      	ldr	r0, [r4, #12]
 80029f8:	2202      	movs	r2, #2
 80029fa:	2112      	movs	r1, #18
 80029fc:	f7ff ff78 	bl	80028f0 <std>
 8002a00:	2301      	movs	r3, #1
 8002a02:	61a3      	str	r3, [r4, #24]
 8002a04:	e7d2      	b.n	80029ac <__sinit+0xc>
 8002a06:	bf00      	nop
 8002a08:	08003a98 	.word	0x08003a98
 8002a0c:	08002939 	.word	0x08002939

08002a10 <__sfp>:
 8002a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a12:	4607      	mov	r7, r0
 8002a14:	f7ff ffac 	bl	8002970 <__sfp_lock_acquire>
 8002a18:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <__sfp+0x84>)
 8002a1a:	681e      	ldr	r6, [r3, #0]
 8002a1c:	69b3      	ldr	r3, [r6, #24]
 8002a1e:	b913      	cbnz	r3, 8002a26 <__sfp+0x16>
 8002a20:	4630      	mov	r0, r6
 8002a22:	f7ff ffbd 	bl	80029a0 <__sinit>
 8002a26:	3648      	adds	r6, #72	; 0x48
 8002a28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	d503      	bpl.n	8002a38 <__sfp+0x28>
 8002a30:	6833      	ldr	r3, [r6, #0]
 8002a32:	b30b      	cbz	r3, 8002a78 <__sfp+0x68>
 8002a34:	6836      	ldr	r6, [r6, #0]
 8002a36:	e7f7      	b.n	8002a28 <__sfp+0x18>
 8002a38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002a3c:	b9d5      	cbnz	r5, 8002a74 <__sfp+0x64>
 8002a3e:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <__sfp+0x88>)
 8002a40:	60e3      	str	r3, [r4, #12]
 8002a42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002a46:	6665      	str	r5, [r4, #100]	; 0x64
 8002a48:	f000 f847 	bl	8002ada <__retarget_lock_init_recursive>
 8002a4c:	f7ff ff96 	bl	800297c <__sfp_lock_release>
 8002a50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002a54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002a58:	6025      	str	r5, [r4, #0]
 8002a5a:	61a5      	str	r5, [r4, #24]
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	4629      	mov	r1, r5
 8002a60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002a64:	f7ff fc3e 	bl	80022e4 <memset>
 8002a68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002a6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002a70:	4620      	mov	r0, r4
 8002a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a74:	3468      	adds	r4, #104	; 0x68
 8002a76:	e7d9      	b.n	8002a2c <__sfp+0x1c>
 8002a78:	2104      	movs	r1, #4
 8002a7a:	4638      	mov	r0, r7
 8002a7c:	f7ff ff62 	bl	8002944 <__sfmoreglue>
 8002a80:	4604      	mov	r4, r0
 8002a82:	6030      	str	r0, [r6, #0]
 8002a84:	2800      	cmp	r0, #0
 8002a86:	d1d5      	bne.n	8002a34 <__sfp+0x24>
 8002a88:	f7ff ff78 	bl	800297c <__sfp_lock_release>
 8002a8c:	230c      	movs	r3, #12
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	e7ee      	b.n	8002a70 <__sfp+0x60>
 8002a92:	bf00      	nop
 8002a94:	08003a98 	.word	0x08003a98
 8002a98:	ffff0001 	.word	0xffff0001

08002a9c <_fwalk_reent>:
 8002a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002aa0:	4606      	mov	r6, r0
 8002aa2:	4688      	mov	r8, r1
 8002aa4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002aa8:	2700      	movs	r7, #0
 8002aaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002aae:	f1b9 0901 	subs.w	r9, r9, #1
 8002ab2:	d505      	bpl.n	8002ac0 <_fwalk_reent+0x24>
 8002ab4:	6824      	ldr	r4, [r4, #0]
 8002ab6:	2c00      	cmp	r4, #0
 8002ab8:	d1f7      	bne.n	8002aaa <_fwalk_reent+0xe>
 8002aba:	4638      	mov	r0, r7
 8002abc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ac0:	89ab      	ldrh	r3, [r5, #12]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d907      	bls.n	8002ad6 <_fwalk_reent+0x3a>
 8002ac6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002aca:	3301      	adds	r3, #1
 8002acc:	d003      	beq.n	8002ad6 <_fwalk_reent+0x3a>
 8002ace:	4629      	mov	r1, r5
 8002ad0:	4630      	mov	r0, r6
 8002ad2:	47c0      	blx	r8
 8002ad4:	4307      	orrs	r7, r0
 8002ad6:	3568      	adds	r5, #104	; 0x68
 8002ad8:	e7e9      	b.n	8002aae <_fwalk_reent+0x12>

08002ada <__retarget_lock_init_recursive>:
 8002ada:	4770      	bx	lr

08002adc <__retarget_lock_acquire_recursive>:
 8002adc:	4770      	bx	lr

08002ade <__retarget_lock_release_recursive>:
 8002ade:	4770      	bx	lr

08002ae0 <__swhatbuf_r>:
 8002ae0:	b570      	push	{r4, r5, r6, lr}
 8002ae2:	460e      	mov	r6, r1
 8002ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ae8:	2900      	cmp	r1, #0
 8002aea:	b096      	sub	sp, #88	; 0x58
 8002aec:	4614      	mov	r4, r2
 8002aee:	461d      	mov	r5, r3
 8002af0:	da08      	bge.n	8002b04 <__swhatbuf_r+0x24>
 8002af2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	602a      	str	r2, [r5, #0]
 8002afa:	061a      	lsls	r2, r3, #24
 8002afc:	d410      	bmi.n	8002b20 <__swhatbuf_r+0x40>
 8002afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b02:	e00e      	b.n	8002b22 <__swhatbuf_r+0x42>
 8002b04:	466a      	mov	r2, sp
 8002b06:	f000 fde7 	bl	80036d8 <_fstat_r>
 8002b0a:	2800      	cmp	r0, #0
 8002b0c:	dbf1      	blt.n	8002af2 <__swhatbuf_r+0x12>
 8002b0e:	9a01      	ldr	r2, [sp, #4]
 8002b10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002b14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002b18:	425a      	negs	r2, r3
 8002b1a:	415a      	adcs	r2, r3
 8002b1c:	602a      	str	r2, [r5, #0]
 8002b1e:	e7ee      	b.n	8002afe <__swhatbuf_r+0x1e>
 8002b20:	2340      	movs	r3, #64	; 0x40
 8002b22:	2000      	movs	r0, #0
 8002b24:	6023      	str	r3, [r4, #0]
 8002b26:	b016      	add	sp, #88	; 0x58
 8002b28:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b2c <__smakebuf_r>:
 8002b2c:	898b      	ldrh	r3, [r1, #12]
 8002b2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b30:	079d      	lsls	r5, r3, #30
 8002b32:	4606      	mov	r6, r0
 8002b34:	460c      	mov	r4, r1
 8002b36:	d507      	bpl.n	8002b48 <__smakebuf_r+0x1c>
 8002b38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002b3c:	6023      	str	r3, [r4, #0]
 8002b3e:	6123      	str	r3, [r4, #16]
 8002b40:	2301      	movs	r3, #1
 8002b42:	6163      	str	r3, [r4, #20]
 8002b44:	b002      	add	sp, #8
 8002b46:	bd70      	pop	{r4, r5, r6, pc}
 8002b48:	ab01      	add	r3, sp, #4
 8002b4a:	466a      	mov	r2, sp
 8002b4c:	f7ff ffc8 	bl	8002ae0 <__swhatbuf_r>
 8002b50:	9900      	ldr	r1, [sp, #0]
 8002b52:	4605      	mov	r5, r0
 8002b54:	4630      	mov	r0, r6
 8002b56:	f000 f89d 	bl	8002c94 <_malloc_r>
 8002b5a:	b948      	cbnz	r0, 8002b70 <__smakebuf_r+0x44>
 8002b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b60:	059a      	lsls	r2, r3, #22
 8002b62:	d4ef      	bmi.n	8002b44 <__smakebuf_r+0x18>
 8002b64:	f023 0303 	bic.w	r3, r3, #3
 8002b68:	f043 0302 	orr.w	r3, r3, #2
 8002b6c:	81a3      	strh	r3, [r4, #12]
 8002b6e:	e7e3      	b.n	8002b38 <__smakebuf_r+0xc>
 8002b70:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <__smakebuf_r+0x7c>)
 8002b72:	62b3      	str	r3, [r6, #40]	; 0x28
 8002b74:	89a3      	ldrh	r3, [r4, #12]
 8002b76:	6020      	str	r0, [r4, #0]
 8002b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b7c:	81a3      	strh	r3, [r4, #12]
 8002b7e:	9b00      	ldr	r3, [sp, #0]
 8002b80:	6163      	str	r3, [r4, #20]
 8002b82:	9b01      	ldr	r3, [sp, #4]
 8002b84:	6120      	str	r0, [r4, #16]
 8002b86:	b15b      	cbz	r3, 8002ba0 <__smakebuf_r+0x74>
 8002b88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b8c:	4630      	mov	r0, r6
 8002b8e:	f000 fdb5 	bl	80036fc <_isatty_r>
 8002b92:	b128      	cbz	r0, 8002ba0 <__smakebuf_r+0x74>
 8002b94:	89a3      	ldrh	r3, [r4, #12]
 8002b96:	f023 0303 	bic.w	r3, r3, #3
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	81a3      	strh	r3, [r4, #12]
 8002ba0:	89a0      	ldrh	r0, [r4, #12]
 8002ba2:	4305      	orrs	r5, r0
 8002ba4:	81a5      	strh	r5, [r4, #12]
 8002ba6:	e7cd      	b.n	8002b44 <__smakebuf_r+0x18>
 8002ba8:	08002939 	.word	0x08002939

08002bac <malloc>:
 8002bac:	4b02      	ldr	r3, [pc, #8]	; (8002bb8 <malloc+0xc>)
 8002bae:	4601      	mov	r1, r0
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	f000 b86f 	b.w	8002c94 <_malloc_r>
 8002bb6:	bf00      	nop
 8002bb8:	2000002c 	.word	0x2000002c

08002bbc <_free_r>:
 8002bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002bbe:	2900      	cmp	r1, #0
 8002bc0:	d044      	beq.n	8002c4c <_free_r+0x90>
 8002bc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bc6:	9001      	str	r0, [sp, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f1a1 0404 	sub.w	r4, r1, #4
 8002bce:	bfb8      	it	lt
 8002bd0:	18e4      	addlt	r4, r4, r3
 8002bd2:	f000 fdcf 	bl	8003774 <__malloc_lock>
 8002bd6:	4a1e      	ldr	r2, [pc, #120]	; (8002c50 <_free_r+0x94>)
 8002bd8:	9801      	ldr	r0, [sp, #4]
 8002bda:	6813      	ldr	r3, [r2, #0]
 8002bdc:	b933      	cbnz	r3, 8002bec <_free_r+0x30>
 8002bde:	6063      	str	r3, [r4, #4]
 8002be0:	6014      	str	r4, [r2, #0]
 8002be2:	b003      	add	sp, #12
 8002be4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002be8:	f000 bdca 	b.w	8003780 <__malloc_unlock>
 8002bec:	42a3      	cmp	r3, r4
 8002bee:	d908      	bls.n	8002c02 <_free_r+0x46>
 8002bf0:	6825      	ldr	r5, [r4, #0]
 8002bf2:	1961      	adds	r1, r4, r5
 8002bf4:	428b      	cmp	r3, r1
 8002bf6:	bf01      	itttt	eq
 8002bf8:	6819      	ldreq	r1, [r3, #0]
 8002bfa:	685b      	ldreq	r3, [r3, #4]
 8002bfc:	1949      	addeq	r1, r1, r5
 8002bfe:	6021      	streq	r1, [r4, #0]
 8002c00:	e7ed      	b.n	8002bde <_free_r+0x22>
 8002c02:	461a      	mov	r2, r3
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	b10b      	cbz	r3, 8002c0c <_free_r+0x50>
 8002c08:	42a3      	cmp	r3, r4
 8002c0a:	d9fa      	bls.n	8002c02 <_free_r+0x46>
 8002c0c:	6811      	ldr	r1, [r2, #0]
 8002c0e:	1855      	adds	r5, r2, r1
 8002c10:	42a5      	cmp	r5, r4
 8002c12:	d10b      	bne.n	8002c2c <_free_r+0x70>
 8002c14:	6824      	ldr	r4, [r4, #0]
 8002c16:	4421      	add	r1, r4
 8002c18:	1854      	adds	r4, r2, r1
 8002c1a:	42a3      	cmp	r3, r4
 8002c1c:	6011      	str	r1, [r2, #0]
 8002c1e:	d1e0      	bne.n	8002be2 <_free_r+0x26>
 8002c20:	681c      	ldr	r4, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	6053      	str	r3, [r2, #4]
 8002c26:	4421      	add	r1, r4
 8002c28:	6011      	str	r1, [r2, #0]
 8002c2a:	e7da      	b.n	8002be2 <_free_r+0x26>
 8002c2c:	d902      	bls.n	8002c34 <_free_r+0x78>
 8002c2e:	230c      	movs	r3, #12
 8002c30:	6003      	str	r3, [r0, #0]
 8002c32:	e7d6      	b.n	8002be2 <_free_r+0x26>
 8002c34:	6825      	ldr	r5, [r4, #0]
 8002c36:	1961      	adds	r1, r4, r5
 8002c38:	428b      	cmp	r3, r1
 8002c3a:	bf04      	itt	eq
 8002c3c:	6819      	ldreq	r1, [r3, #0]
 8002c3e:	685b      	ldreq	r3, [r3, #4]
 8002c40:	6063      	str	r3, [r4, #4]
 8002c42:	bf04      	itt	eq
 8002c44:	1949      	addeq	r1, r1, r5
 8002c46:	6021      	streq	r1, [r4, #0]
 8002c48:	6054      	str	r4, [r2, #4]
 8002c4a:	e7ca      	b.n	8002be2 <_free_r+0x26>
 8002c4c:	b003      	add	sp, #12
 8002c4e:	bd30      	pop	{r4, r5, pc}
 8002c50:	200001bc 	.word	0x200001bc

08002c54 <sbrk_aligned>:
 8002c54:	b570      	push	{r4, r5, r6, lr}
 8002c56:	4e0e      	ldr	r6, [pc, #56]	; (8002c90 <sbrk_aligned+0x3c>)
 8002c58:	460c      	mov	r4, r1
 8002c5a:	6831      	ldr	r1, [r6, #0]
 8002c5c:	4605      	mov	r5, r0
 8002c5e:	b911      	cbnz	r1, 8002c66 <sbrk_aligned+0x12>
 8002c60:	f000 fcd6 	bl	8003610 <_sbrk_r>
 8002c64:	6030      	str	r0, [r6, #0]
 8002c66:	4621      	mov	r1, r4
 8002c68:	4628      	mov	r0, r5
 8002c6a:	f000 fcd1 	bl	8003610 <_sbrk_r>
 8002c6e:	1c43      	adds	r3, r0, #1
 8002c70:	d00a      	beq.n	8002c88 <sbrk_aligned+0x34>
 8002c72:	1cc4      	adds	r4, r0, #3
 8002c74:	f024 0403 	bic.w	r4, r4, #3
 8002c78:	42a0      	cmp	r0, r4
 8002c7a:	d007      	beq.n	8002c8c <sbrk_aligned+0x38>
 8002c7c:	1a21      	subs	r1, r4, r0
 8002c7e:	4628      	mov	r0, r5
 8002c80:	f000 fcc6 	bl	8003610 <_sbrk_r>
 8002c84:	3001      	adds	r0, #1
 8002c86:	d101      	bne.n	8002c8c <sbrk_aligned+0x38>
 8002c88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002c8c:	4620      	mov	r0, r4
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
 8002c90:	200001c0 	.word	0x200001c0

08002c94 <_malloc_r>:
 8002c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c98:	1ccd      	adds	r5, r1, #3
 8002c9a:	f025 0503 	bic.w	r5, r5, #3
 8002c9e:	3508      	adds	r5, #8
 8002ca0:	2d0c      	cmp	r5, #12
 8002ca2:	bf38      	it	cc
 8002ca4:	250c      	movcc	r5, #12
 8002ca6:	2d00      	cmp	r5, #0
 8002ca8:	4607      	mov	r7, r0
 8002caa:	db01      	blt.n	8002cb0 <_malloc_r+0x1c>
 8002cac:	42a9      	cmp	r1, r5
 8002cae:	d905      	bls.n	8002cbc <_malloc_r+0x28>
 8002cb0:	230c      	movs	r3, #12
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	2600      	movs	r6, #0
 8002cb6:	4630      	mov	r0, r6
 8002cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cbc:	4e2e      	ldr	r6, [pc, #184]	; (8002d78 <_malloc_r+0xe4>)
 8002cbe:	f000 fd59 	bl	8003774 <__malloc_lock>
 8002cc2:	6833      	ldr	r3, [r6, #0]
 8002cc4:	461c      	mov	r4, r3
 8002cc6:	bb34      	cbnz	r4, 8002d16 <_malloc_r+0x82>
 8002cc8:	4629      	mov	r1, r5
 8002cca:	4638      	mov	r0, r7
 8002ccc:	f7ff ffc2 	bl	8002c54 <sbrk_aligned>
 8002cd0:	1c43      	adds	r3, r0, #1
 8002cd2:	4604      	mov	r4, r0
 8002cd4:	d14d      	bne.n	8002d72 <_malloc_r+0xde>
 8002cd6:	6834      	ldr	r4, [r6, #0]
 8002cd8:	4626      	mov	r6, r4
 8002cda:	2e00      	cmp	r6, #0
 8002cdc:	d140      	bne.n	8002d60 <_malloc_r+0xcc>
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	4631      	mov	r1, r6
 8002ce2:	4638      	mov	r0, r7
 8002ce4:	eb04 0803 	add.w	r8, r4, r3
 8002ce8:	f000 fc92 	bl	8003610 <_sbrk_r>
 8002cec:	4580      	cmp	r8, r0
 8002cee:	d13a      	bne.n	8002d66 <_malloc_r+0xd2>
 8002cf0:	6821      	ldr	r1, [r4, #0]
 8002cf2:	3503      	adds	r5, #3
 8002cf4:	1a6d      	subs	r5, r5, r1
 8002cf6:	f025 0503 	bic.w	r5, r5, #3
 8002cfa:	3508      	adds	r5, #8
 8002cfc:	2d0c      	cmp	r5, #12
 8002cfe:	bf38      	it	cc
 8002d00:	250c      	movcc	r5, #12
 8002d02:	4629      	mov	r1, r5
 8002d04:	4638      	mov	r0, r7
 8002d06:	f7ff ffa5 	bl	8002c54 <sbrk_aligned>
 8002d0a:	3001      	adds	r0, #1
 8002d0c:	d02b      	beq.n	8002d66 <_malloc_r+0xd2>
 8002d0e:	6823      	ldr	r3, [r4, #0]
 8002d10:	442b      	add	r3, r5
 8002d12:	6023      	str	r3, [r4, #0]
 8002d14:	e00e      	b.n	8002d34 <_malloc_r+0xa0>
 8002d16:	6822      	ldr	r2, [r4, #0]
 8002d18:	1b52      	subs	r2, r2, r5
 8002d1a:	d41e      	bmi.n	8002d5a <_malloc_r+0xc6>
 8002d1c:	2a0b      	cmp	r2, #11
 8002d1e:	d916      	bls.n	8002d4e <_malloc_r+0xba>
 8002d20:	1961      	adds	r1, r4, r5
 8002d22:	42a3      	cmp	r3, r4
 8002d24:	6025      	str	r5, [r4, #0]
 8002d26:	bf18      	it	ne
 8002d28:	6059      	strne	r1, [r3, #4]
 8002d2a:	6863      	ldr	r3, [r4, #4]
 8002d2c:	bf08      	it	eq
 8002d2e:	6031      	streq	r1, [r6, #0]
 8002d30:	5162      	str	r2, [r4, r5]
 8002d32:	604b      	str	r3, [r1, #4]
 8002d34:	4638      	mov	r0, r7
 8002d36:	f104 060b 	add.w	r6, r4, #11
 8002d3a:	f000 fd21 	bl	8003780 <__malloc_unlock>
 8002d3e:	f026 0607 	bic.w	r6, r6, #7
 8002d42:	1d23      	adds	r3, r4, #4
 8002d44:	1af2      	subs	r2, r6, r3
 8002d46:	d0b6      	beq.n	8002cb6 <_malloc_r+0x22>
 8002d48:	1b9b      	subs	r3, r3, r6
 8002d4a:	50a3      	str	r3, [r4, r2]
 8002d4c:	e7b3      	b.n	8002cb6 <_malloc_r+0x22>
 8002d4e:	6862      	ldr	r2, [r4, #4]
 8002d50:	42a3      	cmp	r3, r4
 8002d52:	bf0c      	ite	eq
 8002d54:	6032      	streq	r2, [r6, #0]
 8002d56:	605a      	strne	r2, [r3, #4]
 8002d58:	e7ec      	b.n	8002d34 <_malloc_r+0xa0>
 8002d5a:	4623      	mov	r3, r4
 8002d5c:	6864      	ldr	r4, [r4, #4]
 8002d5e:	e7b2      	b.n	8002cc6 <_malloc_r+0x32>
 8002d60:	4634      	mov	r4, r6
 8002d62:	6876      	ldr	r6, [r6, #4]
 8002d64:	e7b9      	b.n	8002cda <_malloc_r+0x46>
 8002d66:	230c      	movs	r3, #12
 8002d68:	603b      	str	r3, [r7, #0]
 8002d6a:	4638      	mov	r0, r7
 8002d6c:	f000 fd08 	bl	8003780 <__malloc_unlock>
 8002d70:	e7a1      	b.n	8002cb6 <_malloc_r+0x22>
 8002d72:	6025      	str	r5, [r4, #0]
 8002d74:	e7de      	b.n	8002d34 <_malloc_r+0xa0>
 8002d76:	bf00      	nop
 8002d78:	200001bc 	.word	0x200001bc

08002d7c <__ssputs_r>:
 8002d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d80:	688e      	ldr	r6, [r1, #8]
 8002d82:	429e      	cmp	r6, r3
 8002d84:	4682      	mov	sl, r0
 8002d86:	460c      	mov	r4, r1
 8002d88:	4690      	mov	r8, r2
 8002d8a:	461f      	mov	r7, r3
 8002d8c:	d838      	bhi.n	8002e00 <__ssputs_r+0x84>
 8002d8e:	898a      	ldrh	r2, [r1, #12]
 8002d90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d94:	d032      	beq.n	8002dfc <__ssputs_r+0x80>
 8002d96:	6825      	ldr	r5, [r4, #0]
 8002d98:	6909      	ldr	r1, [r1, #16]
 8002d9a:	eba5 0901 	sub.w	r9, r5, r1
 8002d9e:	6965      	ldr	r5, [r4, #20]
 8002da0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002da4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002da8:	3301      	adds	r3, #1
 8002daa:	444b      	add	r3, r9
 8002dac:	106d      	asrs	r5, r5, #1
 8002dae:	429d      	cmp	r5, r3
 8002db0:	bf38      	it	cc
 8002db2:	461d      	movcc	r5, r3
 8002db4:	0553      	lsls	r3, r2, #21
 8002db6:	d531      	bpl.n	8002e1c <__ssputs_r+0xa0>
 8002db8:	4629      	mov	r1, r5
 8002dba:	f7ff ff6b 	bl	8002c94 <_malloc_r>
 8002dbe:	4606      	mov	r6, r0
 8002dc0:	b950      	cbnz	r0, 8002dd8 <__ssputs_r+0x5c>
 8002dc2:	230c      	movs	r3, #12
 8002dc4:	f8ca 3000 	str.w	r3, [sl]
 8002dc8:	89a3      	ldrh	r3, [r4, #12]
 8002dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dce:	81a3      	strh	r3, [r4, #12]
 8002dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dd8:	6921      	ldr	r1, [r4, #16]
 8002dda:	464a      	mov	r2, r9
 8002ddc:	f7ff fa74 	bl	80022c8 <memcpy>
 8002de0:	89a3      	ldrh	r3, [r4, #12]
 8002de2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dea:	81a3      	strh	r3, [r4, #12]
 8002dec:	6126      	str	r6, [r4, #16]
 8002dee:	6165      	str	r5, [r4, #20]
 8002df0:	444e      	add	r6, r9
 8002df2:	eba5 0509 	sub.w	r5, r5, r9
 8002df6:	6026      	str	r6, [r4, #0]
 8002df8:	60a5      	str	r5, [r4, #8]
 8002dfa:	463e      	mov	r6, r7
 8002dfc:	42be      	cmp	r6, r7
 8002dfe:	d900      	bls.n	8002e02 <__ssputs_r+0x86>
 8002e00:	463e      	mov	r6, r7
 8002e02:	6820      	ldr	r0, [r4, #0]
 8002e04:	4632      	mov	r2, r6
 8002e06:	4641      	mov	r1, r8
 8002e08:	f000 fc9a 	bl	8003740 <memmove>
 8002e0c:	68a3      	ldr	r3, [r4, #8]
 8002e0e:	1b9b      	subs	r3, r3, r6
 8002e10:	60a3      	str	r3, [r4, #8]
 8002e12:	6823      	ldr	r3, [r4, #0]
 8002e14:	4433      	add	r3, r6
 8002e16:	6023      	str	r3, [r4, #0]
 8002e18:	2000      	movs	r0, #0
 8002e1a:	e7db      	b.n	8002dd4 <__ssputs_r+0x58>
 8002e1c:	462a      	mov	r2, r5
 8002e1e:	f000 fcb5 	bl	800378c <_realloc_r>
 8002e22:	4606      	mov	r6, r0
 8002e24:	2800      	cmp	r0, #0
 8002e26:	d1e1      	bne.n	8002dec <__ssputs_r+0x70>
 8002e28:	6921      	ldr	r1, [r4, #16]
 8002e2a:	4650      	mov	r0, sl
 8002e2c:	f7ff fec6 	bl	8002bbc <_free_r>
 8002e30:	e7c7      	b.n	8002dc2 <__ssputs_r+0x46>
	...

08002e34 <_svfiprintf_r>:
 8002e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e38:	4698      	mov	r8, r3
 8002e3a:	898b      	ldrh	r3, [r1, #12]
 8002e3c:	061b      	lsls	r3, r3, #24
 8002e3e:	b09d      	sub	sp, #116	; 0x74
 8002e40:	4607      	mov	r7, r0
 8002e42:	460d      	mov	r5, r1
 8002e44:	4614      	mov	r4, r2
 8002e46:	d50e      	bpl.n	8002e66 <_svfiprintf_r+0x32>
 8002e48:	690b      	ldr	r3, [r1, #16]
 8002e4a:	b963      	cbnz	r3, 8002e66 <_svfiprintf_r+0x32>
 8002e4c:	2140      	movs	r1, #64	; 0x40
 8002e4e:	f7ff ff21 	bl	8002c94 <_malloc_r>
 8002e52:	6028      	str	r0, [r5, #0]
 8002e54:	6128      	str	r0, [r5, #16]
 8002e56:	b920      	cbnz	r0, 8002e62 <_svfiprintf_r+0x2e>
 8002e58:	230c      	movs	r3, #12
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e60:	e0d1      	b.n	8003006 <_svfiprintf_r+0x1d2>
 8002e62:	2340      	movs	r3, #64	; 0x40
 8002e64:	616b      	str	r3, [r5, #20]
 8002e66:	2300      	movs	r3, #0
 8002e68:	9309      	str	r3, [sp, #36]	; 0x24
 8002e6a:	2320      	movs	r3, #32
 8002e6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e70:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e74:	2330      	movs	r3, #48	; 0x30
 8002e76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003020 <_svfiprintf_r+0x1ec>
 8002e7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e7e:	f04f 0901 	mov.w	r9, #1
 8002e82:	4623      	mov	r3, r4
 8002e84:	469a      	mov	sl, r3
 8002e86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e8a:	b10a      	cbz	r2, 8002e90 <_svfiprintf_r+0x5c>
 8002e8c:	2a25      	cmp	r2, #37	; 0x25
 8002e8e:	d1f9      	bne.n	8002e84 <_svfiprintf_r+0x50>
 8002e90:	ebba 0b04 	subs.w	fp, sl, r4
 8002e94:	d00b      	beq.n	8002eae <_svfiprintf_r+0x7a>
 8002e96:	465b      	mov	r3, fp
 8002e98:	4622      	mov	r2, r4
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	4638      	mov	r0, r7
 8002e9e:	f7ff ff6d 	bl	8002d7c <__ssputs_r>
 8002ea2:	3001      	adds	r0, #1
 8002ea4:	f000 80aa 	beq.w	8002ffc <_svfiprintf_r+0x1c8>
 8002ea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002eaa:	445a      	add	r2, fp
 8002eac:	9209      	str	r2, [sp, #36]	; 0x24
 8002eae:	f89a 3000 	ldrb.w	r3, [sl]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 80a2 	beq.w	8002ffc <_svfiprintf_r+0x1c8>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ebe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ec2:	f10a 0a01 	add.w	sl, sl, #1
 8002ec6:	9304      	str	r3, [sp, #16]
 8002ec8:	9307      	str	r3, [sp, #28]
 8002eca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ece:	931a      	str	r3, [sp, #104]	; 0x68
 8002ed0:	4654      	mov	r4, sl
 8002ed2:	2205      	movs	r2, #5
 8002ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ed8:	4851      	ldr	r0, [pc, #324]	; (8003020 <_svfiprintf_r+0x1ec>)
 8002eda:	f7fd f979 	bl	80001d0 <memchr>
 8002ede:	9a04      	ldr	r2, [sp, #16]
 8002ee0:	b9d8      	cbnz	r0, 8002f1a <_svfiprintf_r+0xe6>
 8002ee2:	06d0      	lsls	r0, r2, #27
 8002ee4:	bf44      	itt	mi
 8002ee6:	2320      	movmi	r3, #32
 8002ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002eec:	0711      	lsls	r1, r2, #28
 8002eee:	bf44      	itt	mi
 8002ef0:	232b      	movmi	r3, #43	; 0x2b
 8002ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8002efa:	2b2a      	cmp	r3, #42	; 0x2a
 8002efc:	d015      	beq.n	8002f2a <_svfiprintf_r+0xf6>
 8002efe:	9a07      	ldr	r2, [sp, #28]
 8002f00:	4654      	mov	r4, sl
 8002f02:	2000      	movs	r0, #0
 8002f04:	f04f 0c0a 	mov.w	ip, #10
 8002f08:	4621      	mov	r1, r4
 8002f0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f0e:	3b30      	subs	r3, #48	; 0x30
 8002f10:	2b09      	cmp	r3, #9
 8002f12:	d94e      	bls.n	8002fb2 <_svfiprintf_r+0x17e>
 8002f14:	b1b0      	cbz	r0, 8002f44 <_svfiprintf_r+0x110>
 8002f16:	9207      	str	r2, [sp, #28]
 8002f18:	e014      	b.n	8002f44 <_svfiprintf_r+0x110>
 8002f1a:	eba0 0308 	sub.w	r3, r0, r8
 8002f1e:	fa09 f303 	lsl.w	r3, r9, r3
 8002f22:	4313      	orrs	r3, r2
 8002f24:	9304      	str	r3, [sp, #16]
 8002f26:	46a2      	mov	sl, r4
 8002f28:	e7d2      	b.n	8002ed0 <_svfiprintf_r+0x9c>
 8002f2a:	9b03      	ldr	r3, [sp, #12]
 8002f2c:	1d19      	adds	r1, r3, #4
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	9103      	str	r1, [sp, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	bfbb      	ittet	lt
 8002f36:	425b      	neglt	r3, r3
 8002f38:	f042 0202 	orrlt.w	r2, r2, #2
 8002f3c:	9307      	strge	r3, [sp, #28]
 8002f3e:	9307      	strlt	r3, [sp, #28]
 8002f40:	bfb8      	it	lt
 8002f42:	9204      	strlt	r2, [sp, #16]
 8002f44:	7823      	ldrb	r3, [r4, #0]
 8002f46:	2b2e      	cmp	r3, #46	; 0x2e
 8002f48:	d10c      	bne.n	8002f64 <_svfiprintf_r+0x130>
 8002f4a:	7863      	ldrb	r3, [r4, #1]
 8002f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8002f4e:	d135      	bne.n	8002fbc <_svfiprintf_r+0x188>
 8002f50:	9b03      	ldr	r3, [sp, #12]
 8002f52:	1d1a      	adds	r2, r3, #4
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	9203      	str	r2, [sp, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bfb8      	it	lt
 8002f5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002f60:	3402      	adds	r4, #2
 8002f62:	9305      	str	r3, [sp, #20]
 8002f64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003030 <_svfiprintf_r+0x1fc>
 8002f68:	7821      	ldrb	r1, [r4, #0]
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	4650      	mov	r0, sl
 8002f6e:	f7fd f92f 	bl	80001d0 <memchr>
 8002f72:	b140      	cbz	r0, 8002f86 <_svfiprintf_r+0x152>
 8002f74:	2340      	movs	r3, #64	; 0x40
 8002f76:	eba0 000a 	sub.w	r0, r0, sl
 8002f7a:	fa03 f000 	lsl.w	r0, r3, r0
 8002f7e:	9b04      	ldr	r3, [sp, #16]
 8002f80:	4303      	orrs	r3, r0
 8002f82:	3401      	adds	r4, #1
 8002f84:	9304      	str	r3, [sp, #16]
 8002f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f8a:	4826      	ldr	r0, [pc, #152]	; (8003024 <_svfiprintf_r+0x1f0>)
 8002f8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f90:	2206      	movs	r2, #6
 8002f92:	f7fd f91d 	bl	80001d0 <memchr>
 8002f96:	2800      	cmp	r0, #0
 8002f98:	d038      	beq.n	800300c <_svfiprintf_r+0x1d8>
 8002f9a:	4b23      	ldr	r3, [pc, #140]	; (8003028 <_svfiprintf_r+0x1f4>)
 8002f9c:	bb1b      	cbnz	r3, 8002fe6 <_svfiprintf_r+0x1b2>
 8002f9e:	9b03      	ldr	r3, [sp, #12]
 8002fa0:	3307      	adds	r3, #7
 8002fa2:	f023 0307 	bic.w	r3, r3, #7
 8002fa6:	3308      	adds	r3, #8
 8002fa8:	9303      	str	r3, [sp, #12]
 8002faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fac:	4433      	add	r3, r6
 8002fae:	9309      	str	r3, [sp, #36]	; 0x24
 8002fb0:	e767      	b.n	8002e82 <_svfiprintf_r+0x4e>
 8002fb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8002fb6:	460c      	mov	r4, r1
 8002fb8:	2001      	movs	r0, #1
 8002fba:	e7a5      	b.n	8002f08 <_svfiprintf_r+0xd4>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	3401      	adds	r4, #1
 8002fc0:	9305      	str	r3, [sp, #20]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	f04f 0c0a 	mov.w	ip, #10
 8002fc8:	4620      	mov	r0, r4
 8002fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fce:	3a30      	subs	r2, #48	; 0x30
 8002fd0:	2a09      	cmp	r2, #9
 8002fd2:	d903      	bls.n	8002fdc <_svfiprintf_r+0x1a8>
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0c5      	beq.n	8002f64 <_svfiprintf_r+0x130>
 8002fd8:	9105      	str	r1, [sp, #20]
 8002fda:	e7c3      	b.n	8002f64 <_svfiprintf_r+0x130>
 8002fdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fe0:	4604      	mov	r4, r0
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e7f0      	b.n	8002fc8 <_svfiprintf_r+0x194>
 8002fe6:	ab03      	add	r3, sp, #12
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	462a      	mov	r2, r5
 8002fec:	4b0f      	ldr	r3, [pc, #60]	; (800302c <_svfiprintf_r+0x1f8>)
 8002fee:	a904      	add	r1, sp, #16
 8002ff0:	4638      	mov	r0, r7
 8002ff2:	f3af 8000 	nop.w
 8002ff6:	1c42      	adds	r2, r0, #1
 8002ff8:	4606      	mov	r6, r0
 8002ffa:	d1d6      	bne.n	8002faa <_svfiprintf_r+0x176>
 8002ffc:	89ab      	ldrh	r3, [r5, #12]
 8002ffe:	065b      	lsls	r3, r3, #25
 8003000:	f53f af2c 	bmi.w	8002e5c <_svfiprintf_r+0x28>
 8003004:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003006:	b01d      	add	sp, #116	; 0x74
 8003008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800300c:	ab03      	add	r3, sp, #12
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	462a      	mov	r2, r5
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <_svfiprintf_r+0x1f8>)
 8003014:	a904      	add	r1, sp, #16
 8003016:	4638      	mov	r0, r7
 8003018:	f000 f9d4 	bl	80033c4 <_printf_i>
 800301c:	e7eb      	b.n	8002ff6 <_svfiprintf_r+0x1c2>
 800301e:	bf00      	nop
 8003020:	08003afc 	.word	0x08003afc
 8003024:	08003b06 	.word	0x08003b06
 8003028:	00000000 	.word	0x00000000
 800302c:	08002d7d 	.word	0x08002d7d
 8003030:	08003b02 	.word	0x08003b02

08003034 <__sfputc_r>:
 8003034:	6893      	ldr	r3, [r2, #8]
 8003036:	3b01      	subs	r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	b410      	push	{r4}
 800303c:	6093      	str	r3, [r2, #8]
 800303e:	da08      	bge.n	8003052 <__sfputc_r+0x1e>
 8003040:	6994      	ldr	r4, [r2, #24]
 8003042:	42a3      	cmp	r3, r4
 8003044:	db01      	blt.n	800304a <__sfputc_r+0x16>
 8003046:	290a      	cmp	r1, #10
 8003048:	d103      	bne.n	8003052 <__sfputc_r+0x1e>
 800304a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800304e:	f7ff bacd 	b.w	80025ec <__swbuf_r>
 8003052:	6813      	ldr	r3, [r2, #0]
 8003054:	1c58      	adds	r0, r3, #1
 8003056:	6010      	str	r0, [r2, #0]
 8003058:	7019      	strb	r1, [r3, #0]
 800305a:	4608      	mov	r0, r1
 800305c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003060:	4770      	bx	lr

08003062 <__sfputs_r>:
 8003062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003064:	4606      	mov	r6, r0
 8003066:	460f      	mov	r7, r1
 8003068:	4614      	mov	r4, r2
 800306a:	18d5      	adds	r5, r2, r3
 800306c:	42ac      	cmp	r4, r5
 800306e:	d101      	bne.n	8003074 <__sfputs_r+0x12>
 8003070:	2000      	movs	r0, #0
 8003072:	e007      	b.n	8003084 <__sfputs_r+0x22>
 8003074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003078:	463a      	mov	r2, r7
 800307a:	4630      	mov	r0, r6
 800307c:	f7ff ffda 	bl	8003034 <__sfputc_r>
 8003080:	1c43      	adds	r3, r0, #1
 8003082:	d1f3      	bne.n	800306c <__sfputs_r+0xa>
 8003084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003088 <_vfiprintf_r>:
 8003088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800308c:	460d      	mov	r5, r1
 800308e:	b09d      	sub	sp, #116	; 0x74
 8003090:	4614      	mov	r4, r2
 8003092:	4698      	mov	r8, r3
 8003094:	4606      	mov	r6, r0
 8003096:	b118      	cbz	r0, 80030a0 <_vfiprintf_r+0x18>
 8003098:	6983      	ldr	r3, [r0, #24]
 800309a:	b90b      	cbnz	r3, 80030a0 <_vfiprintf_r+0x18>
 800309c:	f7ff fc80 	bl	80029a0 <__sinit>
 80030a0:	4b89      	ldr	r3, [pc, #548]	; (80032c8 <_vfiprintf_r+0x240>)
 80030a2:	429d      	cmp	r5, r3
 80030a4:	d11b      	bne.n	80030de <_vfiprintf_r+0x56>
 80030a6:	6875      	ldr	r5, [r6, #4]
 80030a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030aa:	07d9      	lsls	r1, r3, #31
 80030ac:	d405      	bmi.n	80030ba <_vfiprintf_r+0x32>
 80030ae:	89ab      	ldrh	r3, [r5, #12]
 80030b0:	059a      	lsls	r2, r3, #22
 80030b2:	d402      	bmi.n	80030ba <_vfiprintf_r+0x32>
 80030b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030b6:	f7ff fd11 	bl	8002adc <__retarget_lock_acquire_recursive>
 80030ba:	89ab      	ldrh	r3, [r5, #12]
 80030bc:	071b      	lsls	r3, r3, #28
 80030be:	d501      	bpl.n	80030c4 <_vfiprintf_r+0x3c>
 80030c0:	692b      	ldr	r3, [r5, #16]
 80030c2:	b9eb      	cbnz	r3, 8003100 <_vfiprintf_r+0x78>
 80030c4:	4629      	mov	r1, r5
 80030c6:	4630      	mov	r0, r6
 80030c8:	f7ff fae2 	bl	8002690 <__swsetup_r>
 80030cc:	b1c0      	cbz	r0, 8003100 <_vfiprintf_r+0x78>
 80030ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030d0:	07dc      	lsls	r4, r3, #31
 80030d2:	d50e      	bpl.n	80030f2 <_vfiprintf_r+0x6a>
 80030d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030d8:	b01d      	add	sp, #116	; 0x74
 80030da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030de:	4b7b      	ldr	r3, [pc, #492]	; (80032cc <_vfiprintf_r+0x244>)
 80030e0:	429d      	cmp	r5, r3
 80030e2:	d101      	bne.n	80030e8 <_vfiprintf_r+0x60>
 80030e4:	68b5      	ldr	r5, [r6, #8]
 80030e6:	e7df      	b.n	80030a8 <_vfiprintf_r+0x20>
 80030e8:	4b79      	ldr	r3, [pc, #484]	; (80032d0 <_vfiprintf_r+0x248>)
 80030ea:	429d      	cmp	r5, r3
 80030ec:	bf08      	it	eq
 80030ee:	68f5      	ldreq	r5, [r6, #12]
 80030f0:	e7da      	b.n	80030a8 <_vfiprintf_r+0x20>
 80030f2:	89ab      	ldrh	r3, [r5, #12]
 80030f4:	0598      	lsls	r0, r3, #22
 80030f6:	d4ed      	bmi.n	80030d4 <_vfiprintf_r+0x4c>
 80030f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030fa:	f7ff fcf0 	bl	8002ade <__retarget_lock_release_recursive>
 80030fe:	e7e9      	b.n	80030d4 <_vfiprintf_r+0x4c>
 8003100:	2300      	movs	r3, #0
 8003102:	9309      	str	r3, [sp, #36]	; 0x24
 8003104:	2320      	movs	r3, #32
 8003106:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800310a:	f8cd 800c 	str.w	r8, [sp, #12]
 800310e:	2330      	movs	r3, #48	; 0x30
 8003110:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80032d4 <_vfiprintf_r+0x24c>
 8003114:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003118:	f04f 0901 	mov.w	r9, #1
 800311c:	4623      	mov	r3, r4
 800311e:	469a      	mov	sl, r3
 8003120:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003124:	b10a      	cbz	r2, 800312a <_vfiprintf_r+0xa2>
 8003126:	2a25      	cmp	r2, #37	; 0x25
 8003128:	d1f9      	bne.n	800311e <_vfiprintf_r+0x96>
 800312a:	ebba 0b04 	subs.w	fp, sl, r4
 800312e:	d00b      	beq.n	8003148 <_vfiprintf_r+0xc0>
 8003130:	465b      	mov	r3, fp
 8003132:	4622      	mov	r2, r4
 8003134:	4629      	mov	r1, r5
 8003136:	4630      	mov	r0, r6
 8003138:	f7ff ff93 	bl	8003062 <__sfputs_r>
 800313c:	3001      	adds	r0, #1
 800313e:	f000 80aa 	beq.w	8003296 <_vfiprintf_r+0x20e>
 8003142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003144:	445a      	add	r2, fp
 8003146:	9209      	str	r2, [sp, #36]	; 0x24
 8003148:	f89a 3000 	ldrb.w	r3, [sl]
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80a2 	beq.w	8003296 <_vfiprintf_r+0x20e>
 8003152:	2300      	movs	r3, #0
 8003154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800315c:	f10a 0a01 	add.w	sl, sl, #1
 8003160:	9304      	str	r3, [sp, #16]
 8003162:	9307      	str	r3, [sp, #28]
 8003164:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003168:	931a      	str	r3, [sp, #104]	; 0x68
 800316a:	4654      	mov	r4, sl
 800316c:	2205      	movs	r2, #5
 800316e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003172:	4858      	ldr	r0, [pc, #352]	; (80032d4 <_vfiprintf_r+0x24c>)
 8003174:	f7fd f82c 	bl	80001d0 <memchr>
 8003178:	9a04      	ldr	r2, [sp, #16]
 800317a:	b9d8      	cbnz	r0, 80031b4 <_vfiprintf_r+0x12c>
 800317c:	06d1      	lsls	r1, r2, #27
 800317e:	bf44      	itt	mi
 8003180:	2320      	movmi	r3, #32
 8003182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003186:	0713      	lsls	r3, r2, #28
 8003188:	bf44      	itt	mi
 800318a:	232b      	movmi	r3, #43	; 0x2b
 800318c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003190:	f89a 3000 	ldrb.w	r3, [sl]
 8003194:	2b2a      	cmp	r3, #42	; 0x2a
 8003196:	d015      	beq.n	80031c4 <_vfiprintf_r+0x13c>
 8003198:	9a07      	ldr	r2, [sp, #28]
 800319a:	4654      	mov	r4, sl
 800319c:	2000      	movs	r0, #0
 800319e:	f04f 0c0a 	mov.w	ip, #10
 80031a2:	4621      	mov	r1, r4
 80031a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031a8:	3b30      	subs	r3, #48	; 0x30
 80031aa:	2b09      	cmp	r3, #9
 80031ac:	d94e      	bls.n	800324c <_vfiprintf_r+0x1c4>
 80031ae:	b1b0      	cbz	r0, 80031de <_vfiprintf_r+0x156>
 80031b0:	9207      	str	r2, [sp, #28]
 80031b2:	e014      	b.n	80031de <_vfiprintf_r+0x156>
 80031b4:	eba0 0308 	sub.w	r3, r0, r8
 80031b8:	fa09 f303 	lsl.w	r3, r9, r3
 80031bc:	4313      	orrs	r3, r2
 80031be:	9304      	str	r3, [sp, #16]
 80031c0:	46a2      	mov	sl, r4
 80031c2:	e7d2      	b.n	800316a <_vfiprintf_r+0xe2>
 80031c4:	9b03      	ldr	r3, [sp, #12]
 80031c6:	1d19      	adds	r1, r3, #4
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	9103      	str	r1, [sp, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bfbb      	ittet	lt
 80031d0:	425b      	neglt	r3, r3
 80031d2:	f042 0202 	orrlt.w	r2, r2, #2
 80031d6:	9307      	strge	r3, [sp, #28]
 80031d8:	9307      	strlt	r3, [sp, #28]
 80031da:	bfb8      	it	lt
 80031dc:	9204      	strlt	r2, [sp, #16]
 80031de:	7823      	ldrb	r3, [r4, #0]
 80031e0:	2b2e      	cmp	r3, #46	; 0x2e
 80031e2:	d10c      	bne.n	80031fe <_vfiprintf_r+0x176>
 80031e4:	7863      	ldrb	r3, [r4, #1]
 80031e6:	2b2a      	cmp	r3, #42	; 0x2a
 80031e8:	d135      	bne.n	8003256 <_vfiprintf_r+0x1ce>
 80031ea:	9b03      	ldr	r3, [sp, #12]
 80031ec:	1d1a      	adds	r2, r3, #4
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	9203      	str	r2, [sp, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	bfb8      	it	lt
 80031f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80031fa:	3402      	adds	r4, #2
 80031fc:	9305      	str	r3, [sp, #20]
 80031fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80032e4 <_vfiprintf_r+0x25c>
 8003202:	7821      	ldrb	r1, [r4, #0]
 8003204:	2203      	movs	r2, #3
 8003206:	4650      	mov	r0, sl
 8003208:	f7fc ffe2 	bl	80001d0 <memchr>
 800320c:	b140      	cbz	r0, 8003220 <_vfiprintf_r+0x198>
 800320e:	2340      	movs	r3, #64	; 0x40
 8003210:	eba0 000a 	sub.w	r0, r0, sl
 8003214:	fa03 f000 	lsl.w	r0, r3, r0
 8003218:	9b04      	ldr	r3, [sp, #16]
 800321a:	4303      	orrs	r3, r0
 800321c:	3401      	adds	r4, #1
 800321e:	9304      	str	r3, [sp, #16]
 8003220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003224:	482c      	ldr	r0, [pc, #176]	; (80032d8 <_vfiprintf_r+0x250>)
 8003226:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800322a:	2206      	movs	r2, #6
 800322c:	f7fc ffd0 	bl	80001d0 <memchr>
 8003230:	2800      	cmp	r0, #0
 8003232:	d03f      	beq.n	80032b4 <_vfiprintf_r+0x22c>
 8003234:	4b29      	ldr	r3, [pc, #164]	; (80032dc <_vfiprintf_r+0x254>)
 8003236:	bb1b      	cbnz	r3, 8003280 <_vfiprintf_r+0x1f8>
 8003238:	9b03      	ldr	r3, [sp, #12]
 800323a:	3307      	adds	r3, #7
 800323c:	f023 0307 	bic.w	r3, r3, #7
 8003240:	3308      	adds	r3, #8
 8003242:	9303      	str	r3, [sp, #12]
 8003244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003246:	443b      	add	r3, r7
 8003248:	9309      	str	r3, [sp, #36]	; 0x24
 800324a:	e767      	b.n	800311c <_vfiprintf_r+0x94>
 800324c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003250:	460c      	mov	r4, r1
 8003252:	2001      	movs	r0, #1
 8003254:	e7a5      	b.n	80031a2 <_vfiprintf_r+0x11a>
 8003256:	2300      	movs	r3, #0
 8003258:	3401      	adds	r4, #1
 800325a:	9305      	str	r3, [sp, #20]
 800325c:	4619      	mov	r1, r3
 800325e:	f04f 0c0a 	mov.w	ip, #10
 8003262:	4620      	mov	r0, r4
 8003264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003268:	3a30      	subs	r2, #48	; 0x30
 800326a:	2a09      	cmp	r2, #9
 800326c:	d903      	bls.n	8003276 <_vfiprintf_r+0x1ee>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0c5      	beq.n	80031fe <_vfiprintf_r+0x176>
 8003272:	9105      	str	r1, [sp, #20]
 8003274:	e7c3      	b.n	80031fe <_vfiprintf_r+0x176>
 8003276:	fb0c 2101 	mla	r1, ip, r1, r2
 800327a:	4604      	mov	r4, r0
 800327c:	2301      	movs	r3, #1
 800327e:	e7f0      	b.n	8003262 <_vfiprintf_r+0x1da>
 8003280:	ab03      	add	r3, sp, #12
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	462a      	mov	r2, r5
 8003286:	4b16      	ldr	r3, [pc, #88]	; (80032e0 <_vfiprintf_r+0x258>)
 8003288:	a904      	add	r1, sp, #16
 800328a:	4630      	mov	r0, r6
 800328c:	f3af 8000 	nop.w
 8003290:	4607      	mov	r7, r0
 8003292:	1c78      	adds	r0, r7, #1
 8003294:	d1d6      	bne.n	8003244 <_vfiprintf_r+0x1bc>
 8003296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003298:	07d9      	lsls	r1, r3, #31
 800329a:	d405      	bmi.n	80032a8 <_vfiprintf_r+0x220>
 800329c:	89ab      	ldrh	r3, [r5, #12]
 800329e:	059a      	lsls	r2, r3, #22
 80032a0:	d402      	bmi.n	80032a8 <_vfiprintf_r+0x220>
 80032a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80032a4:	f7ff fc1b 	bl	8002ade <__retarget_lock_release_recursive>
 80032a8:	89ab      	ldrh	r3, [r5, #12]
 80032aa:	065b      	lsls	r3, r3, #25
 80032ac:	f53f af12 	bmi.w	80030d4 <_vfiprintf_r+0x4c>
 80032b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032b2:	e711      	b.n	80030d8 <_vfiprintf_r+0x50>
 80032b4:	ab03      	add	r3, sp, #12
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	462a      	mov	r2, r5
 80032ba:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <_vfiprintf_r+0x258>)
 80032bc:	a904      	add	r1, sp, #16
 80032be:	4630      	mov	r0, r6
 80032c0:	f000 f880 	bl	80033c4 <_printf_i>
 80032c4:	e7e4      	b.n	8003290 <_vfiprintf_r+0x208>
 80032c6:	bf00      	nop
 80032c8:	08003abc 	.word	0x08003abc
 80032cc:	08003adc 	.word	0x08003adc
 80032d0:	08003a9c 	.word	0x08003a9c
 80032d4:	08003afc 	.word	0x08003afc
 80032d8:	08003b06 	.word	0x08003b06
 80032dc:	00000000 	.word	0x00000000
 80032e0:	08003063 	.word	0x08003063
 80032e4:	08003b02 	.word	0x08003b02

080032e8 <_printf_common>:
 80032e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032ec:	4616      	mov	r6, r2
 80032ee:	4699      	mov	r9, r3
 80032f0:	688a      	ldr	r2, [r1, #8]
 80032f2:	690b      	ldr	r3, [r1, #16]
 80032f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032f8:	4293      	cmp	r3, r2
 80032fa:	bfb8      	it	lt
 80032fc:	4613      	movlt	r3, r2
 80032fe:	6033      	str	r3, [r6, #0]
 8003300:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003304:	4607      	mov	r7, r0
 8003306:	460c      	mov	r4, r1
 8003308:	b10a      	cbz	r2, 800330e <_printf_common+0x26>
 800330a:	3301      	adds	r3, #1
 800330c:	6033      	str	r3, [r6, #0]
 800330e:	6823      	ldr	r3, [r4, #0]
 8003310:	0699      	lsls	r1, r3, #26
 8003312:	bf42      	ittt	mi
 8003314:	6833      	ldrmi	r3, [r6, #0]
 8003316:	3302      	addmi	r3, #2
 8003318:	6033      	strmi	r3, [r6, #0]
 800331a:	6825      	ldr	r5, [r4, #0]
 800331c:	f015 0506 	ands.w	r5, r5, #6
 8003320:	d106      	bne.n	8003330 <_printf_common+0x48>
 8003322:	f104 0a19 	add.w	sl, r4, #25
 8003326:	68e3      	ldr	r3, [r4, #12]
 8003328:	6832      	ldr	r2, [r6, #0]
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	42ab      	cmp	r3, r5
 800332e:	dc26      	bgt.n	800337e <_printf_common+0x96>
 8003330:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003334:	1e13      	subs	r3, r2, #0
 8003336:	6822      	ldr	r2, [r4, #0]
 8003338:	bf18      	it	ne
 800333a:	2301      	movne	r3, #1
 800333c:	0692      	lsls	r2, r2, #26
 800333e:	d42b      	bmi.n	8003398 <_printf_common+0xb0>
 8003340:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003344:	4649      	mov	r1, r9
 8003346:	4638      	mov	r0, r7
 8003348:	47c0      	blx	r8
 800334a:	3001      	adds	r0, #1
 800334c:	d01e      	beq.n	800338c <_printf_common+0xa4>
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	68e5      	ldr	r5, [r4, #12]
 8003352:	6832      	ldr	r2, [r6, #0]
 8003354:	f003 0306 	and.w	r3, r3, #6
 8003358:	2b04      	cmp	r3, #4
 800335a:	bf08      	it	eq
 800335c:	1aad      	subeq	r5, r5, r2
 800335e:	68a3      	ldr	r3, [r4, #8]
 8003360:	6922      	ldr	r2, [r4, #16]
 8003362:	bf0c      	ite	eq
 8003364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003368:	2500      	movne	r5, #0
 800336a:	4293      	cmp	r3, r2
 800336c:	bfc4      	itt	gt
 800336e:	1a9b      	subgt	r3, r3, r2
 8003370:	18ed      	addgt	r5, r5, r3
 8003372:	2600      	movs	r6, #0
 8003374:	341a      	adds	r4, #26
 8003376:	42b5      	cmp	r5, r6
 8003378:	d11a      	bne.n	80033b0 <_printf_common+0xc8>
 800337a:	2000      	movs	r0, #0
 800337c:	e008      	b.n	8003390 <_printf_common+0xa8>
 800337e:	2301      	movs	r3, #1
 8003380:	4652      	mov	r2, sl
 8003382:	4649      	mov	r1, r9
 8003384:	4638      	mov	r0, r7
 8003386:	47c0      	blx	r8
 8003388:	3001      	adds	r0, #1
 800338a:	d103      	bne.n	8003394 <_printf_common+0xac>
 800338c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003394:	3501      	adds	r5, #1
 8003396:	e7c6      	b.n	8003326 <_printf_common+0x3e>
 8003398:	18e1      	adds	r1, r4, r3
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	2030      	movs	r0, #48	; 0x30
 800339e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033a2:	4422      	add	r2, r4
 80033a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033ac:	3302      	adds	r3, #2
 80033ae:	e7c7      	b.n	8003340 <_printf_common+0x58>
 80033b0:	2301      	movs	r3, #1
 80033b2:	4622      	mov	r2, r4
 80033b4:	4649      	mov	r1, r9
 80033b6:	4638      	mov	r0, r7
 80033b8:	47c0      	blx	r8
 80033ba:	3001      	adds	r0, #1
 80033bc:	d0e6      	beq.n	800338c <_printf_common+0xa4>
 80033be:	3601      	adds	r6, #1
 80033c0:	e7d9      	b.n	8003376 <_printf_common+0x8e>
	...

080033c4 <_printf_i>:
 80033c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033c8:	7e0f      	ldrb	r7, [r1, #24]
 80033ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80033cc:	2f78      	cmp	r7, #120	; 0x78
 80033ce:	4691      	mov	r9, r2
 80033d0:	4680      	mov	r8, r0
 80033d2:	460c      	mov	r4, r1
 80033d4:	469a      	mov	sl, r3
 80033d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80033da:	d807      	bhi.n	80033ec <_printf_i+0x28>
 80033dc:	2f62      	cmp	r7, #98	; 0x62
 80033de:	d80a      	bhi.n	80033f6 <_printf_i+0x32>
 80033e0:	2f00      	cmp	r7, #0
 80033e2:	f000 80d8 	beq.w	8003596 <_printf_i+0x1d2>
 80033e6:	2f58      	cmp	r7, #88	; 0x58
 80033e8:	f000 80a3 	beq.w	8003532 <_printf_i+0x16e>
 80033ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033f4:	e03a      	b.n	800346c <_printf_i+0xa8>
 80033f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033fa:	2b15      	cmp	r3, #21
 80033fc:	d8f6      	bhi.n	80033ec <_printf_i+0x28>
 80033fe:	a101      	add	r1, pc, #4	; (adr r1, 8003404 <_printf_i+0x40>)
 8003400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003404:	0800345d 	.word	0x0800345d
 8003408:	08003471 	.word	0x08003471
 800340c:	080033ed 	.word	0x080033ed
 8003410:	080033ed 	.word	0x080033ed
 8003414:	080033ed 	.word	0x080033ed
 8003418:	080033ed 	.word	0x080033ed
 800341c:	08003471 	.word	0x08003471
 8003420:	080033ed 	.word	0x080033ed
 8003424:	080033ed 	.word	0x080033ed
 8003428:	080033ed 	.word	0x080033ed
 800342c:	080033ed 	.word	0x080033ed
 8003430:	0800357d 	.word	0x0800357d
 8003434:	080034a1 	.word	0x080034a1
 8003438:	0800355f 	.word	0x0800355f
 800343c:	080033ed 	.word	0x080033ed
 8003440:	080033ed 	.word	0x080033ed
 8003444:	0800359f 	.word	0x0800359f
 8003448:	080033ed 	.word	0x080033ed
 800344c:	080034a1 	.word	0x080034a1
 8003450:	080033ed 	.word	0x080033ed
 8003454:	080033ed 	.word	0x080033ed
 8003458:	08003567 	.word	0x08003567
 800345c:	682b      	ldr	r3, [r5, #0]
 800345e:	1d1a      	adds	r2, r3, #4
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	602a      	str	r2, [r5, #0]
 8003464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800346c:	2301      	movs	r3, #1
 800346e:	e0a3      	b.n	80035b8 <_printf_i+0x1f4>
 8003470:	6820      	ldr	r0, [r4, #0]
 8003472:	6829      	ldr	r1, [r5, #0]
 8003474:	0606      	lsls	r6, r0, #24
 8003476:	f101 0304 	add.w	r3, r1, #4
 800347a:	d50a      	bpl.n	8003492 <_printf_i+0xce>
 800347c:	680e      	ldr	r6, [r1, #0]
 800347e:	602b      	str	r3, [r5, #0]
 8003480:	2e00      	cmp	r6, #0
 8003482:	da03      	bge.n	800348c <_printf_i+0xc8>
 8003484:	232d      	movs	r3, #45	; 0x2d
 8003486:	4276      	negs	r6, r6
 8003488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800348c:	485e      	ldr	r0, [pc, #376]	; (8003608 <_printf_i+0x244>)
 800348e:	230a      	movs	r3, #10
 8003490:	e019      	b.n	80034c6 <_printf_i+0x102>
 8003492:	680e      	ldr	r6, [r1, #0]
 8003494:	602b      	str	r3, [r5, #0]
 8003496:	f010 0f40 	tst.w	r0, #64	; 0x40
 800349a:	bf18      	it	ne
 800349c:	b236      	sxthne	r6, r6
 800349e:	e7ef      	b.n	8003480 <_printf_i+0xbc>
 80034a0:	682b      	ldr	r3, [r5, #0]
 80034a2:	6820      	ldr	r0, [r4, #0]
 80034a4:	1d19      	adds	r1, r3, #4
 80034a6:	6029      	str	r1, [r5, #0]
 80034a8:	0601      	lsls	r1, r0, #24
 80034aa:	d501      	bpl.n	80034b0 <_printf_i+0xec>
 80034ac:	681e      	ldr	r6, [r3, #0]
 80034ae:	e002      	b.n	80034b6 <_printf_i+0xf2>
 80034b0:	0646      	lsls	r6, r0, #25
 80034b2:	d5fb      	bpl.n	80034ac <_printf_i+0xe8>
 80034b4:	881e      	ldrh	r6, [r3, #0]
 80034b6:	4854      	ldr	r0, [pc, #336]	; (8003608 <_printf_i+0x244>)
 80034b8:	2f6f      	cmp	r7, #111	; 0x6f
 80034ba:	bf0c      	ite	eq
 80034bc:	2308      	moveq	r3, #8
 80034be:	230a      	movne	r3, #10
 80034c0:	2100      	movs	r1, #0
 80034c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034c6:	6865      	ldr	r5, [r4, #4]
 80034c8:	60a5      	str	r5, [r4, #8]
 80034ca:	2d00      	cmp	r5, #0
 80034cc:	bfa2      	ittt	ge
 80034ce:	6821      	ldrge	r1, [r4, #0]
 80034d0:	f021 0104 	bicge.w	r1, r1, #4
 80034d4:	6021      	strge	r1, [r4, #0]
 80034d6:	b90e      	cbnz	r6, 80034dc <_printf_i+0x118>
 80034d8:	2d00      	cmp	r5, #0
 80034da:	d04d      	beq.n	8003578 <_printf_i+0x1b4>
 80034dc:	4615      	mov	r5, r2
 80034de:	fbb6 f1f3 	udiv	r1, r6, r3
 80034e2:	fb03 6711 	mls	r7, r3, r1, r6
 80034e6:	5dc7      	ldrb	r7, [r0, r7]
 80034e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80034ec:	4637      	mov	r7, r6
 80034ee:	42bb      	cmp	r3, r7
 80034f0:	460e      	mov	r6, r1
 80034f2:	d9f4      	bls.n	80034de <_printf_i+0x11a>
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d10b      	bne.n	8003510 <_printf_i+0x14c>
 80034f8:	6823      	ldr	r3, [r4, #0]
 80034fa:	07de      	lsls	r6, r3, #31
 80034fc:	d508      	bpl.n	8003510 <_printf_i+0x14c>
 80034fe:	6923      	ldr	r3, [r4, #16]
 8003500:	6861      	ldr	r1, [r4, #4]
 8003502:	4299      	cmp	r1, r3
 8003504:	bfde      	ittt	le
 8003506:	2330      	movle	r3, #48	; 0x30
 8003508:	f805 3c01 	strble.w	r3, [r5, #-1]
 800350c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003510:	1b52      	subs	r2, r2, r5
 8003512:	6122      	str	r2, [r4, #16]
 8003514:	f8cd a000 	str.w	sl, [sp]
 8003518:	464b      	mov	r3, r9
 800351a:	aa03      	add	r2, sp, #12
 800351c:	4621      	mov	r1, r4
 800351e:	4640      	mov	r0, r8
 8003520:	f7ff fee2 	bl	80032e8 <_printf_common>
 8003524:	3001      	adds	r0, #1
 8003526:	d14c      	bne.n	80035c2 <_printf_i+0x1fe>
 8003528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800352c:	b004      	add	sp, #16
 800352e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003532:	4835      	ldr	r0, [pc, #212]	; (8003608 <_printf_i+0x244>)
 8003534:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003538:	6829      	ldr	r1, [r5, #0]
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003540:	6029      	str	r1, [r5, #0]
 8003542:	061d      	lsls	r5, r3, #24
 8003544:	d514      	bpl.n	8003570 <_printf_i+0x1ac>
 8003546:	07df      	lsls	r7, r3, #31
 8003548:	bf44      	itt	mi
 800354a:	f043 0320 	orrmi.w	r3, r3, #32
 800354e:	6023      	strmi	r3, [r4, #0]
 8003550:	b91e      	cbnz	r6, 800355a <_printf_i+0x196>
 8003552:	6823      	ldr	r3, [r4, #0]
 8003554:	f023 0320 	bic.w	r3, r3, #32
 8003558:	6023      	str	r3, [r4, #0]
 800355a:	2310      	movs	r3, #16
 800355c:	e7b0      	b.n	80034c0 <_printf_i+0xfc>
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	f043 0320 	orr.w	r3, r3, #32
 8003564:	6023      	str	r3, [r4, #0]
 8003566:	2378      	movs	r3, #120	; 0x78
 8003568:	4828      	ldr	r0, [pc, #160]	; (800360c <_printf_i+0x248>)
 800356a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800356e:	e7e3      	b.n	8003538 <_printf_i+0x174>
 8003570:	0659      	lsls	r1, r3, #25
 8003572:	bf48      	it	mi
 8003574:	b2b6      	uxthmi	r6, r6
 8003576:	e7e6      	b.n	8003546 <_printf_i+0x182>
 8003578:	4615      	mov	r5, r2
 800357a:	e7bb      	b.n	80034f4 <_printf_i+0x130>
 800357c:	682b      	ldr	r3, [r5, #0]
 800357e:	6826      	ldr	r6, [r4, #0]
 8003580:	6961      	ldr	r1, [r4, #20]
 8003582:	1d18      	adds	r0, r3, #4
 8003584:	6028      	str	r0, [r5, #0]
 8003586:	0635      	lsls	r5, r6, #24
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	d501      	bpl.n	8003590 <_printf_i+0x1cc>
 800358c:	6019      	str	r1, [r3, #0]
 800358e:	e002      	b.n	8003596 <_printf_i+0x1d2>
 8003590:	0670      	lsls	r0, r6, #25
 8003592:	d5fb      	bpl.n	800358c <_printf_i+0x1c8>
 8003594:	8019      	strh	r1, [r3, #0]
 8003596:	2300      	movs	r3, #0
 8003598:	6123      	str	r3, [r4, #16]
 800359a:	4615      	mov	r5, r2
 800359c:	e7ba      	b.n	8003514 <_printf_i+0x150>
 800359e:	682b      	ldr	r3, [r5, #0]
 80035a0:	1d1a      	adds	r2, r3, #4
 80035a2:	602a      	str	r2, [r5, #0]
 80035a4:	681d      	ldr	r5, [r3, #0]
 80035a6:	6862      	ldr	r2, [r4, #4]
 80035a8:	2100      	movs	r1, #0
 80035aa:	4628      	mov	r0, r5
 80035ac:	f7fc fe10 	bl	80001d0 <memchr>
 80035b0:	b108      	cbz	r0, 80035b6 <_printf_i+0x1f2>
 80035b2:	1b40      	subs	r0, r0, r5
 80035b4:	6060      	str	r0, [r4, #4]
 80035b6:	6863      	ldr	r3, [r4, #4]
 80035b8:	6123      	str	r3, [r4, #16]
 80035ba:	2300      	movs	r3, #0
 80035bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035c0:	e7a8      	b.n	8003514 <_printf_i+0x150>
 80035c2:	6923      	ldr	r3, [r4, #16]
 80035c4:	462a      	mov	r2, r5
 80035c6:	4649      	mov	r1, r9
 80035c8:	4640      	mov	r0, r8
 80035ca:	47d0      	blx	sl
 80035cc:	3001      	adds	r0, #1
 80035ce:	d0ab      	beq.n	8003528 <_printf_i+0x164>
 80035d0:	6823      	ldr	r3, [r4, #0]
 80035d2:	079b      	lsls	r3, r3, #30
 80035d4:	d413      	bmi.n	80035fe <_printf_i+0x23a>
 80035d6:	68e0      	ldr	r0, [r4, #12]
 80035d8:	9b03      	ldr	r3, [sp, #12]
 80035da:	4298      	cmp	r0, r3
 80035dc:	bfb8      	it	lt
 80035de:	4618      	movlt	r0, r3
 80035e0:	e7a4      	b.n	800352c <_printf_i+0x168>
 80035e2:	2301      	movs	r3, #1
 80035e4:	4632      	mov	r2, r6
 80035e6:	4649      	mov	r1, r9
 80035e8:	4640      	mov	r0, r8
 80035ea:	47d0      	blx	sl
 80035ec:	3001      	adds	r0, #1
 80035ee:	d09b      	beq.n	8003528 <_printf_i+0x164>
 80035f0:	3501      	adds	r5, #1
 80035f2:	68e3      	ldr	r3, [r4, #12]
 80035f4:	9903      	ldr	r1, [sp, #12]
 80035f6:	1a5b      	subs	r3, r3, r1
 80035f8:	42ab      	cmp	r3, r5
 80035fa:	dcf2      	bgt.n	80035e2 <_printf_i+0x21e>
 80035fc:	e7eb      	b.n	80035d6 <_printf_i+0x212>
 80035fe:	2500      	movs	r5, #0
 8003600:	f104 0619 	add.w	r6, r4, #25
 8003604:	e7f5      	b.n	80035f2 <_printf_i+0x22e>
 8003606:	bf00      	nop
 8003608:	08003b0d 	.word	0x08003b0d
 800360c:	08003b1e 	.word	0x08003b1e

08003610 <_sbrk_r>:
 8003610:	b538      	push	{r3, r4, r5, lr}
 8003612:	4d06      	ldr	r5, [pc, #24]	; (800362c <_sbrk_r+0x1c>)
 8003614:	2300      	movs	r3, #0
 8003616:	4604      	mov	r4, r0
 8003618:	4608      	mov	r0, r1
 800361a:	602b      	str	r3, [r5, #0]
 800361c:	f7fe fd40 	bl	80020a0 <_sbrk>
 8003620:	1c43      	adds	r3, r0, #1
 8003622:	d102      	bne.n	800362a <_sbrk_r+0x1a>
 8003624:	682b      	ldr	r3, [r5, #0]
 8003626:	b103      	cbz	r3, 800362a <_sbrk_r+0x1a>
 8003628:	6023      	str	r3, [r4, #0]
 800362a:	bd38      	pop	{r3, r4, r5, pc}
 800362c:	200001c4 	.word	0x200001c4

08003630 <__sread>:
 8003630:	b510      	push	{r4, lr}
 8003632:	460c      	mov	r4, r1
 8003634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003638:	f000 f8d8 	bl	80037ec <_read_r>
 800363c:	2800      	cmp	r0, #0
 800363e:	bfab      	itete	ge
 8003640:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003642:	89a3      	ldrhlt	r3, [r4, #12]
 8003644:	181b      	addge	r3, r3, r0
 8003646:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800364a:	bfac      	ite	ge
 800364c:	6563      	strge	r3, [r4, #84]	; 0x54
 800364e:	81a3      	strhlt	r3, [r4, #12]
 8003650:	bd10      	pop	{r4, pc}

08003652 <__swrite>:
 8003652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003656:	461f      	mov	r7, r3
 8003658:	898b      	ldrh	r3, [r1, #12]
 800365a:	05db      	lsls	r3, r3, #23
 800365c:	4605      	mov	r5, r0
 800365e:	460c      	mov	r4, r1
 8003660:	4616      	mov	r6, r2
 8003662:	d505      	bpl.n	8003670 <__swrite+0x1e>
 8003664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003668:	2302      	movs	r3, #2
 800366a:	2200      	movs	r2, #0
 800366c:	f000 f856 	bl	800371c <_lseek_r>
 8003670:	89a3      	ldrh	r3, [r4, #12]
 8003672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003676:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800367a:	81a3      	strh	r3, [r4, #12]
 800367c:	4632      	mov	r2, r6
 800367e:	463b      	mov	r3, r7
 8003680:	4628      	mov	r0, r5
 8003682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003686:	f7fd bdd7 	b.w	8001238 <_write_r>

0800368a <__sseek>:
 800368a:	b510      	push	{r4, lr}
 800368c:	460c      	mov	r4, r1
 800368e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003692:	f000 f843 	bl	800371c <_lseek_r>
 8003696:	1c43      	adds	r3, r0, #1
 8003698:	89a3      	ldrh	r3, [r4, #12]
 800369a:	bf15      	itete	ne
 800369c:	6560      	strne	r0, [r4, #84]	; 0x54
 800369e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80036a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80036a6:	81a3      	strheq	r3, [r4, #12]
 80036a8:	bf18      	it	ne
 80036aa:	81a3      	strhne	r3, [r4, #12]
 80036ac:	bd10      	pop	{r4, pc}

080036ae <__sclose>:
 80036ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036b2:	f000 b801 	b.w	80036b8 <_close_r>
	...

080036b8 <_close_r>:
 80036b8:	b538      	push	{r3, r4, r5, lr}
 80036ba:	4d06      	ldr	r5, [pc, #24]	; (80036d4 <_close_r+0x1c>)
 80036bc:	2300      	movs	r3, #0
 80036be:	4604      	mov	r4, r0
 80036c0:	4608      	mov	r0, r1
 80036c2:	602b      	str	r3, [r5, #0]
 80036c4:	f7fe fcb7 	bl	8002036 <_close>
 80036c8:	1c43      	adds	r3, r0, #1
 80036ca:	d102      	bne.n	80036d2 <_close_r+0x1a>
 80036cc:	682b      	ldr	r3, [r5, #0]
 80036ce:	b103      	cbz	r3, 80036d2 <_close_r+0x1a>
 80036d0:	6023      	str	r3, [r4, #0]
 80036d2:	bd38      	pop	{r3, r4, r5, pc}
 80036d4:	200001c4 	.word	0x200001c4

080036d8 <_fstat_r>:
 80036d8:	b538      	push	{r3, r4, r5, lr}
 80036da:	4d07      	ldr	r5, [pc, #28]	; (80036f8 <_fstat_r+0x20>)
 80036dc:	2300      	movs	r3, #0
 80036de:	4604      	mov	r4, r0
 80036e0:	4608      	mov	r0, r1
 80036e2:	4611      	mov	r1, r2
 80036e4:	602b      	str	r3, [r5, #0]
 80036e6:	f7fe fcb2 	bl	800204e <_fstat>
 80036ea:	1c43      	adds	r3, r0, #1
 80036ec:	d102      	bne.n	80036f4 <_fstat_r+0x1c>
 80036ee:	682b      	ldr	r3, [r5, #0]
 80036f0:	b103      	cbz	r3, 80036f4 <_fstat_r+0x1c>
 80036f2:	6023      	str	r3, [r4, #0]
 80036f4:	bd38      	pop	{r3, r4, r5, pc}
 80036f6:	bf00      	nop
 80036f8:	200001c4 	.word	0x200001c4

080036fc <_isatty_r>:
 80036fc:	b538      	push	{r3, r4, r5, lr}
 80036fe:	4d06      	ldr	r5, [pc, #24]	; (8003718 <_isatty_r+0x1c>)
 8003700:	2300      	movs	r3, #0
 8003702:	4604      	mov	r4, r0
 8003704:	4608      	mov	r0, r1
 8003706:	602b      	str	r3, [r5, #0]
 8003708:	f7fe fcb1 	bl	800206e <_isatty>
 800370c:	1c43      	adds	r3, r0, #1
 800370e:	d102      	bne.n	8003716 <_isatty_r+0x1a>
 8003710:	682b      	ldr	r3, [r5, #0]
 8003712:	b103      	cbz	r3, 8003716 <_isatty_r+0x1a>
 8003714:	6023      	str	r3, [r4, #0]
 8003716:	bd38      	pop	{r3, r4, r5, pc}
 8003718:	200001c4 	.word	0x200001c4

0800371c <_lseek_r>:
 800371c:	b538      	push	{r3, r4, r5, lr}
 800371e:	4d07      	ldr	r5, [pc, #28]	; (800373c <_lseek_r+0x20>)
 8003720:	4604      	mov	r4, r0
 8003722:	4608      	mov	r0, r1
 8003724:	4611      	mov	r1, r2
 8003726:	2200      	movs	r2, #0
 8003728:	602a      	str	r2, [r5, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	f7fe fcaa 	bl	8002084 <_lseek>
 8003730:	1c43      	adds	r3, r0, #1
 8003732:	d102      	bne.n	800373a <_lseek_r+0x1e>
 8003734:	682b      	ldr	r3, [r5, #0]
 8003736:	b103      	cbz	r3, 800373a <_lseek_r+0x1e>
 8003738:	6023      	str	r3, [r4, #0]
 800373a:	bd38      	pop	{r3, r4, r5, pc}
 800373c:	200001c4 	.word	0x200001c4

08003740 <memmove>:
 8003740:	4288      	cmp	r0, r1
 8003742:	b510      	push	{r4, lr}
 8003744:	eb01 0402 	add.w	r4, r1, r2
 8003748:	d902      	bls.n	8003750 <memmove+0x10>
 800374a:	4284      	cmp	r4, r0
 800374c:	4623      	mov	r3, r4
 800374e:	d807      	bhi.n	8003760 <memmove+0x20>
 8003750:	1e43      	subs	r3, r0, #1
 8003752:	42a1      	cmp	r1, r4
 8003754:	d008      	beq.n	8003768 <memmove+0x28>
 8003756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800375a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800375e:	e7f8      	b.n	8003752 <memmove+0x12>
 8003760:	4402      	add	r2, r0
 8003762:	4601      	mov	r1, r0
 8003764:	428a      	cmp	r2, r1
 8003766:	d100      	bne.n	800376a <memmove+0x2a>
 8003768:	bd10      	pop	{r4, pc}
 800376a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800376e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003772:	e7f7      	b.n	8003764 <memmove+0x24>

08003774 <__malloc_lock>:
 8003774:	4801      	ldr	r0, [pc, #4]	; (800377c <__malloc_lock+0x8>)
 8003776:	f7ff b9b1 	b.w	8002adc <__retarget_lock_acquire_recursive>
 800377a:	bf00      	nop
 800377c:	200001b8 	.word	0x200001b8

08003780 <__malloc_unlock>:
 8003780:	4801      	ldr	r0, [pc, #4]	; (8003788 <__malloc_unlock+0x8>)
 8003782:	f7ff b9ac 	b.w	8002ade <__retarget_lock_release_recursive>
 8003786:	bf00      	nop
 8003788:	200001b8 	.word	0x200001b8

0800378c <_realloc_r>:
 800378c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003790:	4680      	mov	r8, r0
 8003792:	4614      	mov	r4, r2
 8003794:	460e      	mov	r6, r1
 8003796:	b921      	cbnz	r1, 80037a2 <_realloc_r+0x16>
 8003798:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800379c:	4611      	mov	r1, r2
 800379e:	f7ff ba79 	b.w	8002c94 <_malloc_r>
 80037a2:	b92a      	cbnz	r2, 80037b0 <_realloc_r+0x24>
 80037a4:	f7ff fa0a 	bl	8002bbc <_free_r>
 80037a8:	4625      	mov	r5, r4
 80037aa:	4628      	mov	r0, r5
 80037ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037b0:	f000 f82e 	bl	8003810 <_malloc_usable_size_r>
 80037b4:	4284      	cmp	r4, r0
 80037b6:	4607      	mov	r7, r0
 80037b8:	d802      	bhi.n	80037c0 <_realloc_r+0x34>
 80037ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80037be:	d812      	bhi.n	80037e6 <_realloc_r+0x5a>
 80037c0:	4621      	mov	r1, r4
 80037c2:	4640      	mov	r0, r8
 80037c4:	f7ff fa66 	bl	8002c94 <_malloc_r>
 80037c8:	4605      	mov	r5, r0
 80037ca:	2800      	cmp	r0, #0
 80037cc:	d0ed      	beq.n	80037aa <_realloc_r+0x1e>
 80037ce:	42bc      	cmp	r4, r7
 80037d0:	4622      	mov	r2, r4
 80037d2:	4631      	mov	r1, r6
 80037d4:	bf28      	it	cs
 80037d6:	463a      	movcs	r2, r7
 80037d8:	f7fe fd76 	bl	80022c8 <memcpy>
 80037dc:	4631      	mov	r1, r6
 80037de:	4640      	mov	r0, r8
 80037e0:	f7ff f9ec 	bl	8002bbc <_free_r>
 80037e4:	e7e1      	b.n	80037aa <_realloc_r+0x1e>
 80037e6:	4635      	mov	r5, r6
 80037e8:	e7df      	b.n	80037aa <_realloc_r+0x1e>
	...

080037ec <_read_r>:
 80037ec:	b538      	push	{r3, r4, r5, lr}
 80037ee:	4d07      	ldr	r5, [pc, #28]	; (800380c <_read_r+0x20>)
 80037f0:	4604      	mov	r4, r0
 80037f2:	4608      	mov	r0, r1
 80037f4:	4611      	mov	r1, r2
 80037f6:	2200      	movs	r2, #0
 80037f8:	602a      	str	r2, [r5, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	f7fe fbfe 	bl	8001ffc <_read>
 8003800:	1c43      	adds	r3, r0, #1
 8003802:	d102      	bne.n	800380a <_read_r+0x1e>
 8003804:	682b      	ldr	r3, [r5, #0]
 8003806:	b103      	cbz	r3, 800380a <_read_r+0x1e>
 8003808:	6023      	str	r3, [r4, #0]
 800380a:	bd38      	pop	{r3, r4, r5, pc}
 800380c:	200001c4 	.word	0x200001c4

08003810 <_malloc_usable_size_r>:
 8003810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003814:	1f18      	subs	r0, r3, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	bfbc      	itt	lt
 800381a:	580b      	ldrlt	r3, [r1, r0]
 800381c:	18c0      	addlt	r0, r0, r3
 800381e:	4770      	bx	lr

08003820 <_init>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	bf00      	nop
 8003824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003826:	bc08      	pop	{r3}
 8003828:	469e      	mov	lr, r3
 800382a:	4770      	bx	lr

0800382c <_fini>:
 800382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382e:	bf00      	nop
 8003830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003832:	bc08      	pop	{r3}
 8003834:	469e      	mov	lr, r3
 8003836:	4770      	bx	lr
