
exercise_3.1-pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08004a30  08004a30  00014a30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e0c  08004e0c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  08004e0c  08004e0c  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e0c  08004e0c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e0c  08004e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08004e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  200001fc  08005010  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08005010  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a5f  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fa2  00000000  00000000  00026c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  00027c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000818  00000000  00000000  000284e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003edc  00000000  00000000  00028cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000646d  00000000  00000000  0002cbd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005af03  00000000  00000000  00033041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008df44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003714  00000000  00000000  0008df94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a18 	.word	0x08004a18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	08004a18 	.word	0x08004a18

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8000ba8:	b480      	push	{r7}
 8000baa:	b087      	sub	sp, #28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	e07c      	b.n	8000cbe <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000bd8:	68fa      	ldr	r2, [r7, #12]
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d16b      	bne.n	8000cb8 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	791b      	ldrb	r3, [r3, #4]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d003      	beq.n	8000bf0 <GPIO_Init+0x48>
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	791b      	ldrb	r3, [r3, #4]
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d134      	bne.n	8000c5a <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	689a      	ldr	r2, [r3, #8]
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	2103      	movs	r1, #3
 8000bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	401a      	ands	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	689a      	ldr	r2, [r3, #8]
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	795b      	ldrb	r3, [r3, #5]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	fa01 f303 	lsl.w	r3, r1, r3
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	889b      	ldrh	r3, [r3, #4]
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	4619      	mov	r1, r3
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	408b      	lsls	r3, r1
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	4013      	ands	r3, r2
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	889b      	ldrh	r3, [r3, #4]
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	799b      	ldrb	r3, [r3, #6]
 8000c46:	4619      	mov	r1, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	2103      	movs	r1, #3
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	791b      	ldrb	r3, [r3, #4]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	431a      	orrs	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	68da      	ldr	r2, [r3, #12]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	2103      	movs	r1, #3
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68da      	ldr	r2, [r3, #12]
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	79db      	ldrb	r3, [r3, #7]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	f67f af7f 	bls.w	8000bc4 <GPIO_Init+0x1c>
    }
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	bf00      	nop
 8000cca:	371c      	adds	r7, #28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ce2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2202      	movs	r2, #2
 8000cee:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	71da      	strb	r2, [r3, #7]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	807b      	strh	r3, [r7, #2]
 8000d14:	4613      	mov	r3, r2
 8000d16:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000d20:	787a      	ldrb	r2, [r7, #1]
 8000d22:	887b      	ldrh	r3, [r7, #2]
 8000d24:	f003 0307 	and.w	r3, r3, #7
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000d30:	887b      	ldrh	r3, [r7, #2]
 8000d32:	08db      	lsrs	r3, r3, #3
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	461a      	mov	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3208      	adds	r2, #8
 8000d3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d40:	887b      	ldrh	r3, [r7, #2]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	210f      	movs	r1, #15
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	8879      	ldrh	r1, [r7, #2]
 8000d52:	08c9      	lsrs	r1, r1, #3
 8000d54:	b289      	uxth	r1, r1
 8000d56:	4608      	mov	r0, r1
 8000d58:	ea02 0103 	and.w	r1, r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f100 0208 	add.w	r2, r0, #8
 8000d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000d66:	887b      	ldrh	r3, [r7, #2]
 8000d68:	08db      	lsrs	r3, r3, #3
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	3208      	adds	r2, #8
 8000d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000d7c:	887b      	ldrh	r3, [r7, #2]
 8000d7e:	08db      	lsrs	r3, r3, #3
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	461a      	mov	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3208      	adds	r2, #8
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000d8e:	bf00      	nop
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b08b      	sub	sp, #44	; 0x2c
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	2300      	movs	r3, #0
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000dc4:	4b8b      	ldr	r3, [pc, #556]	; (8000ff4 <RCC_GetClocksFreq+0x258>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 030c 	and.w	r3, r3, #12
 8000dcc:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000dce:	6a3b      	ldr	r3, [r7, #32]
 8000dd0:	2b08      	cmp	r3, #8
 8000dd2:	d011      	beq.n	8000df8 <RCC_GetClocksFreq+0x5c>
 8000dd4:	6a3b      	ldr	r3, [r7, #32]
 8000dd6:	2b08      	cmp	r3, #8
 8000dd8:	d837      	bhi.n	8000e4a <RCC_GetClocksFreq+0xae>
 8000dda:	6a3b      	ldr	r3, [r7, #32]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <RCC_GetClocksFreq+0x4c>
 8000de0:	6a3b      	ldr	r3, [r7, #32]
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d004      	beq.n	8000df0 <RCC_GetClocksFreq+0x54>
 8000de6:	e030      	b.n	8000e4a <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a83      	ldr	r2, [pc, #524]	; (8000ff8 <RCC_GetClocksFreq+0x25c>)
 8000dec:	601a      	str	r2, [r3, #0]
      break;
 8000dee:	e030      	b.n	8000e52 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a81      	ldr	r2, [pc, #516]	; (8000ff8 <RCC_GetClocksFreq+0x25c>)
 8000df4:	601a      	str	r2, [r3, #0]
      break;
 8000df6:	e02c      	b.n	8000e52 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000df8:	4b7e      	ldr	r3, [pc, #504]	; (8000ff4 <RCC_GetClocksFreq+0x258>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000e00:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000e02:	4b7c      	ldr	r3, [pc, #496]	; (8000ff4 <RCC_GetClocksFreq+0x258>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0a:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	0c9b      	lsrs	r3, r3, #18
 8000e10:	3302      	adds	r3, #2
 8000e12:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d105      	bne.n	8000e26 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	4a77      	ldr	r2, [pc, #476]	; (8000ffc <RCC_GetClocksFreq+0x260>)
 8000e1e:	fb02 f303 	mul.w	r3, r2, r3
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
 8000e24:	e00d      	b.n	8000e42 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000e26:	4b73      	ldr	r3, [pc, #460]	; (8000ff4 <RCC_GetClocksFreq+0x258>)
 8000e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3301      	adds	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000e32:	4a71      	ldr	r2, [pc, #452]	; (8000ff8 <RCC_GetClocksFreq+0x25c>)
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fb02 f303 	mul.w	r3, r2, r3
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e46:	601a      	str	r2, [r3, #0]
      break;
 8000e48:	e003      	b.n	8000e52 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a6a      	ldr	r2, [pc, #424]	; (8000ff8 <RCC_GetClocksFreq+0x25c>)
 8000e4e:	601a      	str	r2, [r3, #0]
      break;
 8000e50:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000e52:	4b68      	ldr	r3, [pc, #416]	; (8000ff4 <RCC_GetClocksFreq+0x258>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e5a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000e5c:	6a3b      	ldr	r3, [r7, #32]
 8000e5e:	091b      	lsrs	r3, r3, #4
 8000e60:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000e62:	4a67      	ldr	r2, [pc, #412]	; (8001000 <RCC_GetClocksFreq+0x264>)
 8000e64:	6a3b      	ldr	r3, [r7, #32]
 8000e66:	4413      	add	r3, r2
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	40da      	lsrs	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000e7a:	4b5e      	ldr	r3, [pc, #376]	; (8000ff4 <RCC_GetClocksFreq+0x258>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000e82:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000e84:	6a3b      	ldr	r3, [r7, #32]
 8000e86:	0a1b      	lsrs	r3, r3, #8
 8000e88:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000e8a:	4a5d      	ldr	r2, [pc, #372]	; (8001000 <RCC_GetClocksFreq+0x264>)
 8000e8c:	6a3b      	ldr	r3, [r7, #32]
 8000e8e:	4413      	add	r3, r2
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	40da      	lsrs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000ea2:	4b54      	ldr	r3, [pc, #336]	; (8000ff4 <RCC_GetClocksFreq+0x258>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000eaa:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000eac:	6a3b      	ldr	r3, [r7, #32]
 8000eae:	0adb      	lsrs	r3, r3, #11
 8000eb0:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000eb2:	4a53      	ldr	r2, [pc, #332]	; (8001000 <RCC_GetClocksFreq+0x264>)
 8000eb4:	6a3b      	ldr	r3, [r7, #32]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	40da      	lsrs	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000eca:	4b4a      	ldr	r3, [pc, #296]	; (8000ff4 <RCC_GetClocksFreq+0x258>)
 8000ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ece:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000ed2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000ed4:	6a3b      	ldr	r3, [r7, #32]
 8000ed6:	091b      	lsrs	r3, r3, #4
 8000ed8:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000eda:	4a4a      	ldr	r2, [pc, #296]	; (8001004 <RCC_GetClocksFreq+0x268>)
 8000edc:	6a3b      	ldr	r3, [r7, #32]
 8000ede:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	f003 0310 	and.w	r3, r3, #16
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d006      	beq.n	8000efe <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	611a      	str	r2, [r3, #16]
 8000efc:	e003      	b.n	8000f06 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000f06:	4b3b      	ldr	r3, [pc, #236]	; (8000ff4 <RCC_GetClocksFreq+0x258>)
 8000f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0a:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8000f0e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000f10:	6a3b      	ldr	r3, [r7, #32]
 8000f12:	0a5b      	lsrs	r3, r3, #9
 8000f14:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000f16:	4a3b      	ldr	r2, [pc, #236]	; (8001004 <RCC_GetClocksFreq+0x268>)
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	f003 0310 	and.w	r3, r3, #16
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d006      	beq.n	8000f3a <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	615a      	str	r2, [r3, #20]
 8000f38:	e003      	b.n	8000f42 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000f42:	4b2c      	ldr	r3, [pc, #176]	; (8000ff4 <RCC_GetClocksFreq+0x258>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0310 	and.w	r3, r3, #16
 8000f4a:	2b10      	cmp	r3, #16
 8000f4c:	d003      	beq.n	8000f56 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a29      	ldr	r2, [pc, #164]	; (8000ff8 <RCC_GetClocksFreq+0x25c>)
 8000f52:	619a      	str	r2, [r3, #24]
 8000f54:	e003      	b.n	8000f5e <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000f5e:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <RCC_GetClocksFreq+0x258>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0320 	and.w	r3, r3, #32
 8000f66:	2b20      	cmp	r3, #32
 8000f68:	d003      	beq.n	8000f72 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a22      	ldr	r2, [pc, #136]	; (8000ff8 <RCC_GetClocksFreq+0x25c>)
 8000f6e:	61da      	str	r2, [r3, #28]
 8000f70:	e003      	b.n	8000f7a <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <RCC_GetClocksFreq+0x258>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f86:	d10d      	bne.n	8000fa4 <RCC_GetClocksFreq+0x208>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d108      	bne.n	8000fa4 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d104      	bne.n	8000fa4 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	005a      	lsls	r2, r3, #1
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	621a      	str	r2, [r3, #32]
 8000fa2:	e003      	b.n	8000fac <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68da      	ldr	r2, [r3, #12]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <RCC_GetClocksFreq+0x258>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fb8:	d10d      	bne.n	8000fd6 <RCC_GetClocksFreq+0x23a>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d108      	bne.n	8000fd6 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d104      	bne.n	8000fd6 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	005a      	lsls	r2, r3, #1
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24
 8000fd4:	e003      	b.n	8000fde <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <RCC_GetClocksFreq+0x258>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10e      	bne.n	8001008 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	629a      	str	r2, [r3, #40]	; 0x28
 8000ff2:	e028      	b.n	8001046 <RCC_GetClocksFreq+0x2aa>
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	007a1200 	.word	0x007a1200
 8000ffc:	003d0900 	.word	0x003d0900
 8001000:	20000000 	.word	0x20000000
 8001004:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8001008:	4b6c      	ldr	r3, [pc, #432]	; (80011bc <RCC_GetClocksFreq+0x420>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b01      	cmp	r3, #1
 8001012:	d104      	bne.n	800101e <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
 800101c:	e013      	b.n	8001046 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 800101e:	4b67      	ldr	r3, [pc, #412]	; (80011bc <RCC_GetClocksFreq+0x420>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d104      	bne.n	8001034 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001030:	629a      	str	r2, [r3, #40]	; 0x28
 8001032:	e008      	b.n	8001046 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8001034:	4b61      	ldr	r3, [pc, #388]	; (80011bc <RCC_GetClocksFreq+0x420>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b03      	cmp	r3, #3
 800103e:	d102      	bne.n	8001046 <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a5f      	ldr	r2, [pc, #380]	; (80011c0 <RCC_GetClocksFreq+0x424>)
 8001044:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8001046:	4b5d      	ldr	r3, [pc, #372]	; (80011bc <RCC_GetClocksFreq+0x420>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d104      	bne.n	800105c <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	62da      	str	r2, [r3, #44]	; 0x2c
 800105a:	e021      	b.n	80010a0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 800105c:	4b57      	ldr	r3, [pc, #348]	; (80011bc <RCC_GetClocksFreq+0x420>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001068:	d104      	bne.n	8001074 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	62da      	str	r2, [r3, #44]	; 0x2c
 8001072:	e015      	b.n	80010a0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8001074:	4b51      	ldr	r3, [pc, #324]	; (80011bc <RCC_GetClocksFreq+0x420>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800107c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001080:	d104      	bne.n	800108c <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001088:	62da      	str	r2, [r3, #44]	; 0x2c
 800108a:	e009      	b.n	80010a0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 800108c:	4b4b      	ldr	r3, [pc, #300]	; (80011bc <RCC_GetClocksFreq+0x420>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001094:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001098:	d102      	bne.n	80010a0 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a48      	ldr	r2, [pc, #288]	; (80011c0 <RCC_GetClocksFreq+0x424>)
 800109e:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80010a0:	4b46      	ldr	r3, [pc, #280]	; (80011bc <RCC_GetClocksFreq+0x420>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d104      	bne.n	80010b6 <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	631a      	str	r2, [r3, #48]	; 0x30
 80010b4:	e021      	b.n	80010fa <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80010b6:	4b41      	ldr	r3, [pc, #260]	; (80011bc <RCC_GetClocksFreq+0x420>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80010be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80010c2:	d104      	bne.n	80010ce <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	631a      	str	r2, [r3, #48]	; 0x30
 80010cc:	e015      	b.n	80010fa <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80010ce:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <RCC_GetClocksFreq+0x420>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80010d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80010da:	d104      	bne.n	80010e6 <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010e2:	631a      	str	r2, [r3, #48]	; 0x30
 80010e4:	e009      	b.n	80010fa <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80010e6:	4b35      	ldr	r3, [pc, #212]	; (80011bc <RCC_GetClocksFreq+0x420>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80010ee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80010f2:	d102      	bne.n	80010fa <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a32      	ldr	r2, [pc, #200]	; (80011c0 <RCC_GetClocksFreq+0x424>)
 80010f8:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80010fa:	4b30      	ldr	r3, [pc, #192]	; (80011bc <RCC_GetClocksFreq+0x420>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d104      	bne.n	8001110 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	635a      	str	r2, [r3, #52]	; 0x34
 800110e:	e021      	b.n	8001154 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8001110:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <RCC_GetClocksFreq+0x420>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800111c:	d104      	bne.n	8001128 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	635a      	str	r2, [r3, #52]	; 0x34
 8001126:	e015      	b.n	8001154 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8001128:	4b24      	ldr	r3, [pc, #144]	; (80011bc <RCC_GetClocksFreq+0x420>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001130:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001134:	d104      	bne.n	8001140 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800113c:	635a      	str	r2, [r3, #52]	; 0x34
 800113e:	e009      	b.n	8001154 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8001140:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <RCC_GetClocksFreq+0x420>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001148:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800114c:	d102      	bne.n	8001154 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a1b      	ldr	r2, [pc, #108]	; (80011c0 <RCC_GetClocksFreq+0x424>)
 8001152:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8001154:	4b19      	ldr	r3, [pc, #100]	; (80011bc <RCC_GetClocksFreq+0x420>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d104      	bne.n	800116a <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8001168:	e021      	b.n	80011ae <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <RCC_GetClocksFreq+0x420>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001176:	d104      	bne.n	8001182 <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001180:	e015      	b.n	80011ae <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <RCC_GetClocksFreq+0x420>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800118a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800118e:	d104      	bne.n	800119a <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001196:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001198:	e009      	b.n	80011ae <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <RCC_GetClocksFreq+0x420>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80011a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80011a6:	d102      	bne.n	80011ae <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <RCC_GetClocksFreq+0x424>)
 80011ac:	639a      	str	r2, [r3, #56]	; 0x38
}
 80011ae:	bf00      	nop
 80011b0:	372c      	adds	r7, #44	; 0x2c
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000
 80011c0:	007a1200 	.word	0x007a1200

080011c4 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80011d0:	78fb      	ldrb	r3, [r7, #3]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d006      	beq.n	80011e4 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <RCC_AHBPeriphClockCmd+0x3c>)
 80011d8:	695a      	ldr	r2, [r3, #20]
 80011da:	4909      	ldr	r1, [pc, #36]	; (8001200 <RCC_AHBPeriphClockCmd+0x3c>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4313      	orrs	r3, r2
 80011e0:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80011e2:	e006      	b.n	80011f2 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <RCC_AHBPeriphClockCmd+0x3c>)
 80011e6:	695a      	ldr	r2, [r3, #20]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	4904      	ldr	r1, [pc, #16]	; (8001200 <RCC_AHBPeriphClockCmd+0x3c>)
 80011ee:	4013      	ands	r3, r2
 80011f0:	614b      	str	r3, [r1, #20]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000

08001204 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001210:	78fb      	ldrb	r3, [r7, #3]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d006      	beq.n	8001224 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <RCC_APB2PeriphClockCmd+0x3c>)
 8001218:	699a      	ldr	r2, [r3, #24]
 800121a:	4909      	ldr	r1, [pc, #36]	; (8001240 <RCC_APB2PeriphClockCmd+0x3c>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4313      	orrs	r3, r2
 8001220:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001222:	e006      	b.n	8001232 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <RCC_APB2PeriphClockCmd+0x3c>)
 8001226:	699a      	ldr	r2, [r3, #24]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	43db      	mvns	r3, r3
 800122c:	4904      	ldr	r1, [pc, #16]	; (8001240 <RCC_APB2PeriphClockCmd+0x3c>)
 800122e:	4013      	ands	r3, r2
 8001230:	618b      	str	r3, [r1, #24]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000

08001244 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a2d      	ldr	r2, [pc, #180]	; (8001310 <TIM_TimeBaseInit+0xcc>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d00f      	beq.n	8001280 <TIM_TimeBaseInit+0x3c>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a2c      	ldr	r2, [pc, #176]	; (8001314 <TIM_TimeBaseInit+0xd0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d00b      	beq.n	8001280 <TIM_TimeBaseInit+0x3c>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800126e:	d007      	beq.n	8001280 <TIM_TimeBaseInit+0x3c>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a29      	ldr	r2, [pc, #164]	; (8001318 <TIM_TimeBaseInit+0xd4>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d003      	beq.n	8001280 <TIM_TimeBaseInit+0x3c>
     (TIMx == TIM3)|| (TIMx == TIM4)) 
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a28      	ldr	r2, [pc, #160]	; (800131c <TIM_TimeBaseInit+0xd8>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d108      	bne.n	8001292 <TIM_TimeBaseInit+0x4e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001280:	89fb      	ldrh	r3, [r7, #14]
 8001282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001286:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	885a      	ldrh	r2, [r3, #2]
 800128c:	89fb      	ldrh	r3, [r7, #14]
 800128e:	4313      	orrs	r3, r2
 8001290:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a22      	ldr	r2, [pc, #136]	; (8001320 <TIM_TimeBaseInit+0xdc>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d00c      	beq.n	80012b4 <TIM_TimeBaseInit+0x70>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a21      	ldr	r2, [pc, #132]	; (8001324 <TIM_TimeBaseInit+0xe0>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d008      	beq.n	80012b4 <TIM_TimeBaseInit+0x70>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80012a2:	89fb      	ldrh	r3, [r7, #14]
 80012a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012a8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	891a      	ldrh	r2, [r3, #8]
 80012ae:	89fb      	ldrh	r3, [r7, #14]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	89fa      	ldrh	r2, [r7, #14]
 80012b8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	881a      	ldrh	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15) || 
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a10      	ldr	r2, [pc, #64]	; (8001310 <TIM_TimeBaseInit+0xcc>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d00f      	beq.n	80012f2 <TIM_TimeBaseInit+0xae>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a0f      	ldr	r2, [pc, #60]	; (8001314 <TIM_TimeBaseInit+0xd0>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d00b      	beq.n	80012f2 <TIM_TimeBaseInit+0xae>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a12      	ldr	r2, [pc, #72]	; (8001328 <TIM_TimeBaseInit+0xe4>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d007      	beq.n	80012f2 <TIM_TimeBaseInit+0xae>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a11      	ldr	r2, [pc, #68]	; (800132c <TIM_TimeBaseInit+0xe8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d003      	beq.n	80012f2 <TIM_TimeBaseInit+0xae>
      (TIMx == TIM16) || (TIMx == TIM17))  
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a10      	ldr	r2, [pc, #64]	; (8001330 <TIM_TimeBaseInit+0xec>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d104      	bne.n	80012fc <TIM_TimeBaseInit+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	7a9b      	ldrb	r3, [r3, #10]
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	615a      	str	r2, [r3, #20]
}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40012c00 	.word	0x40012c00
 8001314:	40013400 	.word	0x40013400
 8001318:	40000400 	.word	0x40000400
 800131c:	40000800 	.word	0x40000800
 8001320:	40001000 	.word	0x40001000
 8001324:	40001400 	.word	0x40001400
 8001328:	40014000 	.word	0x40014000
 800132c:	40014400 	.word	0x40014400
 8001330:	40014800 	.word	0x40014800

08001334 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001342:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	729a      	strb	r2, [r3, #10]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001374:	78fb      	ldrb	r3, [r7, #3]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d008      	beq.n	800138c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	b29b      	uxth	r3, r3
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	b29a      	uxth	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 800138a:	e007      	b.n	800139c <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	b29b      	uxth	r3, r3
 8001392:	f023 0301 	bic.w	r3, r3, #1
 8001396:	b29a      	uxth	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	801a      	strh	r2, [r3, #0]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	f023 0201 	bic.w	r2, r3, #1
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC1M;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC1S;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f023 0303 	bic.w	r3, r3, #3
 80013ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC1P;
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f023 0302 	bic.w	r3, r3, #2
 8001400:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	899b      	ldrh	r3, [r3, #12]
 8001406:	461a      	mov	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	4313      	orrs	r3, r2
 800140c:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	889b      	ldrh	r3, [r3, #4]
 8001412:	461a      	mov	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	4313      	orrs	r3, r2
 8001418:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a26      	ldr	r2, [pc, #152]	; (80014b8 <TIM_OC1Init+0x110>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d00f      	beq.n	8001442 <TIM_OC1Init+0x9a>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a25      	ldr	r2, [pc, #148]	; (80014bc <TIM_OC1Init+0x114>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00b      	beq.n	8001442 <TIM_OC1Init+0x9a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a24      	ldr	r2, [pc, #144]	; (80014c0 <TIM_OC1Init+0x118>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d007      	beq.n	8001442 <TIM_OC1Init+0x9a>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a23      	ldr	r2, [pc, #140]	; (80014c4 <TIM_OC1Init+0x11c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d003      	beq.n	8001442 <TIM_OC1Init+0x9a>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a22      	ldr	r2, [pc, #136]	; (80014c8 <TIM_OC1Init+0x120>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d127      	bne.n	8001492 <TIM_OC1Init+0xea>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f023 0308 	bic.w	r3, r3, #8
 8001448:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	89db      	ldrh	r3, [r3, #14]
 800144e:	461a      	mov	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	4313      	orrs	r3, r2
 8001454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NE;
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f023 0304 	bic.w	r3, r3, #4
 800145c:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	88db      	ldrh	r3, [r3, #6]
 8001462:	461a      	mov	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	4313      	orrs	r3, r2
 8001468:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1;
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1N;
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	8a1b      	ldrh	r3, [r3, #16]
 800147e:	461a      	mov	r2, r3
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	8a5b      	ldrh	r3, [r3, #18]
 800148a:	461a      	mov	r2, r3
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	621a      	str	r2, [r3, #32]
}
 80014ac:	bf00      	nop
 80014ae:	371c      	adds	r7, #28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	40012c00 	.word	0x40012c00
 80014bc:	40013400 	.word	0x40013400
 80014c0:	40014000 	.word	0x40014000
 80014c4:	40014400 	.word	0x40014400
 80014c8:	40014800 	.word	0x40014800

080014cc <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	825a      	strh	r2, [r3, #18]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC1PE);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f023 0308 	bic.w	r3, r3, #8
 800152c:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 800152e:	887b      	ldrh	r3, [r7, #2]
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	4313      	orrs	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	619a      	str	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d006      	beq.n	8001568 <TIM_CtrlPWMOutputs+0x20>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	645a      	str	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
  }  
}
 8001566:	e005      	b.n	8001574 <TIM_CtrlPWMOutputs+0x2c>
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 800158c:	887b      	ldrh	r3, [r7, #2]
 800158e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001592:	b29a      	uxth	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	4613      	mov	r3, r2
 80015b0:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61bb      	str	r3, [r7, #24]
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	0a1b      	lsrs	r3, r3, #8
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80015d6:	2201      	movs	r2, #1
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d103      	bne.n	80015ee <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3304      	adds	r3, #4
 80015ea:	61fb      	str	r3, [r7, #28]
 80015ec:	e005      	b.n	80015fa <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	2b03      	cmp	r3, #3
 80015f2:	d102      	bne.n	80015fa <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	3308      	adds	r3, #8
 80015f8:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d006      	beq.n	800160e <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	6819      	ldr	r1, [r3, #0]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	430a      	orrs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800160c:	e006      	b.n	800161c <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	6819      	ldr	r1, [r3, #0]
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	43da      	mvns	r2, r3
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	400a      	ands	r2, r1
 800161a:	601a      	str	r2, [r3, #0]
}
 800161c:	bf00      	nop
 800161e:	3724      	adds	r7, #36	; 0x24
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001632:	2300      	movs	r3, #0
 8001634:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69da      	ldr	r2, [r3, #28]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	4013      	ands	r3, r2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d002      	beq.n	8001648 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8001642:	2301      	movs	r3, #1
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	e001      	b.n	800164c <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800164c:	7bfb      	ldrb	r3, [r7, #15]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 800165a:	b480      	push	{r7}
 800165c:	b087      	sub	sp, #28
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	2300      	movs	r3, #0
 800166e:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001670:	2300      	movs	r3, #0
 8001672:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	b29b      	uxth	r3, r3
 8001678:	0a1b      	lsrs	r3, r3, #8
 800167a:	b29b      	uxth	r3, r3
 800167c:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001684:	2201      	movs	r2, #1
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d105      	bne.n	80016a0 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	4013      	ands	r3, r2
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	e00d      	b.n	80016bc <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d105      	bne.n	80016b2 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	4013      	ands	r3, r2
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	e004      	b.n	80016bc <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	4013      	ands	r3, r2
 80016ba:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	0c1b      	lsrs	r3, r3, #16
 80016c0:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80016c2:	2201      	movs	r2, #1
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	4013      	ands	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <USART_GetITStatus+0x8e>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d002      	beq.n	80016e8 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 80016e2:	2301      	movs	r3, #1
 80016e4:	74fb      	strb	r3, [r7, #19]
 80016e6:	e001      	b.n	80016ec <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 80016e8:	2300      	movs	r3, #0
 80016ea:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80016ec:	7cfb      	ldrb	r3, [r7, #19]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	371c      	adds	r7, #28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	f003 031f 	and.w	r3, r3, #31
 800170c:	2201      	movs	r2, #1
 800170e:	fa02 f103 	lsl.w	r1, r2, r3
 8001712:	4a06      	ldr	r2, [pc, #24]	; (800172c <NVIC_EnableIRQ+0x30>)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	095b      	lsrs	r3, r3, #5
 800171a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000e100 	.word	0xe000e100

08001730 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	b29b      	uxth	r3, r3
 800173e:	4619      	mov	r1, r3
 8001740:	4807      	ldr	r0, [pc, #28]	; (8001760 <uart_put_char+0x30>)
 8001742:	f7ff ff1d 	bl	8001580 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8001746:	bf00      	nop
 8001748:	2180      	movs	r1, #128	; 0x80
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <uart_put_char+0x30>)
 800174c:	f7ff ff6c 	bl	8001628 <USART_GetFlagStatus>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f8      	beq.n	8001748 <uart_put_char+0x18>
}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40004400 	.word	0x40004400

08001764 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
 8001770:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	e012      	b.n	800179e <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b0a      	cmp	r3, #10
 8001782:	d102      	bne.n	800178a <_write_r+0x26>
            uart_put_char('\r');
 8001784:	200d      	movs	r0, #13
 8001786:	f7ff ffd3 	bl	8001730 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	4413      	add	r3, r2
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ffcc 	bl	8001730 <uart_put_char>
    for (n = 0; n < len; n++) {
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	3301      	adds	r3, #1
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	dbe8      	blt.n	8001778 <_write_r+0x14>
    }

    return len;
 80017a6:	683b      	ldr	r3, [r7, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 80017b4:	4915      	ldr	r1, [pc, #84]	; (800180c <USART2_IRQHandler+0x5c>)
 80017b6:	4816      	ldr	r0, [pc, #88]	; (8001810 <USART2_IRQHandler+0x60>)
 80017b8:	f7ff ff4f 	bl	800165a <USART_GetITStatus>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d021      	beq.n	8001806 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <USART2_IRQHandler+0x60>)
 80017c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017c6:	b299      	uxth	r1, r3
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <USART2_IRQHandler+0x64>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	b2d0      	uxtb	r0, r2
 80017d2:	4a10      	ldr	r2, [pc, #64]	; (8001814 <USART2_IRQHandler+0x64>)
 80017d4:	7010      	strb	r0, [r2, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	b2c9      	uxtb	r1, r1
 80017da:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <USART2_IRQHandler+0x68>)
 80017dc:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <USART2_IRQHandler+0x6c>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2bff      	cmp	r3, #255	; 0xff
 80017e6:	d107      	bne.n	80017f8 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 80017e8:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <USART2_IRQHandler+0x70>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	3301      	adds	r3, #1
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <USART2_IRQHandler+0x70>)
 80017f4:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 80017f6:	e006      	b.n	8001806 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <USART2_IRQHandler+0x6c>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	3301      	adds	r3, #1
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <USART2_IRQHandler+0x6c>)
 8001804:	701a      	strb	r2, [r3, #0]
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	00050105 	.word	0x00050105
 8001810:	40004400 	.word	0x40004400
 8001814:	20000318 	.word	0x20000318
 8001818:	20000218 	.word	0x20000218
 800181c:	2000031a 	.word	0x2000031a
 8001820:	20000319 	.word	0x20000319

08001824 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b094      	sub	sp, #80	; 0x50
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 800182c:	4b86      	ldr	r3, [pc, #536]	; (8001a48 <uart_init+0x224>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f000 ff93 	bl	8002760 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 800183a:	4b83      	ldr	r3, [pc, #524]	; (8001a48 <uart_init+0x224>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f000 ff8c 	bl	8002760 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8001848:	4b80      	ldr	r3, [pc, #512]	; (8001a4c <uart_init+0x228>)
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	4a7f      	ldr	r2, [pc, #508]	; (8001a4c <uart_init+0x228>)
 800184e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001852:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8001854:	4b7d      	ldr	r3, [pc, #500]	; (8001a4c <uart_init+0x228>)
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	4a7c      	ldr	r2, [pc, #496]	; (8001a4c <uart_init+0x228>)
 800185a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185e:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8001860:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800186a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800186e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8001870:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800187a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800187e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8001880:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800188a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800188e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001890:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800189a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800189e:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 80018a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018ae:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80018b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018ba:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80018be:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 80018c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018c4:	889b      	ldrh	r3, [r3, #4]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018cc:	f023 030c 	bic.w	r3, r3, #12
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80018d4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018dc:	8892      	ldrh	r2, [r2, #4]
 80018de:	b292      	uxth	r2, r2
 80018e0:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 80018e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018f0:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80018f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018fc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001900:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8001902:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800190c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001910:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001912:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800191c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001920:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8001922:	4b4b      	ldr	r3, [pc, #300]	; (8001a50 <uart_init+0x22c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a4a      	ldr	r2, [pc, #296]	; (8001a50 <uart_init+0x22c>)
 8001928:	f023 0301 	bic.w	r3, r3, #1
 800192c:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 800192e:	4b48      	ldr	r3, [pc, #288]	; (8001a50 <uart_init+0x22c>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4a47      	ldr	r2, [pc, #284]	; (8001a50 <uart_init+0x22c>)
 8001934:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001938:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 800193a:	4b45      	ldr	r3, [pc, #276]	; (8001a50 <uart_init+0x22c>)
 800193c:	4a44      	ldr	r2, [pc, #272]	; (8001a50 <uart_init+0x22c>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8001942:	4b43      	ldr	r3, [pc, #268]	; (8001a50 <uart_init+0x22c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a42      	ldr	r2, [pc, #264]	; (8001a50 <uart_init+0x22c>)
 8001948:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800194c:	f023 030c 	bic.w	r3, r3, #12
 8001950:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8001952:	4b3f      	ldr	r3, [pc, #252]	; (8001a50 <uart_init+0x22c>)
 8001954:	4a3e      	ldr	r2, [pc, #248]	; (8001a50 <uart_init+0x22c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 800195a:	4b3d      	ldr	r3, [pc, #244]	; (8001a50 <uart_init+0x22c>)
 800195c:	4a3c      	ldr	r2, [pc, #240]	; (8001a50 <uart_init+0x22c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8001962:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <uart_init+0x22c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a3a      	ldr	r2, [pc, #232]	; (8001a50 <uart_init+0x22c>)
 8001968:	f043 030c 	orr.w	r3, r3, #12
 800196c:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 800196e:	4b38      	ldr	r3, [pc, #224]	; (8001a50 <uart_init+0x22c>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	4a37      	ldr	r2, [pc, #220]	; (8001a50 <uart_init+0x22c>)
 8001974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001978:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 800197a:	4b35      	ldr	r3, [pc, #212]	; (8001a50 <uart_init+0x22c>)
 800197c:	4a34      	ldr	r2, [pc, #208]	; (8001a50 <uart_init+0x22c>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001986:	2300      	movs	r3, #0
 8001988:	647b      	str	r3, [r7, #68]	; 0x44
 800198a:	2300      	movs	r3, #0
 800198c:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fa02 	bl	8000d9c <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800199a:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 800199c:	4b2c      	ldr	r3, [pc, #176]	; (8001a50 <uart_init+0x22c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d010      	beq.n	80019ca <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 80019a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019aa:	005a      	lsls	r2, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 80019b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	fb01 f202 	mul.w	r2, r1, r2
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80019c8:	e00d      	b.n	80019e6 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 80019ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 80019d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	fb01 f202 	mul.w	r2, r1, r2
 80019e2:	1a9b      	subs	r3, r3, r2
 80019e4:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d302      	bcc.n	80019f6 <uart_init+0x1d2>
        divider++;
 80019f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019f2:	3301      	adds	r3, #1
 80019f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 80019f6:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <uart_init+0x22c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00b      	beq.n	8001a1a <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8001a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a04:	085b      	lsrs	r3, r3, #1
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8001a0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a0e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001a12:	4013      	ands	r3, r2
 8001a14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a16:	4313      	orrs	r3, r2
 8001a18:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <uart_init+0x22c>)
 8001a1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a1e:	b292      	uxth	r2, r2
 8001a20:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <uart_init+0x22c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <uart_init+0x22c>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8001a2e:	2201      	movs	r2, #1
 8001a30:	4908      	ldr	r1, [pc, #32]	; (8001a54 <uart_init+0x230>)
 8001a32:	4807      	ldr	r0, [pc, #28]	; (8001a50 <uart_init+0x22c>)
 8001a34:	f7ff fdb6 	bl	80015a4 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001a38:	2026      	movs	r0, #38	; 0x26
 8001a3a:	f7ff fe5f 	bl	80016fc <NVIC_EnableIRQ>
}
 8001a3e:	bf00      	nop
 8001a40:	3750      	adds	r7, #80	; 0x50
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000002c 	.word	0x2000002c
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40004400 	.word	0x40004400
 8001a54:	00050105 	.word	0x00050105

08001a58 <main>:
#include "30010_io.h" 		// Input/output library for this course
#include "flash.h"
#include "lcd.h"

int main(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08c      	sub	sp, #48	; 0x30
 8001a5c:	af00      	add	r7, sp, #0
	//init_spi_lcd();
	uart_init(9600);
 8001a5e:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001a62:	f7ff fedf 	bl	8001824 <uart_init>

		//for(int i=0;i<100000;i++){;}
		//step1
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM16, ENABLE);
 8001a66:	2101      	movs	r1, #1
 8001a68:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a6c:	f7ff fbca 	bl	8001204 <RCC_APB2PeriphClockCmd>

			//step2
			RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE); // Enable clock for GPIO Port B
 8001a70:	2101      	movs	r1, #1
 8001a72:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a76:	f7ff fba5 	bl	80011c4 <RCC_AHBPeriphClockCmd>
			GPIO_InitTypeDef GPIO_InitStructAll; // Define typedef struct for setting pins
			GPIO_StructInit(&GPIO_InitStructAll);
 8001a7a:	f107 0320 	add.w	r3, r7, #32
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff f928 	bl	8000cd4 <GPIO_StructInit>
			// Then set things that are not default.
			GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_AF;
 8001a84:	2302      	movs	r3, #2
 8001a86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					//GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;
			GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_6;
 8001a8a:	2340      	movs	r3, #64	; 0x40
 8001a8c:	623b      	str	r3, [r7, #32]
			GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_50MHz;
 8001a94:	2303      	movs	r3, #3
 8001a96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			GPIO_Init(GPIOA, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 8001a9a:	f107 0320 	add.w	r3, r7, #32
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa4:	f7ff f880 	bl	8000ba8 <GPIO_Init>

			GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_1);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	2106      	movs	r1, #6
 8001aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab0:	f7ff f92a 	bl	8000d08 <GPIO_PinAFConfig>

			//step3
			TIM_TimeBaseInitTypeDef TIM_InitStructure;
			TIM_TimeBaseStructInit(&TIM_InitStructure);
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fc3b 	bl	8001334 <TIM_TimeBaseStructInit>
			TIM_InitStructure.TIM_ClockDivision = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	83bb      	strh	r3, [r7, #28]
			TIM_InitStructure.TIM_Period = 1000; //set the maximum period
 8001ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac6:	61bb      	str	r3, [r7, #24]
			TIM_InitStructure.TIM_Prescaler = 64; //for 1MHz counting frequency
 8001ac8:	2340      	movs	r3, #64	; 0x40
 8001aca:	82bb      	strh	r3, [r7, #20]
			TIM_TimeBaseInit(TIM16,&TIM_InitStructure);
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	481e      	ldr	r0, [pc, #120]	; (8001b4c <main+0xf4>)
 8001ad4:	f7ff fbb6 	bl	8001244 <TIM_TimeBaseInit>

			//step4
			TIM_OCInitTypeDef TIM_OCInitStruct;
			TIM_OCStructInit(&TIM_OCInitStruct);
 8001ad8:	463b      	mov	r3, r7
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fcf6 	bl	80014cc <TIM_OCStructInit>
			TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
 8001ae0:	2360      	movs	r3, #96	; 0x60
 8001ae2:	603b      	str	r3, [r7, #0]
			TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	80bb      	strh	r3, [r7, #4]
			//TIM_OCInitStruct.TIM_Pulse = 0x01f4; // 0x0000 <-> 0xFFFF
			TIM_OCInitStruct.TIM_Pulse = 250; // 0x0000 <-> 0xFFFF
 8001ae8:	23fa      	movs	r3, #250	; 0xfa
 8001aea:	60bb      	str	r3, [r7, #8]

			TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 8001aec:	2300      	movs	r3, #0
 8001aee:	81bb      	strh	r3, [r7, #12]

			//step5
			TIM_OC1Init(TIM16,&TIM_OCInitStruct);
 8001af0:	463b      	mov	r3, r7
 8001af2:	4619      	mov	r1, r3
 8001af4:	4815      	ldr	r0, [pc, #84]	; (8001b4c <main+0xf4>)
 8001af6:	f7ff fc57 	bl	80013a8 <TIM_OC1Init>

			//step6
			TIM_OC1PreloadConfig(TIM16,TIM_OCPreload_Enable);
 8001afa:	2108      	movs	r1, #8
 8001afc:	4813      	ldr	r0, [pc, #76]	; (8001b4c <main+0xf4>)
 8001afe:	f7ff fd07 	bl	8001510 <TIM_OC1PreloadConfig>

			//step7
			TIM_CtrlPWMOutputs(TIM16, ENABLE);
 8001b02:	2101      	movs	r1, #1
 8001b04:	4811      	ldr	r0, [pc, #68]	; (8001b4c <main+0xf4>)
 8001b06:	f7ff fd1f 	bl	8001548 <TIM_CtrlPWMOutputs>
			TIM_Cmd(TIM16,ENABLE);
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	480f      	ldr	r0, [pc, #60]	; (8001b4c <main+0xf4>)
 8001b0e:	f7ff fc2b 	bl	8001368 <TIM_Cmd>
			while(1){
				for(int i=0;i<1000;i++){
 8001b12:	2300      	movs	r3, #0
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b16:	e014      	b.n	8001b42 <main+0xea>
					for(int j=0;j<50000;j++);
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b1c:	e002      	b.n	8001b24 <main+0xcc>
 8001b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b20:	3301      	adds	r3, #1
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b26:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	ddf7      	ble.n	8001b1e <main+0xc6>
					TIM_OCInitStruct.TIM_Pulse = i;
 8001b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b30:	60bb      	str	r3, [r7, #8]
					TIM_OC1Init(TIM16,&TIM_OCInitStruct);
 8001b32:	463b      	mov	r3, r7
 8001b34:	4619      	mov	r1, r3
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <main+0xf4>)
 8001b38:	f7ff fc36 	bl	80013a8 <TIM_OC1Init>
				for(int i=0;i<1000;i++){
 8001b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3e:	3301      	adds	r3, #1
 8001b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b48:	dbe6      	blt.n	8001b18 <main+0xc0>
 8001b4a:	e7e2      	b.n	8001b12 <main+0xba>
 8001b4c:	40014400 	.word	0x40014400

08001b50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
	return 1;
 8001b54:	2301      	movs	r3, #1
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <_kill>:

int _kill(int pid, int sig)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b6a:	f000 f94f 	bl	8001e0c <__errno>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2216      	movs	r2, #22
 8001b72:	601a      	str	r2, [r3, #0]
	return -1;
 8001b74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <_exit>:

void _exit (int status)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ffe7 	bl	8001b60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b92:	e7fe      	b.n	8001b92 <_exit+0x12>

08001b94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	e00a      	b.n	8001bbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ba6:	f3af 8000 	nop.w
 8001baa:	4601      	mov	r1, r0
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	60ba      	str	r2, [r7, #8]
 8001bb2:	b2ca      	uxtb	r2, r1
 8001bb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	dbf0      	blt.n	8001ba6 <_read+0x12>
	}

return len;
 8001bc4:	687b      	ldr	r3, [r7, #4]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_close>:
	}
	return len;
}

int _close(int file)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
	return -1;
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf6:	605a      	str	r2, [r3, #4]
	return 0;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <_isatty>:

int _isatty(int file)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
	return 0;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <_sbrk+0x50>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <_sbrk+0x16>
		heap_end = &end;
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <_sbrk+0x50>)
 8001c4a:	4a10      	ldr	r2, [pc, #64]	; (8001c8c <_sbrk+0x54>)
 8001c4c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <_sbrk+0x50>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <_sbrk+0x50>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	466a      	mov	r2, sp
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d907      	bls.n	8001c72 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001c62:	f000 f8d3 	bl	8001e0c <__errno>
 8001c66:	4603      	mov	r3, r0
 8001c68:	220c      	movs	r2, #12
 8001c6a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c70:	e006      	b.n	8001c80 <_sbrk+0x48>
	}

	heap_end += incr;
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <_sbrk+0x50>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	4a03      	ldr	r2, [pc, #12]	; (8001c88 <_sbrk+0x50>)
 8001c7c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	2000031c 	.word	0x2000031c
 8001c8c:	20000330 	.word	0x20000330

08001c90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c94:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <SystemInit+0x84>)
 8001c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9a:	4a1e      	ldr	r2, [pc, #120]	; (8001d14 <SystemInit+0x84>)
 8001c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001ca4:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <SystemInit+0x88>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1b      	ldr	r2, [pc, #108]	; (8001d18 <SystemInit+0x88>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8001cb0:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <SystemInit+0x88>)
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	4918      	ldr	r1, [pc, #96]	; (8001d18 <SystemInit+0x88>)
 8001cb6:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <SystemInit+0x8c>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001cbc:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <SystemInit+0x88>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a15      	ldr	r2, [pc, #84]	; (8001d18 <SystemInit+0x88>)
 8001cc2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <SystemInit+0x88>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a11      	ldr	r2, [pc, #68]	; (8001d18 <SystemInit+0x88>)
 8001cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <SystemInit+0x88>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <SystemInit+0x88>)
 8001cde:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001ce2:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <SystemInit+0x88>)
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	4a0b      	ldr	r2, [pc, #44]	; (8001d18 <SystemInit+0x88>)
 8001cea:	f023 030f 	bic.w	r3, r3, #15
 8001cee:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <SystemInit+0x88>)
 8001cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cf4:	4908      	ldr	r1, [pc, #32]	; (8001d18 <SystemInit+0x88>)
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <SystemInit+0x90>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <SystemInit+0x88>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001d02:	f000 f80f 	bl	8001d24 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d06:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <SystemInit+0x84>)
 8001d08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d0c:	609a      	str	r2, [r3, #8]
#endif  
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	f87fc00c 	.word	0xf87fc00c
 8001d20:	ff00fccc 	.word	0xff00fccc

08001d24 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8001d28:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <SetSysClock+0x8c>)
 8001d2a:	2212      	movs	r2, #18
 8001d2c:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001d2e:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <SetSysClock+0x90>)
 8001d30:	4a20      	ldr	r2, [pc, #128]	; (8001db4 <SetSysClock+0x90>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001d36:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <SetSysClock+0x90>)
 8001d38:	4a1e      	ldr	r2, [pc, #120]	; (8001db4 <SetSysClock+0x90>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001d3e:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <SetSysClock+0x90>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4a1c      	ldr	r2, [pc, #112]	; (8001db4 <SetSysClock+0x90>)
 8001d44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d48:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <SetSysClock+0x90>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4a19      	ldr	r2, [pc, #100]	; (8001db4 <SetSysClock+0x90>)
 8001d50:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001d54:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8001d56:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <SetSysClock+0x90>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4a16      	ldr	r2, [pc, #88]	; (8001db4 <SetSysClock+0x90>)
 8001d5c:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8001d60:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8001d62:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <SetSysClock+0x90>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a13      	ldr	r2, [pc, #76]	; (8001db4 <SetSysClock+0x90>)
 8001d68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d6c:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001d6e:	bf00      	nop
 8001d70:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <SetSysClock+0x90>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f9      	beq.n	8001d70 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <SetSysClock+0x90>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4a0c      	ldr	r2, [pc, #48]	; (8001db4 <SetSysClock+0x90>)
 8001d82:	f023 0303 	bic.w	r3, r3, #3
 8001d86:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <SetSysClock+0x90>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	4a09      	ldr	r2, [pc, #36]	; (8001db4 <SetSysClock+0x90>)
 8001d8e:	f043 0302 	orr.w	r3, r3, #2
 8001d92:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001d94:	bf00      	nop
 8001d96:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <SetSysClock+0x90>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d1f9      	bne.n	8001d96 <SetSysClock+0x72>
  {
  }
}
 8001da2:	bf00      	nop
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40022000 	.word	0x40022000
 8001db4:	40021000 	.word	0x40021000

08001db8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001db8:	480d      	ldr	r0, [pc, #52]	; (8001df0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dbc:	480d      	ldr	r0, [pc, #52]	; (8001df4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dbe:	490e      	ldr	r1, [pc, #56]	; (8001df8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dc0:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <LoopForever+0xe>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc4:	e002      	b.n	8001dcc <LoopCopyDataInit>

08001dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dca:	3304      	adds	r3, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd0:	d3f9      	bcc.n	8001dc6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd2:	4a0b      	ldr	r2, [pc, #44]	; (8001e00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dd4:	4c0b      	ldr	r4, [pc, #44]	; (8001e04 <LoopForever+0x16>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd8:	e001      	b.n	8001dde <LoopFillZerobss>

08001dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ddc:	3204      	adds	r2, #4

08001dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de0:	d3fb      	bcc.n	8001dda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001de2:	f7ff ff55 	bl	8001c90 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001de6:	f000 f817 	bl	8001e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dea:	f7ff fe35 	bl	8001a58 <main>

08001dee <LoopForever>:

LoopForever:
    b LoopForever
 8001dee:	e7fe      	b.n	8001dee <LoopForever>
  ldr   r0, =_estack
 8001df0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df8:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001dfc:	08004e14 	.word	0x08004e14
  ldr r2, =_sbss
 8001e00:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001e04:	20000330 	.word	0x20000330

08001e08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e08:	e7fe      	b.n	8001e08 <ADC1_2_IRQHandler>
	...

08001e0c <__errno>:
 8001e0c:	4b01      	ldr	r3, [pc, #4]	; (8001e14 <__errno+0x8>)
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	2000002c 	.word	0x2000002c

08001e18 <__libc_init_array>:
 8001e18:	b570      	push	{r4, r5, r6, lr}
 8001e1a:	4d0d      	ldr	r5, [pc, #52]	; (8001e50 <__libc_init_array+0x38>)
 8001e1c:	4c0d      	ldr	r4, [pc, #52]	; (8001e54 <__libc_init_array+0x3c>)
 8001e1e:	1b64      	subs	r4, r4, r5
 8001e20:	10a4      	asrs	r4, r4, #2
 8001e22:	2600      	movs	r6, #0
 8001e24:	42a6      	cmp	r6, r4
 8001e26:	d109      	bne.n	8001e3c <__libc_init_array+0x24>
 8001e28:	4d0b      	ldr	r5, [pc, #44]	; (8001e58 <__libc_init_array+0x40>)
 8001e2a:	4c0c      	ldr	r4, [pc, #48]	; (8001e5c <__libc_init_array+0x44>)
 8001e2c:	f002 fdf4 	bl	8004a18 <_init>
 8001e30:	1b64      	subs	r4, r4, r5
 8001e32:	10a4      	asrs	r4, r4, #2
 8001e34:	2600      	movs	r6, #0
 8001e36:	42a6      	cmp	r6, r4
 8001e38:	d105      	bne.n	8001e46 <__libc_init_array+0x2e>
 8001e3a:	bd70      	pop	{r4, r5, r6, pc}
 8001e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e40:	4798      	blx	r3
 8001e42:	3601      	adds	r6, #1
 8001e44:	e7ee      	b.n	8001e24 <__libc_init_array+0xc>
 8001e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e4a:	4798      	blx	r3
 8001e4c:	3601      	adds	r6, #1
 8001e4e:	e7f2      	b.n	8001e36 <__libc_init_array+0x1e>
 8001e50:	08004e0c 	.word	0x08004e0c
 8001e54:	08004e0c 	.word	0x08004e0c
 8001e58:	08004e0c 	.word	0x08004e0c
 8001e5c:	08004e10 	.word	0x08004e10

08001e60 <memcpy>:
 8001e60:	440a      	add	r2, r1
 8001e62:	4291      	cmp	r1, r2
 8001e64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001e68:	d100      	bne.n	8001e6c <memcpy+0xc>
 8001e6a:	4770      	bx	lr
 8001e6c:	b510      	push	{r4, lr}
 8001e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001e72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001e76:	4291      	cmp	r1, r2
 8001e78:	d1f9      	bne.n	8001e6e <memcpy+0xe>
 8001e7a:	bd10      	pop	{r4, pc}

08001e7c <memset>:
 8001e7c:	4402      	add	r2, r0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d100      	bne.n	8001e86 <memset+0xa>
 8001e84:	4770      	bx	lr
 8001e86:	f803 1b01 	strb.w	r1, [r3], #1
 8001e8a:	e7f9      	b.n	8001e80 <memset+0x4>

08001e8c <__cvt>:
 8001e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e90:	ec55 4b10 	vmov	r4, r5, d0
 8001e94:	2d00      	cmp	r5, #0
 8001e96:	460e      	mov	r6, r1
 8001e98:	4619      	mov	r1, r3
 8001e9a:	462b      	mov	r3, r5
 8001e9c:	bfbb      	ittet	lt
 8001e9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8001ea2:	461d      	movlt	r5, r3
 8001ea4:	2300      	movge	r3, #0
 8001ea6:	232d      	movlt	r3, #45	; 0x2d
 8001ea8:	700b      	strb	r3, [r1, #0]
 8001eaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001eac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8001eb0:	4691      	mov	r9, r2
 8001eb2:	f023 0820 	bic.w	r8, r3, #32
 8001eb6:	bfbc      	itt	lt
 8001eb8:	4622      	movlt	r2, r4
 8001eba:	4614      	movlt	r4, r2
 8001ebc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8001ec0:	d005      	beq.n	8001ece <__cvt+0x42>
 8001ec2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8001ec6:	d100      	bne.n	8001eca <__cvt+0x3e>
 8001ec8:	3601      	adds	r6, #1
 8001eca:	2102      	movs	r1, #2
 8001ecc:	e000      	b.n	8001ed0 <__cvt+0x44>
 8001ece:	2103      	movs	r1, #3
 8001ed0:	ab03      	add	r3, sp, #12
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	ab02      	add	r3, sp, #8
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	ec45 4b10 	vmov	d0, r4, r5
 8001edc:	4653      	mov	r3, sl
 8001ede:	4632      	mov	r2, r6
 8001ee0:	f000 fd9a 	bl	8002a18 <_dtoa_r>
 8001ee4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8001ee8:	4607      	mov	r7, r0
 8001eea:	d102      	bne.n	8001ef2 <__cvt+0x66>
 8001eec:	f019 0f01 	tst.w	r9, #1
 8001ef0:	d022      	beq.n	8001f38 <__cvt+0xac>
 8001ef2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8001ef6:	eb07 0906 	add.w	r9, r7, r6
 8001efa:	d110      	bne.n	8001f1e <__cvt+0x92>
 8001efc:	783b      	ldrb	r3, [r7, #0]
 8001efe:	2b30      	cmp	r3, #48	; 0x30
 8001f00:	d10a      	bne.n	8001f18 <__cvt+0x8c>
 8001f02:	2200      	movs	r2, #0
 8001f04:	2300      	movs	r3, #0
 8001f06:	4620      	mov	r0, r4
 8001f08:	4629      	mov	r1, r5
 8001f0a:	f7fe fddd 	bl	8000ac8 <__aeabi_dcmpeq>
 8001f0e:	b918      	cbnz	r0, 8001f18 <__cvt+0x8c>
 8001f10:	f1c6 0601 	rsb	r6, r6, #1
 8001f14:	f8ca 6000 	str.w	r6, [sl]
 8001f18:	f8da 3000 	ldr.w	r3, [sl]
 8001f1c:	4499      	add	r9, r3
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2300      	movs	r3, #0
 8001f22:	4620      	mov	r0, r4
 8001f24:	4629      	mov	r1, r5
 8001f26:	f7fe fdcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8001f2a:	b108      	cbz	r0, 8001f30 <__cvt+0xa4>
 8001f2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8001f30:	2230      	movs	r2, #48	; 0x30
 8001f32:	9b03      	ldr	r3, [sp, #12]
 8001f34:	454b      	cmp	r3, r9
 8001f36:	d307      	bcc.n	8001f48 <__cvt+0xbc>
 8001f38:	9b03      	ldr	r3, [sp, #12]
 8001f3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001f3c:	1bdb      	subs	r3, r3, r7
 8001f3e:	4638      	mov	r0, r7
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	b004      	add	sp, #16
 8001f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f48:	1c59      	adds	r1, r3, #1
 8001f4a:	9103      	str	r1, [sp, #12]
 8001f4c:	701a      	strb	r2, [r3, #0]
 8001f4e:	e7f0      	b.n	8001f32 <__cvt+0xa6>

08001f50 <__exponent>:
 8001f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f52:	4603      	mov	r3, r0
 8001f54:	2900      	cmp	r1, #0
 8001f56:	bfb8      	it	lt
 8001f58:	4249      	neglt	r1, r1
 8001f5a:	f803 2b02 	strb.w	r2, [r3], #2
 8001f5e:	bfb4      	ite	lt
 8001f60:	222d      	movlt	r2, #45	; 0x2d
 8001f62:	222b      	movge	r2, #43	; 0x2b
 8001f64:	2909      	cmp	r1, #9
 8001f66:	7042      	strb	r2, [r0, #1]
 8001f68:	dd2a      	ble.n	8001fc0 <__exponent+0x70>
 8001f6a:	f10d 0407 	add.w	r4, sp, #7
 8001f6e:	46a4      	mov	ip, r4
 8001f70:	270a      	movs	r7, #10
 8001f72:	46a6      	mov	lr, r4
 8001f74:	460a      	mov	r2, r1
 8001f76:	fb91 f6f7 	sdiv	r6, r1, r7
 8001f7a:	fb07 1516 	mls	r5, r7, r6, r1
 8001f7e:	3530      	adds	r5, #48	; 0x30
 8001f80:	2a63      	cmp	r2, #99	; 0x63
 8001f82:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8001f86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8001f8a:	4631      	mov	r1, r6
 8001f8c:	dcf1      	bgt.n	8001f72 <__exponent+0x22>
 8001f8e:	3130      	adds	r1, #48	; 0x30
 8001f90:	f1ae 0502 	sub.w	r5, lr, #2
 8001f94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8001f98:	1c44      	adds	r4, r0, #1
 8001f9a:	4629      	mov	r1, r5
 8001f9c:	4561      	cmp	r1, ip
 8001f9e:	d30a      	bcc.n	8001fb6 <__exponent+0x66>
 8001fa0:	f10d 0209 	add.w	r2, sp, #9
 8001fa4:	eba2 020e 	sub.w	r2, r2, lr
 8001fa8:	4565      	cmp	r5, ip
 8001faa:	bf88      	it	hi
 8001fac:	2200      	movhi	r2, #0
 8001fae:	4413      	add	r3, r2
 8001fb0:	1a18      	subs	r0, r3, r0
 8001fb2:	b003      	add	sp, #12
 8001fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001fba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8001fbe:	e7ed      	b.n	8001f9c <__exponent+0x4c>
 8001fc0:	2330      	movs	r3, #48	; 0x30
 8001fc2:	3130      	adds	r1, #48	; 0x30
 8001fc4:	7083      	strb	r3, [r0, #2]
 8001fc6:	70c1      	strb	r1, [r0, #3]
 8001fc8:	1d03      	adds	r3, r0, #4
 8001fca:	e7f1      	b.n	8001fb0 <__exponent+0x60>

08001fcc <_printf_float>:
 8001fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fd0:	ed2d 8b02 	vpush	{d8}
 8001fd4:	b08d      	sub	sp, #52	; 0x34
 8001fd6:	460c      	mov	r4, r1
 8001fd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8001fdc:	4616      	mov	r6, r2
 8001fde:	461f      	mov	r7, r3
 8001fe0:	4605      	mov	r5, r0
 8001fe2:	f001 fcbf 	bl	8003964 <_localeconv_r>
 8001fe6:	f8d0 a000 	ldr.w	sl, [r0]
 8001fea:	4650      	mov	r0, sl
 8001fec:	f7fe f8f0 	bl	80001d0 <strlen>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	930a      	str	r3, [sp, #40]	; 0x28
 8001ff4:	6823      	ldr	r3, [r4, #0]
 8001ff6:	9305      	str	r3, [sp, #20]
 8001ff8:	f8d8 3000 	ldr.w	r3, [r8]
 8001ffc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002000:	3307      	adds	r3, #7
 8002002:	f023 0307 	bic.w	r3, r3, #7
 8002006:	f103 0208 	add.w	r2, r3, #8
 800200a:	f8c8 2000 	str.w	r2, [r8]
 800200e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002012:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002016:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800201a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800201e:	9307      	str	r3, [sp, #28]
 8002020:	f8cd 8018 	str.w	r8, [sp, #24]
 8002024:	ee08 0a10 	vmov	s16, r0
 8002028:	4b9f      	ldr	r3, [pc, #636]	; (80022a8 <_printf_float+0x2dc>)
 800202a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800202e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002032:	f7fe fd7b 	bl	8000b2c <__aeabi_dcmpun>
 8002036:	bb88      	cbnz	r0, 800209c <_printf_float+0xd0>
 8002038:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800203c:	4b9a      	ldr	r3, [pc, #616]	; (80022a8 <_printf_float+0x2dc>)
 800203e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002042:	f7fe fd55 	bl	8000af0 <__aeabi_dcmple>
 8002046:	bb48      	cbnz	r0, 800209c <_printf_float+0xd0>
 8002048:	2200      	movs	r2, #0
 800204a:	2300      	movs	r3, #0
 800204c:	4640      	mov	r0, r8
 800204e:	4649      	mov	r1, r9
 8002050:	f7fe fd44 	bl	8000adc <__aeabi_dcmplt>
 8002054:	b110      	cbz	r0, 800205c <_printf_float+0x90>
 8002056:	232d      	movs	r3, #45	; 0x2d
 8002058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800205c:	4b93      	ldr	r3, [pc, #588]	; (80022ac <_printf_float+0x2e0>)
 800205e:	4894      	ldr	r0, [pc, #592]	; (80022b0 <_printf_float+0x2e4>)
 8002060:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002064:	bf94      	ite	ls
 8002066:	4698      	movls	r8, r3
 8002068:	4680      	movhi	r8, r0
 800206a:	2303      	movs	r3, #3
 800206c:	6123      	str	r3, [r4, #16]
 800206e:	9b05      	ldr	r3, [sp, #20]
 8002070:	f023 0204 	bic.w	r2, r3, #4
 8002074:	6022      	str	r2, [r4, #0]
 8002076:	f04f 0900 	mov.w	r9, #0
 800207a:	9700      	str	r7, [sp, #0]
 800207c:	4633      	mov	r3, r6
 800207e:	aa0b      	add	r2, sp, #44	; 0x2c
 8002080:	4621      	mov	r1, r4
 8002082:	4628      	mov	r0, r5
 8002084:	f000 f9d8 	bl	8002438 <_printf_common>
 8002088:	3001      	adds	r0, #1
 800208a:	f040 8090 	bne.w	80021ae <_printf_float+0x1e2>
 800208e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002092:	b00d      	add	sp, #52	; 0x34
 8002094:	ecbd 8b02 	vpop	{d8}
 8002098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800209c:	4642      	mov	r2, r8
 800209e:	464b      	mov	r3, r9
 80020a0:	4640      	mov	r0, r8
 80020a2:	4649      	mov	r1, r9
 80020a4:	f7fe fd42 	bl	8000b2c <__aeabi_dcmpun>
 80020a8:	b140      	cbz	r0, 80020bc <_printf_float+0xf0>
 80020aa:	464b      	mov	r3, r9
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	bfbc      	itt	lt
 80020b0:	232d      	movlt	r3, #45	; 0x2d
 80020b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80020b6:	487f      	ldr	r0, [pc, #508]	; (80022b4 <_printf_float+0x2e8>)
 80020b8:	4b7f      	ldr	r3, [pc, #508]	; (80022b8 <_printf_float+0x2ec>)
 80020ba:	e7d1      	b.n	8002060 <_printf_float+0x94>
 80020bc:	6863      	ldr	r3, [r4, #4]
 80020be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80020c2:	9206      	str	r2, [sp, #24]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	d13f      	bne.n	8002148 <_printf_float+0x17c>
 80020c8:	2306      	movs	r3, #6
 80020ca:	6063      	str	r3, [r4, #4]
 80020cc:	9b05      	ldr	r3, [sp, #20]
 80020ce:	6861      	ldr	r1, [r4, #4]
 80020d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80020d4:	2300      	movs	r3, #0
 80020d6:	9303      	str	r3, [sp, #12]
 80020d8:	ab0a      	add	r3, sp, #40	; 0x28
 80020da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80020de:	ab09      	add	r3, sp, #36	; 0x24
 80020e0:	ec49 8b10 	vmov	d0, r8, r9
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	6022      	str	r2, [r4, #0]
 80020e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80020ec:	4628      	mov	r0, r5
 80020ee:	f7ff fecd 	bl	8001e8c <__cvt>
 80020f2:	9b06      	ldr	r3, [sp, #24]
 80020f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80020f6:	2b47      	cmp	r3, #71	; 0x47
 80020f8:	4680      	mov	r8, r0
 80020fa:	d108      	bne.n	800210e <_printf_float+0x142>
 80020fc:	1cc8      	adds	r0, r1, #3
 80020fe:	db02      	blt.n	8002106 <_printf_float+0x13a>
 8002100:	6863      	ldr	r3, [r4, #4]
 8002102:	4299      	cmp	r1, r3
 8002104:	dd41      	ble.n	800218a <_printf_float+0x1be>
 8002106:	f1ab 0b02 	sub.w	fp, fp, #2
 800210a:	fa5f fb8b 	uxtb.w	fp, fp
 800210e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002112:	d820      	bhi.n	8002156 <_printf_float+0x18a>
 8002114:	3901      	subs	r1, #1
 8002116:	465a      	mov	r2, fp
 8002118:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800211c:	9109      	str	r1, [sp, #36]	; 0x24
 800211e:	f7ff ff17 	bl	8001f50 <__exponent>
 8002122:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002124:	1813      	adds	r3, r2, r0
 8002126:	2a01      	cmp	r2, #1
 8002128:	4681      	mov	r9, r0
 800212a:	6123      	str	r3, [r4, #16]
 800212c:	dc02      	bgt.n	8002134 <_printf_float+0x168>
 800212e:	6822      	ldr	r2, [r4, #0]
 8002130:	07d2      	lsls	r2, r2, #31
 8002132:	d501      	bpl.n	8002138 <_printf_float+0x16c>
 8002134:	3301      	adds	r3, #1
 8002136:	6123      	str	r3, [r4, #16]
 8002138:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800213c:	2b00      	cmp	r3, #0
 800213e:	d09c      	beq.n	800207a <_printf_float+0xae>
 8002140:	232d      	movs	r3, #45	; 0x2d
 8002142:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002146:	e798      	b.n	800207a <_printf_float+0xae>
 8002148:	9a06      	ldr	r2, [sp, #24]
 800214a:	2a47      	cmp	r2, #71	; 0x47
 800214c:	d1be      	bne.n	80020cc <_printf_float+0x100>
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1bc      	bne.n	80020cc <_printf_float+0x100>
 8002152:	2301      	movs	r3, #1
 8002154:	e7b9      	b.n	80020ca <_printf_float+0xfe>
 8002156:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800215a:	d118      	bne.n	800218e <_printf_float+0x1c2>
 800215c:	2900      	cmp	r1, #0
 800215e:	6863      	ldr	r3, [r4, #4]
 8002160:	dd0b      	ble.n	800217a <_printf_float+0x1ae>
 8002162:	6121      	str	r1, [r4, #16]
 8002164:	b913      	cbnz	r3, 800216c <_printf_float+0x1a0>
 8002166:	6822      	ldr	r2, [r4, #0]
 8002168:	07d0      	lsls	r0, r2, #31
 800216a:	d502      	bpl.n	8002172 <_printf_float+0x1a6>
 800216c:	3301      	adds	r3, #1
 800216e:	440b      	add	r3, r1
 8002170:	6123      	str	r3, [r4, #16]
 8002172:	65a1      	str	r1, [r4, #88]	; 0x58
 8002174:	f04f 0900 	mov.w	r9, #0
 8002178:	e7de      	b.n	8002138 <_printf_float+0x16c>
 800217a:	b913      	cbnz	r3, 8002182 <_printf_float+0x1b6>
 800217c:	6822      	ldr	r2, [r4, #0]
 800217e:	07d2      	lsls	r2, r2, #31
 8002180:	d501      	bpl.n	8002186 <_printf_float+0x1ba>
 8002182:	3302      	adds	r3, #2
 8002184:	e7f4      	b.n	8002170 <_printf_float+0x1a4>
 8002186:	2301      	movs	r3, #1
 8002188:	e7f2      	b.n	8002170 <_printf_float+0x1a4>
 800218a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800218e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002190:	4299      	cmp	r1, r3
 8002192:	db05      	blt.n	80021a0 <_printf_float+0x1d4>
 8002194:	6823      	ldr	r3, [r4, #0]
 8002196:	6121      	str	r1, [r4, #16]
 8002198:	07d8      	lsls	r0, r3, #31
 800219a:	d5ea      	bpl.n	8002172 <_printf_float+0x1a6>
 800219c:	1c4b      	adds	r3, r1, #1
 800219e:	e7e7      	b.n	8002170 <_printf_float+0x1a4>
 80021a0:	2900      	cmp	r1, #0
 80021a2:	bfd4      	ite	le
 80021a4:	f1c1 0202 	rsble	r2, r1, #2
 80021a8:	2201      	movgt	r2, #1
 80021aa:	4413      	add	r3, r2
 80021ac:	e7e0      	b.n	8002170 <_printf_float+0x1a4>
 80021ae:	6823      	ldr	r3, [r4, #0]
 80021b0:	055a      	lsls	r2, r3, #21
 80021b2:	d407      	bmi.n	80021c4 <_printf_float+0x1f8>
 80021b4:	6923      	ldr	r3, [r4, #16]
 80021b6:	4642      	mov	r2, r8
 80021b8:	4631      	mov	r1, r6
 80021ba:	4628      	mov	r0, r5
 80021bc:	47b8      	blx	r7
 80021be:	3001      	adds	r0, #1
 80021c0:	d12c      	bne.n	800221c <_printf_float+0x250>
 80021c2:	e764      	b.n	800208e <_printf_float+0xc2>
 80021c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80021c8:	f240 80e0 	bls.w	800238c <_printf_float+0x3c0>
 80021cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80021d0:	2200      	movs	r2, #0
 80021d2:	2300      	movs	r3, #0
 80021d4:	f7fe fc78 	bl	8000ac8 <__aeabi_dcmpeq>
 80021d8:	2800      	cmp	r0, #0
 80021da:	d034      	beq.n	8002246 <_printf_float+0x27a>
 80021dc:	4a37      	ldr	r2, [pc, #220]	; (80022bc <_printf_float+0x2f0>)
 80021de:	2301      	movs	r3, #1
 80021e0:	4631      	mov	r1, r6
 80021e2:	4628      	mov	r0, r5
 80021e4:	47b8      	blx	r7
 80021e6:	3001      	adds	r0, #1
 80021e8:	f43f af51 	beq.w	800208e <_printf_float+0xc2>
 80021ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80021f0:	429a      	cmp	r2, r3
 80021f2:	db02      	blt.n	80021fa <_printf_float+0x22e>
 80021f4:	6823      	ldr	r3, [r4, #0]
 80021f6:	07d8      	lsls	r0, r3, #31
 80021f8:	d510      	bpl.n	800221c <_printf_float+0x250>
 80021fa:	ee18 3a10 	vmov	r3, s16
 80021fe:	4652      	mov	r2, sl
 8002200:	4631      	mov	r1, r6
 8002202:	4628      	mov	r0, r5
 8002204:	47b8      	blx	r7
 8002206:	3001      	adds	r0, #1
 8002208:	f43f af41 	beq.w	800208e <_printf_float+0xc2>
 800220c:	f04f 0800 	mov.w	r8, #0
 8002210:	f104 091a 	add.w	r9, r4, #26
 8002214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002216:	3b01      	subs	r3, #1
 8002218:	4543      	cmp	r3, r8
 800221a:	dc09      	bgt.n	8002230 <_printf_float+0x264>
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	079b      	lsls	r3, r3, #30
 8002220:	f100 8105 	bmi.w	800242e <_printf_float+0x462>
 8002224:	68e0      	ldr	r0, [r4, #12]
 8002226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002228:	4298      	cmp	r0, r3
 800222a:	bfb8      	it	lt
 800222c:	4618      	movlt	r0, r3
 800222e:	e730      	b.n	8002092 <_printf_float+0xc6>
 8002230:	2301      	movs	r3, #1
 8002232:	464a      	mov	r2, r9
 8002234:	4631      	mov	r1, r6
 8002236:	4628      	mov	r0, r5
 8002238:	47b8      	blx	r7
 800223a:	3001      	adds	r0, #1
 800223c:	f43f af27 	beq.w	800208e <_printf_float+0xc2>
 8002240:	f108 0801 	add.w	r8, r8, #1
 8002244:	e7e6      	b.n	8002214 <_printf_float+0x248>
 8002246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002248:	2b00      	cmp	r3, #0
 800224a:	dc39      	bgt.n	80022c0 <_printf_float+0x2f4>
 800224c:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <_printf_float+0x2f0>)
 800224e:	2301      	movs	r3, #1
 8002250:	4631      	mov	r1, r6
 8002252:	4628      	mov	r0, r5
 8002254:	47b8      	blx	r7
 8002256:	3001      	adds	r0, #1
 8002258:	f43f af19 	beq.w	800208e <_printf_float+0xc2>
 800225c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002260:	4313      	orrs	r3, r2
 8002262:	d102      	bne.n	800226a <_printf_float+0x29e>
 8002264:	6823      	ldr	r3, [r4, #0]
 8002266:	07d9      	lsls	r1, r3, #31
 8002268:	d5d8      	bpl.n	800221c <_printf_float+0x250>
 800226a:	ee18 3a10 	vmov	r3, s16
 800226e:	4652      	mov	r2, sl
 8002270:	4631      	mov	r1, r6
 8002272:	4628      	mov	r0, r5
 8002274:	47b8      	blx	r7
 8002276:	3001      	adds	r0, #1
 8002278:	f43f af09 	beq.w	800208e <_printf_float+0xc2>
 800227c:	f04f 0900 	mov.w	r9, #0
 8002280:	f104 0a1a 	add.w	sl, r4, #26
 8002284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002286:	425b      	negs	r3, r3
 8002288:	454b      	cmp	r3, r9
 800228a:	dc01      	bgt.n	8002290 <_printf_float+0x2c4>
 800228c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800228e:	e792      	b.n	80021b6 <_printf_float+0x1ea>
 8002290:	2301      	movs	r3, #1
 8002292:	4652      	mov	r2, sl
 8002294:	4631      	mov	r1, r6
 8002296:	4628      	mov	r0, r5
 8002298:	47b8      	blx	r7
 800229a:	3001      	adds	r0, #1
 800229c:	f43f aef7 	beq.w	800208e <_printf_float+0xc2>
 80022a0:	f109 0901 	add.w	r9, r9, #1
 80022a4:	e7ee      	b.n	8002284 <_printf_float+0x2b8>
 80022a6:	bf00      	nop
 80022a8:	7fefffff 	.word	0x7fefffff
 80022ac:	08004a34 	.word	0x08004a34
 80022b0:	08004a38 	.word	0x08004a38
 80022b4:	08004a40 	.word	0x08004a40
 80022b8:	08004a3c 	.word	0x08004a3c
 80022bc:	08004a44 	.word	0x08004a44
 80022c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80022c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80022c4:	429a      	cmp	r2, r3
 80022c6:	bfa8      	it	ge
 80022c8:	461a      	movge	r2, r3
 80022ca:	2a00      	cmp	r2, #0
 80022cc:	4691      	mov	r9, r2
 80022ce:	dc37      	bgt.n	8002340 <_printf_float+0x374>
 80022d0:	f04f 0b00 	mov.w	fp, #0
 80022d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80022d8:	f104 021a 	add.w	r2, r4, #26
 80022dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80022de:	9305      	str	r3, [sp, #20]
 80022e0:	eba3 0309 	sub.w	r3, r3, r9
 80022e4:	455b      	cmp	r3, fp
 80022e6:	dc33      	bgt.n	8002350 <_printf_float+0x384>
 80022e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80022ec:	429a      	cmp	r2, r3
 80022ee:	db3b      	blt.n	8002368 <_printf_float+0x39c>
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	07da      	lsls	r2, r3, #31
 80022f4:	d438      	bmi.n	8002368 <_printf_float+0x39c>
 80022f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80022f8:	9a05      	ldr	r2, [sp, #20]
 80022fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80022fc:	1a9a      	subs	r2, r3, r2
 80022fe:	eba3 0901 	sub.w	r9, r3, r1
 8002302:	4591      	cmp	r9, r2
 8002304:	bfa8      	it	ge
 8002306:	4691      	movge	r9, r2
 8002308:	f1b9 0f00 	cmp.w	r9, #0
 800230c:	dc35      	bgt.n	800237a <_printf_float+0x3ae>
 800230e:	f04f 0800 	mov.w	r8, #0
 8002312:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002316:	f104 0a1a 	add.w	sl, r4, #26
 800231a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	eba3 0309 	sub.w	r3, r3, r9
 8002324:	4543      	cmp	r3, r8
 8002326:	f77f af79 	ble.w	800221c <_printf_float+0x250>
 800232a:	2301      	movs	r3, #1
 800232c:	4652      	mov	r2, sl
 800232e:	4631      	mov	r1, r6
 8002330:	4628      	mov	r0, r5
 8002332:	47b8      	blx	r7
 8002334:	3001      	adds	r0, #1
 8002336:	f43f aeaa 	beq.w	800208e <_printf_float+0xc2>
 800233a:	f108 0801 	add.w	r8, r8, #1
 800233e:	e7ec      	b.n	800231a <_printf_float+0x34e>
 8002340:	4613      	mov	r3, r2
 8002342:	4631      	mov	r1, r6
 8002344:	4642      	mov	r2, r8
 8002346:	4628      	mov	r0, r5
 8002348:	47b8      	blx	r7
 800234a:	3001      	adds	r0, #1
 800234c:	d1c0      	bne.n	80022d0 <_printf_float+0x304>
 800234e:	e69e      	b.n	800208e <_printf_float+0xc2>
 8002350:	2301      	movs	r3, #1
 8002352:	4631      	mov	r1, r6
 8002354:	4628      	mov	r0, r5
 8002356:	9205      	str	r2, [sp, #20]
 8002358:	47b8      	blx	r7
 800235a:	3001      	adds	r0, #1
 800235c:	f43f ae97 	beq.w	800208e <_printf_float+0xc2>
 8002360:	9a05      	ldr	r2, [sp, #20]
 8002362:	f10b 0b01 	add.w	fp, fp, #1
 8002366:	e7b9      	b.n	80022dc <_printf_float+0x310>
 8002368:	ee18 3a10 	vmov	r3, s16
 800236c:	4652      	mov	r2, sl
 800236e:	4631      	mov	r1, r6
 8002370:	4628      	mov	r0, r5
 8002372:	47b8      	blx	r7
 8002374:	3001      	adds	r0, #1
 8002376:	d1be      	bne.n	80022f6 <_printf_float+0x32a>
 8002378:	e689      	b.n	800208e <_printf_float+0xc2>
 800237a:	9a05      	ldr	r2, [sp, #20]
 800237c:	464b      	mov	r3, r9
 800237e:	4442      	add	r2, r8
 8002380:	4631      	mov	r1, r6
 8002382:	4628      	mov	r0, r5
 8002384:	47b8      	blx	r7
 8002386:	3001      	adds	r0, #1
 8002388:	d1c1      	bne.n	800230e <_printf_float+0x342>
 800238a:	e680      	b.n	800208e <_printf_float+0xc2>
 800238c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800238e:	2a01      	cmp	r2, #1
 8002390:	dc01      	bgt.n	8002396 <_printf_float+0x3ca>
 8002392:	07db      	lsls	r3, r3, #31
 8002394:	d538      	bpl.n	8002408 <_printf_float+0x43c>
 8002396:	2301      	movs	r3, #1
 8002398:	4642      	mov	r2, r8
 800239a:	4631      	mov	r1, r6
 800239c:	4628      	mov	r0, r5
 800239e:	47b8      	blx	r7
 80023a0:	3001      	adds	r0, #1
 80023a2:	f43f ae74 	beq.w	800208e <_printf_float+0xc2>
 80023a6:	ee18 3a10 	vmov	r3, s16
 80023aa:	4652      	mov	r2, sl
 80023ac:	4631      	mov	r1, r6
 80023ae:	4628      	mov	r0, r5
 80023b0:	47b8      	blx	r7
 80023b2:	3001      	adds	r0, #1
 80023b4:	f43f ae6b 	beq.w	800208e <_printf_float+0xc2>
 80023b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80023bc:	2200      	movs	r2, #0
 80023be:	2300      	movs	r3, #0
 80023c0:	f7fe fb82 	bl	8000ac8 <__aeabi_dcmpeq>
 80023c4:	b9d8      	cbnz	r0, 80023fe <_printf_float+0x432>
 80023c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80023c8:	f108 0201 	add.w	r2, r8, #1
 80023cc:	3b01      	subs	r3, #1
 80023ce:	4631      	mov	r1, r6
 80023d0:	4628      	mov	r0, r5
 80023d2:	47b8      	blx	r7
 80023d4:	3001      	adds	r0, #1
 80023d6:	d10e      	bne.n	80023f6 <_printf_float+0x42a>
 80023d8:	e659      	b.n	800208e <_printf_float+0xc2>
 80023da:	2301      	movs	r3, #1
 80023dc:	4652      	mov	r2, sl
 80023de:	4631      	mov	r1, r6
 80023e0:	4628      	mov	r0, r5
 80023e2:	47b8      	blx	r7
 80023e4:	3001      	adds	r0, #1
 80023e6:	f43f ae52 	beq.w	800208e <_printf_float+0xc2>
 80023ea:	f108 0801 	add.w	r8, r8, #1
 80023ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80023f0:	3b01      	subs	r3, #1
 80023f2:	4543      	cmp	r3, r8
 80023f4:	dcf1      	bgt.n	80023da <_printf_float+0x40e>
 80023f6:	464b      	mov	r3, r9
 80023f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80023fc:	e6dc      	b.n	80021b8 <_printf_float+0x1ec>
 80023fe:	f04f 0800 	mov.w	r8, #0
 8002402:	f104 0a1a 	add.w	sl, r4, #26
 8002406:	e7f2      	b.n	80023ee <_printf_float+0x422>
 8002408:	2301      	movs	r3, #1
 800240a:	4642      	mov	r2, r8
 800240c:	e7df      	b.n	80023ce <_printf_float+0x402>
 800240e:	2301      	movs	r3, #1
 8002410:	464a      	mov	r2, r9
 8002412:	4631      	mov	r1, r6
 8002414:	4628      	mov	r0, r5
 8002416:	47b8      	blx	r7
 8002418:	3001      	adds	r0, #1
 800241a:	f43f ae38 	beq.w	800208e <_printf_float+0xc2>
 800241e:	f108 0801 	add.w	r8, r8, #1
 8002422:	68e3      	ldr	r3, [r4, #12]
 8002424:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002426:	1a5b      	subs	r3, r3, r1
 8002428:	4543      	cmp	r3, r8
 800242a:	dcf0      	bgt.n	800240e <_printf_float+0x442>
 800242c:	e6fa      	b.n	8002224 <_printf_float+0x258>
 800242e:	f04f 0800 	mov.w	r8, #0
 8002432:	f104 0919 	add.w	r9, r4, #25
 8002436:	e7f4      	b.n	8002422 <_printf_float+0x456>

08002438 <_printf_common>:
 8002438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800243c:	4616      	mov	r6, r2
 800243e:	4699      	mov	r9, r3
 8002440:	688a      	ldr	r2, [r1, #8]
 8002442:	690b      	ldr	r3, [r1, #16]
 8002444:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002448:	4293      	cmp	r3, r2
 800244a:	bfb8      	it	lt
 800244c:	4613      	movlt	r3, r2
 800244e:	6033      	str	r3, [r6, #0]
 8002450:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002454:	4607      	mov	r7, r0
 8002456:	460c      	mov	r4, r1
 8002458:	b10a      	cbz	r2, 800245e <_printf_common+0x26>
 800245a:	3301      	adds	r3, #1
 800245c:	6033      	str	r3, [r6, #0]
 800245e:	6823      	ldr	r3, [r4, #0]
 8002460:	0699      	lsls	r1, r3, #26
 8002462:	bf42      	ittt	mi
 8002464:	6833      	ldrmi	r3, [r6, #0]
 8002466:	3302      	addmi	r3, #2
 8002468:	6033      	strmi	r3, [r6, #0]
 800246a:	6825      	ldr	r5, [r4, #0]
 800246c:	f015 0506 	ands.w	r5, r5, #6
 8002470:	d106      	bne.n	8002480 <_printf_common+0x48>
 8002472:	f104 0a19 	add.w	sl, r4, #25
 8002476:	68e3      	ldr	r3, [r4, #12]
 8002478:	6832      	ldr	r2, [r6, #0]
 800247a:	1a9b      	subs	r3, r3, r2
 800247c:	42ab      	cmp	r3, r5
 800247e:	dc26      	bgt.n	80024ce <_printf_common+0x96>
 8002480:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002484:	1e13      	subs	r3, r2, #0
 8002486:	6822      	ldr	r2, [r4, #0]
 8002488:	bf18      	it	ne
 800248a:	2301      	movne	r3, #1
 800248c:	0692      	lsls	r2, r2, #26
 800248e:	d42b      	bmi.n	80024e8 <_printf_common+0xb0>
 8002490:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002494:	4649      	mov	r1, r9
 8002496:	4638      	mov	r0, r7
 8002498:	47c0      	blx	r8
 800249a:	3001      	adds	r0, #1
 800249c:	d01e      	beq.n	80024dc <_printf_common+0xa4>
 800249e:	6823      	ldr	r3, [r4, #0]
 80024a0:	68e5      	ldr	r5, [r4, #12]
 80024a2:	6832      	ldr	r2, [r6, #0]
 80024a4:	f003 0306 	and.w	r3, r3, #6
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	bf08      	it	eq
 80024ac:	1aad      	subeq	r5, r5, r2
 80024ae:	68a3      	ldr	r3, [r4, #8]
 80024b0:	6922      	ldr	r2, [r4, #16]
 80024b2:	bf0c      	ite	eq
 80024b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80024b8:	2500      	movne	r5, #0
 80024ba:	4293      	cmp	r3, r2
 80024bc:	bfc4      	itt	gt
 80024be:	1a9b      	subgt	r3, r3, r2
 80024c0:	18ed      	addgt	r5, r5, r3
 80024c2:	2600      	movs	r6, #0
 80024c4:	341a      	adds	r4, #26
 80024c6:	42b5      	cmp	r5, r6
 80024c8:	d11a      	bne.n	8002500 <_printf_common+0xc8>
 80024ca:	2000      	movs	r0, #0
 80024cc:	e008      	b.n	80024e0 <_printf_common+0xa8>
 80024ce:	2301      	movs	r3, #1
 80024d0:	4652      	mov	r2, sl
 80024d2:	4649      	mov	r1, r9
 80024d4:	4638      	mov	r0, r7
 80024d6:	47c0      	blx	r8
 80024d8:	3001      	adds	r0, #1
 80024da:	d103      	bne.n	80024e4 <_printf_common+0xac>
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024e4:	3501      	adds	r5, #1
 80024e6:	e7c6      	b.n	8002476 <_printf_common+0x3e>
 80024e8:	18e1      	adds	r1, r4, r3
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	2030      	movs	r0, #48	; 0x30
 80024ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80024f2:	4422      	add	r2, r4
 80024f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80024f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80024fc:	3302      	adds	r3, #2
 80024fe:	e7c7      	b.n	8002490 <_printf_common+0x58>
 8002500:	2301      	movs	r3, #1
 8002502:	4622      	mov	r2, r4
 8002504:	4649      	mov	r1, r9
 8002506:	4638      	mov	r0, r7
 8002508:	47c0      	blx	r8
 800250a:	3001      	adds	r0, #1
 800250c:	d0e6      	beq.n	80024dc <_printf_common+0xa4>
 800250e:	3601      	adds	r6, #1
 8002510:	e7d9      	b.n	80024c6 <_printf_common+0x8e>
	...

08002514 <_printf_i>:
 8002514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002518:	7e0f      	ldrb	r7, [r1, #24]
 800251a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800251c:	2f78      	cmp	r7, #120	; 0x78
 800251e:	4691      	mov	r9, r2
 8002520:	4680      	mov	r8, r0
 8002522:	460c      	mov	r4, r1
 8002524:	469a      	mov	sl, r3
 8002526:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800252a:	d807      	bhi.n	800253c <_printf_i+0x28>
 800252c:	2f62      	cmp	r7, #98	; 0x62
 800252e:	d80a      	bhi.n	8002546 <_printf_i+0x32>
 8002530:	2f00      	cmp	r7, #0
 8002532:	f000 80d8 	beq.w	80026e6 <_printf_i+0x1d2>
 8002536:	2f58      	cmp	r7, #88	; 0x58
 8002538:	f000 80a3 	beq.w	8002682 <_printf_i+0x16e>
 800253c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002540:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002544:	e03a      	b.n	80025bc <_printf_i+0xa8>
 8002546:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800254a:	2b15      	cmp	r3, #21
 800254c:	d8f6      	bhi.n	800253c <_printf_i+0x28>
 800254e:	a101      	add	r1, pc, #4	; (adr r1, 8002554 <_printf_i+0x40>)
 8002550:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002554:	080025ad 	.word	0x080025ad
 8002558:	080025c1 	.word	0x080025c1
 800255c:	0800253d 	.word	0x0800253d
 8002560:	0800253d 	.word	0x0800253d
 8002564:	0800253d 	.word	0x0800253d
 8002568:	0800253d 	.word	0x0800253d
 800256c:	080025c1 	.word	0x080025c1
 8002570:	0800253d 	.word	0x0800253d
 8002574:	0800253d 	.word	0x0800253d
 8002578:	0800253d 	.word	0x0800253d
 800257c:	0800253d 	.word	0x0800253d
 8002580:	080026cd 	.word	0x080026cd
 8002584:	080025f1 	.word	0x080025f1
 8002588:	080026af 	.word	0x080026af
 800258c:	0800253d 	.word	0x0800253d
 8002590:	0800253d 	.word	0x0800253d
 8002594:	080026ef 	.word	0x080026ef
 8002598:	0800253d 	.word	0x0800253d
 800259c:	080025f1 	.word	0x080025f1
 80025a0:	0800253d 	.word	0x0800253d
 80025a4:	0800253d 	.word	0x0800253d
 80025a8:	080026b7 	.word	0x080026b7
 80025ac:	682b      	ldr	r3, [r5, #0]
 80025ae:	1d1a      	adds	r2, r3, #4
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	602a      	str	r2, [r5, #0]
 80025b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025bc:	2301      	movs	r3, #1
 80025be:	e0a3      	b.n	8002708 <_printf_i+0x1f4>
 80025c0:	6820      	ldr	r0, [r4, #0]
 80025c2:	6829      	ldr	r1, [r5, #0]
 80025c4:	0606      	lsls	r6, r0, #24
 80025c6:	f101 0304 	add.w	r3, r1, #4
 80025ca:	d50a      	bpl.n	80025e2 <_printf_i+0xce>
 80025cc:	680e      	ldr	r6, [r1, #0]
 80025ce:	602b      	str	r3, [r5, #0]
 80025d0:	2e00      	cmp	r6, #0
 80025d2:	da03      	bge.n	80025dc <_printf_i+0xc8>
 80025d4:	232d      	movs	r3, #45	; 0x2d
 80025d6:	4276      	negs	r6, r6
 80025d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025dc:	485e      	ldr	r0, [pc, #376]	; (8002758 <_printf_i+0x244>)
 80025de:	230a      	movs	r3, #10
 80025e0:	e019      	b.n	8002616 <_printf_i+0x102>
 80025e2:	680e      	ldr	r6, [r1, #0]
 80025e4:	602b      	str	r3, [r5, #0]
 80025e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80025ea:	bf18      	it	ne
 80025ec:	b236      	sxthne	r6, r6
 80025ee:	e7ef      	b.n	80025d0 <_printf_i+0xbc>
 80025f0:	682b      	ldr	r3, [r5, #0]
 80025f2:	6820      	ldr	r0, [r4, #0]
 80025f4:	1d19      	adds	r1, r3, #4
 80025f6:	6029      	str	r1, [r5, #0]
 80025f8:	0601      	lsls	r1, r0, #24
 80025fa:	d501      	bpl.n	8002600 <_printf_i+0xec>
 80025fc:	681e      	ldr	r6, [r3, #0]
 80025fe:	e002      	b.n	8002606 <_printf_i+0xf2>
 8002600:	0646      	lsls	r6, r0, #25
 8002602:	d5fb      	bpl.n	80025fc <_printf_i+0xe8>
 8002604:	881e      	ldrh	r6, [r3, #0]
 8002606:	4854      	ldr	r0, [pc, #336]	; (8002758 <_printf_i+0x244>)
 8002608:	2f6f      	cmp	r7, #111	; 0x6f
 800260a:	bf0c      	ite	eq
 800260c:	2308      	moveq	r3, #8
 800260e:	230a      	movne	r3, #10
 8002610:	2100      	movs	r1, #0
 8002612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002616:	6865      	ldr	r5, [r4, #4]
 8002618:	60a5      	str	r5, [r4, #8]
 800261a:	2d00      	cmp	r5, #0
 800261c:	bfa2      	ittt	ge
 800261e:	6821      	ldrge	r1, [r4, #0]
 8002620:	f021 0104 	bicge.w	r1, r1, #4
 8002624:	6021      	strge	r1, [r4, #0]
 8002626:	b90e      	cbnz	r6, 800262c <_printf_i+0x118>
 8002628:	2d00      	cmp	r5, #0
 800262a:	d04d      	beq.n	80026c8 <_printf_i+0x1b4>
 800262c:	4615      	mov	r5, r2
 800262e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002632:	fb03 6711 	mls	r7, r3, r1, r6
 8002636:	5dc7      	ldrb	r7, [r0, r7]
 8002638:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800263c:	4637      	mov	r7, r6
 800263e:	42bb      	cmp	r3, r7
 8002640:	460e      	mov	r6, r1
 8002642:	d9f4      	bls.n	800262e <_printf_i+0x11a>
 8002644:	2b08      	cmp	r3, #8
 8002646:	d10b      	bne.n	8002660 <_printf_i+0x14c>
 8002648:	6823      	ldr	r3, [r4, #0]
 800264a:	07de      	lsls	r6, r3, #31
 800264c:	d508      	bpl.n	8002660 <_printf_i+0x14c>
 800264e:	6923      	ldr	r3, [r4, #16]
 8002650:	6861      	ldr	r1, [r4, #4]
 8002652:	4299      	cmp	r1, r3
 8002654:	bfde      	ittt	le
 8002656:	2330      	movle	r3, #48	; 0x30
 8002658:	f805 3c01 	strble.w	r3, [r5, #-1]
 800265c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002660:	1b52      	subs	r2, r2, r5
 8002662:	6122      	str	r2, [r4, #16]
 8002664:	f8cd a000 	str.w	sl, [sp]
 8002668:	464b      	mov	r3, r9
 800266a:	aa03      	add	r2, sp, #12
 800266c:	4621      	mov	r1, r4
 800266e:	4640      	mov	r0, r8
 8002670:	f7ff fee2 	bl	8002438 <_printf_common>
 8002674:	3001      	adds	r0, #1
 8002676:	d14c      	bne.n	8002712 <_printf_i+0x1fe>
 8002678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800267c:	b004      	add	sp, #16
 800267e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002682:	4835      	ldr	r0, [pc, #212]	; (8002758 <_printf_i+0x244>)
 8002684:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002688:	6829      	ldr	r1, [r5, #0]
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002690:	6029      	str	r1, [r5, #0]
 8002692:	061d      	lsls	r5, r3, #24
 8002694:	d514      	bpl.n	80026c0 <_printf_i+0x1ac>
 8002696:	07df      	lsls	r7, r3, #31
 8002698:	bf44      	itt	mi
 800269a:	f043 0320 	orrmi.w	r3, r3, #32
 800269e:	6023      	strmi	r3, [r4, #0]
 80026a0:	b91e      	cbnz	r6, 80026aa <_printf_i+0x196>
 80026a2:	6823      	ldr	r3, [r4, #0]
 80026a4:	f023 0320 	bic.w	r3, r3, #32
 80026a8:	6023      	str	r3, [r4, #0]
 80026aa:	2310      	movs	r3, #16
 80026ac:	e7b0      	b.n	8002610 <_printf_i+0xfc>
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	f043 0320 	orr.w	r3, r3, #32
 80026b4:	6023      	str	r3, [r4, #0]
 80026b6:	2378      	movs	r3, #120	; 0x78
 80026b8:	4828      	ldr	r0, [pc, #160]	; (800275c <_printf_i+0x248>)
 80026ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80026be:	e7e3      	b.n	8002688 <_printf_i+0x174>
 80026c0:	0659      	lsls	r1, r3, #25
 80026c2:	bf48      	it	mi
 80026c4:	b2b6      	uxthmi	r6, r6
 80026c6:	e7e6      	b.n	8002696 <_printf_i+0x182>
 80026c8:	4615      	mov	r5, r2
 80026ca:	e7bb      	b.n	8002644 <_printf_i+0x130>
 80026cc:	682b      	ldr	r3, [r5, #0]
 80026ce:	6826      	ldr	r6, [r4, #0]
 80026d0:	6961      	ldr	r1, [r4, #20]
 80026d2:	1d18      	adds	r0, r3, #4
 80026d4:	6028      	str	r0, [r5, #0]
 80026d6:	0635      	lsls	r5, r6, #24
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	d501      	bpl.n	80026e0 <_printf_i+0x1cc>
 80026dc:	6019      	str	r1, [r3, #0]
 80026de:	e002      	b.n	80026e6 <_printf_i+0x1d2>
 80026e0:	0670      	lsls	r0, r6, #25
 80026e2:	d5fb      	bpl.n	80026dc <_printf_i+0x1c8>
 80026e4:	8019      	strh	r1, [r3, #0]
 80026e6:	2300      	movs	r3, #0
 80026e8:	6123      	str	r3, [r4, #16]
 80026ea:	4615      	mov	r5, r2
 80026ec:	e7ba      	b.n	8002664 <_printf_i+0x150>
 80026ee:	682b      	ldr	r3, [r5, #0]
 80026f0:	1d1a      	adds	r2, r3, #4
 80026f2:	602a      	str	r2, [r5, #0]
 80026f4:	681d      	ldr	r5, [r3, #0]
 80026f6:	6862      	ldr	r2, [r4, #4]
 80026f8:	2100      	movs	r1, #0
 80026fa:	4628      	mov	r0, r5
 80026fc:	f7fd fd70 	bl	80001e0 <memchr>
 8002700:	b108      	cbz	r0, 8002706 <_printf_i+0x1f2>
 8002702:	1b40      	subs	r0, r0, r5
 8002704:	6060      	str	r0, [r4, #4]
 8002706:	6863      	ldr	r3, [r4, #4]
 8002708:	6123      	str	r3, [r4, #16]
 800270a:	2300      	movs	r3, #0
 800270c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002710:	e7a8      	b.n	8002664 <_printf_i+0x150>
 8002712:	6923      	ldr	r3, [r4, #16]
 8002714:	462a      	mov	r2, r5
 8002716:	4649      	mov	r1, r9
 8002718:	4640      	mov	r0, r8
 800271a:	47d0      	blx	sl
 800271c:	3001      	adds	r0, #1
 800271e:	d0ab      	beq.n	8002678 <_printf_i+0x164>
 8002720:	6823      	ldr	r3, [r4, #0]
 8002722:	079b      	lsls	r3, r3, #30
 8002724:	d413      	bmi.n	800274e <_printf_i+0x23a>
 8002726:	68e0      	ldr	r0, [r4, #12]
 8002728:	9b03      	ldr	r3, [sp, #12]
 800272a:	4298      	cmp	r0, r3
 800272c:	bfb8      	it	lt
 800272e:	4618      	movlt	r0, r3
 8002730:	e7a4      	b.n	800267c <_printf_i+0x168>
 8002732:	2301      	movs	r3, #1
 8002734:	4632      	mov	r2, r6
 8002736:	4649      	mov	r1, r9
 8002738:	4640      	mov	r0, r8
 800273a:	47d0      	blx	sl
 800273c:	3001      	adds	r0, #1
 800273e:	d09b      	beq.n	8002678 <_printf_i+0x164>
 8002740:	3501      	adds	r5, #1
 8002742:	68e3      	ldr	r3, [r4, #12]
 8002744:	9903      	ldr	r1, [sp, #12]
 8002746:	1a5b      	subs	r3, r3, r1
 8002748:	42ab      	cmp	r3, r5
 800274a:	dcf2      	bgt.n	8002732 <_printf_i+0x21e>
 800274c:	e7eb      	b.n	8002726 <_printf_i+0x212>
 800274e:	2500      	movs	r5, #0
 8002750:	f104 0619 	add.w	r6, r4, #25
 8002754:	e7f5      	b.n	8002742 <_printf_i+0x22e>
 8002756:	bf00      	nop
 8002758:	08004a46 	.word	0x08004a46
 800275c:	08004a57 	.word	0x08004a57

08002760 <setbuf>:
 8002760:	2900      	cmp	r1, #0
 8002762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002766:	bf0c      	ite	eq
 8002768:	2202      	moveq	r2, #2
 800276a:	2200      	movne	r2, #0
 800276c:	f000 b800 	b.w	8002770 <setvbuf>

08002770 <setvbuf>:
 8002770:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002774:	461d      	mov	r5, r3
 8002776:	4b5d      	ldr	r3, [pc, #372]	; (80028ec <setvbuf+0x17c>)
 8002778:	681f      	ldr	r7, [r3, #0]
 800277a:	4604      	mov	r4, r0
 800277c:	460e      	mov	r6, r1
 800277e:	4690      	mov	r8, r2
 8002780:	b127      	cbz	r7, 800278c <setvbuf+0x1c>
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	b913      	cbnz	r3, 800278c <setvbuf+0x1c>
 8002786:	4638      	mov	r0, r7
 8002788:	f001 f84e 	bl	8003828 <__sinit>
 800278c:	4b58      	ldr	r3, [pc, #352]	; (80028f0 <setvbuf+0x180>)
 800278e:	429c      	cmp	r4, r3
 8002790:	d167      	bne.n	8002862 <setvbuf+0xf2>
 8002792:	687c      	ldr	r4, [r7, #4]
 8002794:	f1b8 0f02 	cmp.w	r8, #2
 8002798:	d006      	beq.n	80027a8 <setvbuf+0x38>
 800279a:	f1b8 0f01 	cmp.w	r8, #1
 800279e:	f200 809f 	bhi.w	80028e0 <setvbuf+0x170>
 80027a2:	2d00      	cmp	r5, #0
 80027a4:	f2c0 809c 	blt.w	80028e0 <setvbuf+0x170>
 80027a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027aa:	07db      	lsls	r3, r3, #31
 80027ac:	d405      	bmi.n	80027ba <setvbuf+0x4a>
 80027ae:	89a3      	ldrh	r3, [r4, #12]
 80027b0:	0598      	lsls	r0, r3, #22
 80027b2:	d402      	bmi.n	80027ba <setvbuf+0x4a>
 80027b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027b6:	f001 f8da 	bl	800396e <__retarget_lock_acquire_recursive>
 80027ba:	4621      	mov	r1, r4
 80027bc:	4638      	mov	r0, r7
 80027be:	f000 ff9f 	bl	8003700 <_fflush_r>
 80027c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80027c4:	b141      	cbz	r1, 80027d8 <setvbuf+0x68>
 80027c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80027ca:	4299      	cmp	r1, r3
 80027cc:	d002      	beq.n	80027d4 <setvbuf+0x64>
 80027ce:	4638      	mov	r0, r7
 80027d0:	f001 fcd6 	bl	8004180 <_free_r>
 80027d4:	2300      	movs	r3, #0
 80027d6:	6363      	str	r3, [r4, #52]	; 0x34
 80027d8:	2300      	movs	r3, #0
 80027da:	61a3      	str	r3, [r4, #24]
 80027dc:	6063      	str	r3, [r4, #4]
 80027de:	89a3      	ldrh	r3, [r4, #12]
 80027e0:	0619      	lsls	r1, r3, #24
 80027e2:	d503      	bpl.n	80027ec <setvbuf+0x7c>
 80027e4:	6921      	ldr	r1, [r4, #16]
 80027e6:	4638      	mov	r0, r7
 80027e8:	f001 fcca 	bl	8004180 <_free_r>
 80027ec:	89a3      	ldrh	r3, [r4, #12]
 80027ee:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80027f2:	f023 0303 	bic.w	r3, r3, #3
 80027f6:	f1b8 0f02 	cmp.w	r8, #2
 80027fa:	81a3      	strh	r3, [r4, #12]
 80027fc:	d06c      	beq.n	80028d8 <setvbuf+0x168>
 80027fe:	ab01      	add	r3, sp, #4
 8002800:	466a      	mov	r2, sp
 8002802:	4621      	mov	r1, r4
 8002804:	4638      	mov	r0, r7
 8002806:	f001 f8b4 	bl	8003972 <__swhatbuf_r>
 800280a:	89a3      	ldrh	r3, [r4, #12]
 800280c:	4318      	orrs	r0, r3
 800280e:	81a0      	strh	r0, [r4, #12]
 8002810:	2d00      	cmp	r5, #0
 8002812:	d130      	bne.n	8002876 <setvbuf+0x106>
 8002814:	9d00      	ldr	r5, [sp, #0]
 8002816:	4628      	mov	r0, r5
 8002818:	f001 f910 	bl	8003a3c <malloc>
 800281c:	4606      	mov	r6, r0
 800281e:	2800      	cmp	r0, #0
 8002820:	d155      	bne.n	80028ce <setvbuf+0x15e>
 8002822:	f8dd 9000 	ldr.w	r9, [sp]
 8002826:	45a9      	cmp	r9, r5
 8002828:	d14a      	bne.n	80028c0 <setvbuf+0x150>
 800282a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800282e:	2200      	movs	r2, #0
 8002830:	60a2      	str	r2, [r4, #8]
 8002832:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002836:	6022      	str	r2, [r4, #0]
 8002838:	6122      	str	r2, [r4, #16]
 800283a:	2201      	movs	r2, #1
 800283c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002840:	6162      	str	r2, [r4, #20]
 8002842:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002844:	f043 0302 	orr.w	r3, r3, #2
 8002848:	07d2      	lsls	r2, r2, #31
 800284a:	81a3      	strh	r3, [r4, #12]
 800284c:	d405      	bmi.n	800285a <setvbuf+0xea>
 800284e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002852:	d102      	bne.n	800285a <setvbuf+0xea>
 8002854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002856:	f001 f88b 	bl	8003970 <__retarget_lock_release_recursive>
 800285a:	4628      	mov	r0, r5
 800285c:	b003      	add	sp, #12
 800285e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002862:	4b24      	ldr	r3, [pc, #144]	; (80028f4 <setvbuf+0x184>)
 8002864:	429c      	cmp	r4, r3
 8002866:	d101      	bne.n	800286c <setvbuf+0xfc>
 8002868:	68bc      	ldr	r4, [r7, #8]
 800286a:	e793      	b.n	8002794 <setvbuf+0x24>
 800286c:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <setvbuf+0x188>)
 800286e:	429c      	cmp	r4, r3
 8002870:	bf08      	it	eq
 8002872:	68fc      	ldreq	r4, [r7, #12]
 8002874:	e78e      	b.n	8002794 <setvbuf+0x24>
 8002876:	2e00      	cmp	r6, #0
 8002878:	d0cd      	beq.n	8002816 <setvbuf+0xa6>
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	b913      	cbnz	r3, 8002884 <setvbuf+0x114>
 800287e:	4638      	mov	r0, r7
 8002880:	f000 ffd2 	bl	8003828 <__sinit>
 8002884:	f1b8 0f01 	cmp.w	r8, #1
 8002888:	bf08      	it	eq
 800288a:	89a3      	ldrheq	r3, [r4, #12]
 800288c:	6026      	str	r6, [r4, #0]
 800288e:	bf04      	itt	eq
 8002890:	f043 0301 	orreq.w	r3, r3, #1
 8002894:	81a3      	strheq	r3, [r4, #12]
 8002896:	89a2      	ldrh	r2, [r4, #12]
 8002898:	f012 0308 	ands.w	r3, r2, #8
 800289c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80028a0:	d01c      	beq.n	80028dc <setvbuf+0x16c>
 80028a2:	07d3      	lsls	r3, r2, #31
 80028a4:	bf41      	itttt	mi
 80028a6:	2300      	movmi	r3, #0
 80028a8:	426d      	negmi	r5, r5
 80028aa:	60a3      	strmi	r3, [r4, #8]
 80028ac:	61a5      	strmi	r5, [r4, #24]
 80028ae:	bf58      	it	pl
 80028b0:	60a5      	strpl	r5, [r4, #8]
 80028b2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80028b4:	f015 0501 	ands.w	r5, r5, #1
 80028b8:	d115      	bne.n	80028e6 <setvbuf+0x176>
 80028ba:	f412 7f00 	tst.w	r2, #512	; 0x200
 80028be:	e7c8      	b.n	8002852 <setvbuf+0xe2>
 80028c0:	4648      	mov	r0, r9
 80028c2:	f001 f8bb 	bl	8003a3c <malloc>
 80028c6:	4606      	mov	r6, r0
 80028c8:	2800      	cmp	r0, #0
 80028ca:	d0ae      	beq.n	800282a <setvbuf+0xba>
 80028cc:	464d      	mov	r5, r9
 80028ce:	89a3      	ldrh	r3, [r4, #12]
 80028d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d4:	81a3      	strh	r3, [r4, #12]
 80028d6:	e7d0      	b.n	800287a <setvbuf+0x10a>
 80028d8:	2500      	movs	r5, #0
 80028da:	e7a8      	b.n	800282e <setvbuf+0xbe>
 80028dc:	60a3      	str	r3, [r4, #8]
 80028de:	e7e8      	b.n	80028b2 <setvbuf+0x142>
 80028e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80028e4:	e7b9      	b.n	800285a <setvbuf+0xea>
 80028e6:	2500      	movs	r5, #0
 80028e8:	e7b7      	b.n	800285a <setvbuf+0xea>
 80028ea:	bf00      	nop
 80028ec:	2000002c 	.word	0x2000002c
 80028f0:	08004b18 	.word	0x08004b18
 80028f4:	08004b38 	.word	0x08004b38
 80028f8:	08004af8 	.word	0x08004af8

080028fc <quorem>:
 80028fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002900:	6903      	ldr	r3, [r0, #16]
 8002902:	690c      	ldr	r4, [r1, #16]
 8002904:	42a3      	cmp	r3, r4
 8002906:	4607      	mov	r7, r0
 8002908:	f2c0 8081 	blt.w	8002a0e <quorem+0x112>
 800290c:	3c01      	subs	r4, #1
 800290e:	f101 0814 	add.w	r8, r1, #20
 8002912:	f100 0514 	add.w	r5, r0, #20
 8002916:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800291a:	9301      	str	r3, [sp, #4]
 800291c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002920:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002924:	3301      	adds	r3, #1
 8002926:	429a      	cmp	r2, r3
 8002928:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800292c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002930:	fbb2 f6f3 	udiv	r6, r2, r3
 8002934:	d331      	bcc.n	800299a <quorem+0x9e>
 8002936:	f04f 0e00 	mov.w	lr, #0
 800293a:	4640      	mov	r0, r8
 800293c:	46ac      	mov	ip, r5
 800293e:	46f2      	mov	sl, lr
 8002940:	f850 2b04 	ldr.w	r2, [r0], #4
 8002944:	b293      	uxth	r3, r2
 8002946:	fb06 e303 	mla	r3, r6, r3, lr
 800294a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800294e:	b29b      	uxth	r3, r3
 8002950:	ebaa 0303 	sub.w	r3, sl, r3
 8002954:	f8dc a000 	ldr.w	sl, [ip]
 8002958:	0c12      	lsrs	r2, r2, #16
 800295a:	fa13 f38a 	uxtah	r3, r3, sl
 800295e:	fb06 e202 	mla	r2, r6, r2, lr
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	9b00      	ldr	r3, [sp, #0]
 8002966:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800296a:	b292      	uxth	r2, r2
 800296c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002970:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002974:	f8bd 3000 	ldrh.w	r3, [sp]
 8002978:	4581      	cmp	r9, r0
 800297a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800297e:	f84c 3b04 	str.w	r3, [ip], #4
 8002982:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002986:	d2db      	bcs.n	8002940 <quorem+0x44>
 8002988:	f855 300b 	ldr.w	r3, [r5, fp]
 800298c:	b92b      	cbnz	r3, 800299a <quorem+0x9e>
 800298e:	9b01      	ldr	r3, [sp, #4]
 8002990:	3b04      	subs	r3, #4
 8002992:	429d      	cmp	r5, r3
 8002994:	461a      	mov	r2, r3
 8002996:	d32e      	bcc.n	80029f6 <quorem+0xfa>
 8002998:	613c      	str	r4, [r7, #16]
 800299a:	4638      	mov	r0, r7
 800299c:	f001 fad8 	bl	8003f50 <__mcmp>
 80029a0:	2800      	cmp	r0, #0
 80029a2:	db24      	blt.n	80029ee <quorem+0xf2>
 80029a4:	3601      	adds	r6, #1
 80029a6:	4628      	mov	r0, r5
 80029a8:	f04f 0c00 	mov.w	ip, #0
 80029ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80029b0:	f8d0 e000 	ldr.w	lr, [r0]
 80029b4:	b293      	uxth	r3, r2
 80029b6:	ebac 0303 	sub.w	r3, ip, r3
 80029ba:	0c12      	lsrs	r2, r2, #16
 80029bc:	fa13 f38e 	uxtah	r3, r3, lr
 80029c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80029c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80029ce:	45c1      	cmp	r9, r8
 80029d0:	f840 3b04 	str.w	r3, [r0], #4
 80029d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80029d8:	d2e8      	bcs.n	80029ac <quorem+0xb0>
 80029da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80029de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80029e2:	b922      	cbnz	r2, 80029ee <quorem+0xf2>
 80029e4:	3b04      	subs	r3, #4
 80029e6:	429d      	cmp	r5, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	d30a      	bcc.n	8002a02 <quorem+0x106>
 80029ec:	613c      	str	r4, [r7, #16]
 80029ee:	4630      	mov	r0, r6
 80029f0:	b003      	add	sp, #12
 80029f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	3b04      	subs	r3, #4
 80029fa:	2a00      	cmp	r2, #0
 80029fc:	d1cc      	bne.n	8002998 <quorem+0x9c>
 80029fe:	3c01      	subs	r4, #1
 8002a00:	e7c7      	b.n	8002992 <quorem+0x96>
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	3b04      	subs	r3, #4
 8002a06:	2a00      	cmp	r2, #0
 8002a08:	d1f0      	bne.n	80029ec <quorem+0xf0>
 8002a0a:	3c01      	subs	r4, #1
 8002a0c:	e7eb      	b.n	80029e6 <quorem+0xea>
 8002a0e:	2000      	movs	r0, #0
 8002a10:	e7ee      	b.n	80029f0 <quorem+0xf4>
 8002a12:	0000      	movs	r0, r0
 8002a14:	0000      	movs	r0, r0
	...

08002a18 <_dtoa_r>:
 8002a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a1c:	ed2d 8b04 	vpush	{d8-d9}
 8002a20:	ec57 6b10 	vmov	r6, r7, d0
 8002a24:	b093      	sub	sp, #76	; 0x4c
 8002a26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002a28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8002a2c:	9106      	str	r1, [sp, #24]
 8002a2e:	ee10 aa10 	vmov	sl, s0
 8002a32:	4604      	mov	r4, r0
 8002a34:	9209      	str	r2, [sp, #36]	; 0x24
 8002a36:	930c      	str	r3, [sp, #48]	; 0x30
 8002a38:	46bb      	mov	fp, r7
 8002a3a:	b975      	cbnz	r5, 8002a5a <_dtoa_r+0x42>
 8002a3c:	2010      	movs	r0, #16
 8002a3e:	f000 fffd 	bl	8003a3c <malloc>
 8002a42:	4602      	mov	r2, r0
 8002a44:	6260      	str	r0, [r4, #36]	; 0x24
 8002a46:	b920      	cbnz	r0, 8002a52 <_dtoa_r+0x3a>
 8002a48:	4ba7      	ldr	r3, [pc, #668]	; (8002ce8 <_dtoa_r+0x2d0>)
 8002a4a:	21ea      	movs	r1, #234	; 0xea
 8002a4c:	48a7      	ldr	r0, [pc, #668]	; (8002cec <_dtoa_r+0x2d4>)
 8002a4e:	f001 fccb 	bl	80043e8 <__assert_func>
 8002a52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002a56:	6005      	str	r5, [r0, #0]
 8002a58:	60c5      	str	r5, [r0, #12]
 8002a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a5c:	6819      	ldr	r1, [r3, #0]
 8002a5e:	b151      	cbz	r1, 8002a76 <_dtoa_r+0x5e>
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	604a      	str	r2, [r1, #4]
 8002a64:	2301      	movs	r3, #1
 8002a66:	4093      	lsls	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	f001 f82e 	bl	8003acc <_Bfree>
 8002a70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	1e3b      	subs	r3, r7, #0
 8002a78:	bfaa      	itet	ge
 8002a7a:	2300      	movge	r3, #0
 8002a7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8002a80:	f8c8 3000 	strge.w	r3, [r8]
 8002a84:	4b9a      	ldr	r3, [pc, #616]	; (8002cf0 <_dtoa_r+0x2d8>)
 8002a86:	bfbc      	itt	lt
 8002a88:	2201      	movlt	r2, #1
 8002a8a:	f8c8 2000 	strlt.w	r2, [r8]
 8002a8e:	ea33 030b 	bics.w	r3, r3, fp
 8002a92:	d11b      	bne.n	8002acc <_dtoa_r+0xb4>
 8002a94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002a96:	f242 730f 	movw	r3, #9999	; 0x270f
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8002aa0:	4333      	orrs	r3, r6
 8002aa2:	f000 8592 	beq.w	80035ca <_dtoa_r+0xbb2>
 8002aa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002aa8:	b963      	cbnz	r3, 8002ac4 <_dtoa_r+0xac>
 8002aaa:	4b92      	ldr	r3, [pc, #584]	; (8002cf4 <_dtoa_r+0x2dc>)
 8002aac:	e022      	b.n	8002af4 <_dtoa_r+0xdc>
 8002aae:	4b92      	ldr	r3, [pc, #584]	; (8002cf8 <_dtoa_r+0x2e0>)
 8002ab0:	9301      	str	r3, [sp, #4]
 8002ab2:	3308      	adds	r3, #8
 8002ab4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	9801      	ldr	r0, [sp, #4]
 8002aba:	b013      	add	sp, #76	; 0x4c
 8002abc:	ecbd 8b04 	vpop	{d8-d9}
 8002ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ac4:	4b8b      	ldr	r3, [pc, #556]	; (8002cf4 <_dtoa_r+0x2dc>)
 8002ac6:	9301      	str	r3, [sp, #4]
 8002ac8:	3303      	adds	r3, #3
 8002aca:	e7f3      	b.n	8002ab4 <_dtoa_r+0x9c>
 8002acc:	2200      	movs	r2, #0
 8002ace:	2300      	movs	r3, #0
 8002ad0:	4650      	mov	r0, sl
 8002ad2:	4659      	mov	r1, fp
 8002ad4:	f7fd fff8 	bl	8000ac8 <__aeabi_dcmpeq>
 8002ad8:	ec4b ab19 	vmov	d9, sl, fp
 8002adc:	4680      	mov	r8, r0
 8002ade:	b158      	cbz	r0, 8002af8 <_dtoa_r+0xe0>
 8002ae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 856b 	beq.w	80035c4 <_dtoa_r+0xbac>
 8002aee:	4883      	ldr	r0, [pc, #524]	; (8002cfc <_dtoa_r+0x2e4>)
 8002af0:	6018      	str	r0, [r3, #0]
 8002af2:	1e43      	subs	r3, r0, #1
 8002af4:	9301      	str	r3, [sp, #4]
 8002af6:	e7df      	b.n	8002ab8 <_dtoa_r+0xa0>
 8002af8:	ec4b ab10 	vmov	d0, sl, fp
 8002afc:	aa10      	add	r2, sp, #64	; 0x40
 8002afe:	a911      	add	r1, sp, #68	; 0x44
 8002b00:	4620      	mov	r0, r4
 8002b02:	f001 facb 	bl	800409c <__d2b>
 8002b06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8002b0a:	ee08 0a10 	vmov	s16, r0
 8002b0e:	2d00      	cmp	r5, #0
 8002b10:	f000 8084 	beq.w	8002c1c <_dtoa_r+0x204>
 8002b14:	ee19 3a90 	vmov	r3, s19
 8002b18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8002b20:	4656      	mov	r6, sl
 8002b22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8002b26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002b2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8002b2e:	4b74      	ldr	r3, [pc, #464]	; (8002d00 <_dtoa_r+0x2e8>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	4630      	mov	r0, r6
 8002b34:	4639      	mov	r1, r7
 8002b36:	f7fd fba7 	bl	8000288 <__aeabi_dsub>
 8002b3a:	a365      	add	r3, pc, #404	; (adr r3, 8002cd0 <_dtoa_r+0x2b8>)
 8002b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b40:	f7fd fd5a 	bl	80005f8 <__aeabi_dmul>
 8002b44:	a364      	add	r3, pc, #400	; (adr r3, 8002cd8 <_dtoa_r+0x2c0>)
 8002b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4a:	f7fd fb9f 	bl	800028c <__adddf3>
 8002b4e:	4606      	mov	r6, r0
 8002b50:	4628      	mov	r0, r5
 8002b52:	460f      	mov	r7, r1
 8002b54:	f7fd fce6 	bl	8000524 <__aeabi_i2d>
 8002b58:	a361      	add	r3, pc, #388	; (adr r3, 8002ce0 <_dtoa_r+0x2c8>)
 8002b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5e:	f7fd fd4b 	bl	80005f8 <__aeabi_dmul>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4630      	mov	r0, r6
 8002b68:	4639      	mov	r1, r7
 8002b6a:	f7fd fb8f 	bl	800028c <__adddf3>
 8002b6e:	4606      	mov	r6, r0
 8002b70:	460f      	mov	r7, r1
 8002b72:	f7fd fff1 	bl	8000b58 <__aeabi_d2iz>
 8002b76:	2200      	movs	r2, #0
 8002b78:	9000      	str	r0, [sp, #0]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	4630      	mov	r0, r6
 8002b7e:	4639      	mov	r1, r7
 8002b80:	f7fd ffac 	bl	8000adc <__aeabi_dcmplt>
 8002b84:	b150      	cbz	r0, 8002b9c <_dtoa_r+0x184>
 8002b86:	9800      	ldr	r0, [sp, #0]
 8002b88:	f7fd fccc 	bl	8000524 <__aeabi_i2d>
 8002b8c:	4632      	mov	r2, r6
 8002b8e:	463b      	mov	r3, r7
 8002b90:	f7fd ff9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8002b94:	b910      	cbnz	r0, 8002b9c <_dtoa_r+0x184>
 8002b96:	9b00      	ldr	r3, [sp, #0]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	9b00      	ldr	r3, [sp, #0]
 8002b9e:	2b16      	cmp	r3, #22
 8002ba0:	d85a      	bhi.n	8002c58 <_dtoa_r+0x240>
 8002ba2:	9a00      	ldr	r2, [sp, #0]
 8002ba4:	4b57      	ldr	r3, [pc, #348]	; (8002d04 <_dtoa_r+0x2ec>)
 8002ba6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bae:	ec51 0b19 	vmov	r0, r1, d9
 8002bb2:	f7fd ff93 	bl	8000adc <__aeabi_dcmplt>
 8002bb6:	2800      	cmp	r0, #0
 8002bb8:	d050      	beq.n	8002c5c <_dtoa_r+0x244>
 8002bba:	9b00      	ldr	r3, [sp, #0]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8002bc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002bc6:	1b5d      	subs	r5, r3, r5
 8002bc8:	1e6b      	subs	r3, r5, #1
 8002bca:	9305      	str	r3, [sp, #20]
 8002bcc:	bf45      	ittet	mi
 8002bce:	f1c5 0301 	rsbmi	r3, r5, #1
 8002bd2:	9304      	strmi	r3, [sp, #16]
 8002bd4:	2300      	movpl	r3, #0
 8002bd6:	2300      	movmi	r3, #0
 8002bd8:	bf4c      	ite	mi
 8002bda:	9305      	strmi	r3, [sp, #20]
 8002bdc:	9304      	strpl	r3, [sp, #16]
 8002bde:	9b00      	ldr	r3, [sp, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	db3d      	blt.n	8002c60 <_dtoa_r+0x248>
 8002be4:	9b05      	ldr	r3, [sp, #20]
 8002be6:	9a00      	ldr	r2, [sp, #0]
 8002be8:	920a      	str	r2, [sp, #40]	; 0x28
 8002bea:	4413      	add	r3, r2
 8002bec:	9305      	str	r3, [sp, #20]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	9307      	str	r3, [sp, #28]
 8002bf2:	9b06      	ldr	r3, [sp, #24]
 8002bf4:	2b09      	cmp	r3, #9
 8002bf6:	f200 8089 	bhi.w	8002d0c <_dtoa_r+0x2f4>
 8002bfa:	2b05      	cmp	r3, #5
 8002bfc:	bfc4      	itt	gt
 8002bfe:	3b04      	subgt	r3, #4
 8002c00:	9306      	strgt	r3, [sp, #24]
 8002c02:	9b06      	ldr	r3, [sp, #24]
 8002c04:	f1a3 0302 	sub.w	r3, r3, #2
 8002c08:	bfcc      	ite	gt
 8002c0a:	2500      	movgt	r5, #0
 8002c0c:	2501      	movle	r5, #1
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	f200 8087 	bhi.w	8002d22 <_dtoa_r+0x30a>
 8002c14:	e8df f003 	tbb	[pc, r3]
 8002c18:	59383a2d 	.word	0x59383a2d
 8002c1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8002c20:	441d      	add	r5, r3
 8002c22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	bfc1      	itttt	gt
 8002c2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002c2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8002c32:	fa0b f303 	lslgt.w	r3, fp, r3
 8002c36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8002c3a:	bfda      	itte	le
 8002c3c:	f1c3 0320 	rsble	r3, r3, #32
 8002c40:	fa06 f003 	lslle.w	r0, r6, r3
 8002c44:	4318      	orrgt	r0, r3
 8002c46:	f7fd fc5d 	bl	8000504 <__aeabi_ui2d>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	4606      	mov	r6, r0
 8002c4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8002c52:	3d01      	subs	r5, #1
 8002c54:	930e      	str	r3, [sp, #56]	; 0x38
 8002c56:	e76a      	b.n	8002b2e <_dtoa_r+0x116>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e7b2      	b.n	8002bc2 <_dtoa_r+0x1aa>
 8002c5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8002c5e:	e7b1      	b.n	8002bc4 <_dtoa_r+0x1ac>
 8002c60:	9b04      	ldr	r3, [sp, #16]
 8002c62:	9a00      	ldr	r2, [sp, #0]
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	9304      	str	r3, [sp, #16]
 8002c68:	4253      	negs	r3, r2
 8002c6a:	9307      	str	r3, [sp, #28]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8002c70:	e7bf      	b.n	8002bf2 <_dtoa_r+0x1da>
 8002c72:	2300      	movs	r3, #0
 8002c74:	9308      	str	r3, [sp, #32]
 8002c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	dc55      	bgt.n	8002d28 <_dtoa_r+0x310>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002c82:	461a      	mov	r2, r3
 8002c84:	9209      	str	r2, [sp, #36]	; 0x24
 8002c86:	e00c      	b.n	8002ca2 <_dtoa_r+0x28a>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e7f3      	b.n	8002c74 <_dtoa_r+0x25c>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c90:	9308      	str	r3, [sp, #32]
 8002c92:	9b00      	ldr	r3, [sp, #0]
 8002c94:	4413      	add	r3, r2
 8002c96:	9302      	str	r3, [sp, #8]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	9303      	str	r3, [sp, #12]
 8002c9e:	bfb8      	it	lt
 8002ca0:	2301      	movlt	r3, #1
 8002ca2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	6042      	str	r2, [r0, #4]
 8002ca8:	2204      	movs	r2, #4
 8002caa:	f102 0614 	add.w	r6, r2, #20
 8002cae:	429e      	cmp	r6, r3
 8002cb0:	6841      	ldr	r1, [r0, #4]
 8002cb2:	d93d      	bls.n	8002d30 <_dtoa_r+0x318>
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	f000 fec9 	bl	8003a4c <_Balloc>
 8002cba:	9001      	str	r0, [sp, #4]
 8002cbc:	2800      	cmp	r0, #0
 8002cbe:	d13b      	bne.n	8002d38 <_dtoa_r+0x320>
 8002cc0:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <_dtoa_r+0x2f0>)
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002cc8:	e6c0      	b.n	8002a4c <_dtoa_r+0x34>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e7df      	b.n	8002c8e <_dtoa_r+0x276>
 8002cce:	bf00      	nop
 8002cd0:	636f4361 	.word	0x636f4361
 8002cd4:	3fd287a7 	.word	0x3fd287a7
 8002cd8:	8b60c8b3 	.word	0x8b60c8b3
 8002cdc:	3fc68a28 	.word	0x3fc68a28
 8002ce0:	509f79fb 	.word	0x509f79fb
 8002ce4:	3fd34413 	.word	0x3fd34413
 8002ce8:	08004a75 	.word	0x08004a75
 8002cec:	08004a8c 	.word	0x08004a8c
 8002cf0:	7ff00000 	.word	0x7ff00000
 8002cf4:	08004a71 	.word	0x08004a71
 8002cf8:	08004a68 	.word	0x08004a68
 8002cfc:	08004a45 	.word	0x08004a45
 8002d00:	3ff80000 	.word	0x3ff80000
 8002d04:	08004be0 	.word	0x08004be0
 8002d08:	08004ae7 	.word	0x08004ae7
 8002d0c:	2501      	movs	r5, #1
 8002d0e:	2300      	movs	r3, #0
 8002d10:	9306      	str	r3, [sp, #24]
 8002d12:	9508      	str	r5, [sp, #32]
 8002d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2312      	movs	r3, #18
 8002d20:	e7b0      	b.n	8002c84 <_dtoa_r+0x26c>
 8002d22:	2301      	movs	r3, #1
 8002d24:	9308      	str	r3, [sp, #32]
 8002d26:	e7f5      	b.n	8002d14 <_dtoa_r+0x2fc>
 8002d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002d2e:	e7b8      	b.n	8002ca2 <_dtoa_r+0x28a>
 8002d30:	3101      	adds	r1, #1
 8002d32:	6041      	str	r1, [r0, #4]
 8002d34:	0052      	lsls	r2, r2, #1
 8002d36:	e7b8      	b.n	8002caa <_dtoa_r+0x292>
 8002d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d3a:	9a01      	ldr	r2, [sp, #4]
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	9b03      	ldr	r3, [sp, #12]
 8002d40:	2b0e      	cmp	r3, #14
 8002d42:	f200 809d 	bhi.w	8002e80 <_dtoa_r+0x468>
 8002d46:	2d00      	cmp	r5, #0
 8002d48:	f000 809a 	beq.w	8002e80 <_dtoa_r+0x468>
 8002d4c:	9b00      	ldr	r3, [sp, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	dd32      	ble.n	8002db8 <_dtoa_r+0x3a0>
 8002d52:	4ab7      	ldr	r2, [pc, #732]	; (8003030 <_dtoa_r+0x618>)
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002d5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002d60:	9b00      	ldr	r3, [sp, #0]
 8002d62:	05d8      	lsls	r0, r3, #23
 8002d64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8002d68:	d516      	bpl.n	8002d98 <_dtoa_r+0x380>
 8002d6a:	4bb2      	ldr	r3, [pc, #712]	; (8003034 <_dtoa_r+0x61c>)
 8002d6c:	ec51 0b19 	vmov	r0, r1, d9
 8002d70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002d74:	f7fd fd6a 	bl	800084c <__aeabi_ddiv>
 8002d78:	f007 070f 	and.w	r7, r7, #15
 8002d7c:	4682      	mov	sl, r0
 8002d7e:	468b      	mov	fp, r1
 8002d80:	2503      	movs	r5, #3
 8002d82:	4eac      	ldr	r6, [pc, #688]	; (8003034 <_dtoa_r+0x61c>)
 8002d84:	b957      	cbnz	r7, 8002d9c <_dtoa_r+0x384>
 8002d86:	4642      	mov	r2, r8
 8002d88:	464b      	mov	r3, r9
 8002d8a:	4650      	mov	r0, sl
 8002d8c:	4659      	mov	r1, fp
 8002d8e:	f7fd fd5d 	bl	800084c <__aeabi_ddiv>
 8002d92:	4682      	mov	sl, r0
 8002d94:	468b      	mov	fp, r1
 8002d96:	e028      	b.n	8002dea <_dtoa_r+0x3d2>
 8002d98:	2502      	movs	r5, #2
 8002d9a:	e7f2      	b.n	8002d82 <_dtoa_r+0x36a>
 8002d9c:	07f9      	lsls	r1, r7, #31
 8002d9e:	d508      	bpl.n	8002db2 <_dtoa_r+0x39a>
 8002da0:	4640      	mov	r0, r8
 8002da2:	4649      	mov	r1, r9
 8002da4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002da8:	f7fd fc26 	bl	80005f8 <__aeabi_dmul>
 8002dac:	3501      	adds	r5, #1
 8002dae:	4680      	mov	r8, r0
 8002db0:	4689      	mov	r9, r1
 8002db2:	107f      	asrs	r7, r7, #1
 8002db4:	3608      	adds	r6, #8
 8002db6:	e7e5      	b.n	8002d84 <_dtoa_r+0x36c>
 8002db8:	f000 809b 	beq.w	8002ef2 <_dtoa_r+0x4da>
 8002dbc:	9b00      	ldr	r3, [sp, #0]
 8002dbe:	4f9d      	ldr	r7, [pc, #628]	; (8003034 <_dtoa_r+0x61c>)
 8002dc0:	425e      	negs	r6, r3
 8002dc2:	4b9b      	ldr	r3, [pc, #620]	; (8003030 <_dtoa_r+0x618>)
 8002dc4:	f006 020f 	and.w	r2, r6, #15
 8002dc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd0:	ec51 0b19 	vmov	r0, r1, d9
 8002dd4:	f7fd fc10 	bl	80005f8 <__aeabi_dmul>
 8002dd8:	1136      	asrs	r6, r6, #4
 8002dda:	4682      	mov	sl, r0
 8002ddc:	468b      	mov	fp, r1
 8002dde:	2300      	movs	r3, #0
 8002de0:	2502      	movs	r5, #2
 8002de2:	2e00      	cmp	r6, #0
 8002de4:	d17a      	bne.n	8002edc <_dtoa_r+0x4c4>
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1d3      	bne.n	8002d92 <_dtoa_r+0x37a>
 8002dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 8082 	beq.w	8002ef6 <_dtoa_r+0x4de>
 8002df2:	4b91      	ldr	r3, [pc, #580]	; (8003038 <_dtoa_r+0x620>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	4650      	mov	r0, sl
 8002df8:	4659      	mov	r1, fp
 8002dfa:	f7fd fe6f 	bl	8000adc <__aeabi_dcmplt>
 8002dfe:	2800      	cmp	r0, #0
 8002e00:	d079      	beq.n	8002ef6 <_dtoa_r+0x4de>
 8002e02:	9b03      	ldr	r3, [sp, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d076      	beq.n	8002ef6 <_dtoa_r+0x4de>
 8002e08:	9b02      	ldr	r3, [sp, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	dd36      	ble.n	8002e7c <_dtoa_r+0x464>
 8002e0e:	9b00      	ldr	r3, [sp, #0]
 8002e10:	4650      	mov	r0, sl
 8002e12:	4659      	mov	r1, fp
 8002e14:	1e5f      	subs	r7, r3, #1
 8002e16:	2200      	movs	r2, #0
 8002e18:	4b88      	ldr	r3, [pc, #544]	; (800303c <_dtoa_r+0x624>)
 8002e1a:	f7fd fbed 	bl	80005f8 <__aeabi_dmul>
 8002e1e:	9e02      	ldr	r6, [sp, #8]
 8002e20:	4682      	mov	sl, r0
 8002e22:	468b      	mov	fp, r1
 8002e24:	3501      	adds	r5, #1
 8002e26:	4628      	mov	r0, r5
 8002e28:	f7fd fb7c 	bl	8000524 <__aeabi_i2d>
 8002e2c:	4652      	mov	r2, sl
 8002e2e:	465b      	mov	r3, fp
 8002e30:	f7fd fbe2 	bl	80005f8 <__aeabi_dmul>
 8002e34:	4b82      	ldr	r3, [pc, #520]	; (8003040 <_dtoa_r+0x628>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	f7fd fa28 	bl	800028c <__adddf3>
 8002e3c:	46d0      	mov	r8, sl
 8002e3e:	46d9      	mov	r9, fp
 8002e40:	4682      	mov	sl, r0
 8002e42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8002e46:	2e00      	cmp	r6, #0
 8002e48:	d158      	bne.n	8002efc <_dtoa_r+0x4e4>
 8002e4a:	4b7e      	ldr	r3, [pc, #504]	; (8003044 <_dtoa_r+0x62c>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	4640      	mov	r0, r8
 8002e50:	4649      	mov	r1, r9
 8002e52:	f7fd fa19 	bl	8000288 <__aeabi_dsub>
 8002e56:	4652      	mov	r2, sl
 8002e58:	465b      	mov	r3, fp
 8002e5a:	4680      	mov	r8, r0
 8002e5c:	4689      	mov	r9, r1
 8002e5e:	f7fd fe5b 	bl	8000b18 <__aeabi_dcmpgt>
 8002e62:	2800      	cmp	r0, #0
 8002e64:	f040 8295 	bne.w	8003392 <_dtoa_r+0x97a>
 8002e68:	4652      	mov	r2, sl
 8002e6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8002e6e:	4640      	mov	r0, r8
 8002e70:	4649      	mov	r1, r9
 8002e72:	f7fd fe33 	bl	8000adc <__aeabi_dcmplt>
 8002e76:	2800      	cmp	r0, #0
 8002e78:	f040 8289 	bne.w	800338e <_dtoa_r+0x976>
 8002e7c:	ec5b ab19 	vmov	sl, fp, d9
 8002e80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f2c0 8148 	blt.w	8003118 <_dtoa_r+0x700>
 8002e88:	9a00      	ldr	r2, [sp, #0]
 8002e8a:	2a0e      	cmp	r2, #14
 8002e8c:	f300 8144 	bgt.w	8003118 <_dtoa_r+0x700>
 8002e90:	4b67      	ldr	r3, [pc, #412]	; (8003030 <_dtoa_r+0x618>)
 8002e92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f280 80d5 	bge.w	800304c <_dtoa_r+0x634>
 8002ea2:	9b03      	ldr	r3, [sp, #12]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f300 80d1 	bgt.w	800304c <_dtoa_r+0x634>
 8002eaa:	f040 826f 	bne.w	800338c <_dtoa_r+0x974>
 8002eae:	4b65      	ldr	r3, [pc, #404]	; (8003044 <_dtoa_r+0x62c>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	4640      	mov	r0, r8
 8002eb4:	4649      	mov	r1, r9
 8002eb6:	f7fd fb9f 	bl	80005f8 <__aeabi_dmul>
 8002eba:	4652      	mov	r2, sl
 8002ebc:	465b      	mov	r3, fp
 8002ebe:	f7fd fe21 	bl	8000b04 <__aeabi_dcmpge>
 8002ec2:	9e03      	ldr	r6, [sp, #12]
 8002ec4:	4637      	mov	r7, r6
 8002ec6:	2800      	cmp	r0, #0
 8002ec8:	f040 8245 	bne.w	8003356 <_dtoa_r+0x93e>
 8002ecc:	9d01      	ldr	r5, [sp, #4]
 8002ece:	2331      	movs	r3, #49	; 0x31
 8002ed0:	f805 3b01 	strb.w	r3, [r5], #1
 8002ed4:	9b00      	ldr	r3, [sp, #0]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	e240      	b.n	800335e <_dtoa_r+0x946>
 8002edc:	07f2      	lsls	r2, r6, #31
 8002ede:	d505      	bpl.n	8002eec <_dtoa_r+0x4d4>
 8002ee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ee4:	f7fd fb88 	bl	80005f8 <__aeabi_dmul>
 8002ee8:	3501      	adds	r5, #1
 8002eea:	2301      	movs	r3, #1
 8002eec:	1076      	asrs	r6, r6, #1
 8002eee:	3708      	adds	r7, #8
 8002ef0:	e777      	b.n	8002de2 <_dtoa_r+0x3ca>
 8002ef2:	2502      	movs	r5, #2
 8002ef4:	e779      	b.n	8002dea <_dtoa_r+0x3d2>
 8002ef6:	9f00      	ldr	r7, [sp, #0]
 8002ef8:	9e03      	ldr	r6, [sp, #12]
 8002efa:	e794      	b.n	8002e26 <_dtoa_r+0x40e>
 8002efc:	9901      	ldr	r1, [sp, #4]
 8002efe:	4b4c      	ldr	r3, [pc, #304]	; (8003030 <_dtoa_r+0x618>)
 8002f00:	4431      	add	r1, r6
 8002f02:	910d      	str	r1, [sp, #52]	; 0x34
 8002f04:	9908      	ldr	r1, [sp, #32]
 8002f06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002f0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002f0e:	2900      	cmp	r1, #0
 8002f10:	d043      	beq.n	8002f9a <_dtoa_r+0x582>
 8002f12:	494d      	ldr	r1, [pc, #308]	; (8003048 <_dtoa_r+0x630>)
 8002f14:	2000      	movs	r0, #0
 8002f16:	f7fd fc99 	bl	800084c <__aeabi_ddiv>
 8002f1a:	4652      	mov	r2, sl
 8002f1c:	465b      	mov	r3, fp
 8002f1e:	f7fd f9b3 	bl	8000288 <__aeabi_dsub>
 8002f22:	9d01      	ldr	r5, [sp, #4]
 8002f24:	4682      	mov	sl, r0
 8002f26:	468b      	mov	fp, r1
 8002f28:	4649      	mov	r1, r9
 8002f2a:	4640      	mov	r0, r8
 8002f2c:	f7fd fe14 	bl	8000b58 <__aeabi_d2iz>
 8002f30:	4606      	mov	r6, r0
 8002f32:	f7fd faf7 	bl	8000524 <__aeabi_i2d>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4640      	mov	r0, r8
 8002f3c:	4649      	mov	r1, r9
 8002f3e:	f7fd f9a3 	bl	8000288 <__aeabi_dsub>
 8002f42:	3630      	adds	r6, #48	; 0x30
 8002f44:	f805 6b01 	strb.w	r6, [r5], #1
 8002f48:	4652      	mov	r2, sl
 8002f4a:	465b      	mov	r3, fp
 8002f4c:	4680      	mov	r8, r0
 8002f4e:	4689      	mov	r9, r1
 8002f50:	f7fd fdc4 	bl	8000adc <__aeabi_dcmplt>
 8002f54:	2800      	cmp	r0, #0
 8002f56:	d163      	bne.n	8003020 <_dtoa_r+0x608>
 8002f58:	4642      	mov	r2, r8
 8002f5a:	464b      	mov	r3, r9
 8002f5c:	4936      	ldr	r1, [pc, #216]	; (8003038 <_dtoa_r+0x620>)
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f7fd f992 	bl	8000288 <__aeabi_dsub>
 8002f64:	4652      	mov	r2, sl
 8002f66:	465b      	mov	r3, fp
 8002f68:	f7fd fdb8 	bl	8000adc <__aeabi_dcmplt>
 8002f6c:	2800      	cmp	r0, #0
 8002f6e:	f040 80b5 	bne.w	80030dc <_dtoa_r+0x6c4>
 8002f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f74:	429d      	cmp	r5, r3
 8002f76:	d081      	beq.n	8002e7c <_dtoa_r+0x464>
 8002f78:	4b30      	ldr	r3, [pc, #192]	; (800303c <_dtoa_r+0x624>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	4650      	mov	r0, sl
 8002f7e:	4659      	mov	r1, fp
 8002f80:	f7fd fb3a 	bl	80005f8 <__aeabi_dmul>
 8002f84:	4b2d      	ldr	r3, [pc, #180]	; (800303c <_dtoa_r+0x624>)
 8002f86:	4682      	mov	sl, r0
 8002f88:	468b      	mov	fp, r1
 8002f8a:	4640      	mov	r0, r8
 8002f8c:	4649      	mov	r1, r9
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f7fd fb32 	bl	80005f8 <__aeabi_dmul>
 8002f94:	4680      	mov	r8, r0
 8002f96:	4689      	mov	r9, r1
 8002f98:	e7c6      	b.n	8002f28 <_dtoa_r+0x510>
 8002f9a:	4650      	mov	r0, sl
 8002f9c:	4659      	mov	r1, fp
 8002f9e:	f7fd fb2b 	bl	80005f8 <__aeabi_dmul>
 8002fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002fa4:	9d01      	ldr	r5, [sp, #4]
 8002fa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8002fa8:	4682      	mov	sl, r0
 8002faa:	468b      	mov	fp, r1
 8002fac:	4649      	mov	r1, r9
 8002fae:	4640      	mov	r0, r8
 8002fb0:	f7fd fdd2 	bl	8000b58 <__aeabi_d2iz>
 8002fb4:	4606      	mov	r6, r0
 8002fb6:	f7fd fab5 	bl	8000524 <__aeabi_i2d>
 8002fba:	3630      	adds	r6, #48	; 0x30
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4640      	mov	r0, r8
 8002fc2:	4649      	mov	r1, r9
 8002fc4:	f7fd f960 	bl	8000288 <__aeabi_dsub>
 8002fc8:	f805 6b01 	strb.w	r6, [r5], #1
 8002fcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002fce:	429d      	cmp	r5, r3
 8002fd0:	4680      	mov	r8, r0
 8002fd2:	4689      	mov	r9, r1
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	d124      	bne.n	8003024 <_dtoa_r+0x60c>
 8002fda:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <_dtoa_r+0x630>)
 8002fdc:	4650      	mov	r0, sl
 8002fde:	4659      	mov	r1, fp
 8002fe0:	f7fd f954 	bl	800028c <__adddf3>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4640      	mov	r0, r8
 8002fea:	4649      	mov	r1, r9
 8002fec:	f7fd fd94 	bl	8000b18 <__aeabi_dcmpgt>
 8002ff0:	2800      	cmp	r0, #0
 8002ff2:	d173      	bne.n	80030dc <_dtoa_r+0x6c4>
 8002ff4:	4652      	mov	r2, sl
 8002ff6:	465b      	mov	r3, fp
 8002ff8:	4913      	ldr	r1, [pc, #76]	; (8003048 <_dtoa_r+0x630>)
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	f7fd f944 	bl	8000288 <__aeabi_dsub>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4640      	mov	r0, r8
 8003006:	4649      	mov	r1, r9
 8003008:	f7fd fd68 	bl	8000adc <__aeabi_dcmplt>
 800300c:	2800      	cmp	r0, #0
 800300e:	f43f af35 	beq.w	8002e7c <_dtoa_r+0x464>
 8003012:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003014:	1e6b      	subs	r3, r5, #1
 8003016:	930f      	str	r3, [sp, #60]	; 0x3c
 8003018:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800301c:	2b30      	cmp	r3, #48	; 0x30
 800301e:	d0f8      	beq.n	8003012 <_dtoa_r+0x5fa>
 8003020:	9700      	str	r7, [sp, #0]
 8003022:	e049      	b.n	80030b8 <_dtoa_r+0x6a0>
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <_dtoa_r+0x624>)
 8003026:	f7fd fae7 	bl	80005f8 <__aeabi_dmul>
 800302a:	4680      	mov	r8, r0
 800302c:	4689      	mov	r9, r1
 800302e:	e7bd      	b.n	8002fac <_dtoa_r+0x594>
 8003030:	08004be0 	.word	0x08004be0
 8003034:	08004bb8 	.word	0x08004bb8
 8003038:	3ff00000 	.word	0x3ff00000
 800303c:	40240000 	.word	0x40240000
 8003040:	401c0000 	.word	0x401c0000
 8003044:	40140000 	.word	0x40140000
 8003048:	3fe00000 	.word	0x3fe00000
 800304c:	9d01      	ldr	r5, [sp, #4]
 800304e:	4656      	mov	r6, sl
 8003050:	465f      	mov	r7, fp
 8003052:	4642      	mov	r2, r8
 8003054:	464b      	mov	r3, r9
 8003056:	4630      	mov	r0, r6
 8003058:	4639      	mov	r1, r7
 800305a:	f7fd fbf7 	bl	800084c <__aeabi_ddiv>
 800305e:	f7fd fd7b 	bl	8000b58 <__aeabi_d2iz>
 8003062:	4682      	mov	sl, r0
 8003064:	f7fd fa5e 	bl	8000524 <__aeabi_i2d>
 8003068:	4642      	mov	r2, r8
 800306a:	464b      	mov	r3, r9
 800306c:	f7fd fac4 	bl	80005f8 <__aeabi_dmul>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4630      	mov	r0, r6
 8003076:	4639      	mov	r1, r7
 8003078:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800307c:	f7fd f904 	bl	8000288 <__aeabi_dsub>
 8003080:	f805 6b01 	strb.w	r6, [r5], #1
 8003084:	9e01      	ldr	r6, [sp, #4]
 8003086:	9f03      	ldr	r7, [sp, #12]
 8003088:	1bae      	subs	r6, r5, r6
 800308a:	42b7      	cmp	r7, r6
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	d135      	bne.n	80030fe <_dtoa_r+0x6e6>
 8003092:	f7fd f8fb 	bl	800028c <__adddf3>
 8003096:	4642      	mov	r2, r8
 8003098:	464b      	mov	r3, r9
 800309a:	4606      	mov	r6, r0
 800309c:	460f      	mov	r7, r1
 800309e:	f7fd fd3b 	bl	8000b18 <__aeabi_dcmpgt>
 80030a2:	b9d0      	cbnz	r0, 80030da <_dtoa_r+0x6c2>
 80030a4:	4642      	mov	r2, r8
 80030a6:	464b      	mov	r3, r9
 80030a8:	4630      	mov	r0, r6
 80030aa:	4639      	mov	r1, r7
 80030ac:	f7fd fd0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80030b0:	b110      	cbz	r0, 80030b8 <_dtoa_r+0x6a0>
 80030b2:	f01a 0f01 	tst.w	sl, #1
 80030b6:	d110      	bne.n	80030da <_dtoa_r+0x6c2>
 80030b8:	4620      	mov	r0, r4
 80030ba:	ee18 1a10 	vmov	r1, s16
 80030be:	f000 fd05 	bl	8003acc <_Bfree>
 80030c2:	2300      	movs	r3, #0
 80030c4:	9800      	ldr	r0, [sp, #0]
 80030c6:	702b      	strb	r3, [r5, #0]
 80030c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80030ca:	3001      	adds	r0, #1
 80030cc:	6018      	str	r0, [r3, #0]
 80030ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f43f acf1 	beq.w	8002ab8 <_dtoa_r+0xa0>
 80030d6:	601d      	str	r5, [r3, #0]
 80030d8:	e4ee      	b.n	8002ab8 <_dtoa_r+0xa0>
 80030da:	9f00      	ldr	r7, [sp, #0]
 80030dc:	462b      	mov	r3, r5
 80030de:	461d      	mov	r5, r3
 80030e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80030e4:	2a39      	cmp	r2, #57	; 0x39
 80030e6:	d106      	bne.n	80030f6 <_dtoa_r+0x6de>
 80030e8:	9a01      	ldr	r2, [sp, #4]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d1f7      	bne.n	80030de <_dtoa_r+0x6c6>
 80030ee:	9901      	ldr	r1, [sp, #4]
 80030f0:	2230      	movs	r2, #48	; 0x30
 80030f2:	3701      	adds	r7, #1
 80030f4:	700a      	strb	r2, [r1, #0]
 80030f6:	781a      	ldrb	r2, [r3, #0]
 80030f8:	3201      	adds	r2, #1
 80030fa:	701a      	strb	r2, [r3, #0]
 80030fc:	e790      	b.n	8003020 <_dtoa_r+0x608>
 80030fe:	4ba6      	ldr	r3, [pc, #664]	; (8003398 <_dtoa_r+0x980>)
 8003100:	2200      	movs	r2, #0
 8003102:	f7fd fa79 	bl	80005f8 <__aeabi_dmul>
 8003106:	2200      	movs	r2, #0
 8003108:	2300      	movs	r3, #0
 800310a:	4606      	mov	r6, r0
 800310c:	460f      	mov	r7, r1
 800310e:	f7fd fcdb 	bl	8000ac8 <__aeabi_dcmpeq>
 8003112:	2800      	cmp	r0, #0
 8003114:	d09d      	beq.n	8003052 <_dtoa_r+0x63a>
 8003116:	e7cf      	b.n	80030b8 <_dtoa_r+0x6a0>
 8003118:	9a08      	ldr	r2, [sp, #32]
 800311a:	2a00      	cmp	r2, #0
 800311c:	f000 80d7 	beq.w	80032ce <_dtoa_r+0x8b6>
 8003120:	9a06      	ldr	r2, [sp, #24]
 8003122:	2a01      	cmp	r2, #1
 8003124:	f300 80ba 	bgt.w	800329c <_dtoa_r+0x884>
 8003128:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800312a:	2a00      	cmp	r2, #0
 800312c:	f000 80b2 	beq.w	8003294 <_dtoa_r+0x87c>
 8003130:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003134:	9e07      	ldr	r6, [sp, #28]
 8003136:	9d04      	ldr	r5, [sp, #16]
 8003138:	9a04      	ldr	r2, [sp, #16]
 800313a:	441a      	add	r2, r3
 800313c:	9204      	str	r2, [sp, #16]
 800313e:	9a05      	ldr	r2, [sp, #20]
 8003140:	2101      	movs	r1, #1
 8003142:	441a      	add	r2, r3
 8003144:	4620      	mov	r0, r4
 8003146:	9205      	str	r2, [sp, #20]
 8003148:	f000 fd78 	bl	8003c3c <__i2b>
 800314c:	4607      	mov	r7, r0
 800314e:	2d00      	cmp	r5, #0
 8003150:	dd0c      	ble.n	800316c <_dtoa_r+0x754>
 8003152:	9b05      	ldr	r3, [sp, #20]
 8003154:	2b00      	cmp	r3, #0
 8003156:	dd09      	ble.n	800316c <_dtoa_r+0x754>
 8003158:	42ab      	cmp	r3, r5
 800315a:	9a04      	ldr	r2, [sp, #16]
 800315c:	bfa8      	it	ge
 800315e:	462b      	movge	r3, r5
 8003160:	1ad2      	subs	r2, r2, r3
 8003162:	9204      	str	r2, [sp, #16]
 8003164:	9a05      	ldr	r2, [sp, #20]
 8003166:	1aed      	subs	r5, r5, r3
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	9305      	str	r3, [sp, #20]
 800316c:	9b07      	ldr	r3, [sp, #28]
 800316e:	b31b      	cbz	r3, 80031b8 <_dtoa_r+0x7a0>
 8003170:	9b08      	ldr	r3, [sp, #32]
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 80af 	beq.w	80032d6 <_dtoa_r+0x8be>
 8003178:	2e00      	cmp	r6, #0
 800317a:	dd13      	ble.n	80031a4 <_dtoa_r+0x78c>
 800317c:	4639      	mov	r1, r7
 800317e:	4632      	mov	r2, r6
 8003180:	4620      	mov	r0, r4
 8003182:	f000 fe1b 	bl	8003dbc <__pow5mult>
 8003186:	ee18 2a10 	vmov	r2, s16
 800318a:	4601      	mov	r1, r0
 800318c:	4607      	mov	r7, r0
 800318e:	4620      	mov	r0, r4
 8003190:	f000 fd6a 	bl	8003c68 <__multiply>
 8003194:	ee18 1a10 	vmov	r1, s16
 8003198:	4680      	mov	r8, r0
 800319a:	4620      	mov	r0, r4
 800319c:	f000 fc96 	bl	8003acc <_Bfree>
 80031a0:	ee08 8a10 	vmov	s16, r8
 80031a4:	9b07      	ldr	r3, [sp, #28]
 80031a6:	1b9a      	subs	r2, r3, r6
 80031a8:	d006      	beq.n	80031b8 <_dtoa_r+0x7a0>
 80031aa:	ee18 1a10 	vmov	r1, s16
 80031ae:	4620      	mov	r0, r4
 80031b0:	f000 fe04 	bl	8003dbc <__pow5mult>
 80031b4:	ee08 0a10 	vmov	s16, r0
 80031b8:	2101      	movs	r1, #1
 80031ba:	4620      	mov	r0, r4
 80031bc:	f000 fd3e 	bl	8003c3c <__i2b>
 80031c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	4606      	mov	r6, r0
 80031c6:	f340 8088 	ble.w	80032da <_dtoa_r+0x8c2>
 80031ca:	461a      	mov	r2, r3
 80031cc:	4601      	mov	r1, r0
 80031ce:	4620      	mov	r0, r4
 80031d0:	f000 fdf4 	bl	8003dbc <__pow5mult>
 80031d4:	9b06      	ldr	r3, [sp, #24]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	4606      	mov	r6, r0
 80031da:	f340 8081 	ble.w	80032e0 <_dtoa_r+0x8c8>
 80031de:	f04f 0800 	mov.w	r8, #0
 80031e2:	6933      	ldr	r3, [r6, #16]
 80031e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80031e8:	6918      	ldr	r0, [r3, #16]
 80031ea:	f000 fcd7 	bl	8003b9c <__hi0bits>
 80031ee:	f1c0 0020 	rsb	r0, r0, #32
 80031f2:	9b05      	ldr	r3, [sp, #20]
 80031f4:	4418      	add	r0, r3
 80031f6:	f010 001f 	ands.w	r0, r0, #31
 80031fa:	f000 8092 	beq.w	8003322 <_dtoa_r+0x90a>
 80031fe:	f1c0 0320 	rsb	r3, r0, #32
 8003202:	2b04      	cmp	r3, #4
 8003204:	f340 808a 	ble.w	800331c <_dtoa_r+0x904>
 8003208:	f1c0 001c 	rsb	r0, r0, #28
 800320c:	9b04      	ldr	r3, [sp, #16]
 800320e:	4403      	add	r3, r0
 8003210:	9304      	str	r3, [sp, #16]
 8003212:	9b05      	ldr	r3, [sp, #20]
 8003214:	4403      	add	r3, r0
 8003216:	4405      	add	r5, r0
 8003218:	9305      	str	r3, [sp, #20]
 800321a:	9b04      	ldr	r3, [sp, #16]
 800321c:	2b00      	cmp	r3, #0
 800321e:	dd07      	ble.n	8003230 <_dtoa_r+0x818>
 8003220:	ee18 1a10 	vmov	r1, s16
 8003224:	461a      	mov	r2, r3
 8003226:	4620      	mov	r0, r4
 8003228:	f000 fe22 	bl	8003e70 <__lshift>
 800322c:	ee08 0a10 	vmov	s16, r0
 8003230:	9b05      	ldr	r3, [sp, #20]
 8003232:	2b00      	cmp	r3, #0
 8003234:	dd05      	ble.n	8003242 <_dtoa_r+0x82a>
 8003236:	4631      	mov	r1, r6
 8003238:	461a      	mov	r2, r3
 800323a:	4620      	mov	r0, r4
 800323c:	f000 fe18 	bl	8003e70 <__lshift>
 8003240:	4606      	mov	r6, r0
 8003242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003244:	2b00      	cmp	r3, #0
 8003246:	d06e      	beq.n	8003326 <_dtoa_r+0x90e>
 8003248:	ee18 0a10 	vmov	r0, s16
 800324c:	4631      	mov	r1, r6
 800324e:	f000 fe7f 	bl	8003f50 <__mcmp>
 8003252:	2800      	cmp	r0, #0
 8003254:	da67      	bge.n	8003326 <_dtoa_r+0x90e>
 8003256:	9b00      	ldr	r3, [sp, #0]
 8003258:	3b01      	subs	r3, #1
 800325a:	ee18 1a10 	vmov	r1, s16
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	220a      	movs	r2, #10
 8003262:	2300      	movs	r3, #0
 8003264:	4620      	mov	r0, r4
 8003266:	f000 fc53 	bl	8003b10 <__multadd>
 800326a:	9b08      	ldr	r3, [sp, #32]
 800326c:	ee08 0a10 	vmov	s16, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 81b1 	beq.w	80035d8 <_dtoa_r+0xbc0>
 8003276:	2300      	movs	r3, #0
 8003278:	4639      	mov	r1, r7
 800327a:	220a      	movs	r2, #10
 800327c:	4620      	mov	r0, r4
 800327e:	f000 fc47 	bl	8003b10 <__multadd>
 8003282:	9b02      	ldr	r3, [sp, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	4607      	mov	r7, r0
 8003288:	f300 808e 	bgt.w	80033a8 <_dtoa_r+0x990>
 800328c:	9b06      	ldr	r3, [sp, #24]
 800328e:	2b02      	cmp	r3, #2
 8003290:	dc51      	bgt.n	8003336 <_dtoa_r+0x91e>
 8003292:	e089      	b.n	80033a8 <_dtoa_r+0x990>
 8003294:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003296:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800329a:	e74b      	b.n	8003134 <_dtoa_r+0x71c>
 800329c:	9b03      	ldr	r3, [sp, #12]
 800329e:	1e5e      	subs	r6, r3, #1
 80032a0:	9b07      	ldr	r3, [sp, #28]
 80032a2:	42b3      	cmp	r3, r6
 80032a4:	bfbf      	itttt	lt
 80032a6:	9b07      	ldrlt	r3, [sp, #28]
 80032a8:	9607      	strlt	r6, [sp, #28]
 80032aa:	1af2      	sublt	r2, r6, r3
 80032ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80032ae:	bfb6      	itet	lt
 80032b0:	189b      	addlt	r3, r3, r2
 80032b2:	1b9e      	subge	r6, r3, r6
 80032b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80032b6:	9b03      	ldr	r3, [sp, #12]
 80032b8:	bfb8      	it	lt
 80032ba:	2600      	movlt	r6, #0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	bfb7      	itett	lt
 80032c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80032c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80032c8:	1a9d      	sublt	r5, r3, r2
 80032ca:	2300      	movlt	r3, #0
 80032cc:	e734      	b.n	8003138 <_dtoa_r+0x720>
 80032ce:	9e07      	ldr	r6, [sp, #28]
 80032d0:	9d04      	ldr	r5, [sp, #16]
 80032d2:	9f08      	ldr	r7, [sp, #32]
 80032d4:	e73b      	b.n	800314e <_dtoa_r+0x736>
 80032d6:	9a07      	ldr	r2, [sp, #28]
 80032d8:	e767      	b.n	80031aa <_dtoa_r+0x792>
 80032da:	9b06      	ldr	r3, [sp, #24]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	dc18      	bgt.n	8003312 <_dtoa_r+0x8fa>
 80032e0:	f1ba 0f00 	cmp.w	sl, #0
 80032e4:	d115      	bne.n	8003312 <_dtoa_r+0x8fa>
 80032e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80032ea:	b993      	cbnz	r3, 8003312 <_dtoa_r+0x8fa>
 80032ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80032f0:	0d1b      	lsrs	r3, r3, #20
 80032f2:	051b      	lsls	r3, r3, #20
 80032f4:	b183      	cbz	r3, 8003318 <_dtoa_r+0x900>
 80032f6:	9b04      	ldr	r3, [sp, #16]
 80032f8:	3301      	adds	r3, #1
 80032fa:	9304      	str	r3, [sp, #16]
 80032fc:	9b05      	ldr	r3, [sp, #20]
 80032fe:	3301      	adds	r3, #1
 8003300:	9305      	str	r3, [sp, #20]
 8003302:	f04f 0801 	mov.w	r8, #1
 8003306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003308:	2b00      	cmp	r3, #0
 800330a:	f47f af6a 	bne.w	80031e2 <_dtoa_r+0x7ca>
 800330e:	2001      	movs	r0, #1
 8003310:	e76f      	b.n	80031f2 <_dtoa_r+0x7da>
 8003312:	f04f 0800 	mov.w	r8, #0
 8003316:	e7f6      	b.n	8003306 <_dtoa_r+0x8ee>
 8003318:	4698      	mov	r8, r3
 800331a:	e7f4      	b.n	8003306 <_dtoa_r+0x8ee>
 800331c:	f43f af7d 	beq.w	800321a <_dtoa_r+0x802>
 8003320:	4618      	mov	r0, r3
 8003322:	301c      	adds	r0, #28
 8003324:	e772      	b.n	800320c <_dtoa_r+0x7f4>
 8003326:	9b03      	ldr	r3, [sp, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	dc37      	bgt.n	800339c <_dtoa_r+0x984>
 800332c:	9b06      	ldr	r3, [sp, #24]
 800332e:	2b02      	cmp	r3, #2
 8003330:	dd34      	ble.n	800339c <_dtoa_r+0x984>
 8003332:	9b03      	ldr	r3, [sp, #12]
 8003334:	9302      	str	r3, [sp, #8]
 8003336:	9b02      	ldr	r3, [sp, #8]
 8003338:	b96b      	cbnz	r3, 8003356 <_dtoa_r+0x93e>
 800333a:	4631      	mov	r1, r6
 800333c:	2205      	movs	r2, #5
 800333e:	4620      	mov	r0, r4
 8003340:	f000 fbe6 	bl	8003b10 <__multadd>
 8003344:	4601      	mov	r1, r0
 8003346:	4606      	mov	r6, r0
 8003348:	ee18 0a10 	vmov	r0, s16
 800334c:	f000 fe00 	bl	8003f50 <__mcmp>
 8003350:	2800      	cmp	r0, #0
 8003352:	f73f adbb 	bgt.w	8002ecc <_dtoa_r+0x4b4>
 8003356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003358:	9d01      	ldr	r5, [sp, #4]
 800335a:	43db      	mvns	r3, r3
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	f04f 0800 	mov.w	r8, #0
 8003362:	4631      	mov	r1, r6
 8003364:	4620      	mov	r0, r4
 8003366:	f000 fbb1 	bl	8003acc <_Bfree>
 800336a:	2f00      	cmp	r7, #0
 800336c:	f43f aea4 	beq.w	80030b8 <_dtoa_r+0x6a0>
 8003370:	f1b8 0f00 	cmp.w	r8, #0
 8003374:	d005      	beq.n	8003382 <_dtoa_r+0x96a>
 8003376:	45b8      	cmp	r8, r7
 8003378:	d003      	beq.n	8003382 <_dtoa_r+0x96a>
 800337a:	4641      	mov	r1, r8
 800337c:	4620      	mov	r0, r4
 800337e:	f000 fba5 	bl	8003acc <_Bfree>
 8003382:	4639      	mov	r1, r7
 8003384:	4620      	mov	r0, r4
 8003386:	f000 fba1 	bl	8003acc <_Bfree>
 800338a:	e695      	b.n	80030b8 <_dtoa_r+0x6a0>
 800338c:	2600      	movs	r6, #0
 800338e:	4637      	mov	r7, r6
 8003390:	e7e1      	b.n	8003356 <_dtoa_r+0x93e>
 8003392:	9700      	str	r7, [sp, #0]
 8003394:	4637      	mov	r7, r6
 8003396:	e599      	b.n	8002ecc <_dtoa_r+0x4b4>
 8003398:	40240000 	.word	0x40240000
 800339c:	9b08      	ldr	r3, [sp, #32]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 80ca 	beq.w	8003538 <_dtoa_r+0xb20>
 80033a4:	9b03      	ldr	r3, [sp, #12]
 80033a6:	9302      	str	r3, [sp, #8]
 80033a8:	2d00      	cmp	r5, #0
 80033aa:	dd05      	ble.n	80033b8 <_dtoa_r+0x9a0>
 80033ac:	4639      	mov	r1, r7
 80033ae:	462a      	mov	r2, r5
 80033b0:	4620      	mov	r0, r4
 80033b2:	f000 fd5d 	bl	8003e70 <__lshift>
 80033b6:	4607      	mov	r7, r0
 80033b8:	f1b8 0f00 	cmp.w	r8, #0
 80033bc:	d05b      	beq.n	8003476 <_dtoa_r+0xa5e>
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4620      	mov	r0, r4
 80033c2:	f000 fb43 	bl	8003a4c <_Balloc>
 80033c6:	4605      	mov	r5, r0
 80033c8:	b928      	cbnz	r0, 80033d6 <_dtoa_r+0x9be>
 80033ca:	4b87      	ldr	r3, [pc, #540]	; (80035e8 <_dtoa_r+0xbd0>)
 80033cc:	4602      	mov	r2, r0
 80033ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80033d2:	f7ff bb3b 	b.w	8002a4c <_dtoa_r+0x34>
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	3202      	adds	r2, #2
 80033da:	0092      	lsls	r2, r2, #2
 80033dc:	f107 010c 	add.w	r1, r7, #12
 80033e0:	300c      	adds	r0, #12
 80033e2:	f7fe fd3d 	bl	8001e60 <memcpy>
 80033e6:	2201      	movs	r2, #1
 80033e8:	4629      	mov	r1, r5
 80033ea:	4620      	mov	r0, r4
 80033ec:	f000 fd40 	bl	8003e70 <__lshift>
 80033f0:	9b01      	ldr	r3, [sp, #4]
 80033f2:	f103 0901 	add.w	r9, r3, #1
 80033f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80033fa:	4413      	add	r3, r2
 80033fc:	9305      	str	r3, [sp, #20]
 80033fe:	f00a 0301 	and.w	r3, sl, #1
 8003402:	46b8      	mov	r8, r7
 8003404:	9304      	str	r3, [sp, #16]
 8003406:	4607      	mov	r7, r0
 8003408:	4631      	mov	r1, r6
 800340a:	ee18 0a10 	vmov	r0, s16
 800340e:	f7ff fa75 	bl	80028fc <quorem>
 8003412:	4641      	mov	r1, r8
 8003414:	9002      	str	r0, [sp, #8]
 8003416:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800341a:	ee18 0a10 	vmov	r0, s16
 800341e:	f000 fd97 	bl	8003f50 <__mcmp>
 8003422:	463a      	mov	r2, r7
 8003424:	9003      	str	r0, [sp, #12]
 8003426:	4631      	mov	r1, r6
 8003428:	4620      	mov	r0, r4
 800342a:	f000 fdad 	bl	8003f88 <__mdiff>
 800342e:	68c2      	ldr	r2, [r0, #12]
 8003430:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8003434:	4605      	mov	r5, r0
 8003436:	bb02      	cbnz	r2, 800347a <_dtoa_r+0xa62>
 8003438:	4601      	mov	r1, r0
 800343a:	ee18 0a10 	vmov	r0, s16
 800343e:	f000 fd87 	bl	8003f50 <__mcmp>
 8003442:	4602      	mov	r2, r0
 8003444:	4629      	mov	r1, r5
 8003446:	4620      	mov	r0, r4
 8003448:	9207      	str	r2, [sp, #28]
 800344a:	f000 fb3f 	bl	8003acc <_Bfree>
 800344e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8003452:	ea43 0102 	orr.w	r1, r3, r2
 8003456:	9b04      	ldr	r3, [sp, #16]
 8003458:	430b      	orrs	r3, r1
 800345a:	464d      	mov	r5, r9
 800345c:	d10f      	bne.n	800347e <_dtoa_r+0xa66>
 800345e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003462:	d02a      	beq.n	80034ba <_dtoa_r+0xaa2>
 8003464:	9b03      	ldr	r3, [sp, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	dd02      	ble.n	8003470 <_dtoa_r+0xa58>
 800346a:	9b02      	ldr	r3, [sp, #8]
 800346c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8003470:	f88b a000 	strb.w	sl, [fp]
 8003474:	e775      	b.n	8003362 <_dtoa_r+0x94a>
 8003476:	4638      	mov	r0, r7
 8003478:	e7ba      	b.n	80033f0 <_dtoa_r+0x9d8>
 800347a:	2201      	movs	r2, #1
 800347c:	e7e2      	b.n	8003444 <_dtoa_r+0xa2c>
 800347e:	9b03      	ldr	r3, [sp, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	db04      	blt.n	800348e <_dtoa_r+0xa76>
 8003484:	9906      	ldr	r1, [sp, #24]
 8003486:	430b      	orrs	r3, r1
 8003488:	9904      	ldr	r1, [sp, #16]
 800348a:	430b      	orrs	r3, r1
 800348c:	d122      	bne.n	80034d4 <_dtoa_r+0xabc>
 800348e:	2a00      	cmp	r2, #0
 8003490:	ddee      	ble.n	8003470 <_dtoa_r+0xa58>
 8003492:	ee18 1a10 	vmov	r1, s16
 8003496:	2201      	movs	r2, #1
 8003498:	4620      	mov	r0, r4
 800349a:	f000 fce9 	bl	8003e70 <__lshift>
 800349e:	4631      	mov	r1, r6
 80034a0:	ee08 0a10 	vmov	s16, r0
 80034a4:	f000 fd54 	bl	8003f50 <__mcmp>
 80034a8:	2800      	cmp	r0, #0
 80034aa:	dc03      	bgt.n	80034b4 <_dtoa_r+0xa9c>
 80034ac:	d1e0      	bne.n	8003470 <_dtoa_r+0xa58>
 80034ae:	f01a 0f01 	tst.w	sl, #1
 80034b2:	d0dd      	beq.n	8003470 <_dtoa_r+0xa58>
 80034b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80034b8:	d1d7      	bne.n	800346a <_dtoa_r+0xa52>
 80034ba:	2339      	movs	r3, #57	; 0x39
 80034bc:	f88b 3000 	strb.w	r3, [fp]
 80034c0:	462b      	mov	r3, r5
 80034c2:	461d      	mov	r5, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80034ca:	2a39      	cmp	r2, #57	; 0x39
 80034cc:	d071      	beq.n	80035b2 <_dtoa_r+0xb9a>
 80034ce:	3201      	adds	r2, #1
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	e746      	b.n	8003362 <_dtoa_r+0x94a>
 80034d4:	2a00      	cmp	r2, #0
 80034d6:	dd07      	ble.n	80034e8 <_dtoa_r+0xad0>
 80034d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80034dc:	d0ed      	beq.n	80034ba <_dtoa_r+0xaa2>
 80034de:	f10a 0301 	add.w	r3, sl, #1
 80034e2:	f88b 3000 	strb.w	r3, [fp]
 80034e6:	e73c      	b.n	8003362 <_dtoa_r+0x94a>
 80034e8:	9b05      	ldr	r3, [sp, #20]
 80034ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80034ee:	4599      	cmp	r9, r3
 80034f0:	d047      	beq.n	8003582 <_dtoa_r+0xb6a>
 80034f2:	ee18 1a10 	vmov	r1, s16
 80034f6:	2300      	movs	r3, #0
 80034f8:	220a      	movs	r2, #10
 80034fa:	4620      	mov	r0, r4
 80034fc:	f000 fb08 	bl	8003b10 <__multadd>
 8003500:	45b8      	cmp	r8, r7
 8003502:	ee08 0a10 	vmov	s16, r0
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	f04f 020a 	mov.w	r2, #10
 800350e:	4641      	mov	r1, r8
 8003510:	4620      	mov	r0, r4
 8003512:	d106      	bne.n	8003522 <_dtoa_r+0xb0a>
 8003514:	f000 fafc 	bl	8003b10 <__multadd>
 8003518:	4680      	mov	r8, r0
 800351a:	4607      	mov	r7, r0
 800351c:	f109 0901 	add.w	r9, r9, #1
 8003520:	e772      	b.n	8003408 <_dtoa_r+0x9f0>
 8003522:	f000 faf5 	bl	8003b10 <__multadd>
 8003526:	4639      	mov	r1, r7
 8003528:	4680      	mov	r8, r0
 800352a:	2300      	movs	r3, #0
 800352c:	220a      	movs	r2, #10
 800352e:	4620      	mov	r0, r4
 8003530:	f000 faee 	bl	8003b10 <__multadd>
 8003534:	4607      	mov	r7, r0
 8003536:	e7f1      	b.n	800351c <_dtoa_r+0xb04>
 8003538:	9b03      	ldr	r3, [sp, #12]
 800353a:	9302      	str	r3, [sp, #8]
 800353c:	9d01      	ldr	r5, [sp, #4]
 800353e:	ee18 0a10 	vmov	r0, s16
 8003542:	4631      	mov	r1, r6
 8003544:	f7ff f9da 	bl	80028fc <quorem>
 8003548:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800354c:	9b01      	ldr	r3, [sp, #4]
 800354e:	f805 ab01 	strb.w	sl, [r5], #1
 8003552:	1aea      	subs	r2, r5, r3
 8003554:	9b02      	ldr	r3, [sp, #8]
 8003556:	4293      	cmp	r3, r2
 8003558:	dd09      	ble.n	800356e <_dtoa_r+0xb56>
 800355a:	ee18 1a10 	vmov	r1, s16
 800355e:	2300      	movs	r3, #0
 8003560:	220a      	movs	r2, #10
 8003562:	4620      	mov	r0, r4
 8003564:	f000 fad4 	bl	8003b10 <__multadd>
 8003568:	ee08 0a10 	vmov	s16, r0
 800356c:	e7e7      	b.n	800353e <_dtoa_r+0xb26>
 800356e:	9b02      	ldr	r3, [sp, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	bfc8      	it	gt
 8003574:	461d      	movgt	r5, r3
 8003576:	9b01      	ldr	r3, [sp, #4]
 8003578:	bfd8      	it	le
 800357a:	2501      	movle	r5, #1
 800357c:	441d      	add	r5, r3
 800357e:	f04f 0800 	mov.w	r8, #0
 8003582:	ee18 1a10 	vmov	r1, s16
 8003586:	2201      	movs	r2, #1
 8003588:	4620      	mov	r0, r4
 800358a:	f000 fc71 	bl	8003e70 <__lshift>
 800358e:	4631      	mov	r1, r6
 8003590:	ee08 0a10 	vmov	s16, r0
 8003594:	f000 fcdc 	bl	8003f50 <__mcmp>
 8003598:	2800      	cmp	r0, #0
 800359a:	dc91      	bgt.n	80034c0 <_dtoa_r+0xaa8>
 800359c:	d102      	bne.n	80035a4 <_dtoa_r+0xb8c>
 800359e:	f01a 0f01 	tst.w	sl, #1
 80035a2:	d18d      	bne.n	80034c0 <_dtoa_r+0xaa8>
 80035a4:	462b      	mov	r3, r5
 80035a6:	461d      	mov	r5, r3
 80035a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80035ac:	2a30      	cmp	r2, #48	; 0x30
 80035ae:	d0fa      	beq.n	80035a6 <_dtoa_r+0xb8e>
 80035b0:	e6d7      	b.n	8003362 <_dtoa_r+0x94a>
 80035b2:	9a01      	ldr	r2, [sp, #4]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d184      	bne.n	80034c2 <_dtoa_r+0xaaa>
 80035b8:	9b00      	ldr	r3, [sp, #0]
 80035ba:	3301      	adds	r3, #1
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	2331      	movs	r3, #49	; 0x31
 80035c0:	7013      	strb	r3, [r2, #0]
 80035c2:	e6ce      	b.n	8003362 <_dtoa_r+0x94a>
 80035c4:	4b09      	ldr	r3, [pc, #36]	; (80035ec <_dtoa_r+0xbd4>)
 80035c6:	f7ff ba95 	b.w	8002af4 <_dtoa_r+0xdc>
 80035ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f47f aa6e 	bne.w	8002aae <_dtoa_r+0x96>
 80035d2:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <_dtoa_r+0xbd8>)
 80035d4:	f7ff ba8e 	b.w	8002af4 <_dtoa_r+0xdc>
 80035d8:	9b02      	ldr	r3, [sp, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	dcae      	bgt.n	800353c <_dtoa_r+0xb24>
 80035de:	9b06      	ldr	r3, [sp, #24]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	f73f aea8 	bgt.w	8003336 <_dtoa_r+0x91e>
 80035e6:	e7a9      	b.n	800353c <_dtoa_r+0xb24>
 80035e8:	08004ae7 	.word	0x08004ae7
 80035ec:	08004a44 	.word	0x08004a44
 80035f0:	08004a68 	.word	0x08004a68

080035f4 <__sflush_r>:
 80035f4:	898a      	ldrh	r2, [r1, #12]
 80035f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035fa:	4605      	mov	r5, r0
 80035fc:	0710      	lsls	r0, r2, #28
 80035fe:	460c      	mov	r4, r1
 8003600:	d458      	bmi.n	80036b4 <__sflush_r+0xc0>
 8003602:	684b      	ldr	r3, [r1, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	dc05      	bgt.n	8003614 <__sflush_r+0x20>
 8003608:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	dc02      	bgt.n	8003614 <__sflush_r+0x20>
 800360e:	2000      	movs	r0, #0
 8003610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003614:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003616:	2e00      	cmp	r6, #0
 8003618:	d0f9      	beq.n	800360e <__sflush_r+0x1a>
 800361a:	2300      	movs	r3, #0
 800361c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003620:	682f      	ldr	r7, [r5, #0]
 8003622:	602b      	str	r3, [r5, #0]
 8003624:	d032      	beq.n	800368c <__sflush_r+0x98>
 8003626:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003628:	89a3      	ldrh	r3, [r4, #12]
 800362a:	075a      	lsls	r2, r3, #29
 800362c:	d505      	bpl.n	800363a <__sflush_r+0x46>
 800362e:	6863      	ldr	r3, [r4, #4]
 8003630:	1ac0      	subs	r0, r0, r3
 8003632:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003634:	b10b      	cbz	r3, 800363a <__sflush_r+0x46>
 8003636:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003638:	1ac0      	subs	r0, r0, r3
 800363a:	2300      	movs	r3, #0
 800363c:	4602      	mov	r2, r0
 800363e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003640:	6a21      	ldr	r1, [r4, #32]
 8003642:	4628      	mov	r0, r5
 8003644:	47b0      	blx	r6
 8003646:	1c43      	adds	r3, r0, #1
 8003648:	89a3      	ldrh	r3, [r4, #12]
 800364a:	d106      	bne.n	800365a <__sflush_r+0x66>
 800364c:	6829      	ldr	r1, [r5, #0]
 800364e:	291d      	cmp	r1, #29
 8003650:	d82c      	bhi.n	80036ac <__sflush_r+0xb8>
 8003652:	4a2a      	ldr	r2, [pc, #168]	; (80036fc <__sflush_r+0x108>)
 8003654:	40ca      	lsrs	r2, r1
 8003656:	07d6      	lsls	r6, r2, #31
 8003658:	d528      	bpl.n	80036ac <__sflush_r+0xb8>
 800365a:	2200      	movs	r2, #0
 800365c:	6062      	str	r2, [r4, #4]
 800365e:	04d9      	lsls	r1, r3, #19
 8003660:	6922      	ldr	r2, [r4, #16]
 8003662:	6022      	str	r2, [r4, #0]
 8003664:	d504      	bpl.n	8003670 <__sflush_r+0x7c>
 8003666:	1c42      	adds	r2, r0, #1
 8003668:	d101      	bne.n	800366e <__sflush_r+0x7a>
 800366a:	682b      	ldr	r3, [r5, #0]
 800366c:	b903      	cbnz	r3, 8003670 <__sflush_r+0x7c>
 800366e:	6560      	str	r0, [r4, #84]	; 0x54
 8003670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003672:	602f      	str	r7, [r5, #0]
 8003674:	2900      	cmp	r1, #0
 8003676:	d0ca      	beq.n	800360e <__sflush_r+0x1a>
 8003678:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800367c:	4299      	cmp	r1, r3
 800367e:	d002      	beq.n	8003686 <__sflush_r+0x92>
 8003680:	4628      	mov	r0, r5
 8003682:	f000 fd7d 	bl	8004180 <_free_r>
 8003686:	2000      	movs	r0, #0
 8003688:	6360      	str	r0, [r4, #52]	; 0x34
 800368a:	e7c1      	b.n	8003610 <__sflush_r+0x1c>
 800368c:	6a21      	ldr	r1, [r4, #32]
 800368e:	2301      	movs	r3, #1
 8003690:	4628      	mov	r0, r5
 8003692:	47b0      	blx	r6
 8003694:	1c41      	adds	r1, r0, #1
 8003696:	d1c7      	bne.n	8003628 <__sflush_r+0x34>
 8003698:	682b      	ldr	r3, [r5, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0c4      	beq.n	8003628 <__sflush_r+0x34>
 800369e:	2b1d      	cmp	r3, #29
 80036a0:	d001      	beq.n	80036a6 <__sflush_r+0xb2>
 80036a2:	2b16      	cmp	r3, #22
 80036a4:	d101      	bne.n	80036aa <__sflush_r+0xb6>
 80036a6:	602f      	str	r7, [r5, #0]
 80036a8:	e7b1      	b.n	800360e <__sflush_r+0x1a>
 80036aa:	89a3      	ldrh	r3, [r4, #12]
 80036ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036b0:	81a3      	strh	r3, [r4, #12]
 80036b2:	e7ad      	b.n	8003610 <__sflush_r+0x1c>
 80036b4:	690f      	ldr	r7, [r1, #16]
 80036b6:	2f00      	cmp	r7, #0
 80036b8:	d0a9      	beq.n	800360e <__sflush_r+0x1a>
 80036ba:	0793      	lsls	r3, r2, #30
 80036bc:	680e      	ldr	r6, [r1, #0]
 80036be:	bf08      	it	eq
 80036c0:	694b      	ldreq	r3, [r1, #20]
 80036c2:	600f      	str	r7, [r1, #0]
 80036c4:	bf18      	it	ne
 80036c6:	2300      	movne	r3, #0
 80036c8:	eba6 0807 	sub.w	r8, r6, r7
 80036cc:	608b      	str	r3, [r1, #8]
 80036ce:	f1b8 0f00 	cmp.w	r8, #0
 80036d2:	dd9c      	ble.n	800360e <__sflush_r+0x1a>
 80036d4:	6a21      	ldr	r1, [r4, #32]
 80036d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80036d8:	4643      	mov	r3, r8
 80036da:	463a      	mov	r2, r7
 80036dc:	4628      	mov	r0, r5
 80036de:	47b0      	blx	r6
 80036e0:	2800      	cmp	r0, #0
 80036e2:	dc06      	bgt.n	80036f2 <__sflush_r+0xfe>
 80036e4:	89a3      	ldrh	r3, [r4, #12]
 80036e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036ea:	81a3      	strh	r3, [r4, #12]
 80036ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036f0:	e78e      	b.n	8003610 <__sflush_r+0x1c>
 80036f2:	4407      	add	r7, r0
 80036f4:	eba8 0800 	sub.w	r8, r8, r0
 80036f8:	e7e9      	b.n	80036ce <__sflush_r+0xda>
 80036fa:	bf00      	nop
 80036fc:	20400001 	.word	0x20400001

08003700 <_fflush_r>:
 8003700:	b538      	push	{r3, r4, r5, lr}
 8003702:	690b      	ldr	r3, [r1, #16]
 8003704:	4605      	mov	r5, r0
 8003706:	460c      	mov	r4, r1
 8003708:	b913      	cbnz	r3, 8003710 <_fflush_r+0x10>
 800370a:	2500      	movs	r5, #0
 800370c:	4628      	mov	r0, r5
 800370e:	bd38      	pop	{r3, r4, r5, pc}
 8003710:	b118      	cbz	r0, 800371a <_fflush_r+0x1a>
 8003712:	6983      	ldr	r3, [r0, #24]
 8003714:	b90b      	cbnz	r3, 800371a <_fflush_r+0x1a>
 8003716:	f000 f887 	bl	8003828 <__sinit>
 800371a:	4b14      	ldr	r3, [pc, #80]	; (800376c <_fflush_r+0x6c>)
 800371c:	429c      	cmp	r4, r3
 800371e:	d11b      	bne.n	8003758 <_fflush_r+0x58>
 8003720:	686c      	ldr	r4, [r5, #4]
 8003722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0ef      	beq.n	800370a <_fflush_r+0xa>
 800372a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800372c:	07d0      	lsls	r0, r2, #31
 800372e:	d404      	bmi.n	800373a <_fflush_r+0x3a>
 8003730:	0599      	lsls	r1, r3, #22
 8003732:	d402      	bmi.n	800373a <_fflush_r+0x3a>
 8003734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003736:	f000 f91a 	bl	800396e <__retarget_lock_acquire_recursive>
 800373a:	4628      	mov	r0, r5
 800373c:	4621      	mov	r1, r4
 800373e:	f7ff ff59 	bl	80035f4 <__sflush_r>
 8003742:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003744:	07da      	lsls	r2, r3, #31
 8003746:	4605      	mov	r5, r0
 8003748:	d4e0      	bmi.n	800370c <_fflush_r+0xc>
 800374a:	89a3      	ldrh	r3, [r4, #12]
 800374c:	059b      	lsls	r3, r3, #22
 800374e:	d4dd      	bmi.n	800370c <_fflush_r+0xc>
 8003750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003752:	f000 f90d 	bl	8003970 <__retarget_lock_release_recursive>
 8003756:	e7d9      	b.n	800370c <_fflush_r+0xc>
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <_fflush_r+0x70>)
 800375a:	429c      	cmp	r4, r3
 800375c:	d101      	bne.n	8003762 <_fflush_r+0x62>
 800375e:	68ac      	ldr	r4, [r5, #8]
 8003760:	e7df      	b.n	8003722 <_fflush_r+0x22>
 8003762:	4b04      	ldr	r3, [pc, #16]	; (8003774 <_fflush_r+0x74>)
 8003764:	429c      	cmp	r4, r3
 8003766:	bf08      	it	eq
 8003768:	68ec      	ldreq	r4, [r5, #12]
 800376a:	e7da      	b.n	8003722 <_fflush_r+0x22>
 800376c:	08004b18 	.word	0x08004b18
 8003770:	08004b38 	.word	0x08004b38
 8003774:	08004af8 	.word	0x08004af8

08003778 <std>:
 8003778:	2300      	movs	r3, #0
 800377a:	b510      	push	{r4, lr}
 800377c:	4604      	mov	r4, r0
 800377e:	e9c0 3300 	strd	r3, r3, [r0]
 8003782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003786:	6083      	str	r3, [r0, #8]
 8003788:	8181      	strh	r1, [r0, #12]
 800378a:	6643      	str	r3, [r0, #100]	; 0x64
 800378c:	81c2      	strh	r2, [r0, #14]
 800378e:	6183      	str	r3, [r0, #24]
 8003790:	4619      	mov	r1, r3
 8003792:	2208      	movs	r2, #8
 8003794:	305c      	adds	r0, #92	; 0x5c
 8003796:	f7fe fb71 	bl	8001e7c <memset>
 800379a:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <std+0x38>)
 800379c:	6263      	str	r3, [r4, #36]	; 0x24
 800379e:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <std+0x3c>)
 80037a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <std+0x40>)
 80037a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80037a6:	4b05      	ldr	r3, [pc, #20]	; (80037bc <std+0x44>)
 80037a8:	6224      	str	r4, [r4, #32]
 80037aa:	6323      	str	r3, [r4, #48]	; 0x30
 80037ac:	bd10      	pop	{r4, pc}
 80037ae:	bf00      	nop
 80037b0:	08004361 	.word	0x08004361
 80037b4:	08004383 	.word	0x08004383
 80037b8:	080043bb 	.word	0x080043bb
 80037bc:	080043df 	.word	0x080043df

080037c0 <_cleanup_r>:
 80037c0:	4901      	ldr	r1, [pc, #4]	; (80037c8 <_cleanup_r+0x8>)
 80037c2:	f000 b8af 	b.w	8003924 <_fwalk_reent>
 80037c6:	bf00      	nop
 80037c8:	08003701 	.word	0x08003701

080037cc <__sfmoreglue>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	2268      	movs	r2, #104	; 0x68
 80037d0:	1e4d      	subs	r5, r1, #1
 80037d2:	4355      	muls	r5, r2
 80037d4:	460e      	mov	r6, r1
 80037d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80037da:	f000 fd3d 	bl	8004258 <_malloc_r>
 80037de:	4604      	mov	r4, r0
 80037e0:	b140      	cbz	r0, 80037f4 <__sfmoreglue+0x28>
 80037e2:	2100      	movs	r1, #0
 80037e4:	e9c0 1600 	strd	r1, r6, [r0]
 80037e8:	300c      	adds	r0, #12
 80037ea:	60a0      	str	r0, [r4, #8]
 80037ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80037f0:	f7fe fb44 	bl	8001e7c <memset>
 80037f4:	4620      	mov	r0, r4
 80037f6:	bd70      	pop	{r4, r5, r6, pc}

080037f8 <__sfp_lock_acquire>:
 80037f8:	4801      	ldr	r0, [pc, #4]	; (8003800 <__sfp_lock_acquire+0x8>)
 80037fa:	f000 b8b8 	b.w	800396e <__retarget_lock_acquire_recursive>
 80037fe:	bf00      	nop
 8003800:	20000321 	.word	0x20000321

08003804 <__sfp_lock_release>:
 8003804:	4801      	ldr	r0, [pc, #4]	; (800380c <__sfp_lock_release+0x8>)
 8003806:	f000 b8b3 	b.w	8003970 <__retarget_lock_release_recursive>
 800380a:	bf00      	nop
 800380c:	20000321 	.word	0x20000321

08003810 <__sinit_lock_acquire>:
 8003810:	4801      	ldr	r0, [pc, #4]	; (8003818 <__sinit_lock_acquire+0x8>)
 8003812:	f000 b8ac 	b.w	800396e <__retarget_lock_acquire_recursive>
 8003816:	bf00      	nop
 8003818:	20000322 	.word	0x20000322

0800381c <__sinit_lock_release>:
 800381c:	4801      	ldr	r0, [pc, #4]	; (8003824 <__sinit_lock_release+0x8>)
 800381e:	f000 b8a7 	b.w	8003970 <__retarget_lock_release_recursive>
 8003822:	bf00      	nop
 8003824:	20000322 	.word	0x20000322

08003828 <__sinit>:
 8003828:	b510      	push	{r4, lr}
 800382a:	4604      	mov	r4, r0
 800382c:	f7ff fff0 	bl	8003810 <__sinit_lock_acquire>
 8003830:	69a3      	ldr	r3, [r4, #24]
 8003832:	b11b      	cbz	r3, 800383c <__sinit+0x14>
 8003834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003838:	f7ff bff0 	b.w	800381c <__sinit_lock_release>
 800383c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003840:	6523      	str	r3, [r4, #80]	; 0x50
 8003842:	4b13      	ldr	r3, [pc, #76]	; (8003890 <__sinit+0x68>)
 8003844:	4a13      	ldr	r2, [pc, #76]	; (8003894 <__sinit+0x6c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	62a2      	str	r2, [r4, #40]	; 0x28
 800384a:	42a3      	cmp	r3, r4
 800384c:	bf04      	itt	eq
 800384e:	2301      	moveq	r3, #1
 8003850:	61a3      	streq	r3, [r4, #24]
 8003852:	4620      	mov	r0, r4
 8003854:	f000 f820 	bl	8003898 <__sfp>
 8003858:	6060      	str	r0, [r4, #4]
 800385a:	4620      	mov	r0, r4
 800385c:	f000 f81c 	bl	8003898 <__sfp>
 8003860:	60a0      	str	r0, [r4, #8]
 8003862:	4620      	mov	r0, r4
 8003864:	f000 f818 	bl	8003898 <__sfp>
 8003868:	2200      	movs	r2, #0
 800386a:	60e0      	str	r0, [r4, #12]
 800386c:	2104      	movs	r1, #4
 800386e:	6860      	ldr	r0, [r4, #4]
 8003870:	f7ff ff82 	bl	8003778 <std>
 8003874:	68a0      	ldr	r0, [r4, #8]
 8003876:	2201      	movs	r2, #1
 8003878:	2109      	movs	r1, #9
 800387a:	f7ff ff7d 	bl	8003778 <std>
 800387e:	68e0      	ldr	r0, [r4, #12]
 8003880:	2202      	movs	r2, #2
 8003882:	2112      	movs	r1, #18
 8003884:	f7ff ff78 	bl	8003778 <std>
 8003888:	2301      	movs	r3, #1
 800388a:	61a3      	str	r3, [r4, #24]
 800388c:	e7d2      	b.n	8003834 <__sinit+0xc>
 800388e:	bf00      	nop
 8003890:	08004a30 	.word	0x08004a30
 8003894:	080037c1 	.word	0x080037c1

08003898 <__sfp>:
 8003898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389a:	4607      	mov	r7, r0
 800389c:	f7ff ffac 	bl	80037f8 <__sfp_lock_acquire>
 80038a0:	4b1e      	ldr	r3, [pc, #120]	; (800391c <__sfp+0x84>)
 80038a2:	681e      	ldr	r6, [r3, #0]
 80038a4:	69b3      	ldr	r3, [r6, #24]
 80038a6:	b913      	cbnz	r3, 80038ae <__sfp+0x16>
 80038a8:	4630      	mov	r0, r6
 80038aa:	f7ff ffbd 	bl	8003828 <__sinit>
 80038ae:	3648      	adds	r6, #72	; 0x48
 80038b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	d503      	bpl.n	80038c0 <__sfp+0x28>
 80038b8:	6833      	ldr	r3, [r6, #0]
 80038ba:	b30b      	cbz	r3, 8003900 <__sfp+0x68>
 80038bc:	6836      	ldr	r6, [r6, #0]
 80038be:	e7f7      	b.n	80038b0 <__sfp+0x18>
 80038c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80038c4:	b9d5      	cbnz	r5, 80038fc <__sfp+0x64>
 80038c6:	4b16      	ldr	r3, [pc, #88]	; (8003920 <__sfp+0x88>)
 80038c8:	60e3      	str	r3, [r4, #12]
 80038ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80038ce:	6665      	str	r5, [r4, #100]	; 0x64
 80038d0:	f000 f84c 	bl	800396c <__retarget_lock_init_recursive>
 80038d4:	f7ff ff96 	bl	8003804 <__sfp_lock_release>
 80038d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80038dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80038e0:	6025      	str	r5, [r4, #0]
 80038e2:	61a5      	str	r5, [r4, #24]
 80038e4:	2208      	movs	r2, #8
 80038e6:	4629      	mov	r1, r5
 80038e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80038ec:	f7fe fac6 	bl	8001e7c <memset>
 80038f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80038f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80038f8:	4620      	mov	r0, r4
 80038fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038fc:	3468      	adds	r4, #104	; 0x68
 80038fe:	e7d9      	b.n	80038b4 <__sfp+0x1c>
 8003900:	2104      	movs	r1, #4
 8003902:	4638      	mov	r0, r7
 8003904:	f7ff ff62 	bl	80037cc <__sfmoreglue>
 8003908:	4604      	mov	r4, r0
 800390a:	6030      	str	r0, [r6, #0]
 800390c:	2800      	cmp	r0, #0
 800390e:	d1d5      	bne.n	80038bc <__sfp+0x24>
 8003910:	f7ff ff78 	bl	8003804 <__sfp_lock_release>
 8003914:	230c      	movs	r3, #12
 8003916:	603b      	str	r3, [r7, #0]
 8003918:	e7ee      	b.n	80038f8 <__sfp+0x60>
 800391a:	bf00      	nop
 800391c:	08004a30 	.word	0x08004a30
 8003920:	ffff0001 	.word	0xffff0001

08003924 <_fwalk_reent>:
 8003924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003928:	4606      	mov	r6, r0
 800392a:	4688      	mov	r8, r1
 800392c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003930:	2700      	movs	r7, #0
 8003932:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003936:	f1b9 0901 	subs.w	r9, r9, #1
 800393a:	d505      	bpl.n	8003948 <_fwalk_reent+0x24>
 800393c:	6824      	ldr	r4, [r4, #0]
 800393e:	2c00      	cmp	r4, #0
 8003940:	d1f7      	bne.n	8003932 <_fwalk_reent+0xe>
 8003942:	4638      	mov	r0, r7
 8003944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003948:	89ab      	ldrh	r3, [r5, #12]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d907      	bls.n	800395e <_fwalk_reent+0x3a>
 800394e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003952:	3301      	adds	r3, #1
 8003954:	d003      	beq.n	800395e <_fwalk_reent+0x3a>
 8003956:	4629      	mov	r1, r5
 8003958:	4630      	mov	r0, r6
 800395a:	47c0      	blx	r8
 800395c:	4307      	orrs	r7, r0
 800395e:	3568      	adds	r5, #104	; 0x68
 8003960:	e7e9      	b.n	8003936 <_fwalk_reent+0x12>
	...

08003964 <_localeconv_r>:
 8003964:	4800      	ldr	r0, [pc, #0]	; (8003968 <_localeconv_r+0x4>)
 8003966:	4770      	bx	lr
 8003968:	20000180 	.word	0x20000180

0800396c <__retarget_lock_init_recursive>:
 800396c:	4770      	bx	lr

0800396e <__retarget_lock_acquire_recursive>:
 800396e:	4770      	bx	lr

08003970 <__retarget_lock_release_recursive>:
 8003970:	4770      	bx	lr

08003972 <__swhatbuf_r>:
 8003972:	b570      	push	{r4, r5, r6, lr}
 8003974:	460e      	mov	r6, r1
 8003976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800397a:	2900      	cmp	r1, #0
 800397c:	b096      	sub	sp, #88	; 0x58
 800397e:	4614      	mov	r4, r2
 8003980:	461d      	mov	r5, r3
 8003982:	da08      	bge.n	8003996 <__swhatbuf_r+0x24>
 8003984:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	602a      	str	r2, [r5, #0]
 800398c:	061a      	lsls	r2, r3, #24
 800398e:	d410      	bmi.n	80039b2 <__swhatbuf_r+0x40>
 8003990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003994:	e00e      	b.n	80039b4 <__swhatbuf_r+0x42>
 8003996:	466a      	mov	r2, sp
 8003998:	f000 fd66 	bl	8004468 <_fstat_r>
 800399c:	2800      	cmp	r0, #0
 800399e:	dbf1      	blt.n	8003984 <__swhatbuf_r+0x12>
 80039a0:	9a01      	ldr	r2, [sp, #4]
 80039a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80039a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80039aa:	425a      	negs	r2, r3
 80039ac:	415a      	adcs	r2, r3
 80039ae:	602a      	str	r2, [r5, #0]
 80039b0:	e7ee      	b.n	8003990 <__swhatbuf_r+0x1e>
 80039b2:	2340      	movs	r3, #64	; 0x40
 80039b4:	2000      	movs	r0, #0
 80039b6:	6023      	str	r3, [r4, #0]
 80039b8:	b016      	add	sp, #88	; 0x58
 80039ba:	bd70      	pop	{r4, r5, r6, pc}

080039bc <__smakebuf_r>:
 80039bc:	898b      	ldrh	r3, [r1, #12]
 80039be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039c0:	079d      	lsls	r5, r3, #30
 80039c2:	4606      	mov	r6, r0
 80039c4:	460c      	mov	r4, r1
 80039c6:	d507      	bpl.n	80039d8 <__smakebuf_r+0x1c>
 80039c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	6123      	str	r3, [r4, #16]
 80039d0:	2301      	movs	r3, #1
 80039d2:	6163      	str	r3, [r4, #20]
 80039d4:	b002      	add	sp, #8
 80039d6:	bd70      	pop	{r4, r5, r6, pc}
 80039d8:	ab01      	add	r3, sp, #4
 80039da:	466a      	mov	r2, sp
 80039dc:	f7ff ffc9 	bl	8003972 <__swhatbuf_r>
 80039e0:	9900      	ldr	r1, [sp, #0]
 80039e2:	4605      	mov	r5, r0
 80039e4:	4630      	mov	r0, r6
 80039e6:	f000 fc37 	bl	8004258 <_malloc_r>
 80039ea:	b948      	cbnz	r0, 8003a00 <__smakebuf_r+0x44>
 80039ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039f0:	059a      	lsls	r2, r3, #22
 80039f2:	d4ef      	bmi.n	80039d4 <__smakebuf_r+0x18>
 80039f4:	f023 0303 	bic.w	r3, r3, #3
 80039f8:	f043 0302 	orr.w	r3, r3, #2
 80039fc:	81a3      	strh	r3, [r4, #12]
 80039fe:	e7e3      	b.n	80039c8 <__smakebuf_r+0xc>
 8003a00:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <__smakebuf_r+0x7c>)
 8003a02:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a04:	89a3      	ldrh	r3, [r4, #12]
 8003a06:	6020      	str	r0, [r4, #0]
 8003a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a0c:	81a3      	strh	r3, [r4, #12]
 8003a0e:	9b00      	ldr	r3, [sp, #0]
 8003a10:	6163      	str	r3, [r4, #20]
 8003a12:	9b01      	ldr	r3, [sp, #4]
 8003a14:	6120      	str	r0, [r4, #16]
 8003a16:	b15b      	cbz	r3, 8003a30 <__smakebuf_r+0x74>
 8003a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a1c:	4630      	mov	r0, r6
 8003a1e:	f000 fd35 	bl	800448c <_isatty_r>
 8003a22:	b128      	cbz	r0, 8003a30 <__smakebuf_r+0x74>
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	f023 0303 	bic.w	r3, r3, #3
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	81a3      	strh	r3, [r4, #12]
 8003a30:	89a0      	ldrh	r0, [r4, #12]
 8003a32:	4305      	orrs	r5, r0
 8003a34:	81a5      	strh	r5, [r4, #12]
 8003a36:	e7cd      	b.n	80039d4 <__smakebuf_r+0x18>
 8003a38:	080037c1 	.word	0x080037c1

08003a3c <malloc>:
 8003a3c:	4b02      	ldr	r3, [pc, #8]	; (8003a48 <malloc+0xc>)
 8003a3e:	4601      	mov	r1, r0
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	f000 bc09 	b.w	8004258 <_malloc_r>
 8003a46:	bf00      	nop
 8003a48:	2000002c 	.word	0x2000002c

08003a4c <_Balloc>:
 8003a4c:	b570      	push	{r4, r5, r6, lr}
 8003a4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003a50:	4604      	mov	r4, r0
 8003a52:	460d      	mov	r5, r1
 8003a54:	b976      	cbnz	r6, 8003a74 <_Balloc+0x28>
 8003a56:	2010      	movs	r0, #16
 8003a58:	f7ff fff0 	bl	8003a3c <malloc>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	6260      	str	r0, [r4, #36]	; 0x24
 8003a60:	b920      	cbnz	r0, 8003a6c <_Balloc+0x20>
 8003a62:	4b18      	ldr	r3, [pc, #96]	; (8003ac4 <_Balloc+0x78>)
 8003a64:	4818      	ldr	r0, [pc, #96]	; (8003ac8 <_Balloc+0x7c>)
 8003a66:	2166      	movs	r1, #102	; 0x66
 8003a68:	f000 fcbe 	bl	80043e8 <__assert_func>
 8003a6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003a70:	6006      	str	r6, [r0, #0]
 8003a72:	60c6      	str	r6, [r0, #12]
 8003a74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003a76:	68f3      	ldr	r3, [r6, #12]
 8003a78:	b183      	cbz	r3, 8003a9c <_Balloc+0x50>
 8003a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003a82:	b9b8      	cbnz	r0, 8003ab4 <_Balloc+0x68>
 8003a84:	2101      	movs	r1, #1
 8003a86:	fa01 f605 	lsl.w	r6, r1, r5
 8003a8a:	1d72      	adds	r2, r6, #5
 8003a8c:	0092      	lsls	r2, r2, #2
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f000 fb60 	bl	8004154 <_calloc_r>
 8003a94:	b160      	cbz	r0, 8003ab0 <_Balloc+0x64>
 8003a96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003a9a:	e00e      	b.n	8003aba <_Balloc+0x6e>
 8003a9c:	2221      	movs	r2, #33	; 0x21
 8003a9e:	2104      	movs	r1, #4
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	f000 fb57 	bl	8004154 <_calloc_r>
 8003aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003aa8:	60f0      	str	r0, [r6, #12]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1e4      	bne.n	8003a7a <_Balloc+0x2e>
 8003ab0:	2000      	movs	r0, #0
 8003ab2:	bd70      	pop	{r4, r5, r6, pc}
 8003ab4:	6802      	ldr	r2, [r0, #0]
 8003ab6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003aba:	2300      	movs	r3, #0
 8003abc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003ac0:	e7f7      	b.n	8003ab2 <_Balloc+0x66>
 8003ac2:	bf00      	nop
 8003ac4:	08004a75 	.word	0x08004a75
 8003ac8:	08004b58 	.word	0x08004b58

08003acc <_Bfree>:
 8003acc:	b570      	push	{r4, r5, r6, lr}
 8003ace:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003ad0:	4605      	mov	r5, r0
 8003ad2:	460c      	mov	r4, r1
 8003ad4:	b976      	cbnz	r6, 8003af4 <_Bfree+0x28>
 8003ad6:	2010      	movs	r0, #16
 8003ad8:	f7ff ffb0 	bl	8003a3c <malloc>
 8003adc:	4602      	mov	r2, r0
 8003ade:	6268      	str	r0, [r5, #36]	; 0x24
 8003ae0:	b920      	cbnz	r0, 8003aec <_Bfree+0x20>
 8003ae2:	4b09      	ldr	r3, [pc, #36]	; (8003b08 <_Bfree+0x3c>)
 8003ae4:	4809      	ldr	r0, [pc, #36]	; (8003b0c <_Bfree+0x40>)
 8003ae6:	218a      	movs	r1, #138	; 0x8a
 8003ae8:	f000 fc7e 	bl	80043e8 <__assert_func>
 8003aec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003af0:	6006      	str	r6, [r0, #0]
 8003af2:	60c6      	str	r6, [r0, #12]
 8003af4:	b13c      	cbz	r4, 8003b06 <_Bfree+0x3a>
 8003af6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003af8:	6862      	ldr	r2, [r4, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b00:	6021      	str	r1, [r4, #0]
 8003b02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003b06:	bd70      	pop	{r4, r5, r6, pc}
 8003b08:	08004a75 	.word	0x08004a75
 8003b0c:	08004b58 	.word	0x08004b58

08003b10 <__multadd>:
 8003b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b14:	690d      	ldr	r5, [r1, #16]
 8003b16:	4607      	mov	r7, r0
 8003b18:	460c      	mov	r4, r1
 8003b1a:	461e      	mov	r6, r3
 8003b1c:	f101 0c14 	add.w	ip, r1, #20
 8003b20:	2000      	movs	r0, #0
 8003b22:	f8dc 3000 	ldr.w	r3, [ip]
 8003b26:	b299      	uxth	r1, r3
 8003b28:	fb02 6101 	mla	r1, r2, r1, r6
 8003b2c:	0c1e      	lsrs	r6, r3, #16
 8003b2e:	0c0b      	lsrs	r3, r1, #16
 8003b30:	fb02 3306 	mla	r3, r2, r6, r3
 8003b34:	b289      	uxth	r1, r1
 8003b36:	3001      	adds	r0, #1
 8003b38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003b3c:	4285      	cmp	r5, r0
 8003b3e:	f84c 1b04 	str.w	r1, [ip], #4
 8003b42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003b46:	dcec      	bgt.n	8003b22 <__multadd+0x12>
 8003b48:	b30e      	cbz	r6, 8003b8e <__multadd+0x7e>
 8003b4a:	68a3      	ldr	r3, [r4, #8]
 8003b4c:	42ab      	cmp	r3, r5
 8003b4e:	dc19      	bgt.n	8003b84 <__multadd+0x74>
 8003b50:	6861      	ldr	r1, [r4, #4]
 8003b52:	4638      	mov	r0, r7
 8003b54:	3101      	adds	r1, #1
 8003b56:	f7ff ff79 	bl	8003a4c <_Balloc>
 8003b5a:	4680      	mov	r8, r0
 8003b5c:	b928      	cbnz	r0, 8003b6a <__multadd+0x5a>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <__multadd+0x84>)
 8003b62:	480d      	ldr	r0, [pc, #52]	; (8003b98 <__multadd+0x88>)
 8003b64:	21b5      	movs	r1, #181	; 0xb5
 8003b66:	f000 fc3f 	bl	80043e8 <__assert_func>
 8003b6a:	6922      	ldr	r2, [r4, #16]
 8003b6c:	3202      	adds	r2, #2
 8003b6e:	f104 010c 	add.w	r1, r4, #12
 8003b72:	0092      	lsls	r2, r2, #2
 8003b74:	300c      	adds	r0, #12
 8003b76:	f7fe f973 	bl	8001e60 <memcpy>
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	4638      	mov	r0, r7
 8003b7e:	f7ff ffa5 	bl	8003acc <_Bfree>
 8003b82:	4644      	mov	r4, r8
 8003b84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003b88:	3501      	adds	r5, #1
 8003b8a:	615e      	str	r6, [r3, #20]
 8003b8c:	6125      	str	r5, [r4, #16]
 8003b8e:	4620      	mov	r0, r4
 8003b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b94:	08004ae7 	.word	0x08004ae7
 8003b98:	08004b58 	.word	0x08004b58

08003b9c <__hi0bits>:
 8003b9c:	0c03      	lsrs	r3, r0, #16
 8003b9e:	041b      	lsls	r3, r3, #16
 8003ba0:	b9d3      	cbnz	r3, 8003bd8 <__hi0bits+0x3c>
 8003ba2:	0400      	lsls	r0, r0, #16
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003baa:	bf04      	itt	eq
 8003bac:	0200      	lsleq	r0, r0, #8
 8003bae:	3308      	addeq	r3, #8
 8003bb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003bb4:	bf04      	itt	eq
 8003bb6:	0100      	lsleq	r0, r0, #4
 8003bb8:	3304      	addeq	r3, #4
 8003bba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8003bbe:	bf04      	itt	eq
 8003bc0:	0080      	lsleq	r0, r0, #2
 8003bc2:	3302      	addeq	r3, #2
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	db05      	blt.n	8003bd4 <__hi0bits+0x38>
 8003bc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003bcc:	f103 0301 	add.w	r3, r3, #1
 8003bd0:	bf08      	it	eq
 8003bd2:	2320      	moveq	r3, #32
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	4770      	bx	lr
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e7e4      	b.n	8003ba6 <__hi0bits+0xa>

08003bdc <__lo0bits>:
 8003bdc:	6803      	ldr	r3, [r0, #0]
 8003bde:	f013 0207 	ands.w	r2, r3, #7
 8003be2:	4601      	mov	r1, r0
 8003be4:	d00b      	beq.n	8003bfe <__lo0bits+0x22>
 8003be6:	07da      	lsls	r2, r3, #31
 8003be8:	d423      	bmi.n	8003c32 <__lo0bits+0x56>
 8003bea:	0798      	lsls	r0, r3, #30
 8003bec:	bf49      	itett	mi
 8003bee:	085b      	lsrmi	r3, r3, #1
 8003bf0:	089b      	lsrpl	r3, r3, #2
 8003bf2:	2001      	movmi	r0, #1
 8003bf4:	600b      	strmi	r3, [r1, #0]
 8003bf6:	bf5c      	itt	pl
 8003bf8:	600b      	strpl	r3, [r1, #0]
 8003bfa:	2002      	movpl	r0, #2
 8003bfc:	4770      	bx	lr
 8003bfe:	b298      	uxth	r0, r3
 8003c00:	b9a8      	cbnz	r0, 8003c2e <__lo0bits+0x52>
 8003c02:	0c1b      	lsrs	r3, r3, #16
 8003c04:	2010      	movs	r0, #16
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	b90a      	cbnz	r2, 8003c0e <__lo0bits+0x32>
 8003c0a:	3008      	adds	r0, #8
 8003c0c:	0a1b      	lsrs	r3, r3, #8
 8003c0e:	071a      	lsls	r2, r3, #28
 8003c10:	bf04      	itt	eq
 8003c12:	091b      	lsreq	r3, r3, #4
 8003c14:	3004      	addeq	r0, #4
 8003c16:	079a      	lsls	r2, r3, #30
 8003c18:	bf04      	itt	eq
 8003c1a:	089b      	lsreq	r3, r3, #2
 8003c1c:	3002      	addeq	r0, #2
 8003c1e:	07da      	lsls	r2, r3, #31
 8003c20:	d403      	bmi.n	8003c2a <__lo0bits+0x4e>
 8003c22:	085b      	lsrs	r3, r3, #1
 8003c24:	f100 0001 	add.w	r0, r0, #1
 8003c28:	d005      	beq.n	8003c36 <__lo0bits+0x5a>
 8003c2a:	600b      	str	r3, [r1, #0]
 8003c2c:	4770      	bx	lr
 8003c2e:	4610      	mov	r0, r2
 8003c30:	e7e9      	b.n	8003c06 <__lo0bits+0x2a>
 8003c32:	2000      	movs	r0, #0
 8003c34:	4770      	bx	lr
 8003c36:	2020      	movs	r0, #32
 8003c38:	4770      	bx	lr
	...

08003c3c <__i2b>:
 8003c3c:	b510      	push	{r4, lr}
 8003c3e:	460c      	mov	r4, r1
 8003c40:	2101      	movs	r1, #1
 8003c42:	f7ff ff03 	bl	8003a4c <_Balloc>
 8003c46:	4602      	mov	r2, r0
 8003c48:	b928      	cbnz	r0, 8003c56 <__i2b+0x1a>
 8003c4a:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <__i2b+0x24>)
 8003c4c:	4805      	ldr	r0, [pc, #20]	; (8003c64 <__i2b+0x28>)
 8003c4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003c52:	f000 fbc9 	bl	80043e8 <__assert_func>
 8003c56:	2301      	movs	r3, #1
 8003c58:	6144      	str	r4, [r0, #20]
 8003c5a:	6103      	str	r3, [r0, #16]
 8003c5c:	bd10      	pop	{r4, pc}
 8003c5e:	bf00      	nop
 8003c60:	08004ae7 	.word	0x08004ae7
 8003c64:	08004b58 	.word	0x08004b58

08003c68 <__multiply>:
 8003c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c6c:	4691      	mov	r9, r2
 8003c6e:	690a      	ldr	r2, [r1, #16]
 8003c70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	bfb8      	it	lt
 8003c78:	460b      	movlt	r3, r1
 8003c7a:	460c      	mov	r4, r1
 8003c7c:	bfbc      	itt	lt
 8003c7e:	464c      	movlt	r4, r9
 8003c80:	4699      	movlt	r9, r3
 8003c82:	6927      	ldr	r7, [r4, #16]
 8003c84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003c88:	68a3      	ldr	r3, [r4, #8]
 8003c8a:	6861      	ldr	r1, [r4, #4]
 8003c8c:	eb07 060a 	add.w	r6, r7, sl
 8003c90:	42b3      	cmp	r3, r6
 8003c92:	b085      	sub	sp, #20
 8003c94:	bfb8      	it	lt
 8003c96:	3101      	addlt	r1, #1
 8003c98:	f7ff fed8 	bl	8003a4c <_Balloc>
 8003c9c:	b930      	cbnz	r0, 8003cac <__multiply+0x44>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	4b44      	ldr	r3, [pc, #272]	; (8003db4 <__multiply+0x14c>)
 8003ca2:	4845      	ldr	r0, [pc, #276]	; (8003db8 <__multiply+0x150>)
 8003ca4:	f240 115d 	movw	r1, #349	; 0x15d
 8003ca8:	f000 fb9e 	bl	80043e8 <__assert_func>
 8003cac:	f100 0514 	add.w	r5, r0, #20
 8003cb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003cb4:	462b      	mov	r3, r5
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	4543      	cmp	r3, r8
 8003cba:	d321      	bcc.n	8003d00 <__multiply+0x98>
 8003cbc:	f104 0314 	add.w	r3, r4, #20
 8003cc0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003cc4:	f109 0314 	add.w	r3, r9, #20
 8003cc8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003ccc:	9202      	str	r2, [sp, #8]
 8003cce:	1b3a      	subs	r2, r7, r4
 8003cd0:	3a15      	subs	r2, #21
 8003cd2:	f022 0203 	bic.w	r2, r2, #3
 8003cd6:	3204      	adds	r2, #4
 8003cd8:	f104 0115 	add.w	r1, r4, #21
 8003cdc:	428f      	cmp	r7, r1
 8003cde:	bf38      	it	cc
 8003ce0:	2204      	movcc	r2, #4
 8003ce2:	9201      	str	r2, [sp, #4]
 8003ce4:	9a02      	ldr	r2, [sp, #8]
 8003ce6:	9303      	str	r3, [sp, #12]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d80c      	bhi.n	8003d06 <__multiply+0x9e>
 8003cec:	2e00      	cmp	r6, #0
 8003cee:	dd03      	ble.n	8003cf8 <__multiply+0x90>
 8003cf0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d05a      	beq.n	8003dae <__multiply+0x146>
 8003cf8:	6106      	str	r6, [r0, #16]
 8003cfa:	b005      	add	sp, #20
 8003cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d00:	f843 2b04 	str.w	r2, [r3], #4
 8003d04:	e7d8      	b.n	8003cb8 <__multiply+0x50>
 8003d06:	f8b3 a000 	ldrh.w	sl, [r3]
 8003d0a:	f1ba 0f00 	cmp.w	sl, #0
 8003d0e:	d024      	beq.n	8003d5a <__multiply+0xf2>
 8003d10:	f104 0e14 	add.w	lr, r4, #20
 8003d14:	46a9      	mov	r9, r5
 8003d16:	f04f 0c00 	mov.w	ip, #0
 8003d1a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003d1e:	f8d9 1000 	ldr.w	r1, [r9]
 8003d22:	fa1f fb82 	uxth.w	fp, r2
 8003d26:	b289      	uxth	r1, r1
 8003d28:	fb0a 110b 	mla	r1, sl, fp, r1
 8003d2c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8003d30:	f8d9 2000 	ldr.w	r2, [r9]
 8003d34:	4461      	add	r1, ip
 8003d36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003d3a:	fb0a c20b 	mla	r2, sl, fp, ip
 8003d3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003d42:	b289      	uxth	r1, r1
 8003d44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003d48:	4577      	cmp	r7, lr
 8003d4a:	f849 1b04 	str.w	r1, [r9], #4
 8003d4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003d52:	d8e2      	bhi.n	8003d1a <__multiply+0xb2>
 8003d54:	9a01      	ldr	r2, [sp, #4]
 8003d56:	f845 c002 	str.w	ip, [r5, r2]
 8003d5a:	9a03      	ldr	r2, [sp, #12]
 8003d5c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003d60:	3304      	adds	r3, #4
 8003d62:	f1b9 0f00 	cmp.w	r9, #0
 8003d66:	d020      	beq.n	8003daa <__multiply+0x142>
 8003d68:	6829      	ldr	r1, [r5, #0]
 8003d6a:	f104 0c14 	add.w	ip, r4, #20
 8003d6e:	46ae      	mov	lr, r5
 8003d70:	f04f 0a00 	mov.w	sl, #0
 8003d74:	f8bc b000 	ldrh.w	fp, [ip]
 8003d78:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8003d7c:	fb09 220b 	mla	r2, r9, fp, r2
 8003d80:	4492      	add	sl, r2
 8003d82:	b289      	uxth	r1, r1
 8003d84:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8003d88:	f84e 1b04 	str.w	r1, [lr], #4
 8003d8c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003d90:	f8be 1000 	ldrh.w	r1, [lr]
 8003d94:	0c12      	lsrs	r2, r2, #16
 8003d96:	fb09 1102 	mla	r1, r9, r2, r1
 8003d9a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8003d9e:	4567      	cmp	r7, ip
 8003da0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003da4:	d8e6      	bhi.n	8003d74 <__multiply+0x10c>
 8003da6:	9a01      	ldr	r2, [sp, #4]
 8003da8:	50a9      	str	r1, [r5, r2]
 8003daa:	3504      	adds	r5, #4
 8003dac:	e79a      	b.n	8003ce4 <__multiply+0x7c>
 8003dae:	3e01      	subs	r6, #1
 8003db0:	e79c      	b.n	8003cec <__multiply+0x84>
 8003db2:	bf00      	nop
 8003db4:	08004ae7 	.word	0x08004ae7
 8003db8:	08004b58 	.word	0x08004b58

08003dbc <__pow5mult>:
 8003dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dc0:	4615      	mov	r5, r2
 8003dc2:	f012 0203 	ands.w	r2, r2, #3
 8003dc6:	4606      	mov	r6, r0
 8003dc8:	460f      	mov	r7, r1
 8003dca:	d007      	beq.n	8003ddc <__pow5mult+0x20>
 8003dcc:	4c25      	ldr	r4, [pc, #148]	; (8003e64 <__pow5mult+0xa8>)
 8003dce:	3a01      	subs	r2, #1
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003dd6:	f7ff fe9b 	bl	8003b10 <__multadd>
 8003dda:	4607      	mov	r7, r0
 8003ddc:	10ad      	asrs	r5, r5, #2
 8003dde:	d03d      	beq.n	8003e5c <__pow5mult+0xa0>
 8003de0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003de2:	b97c      	cbnz	r4, 8003e04 <__pow5mult+0x48>
 8003de4:	2010      	movs	r0, #16
 8003de6:	f7ff fe29 	bl	8003a3c <malloc>
 8003dea:	4602      	mov	r2, r0
 8003dec:	6270      	str	r0, [r6, #36]	; 0x24
 8003dee:	b928      	cbnz	r0, 8003dfc <__pow5mult+0x40>
 8003df0:	4b1d      	ldr	r3, [pc, #116]	; (8003e68 <__pow5mult+0xac>)
 8003df2:	481e      	ldr	r0, [pc, #120]	; (8003e6c <__pow5mult+0xb0>)
 8003df4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003df8:	f000 faf6 	bl	80043e8 <__assert_func>
 8003dfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003e00:	6004      	str	r4, [r0, #0]
 8003e02:	60c4      	str	r4, [r0, #12]
 8003e04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003e08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003e0c:	b94c      	cbnz	r4, 8003e22 <__pow5mult+0x66>
 8003e0e:	f240 2171 	movw	r1, #625	; 0x271
 8003e12:	4630      	mov	r0, r6
 8003e14:	f7ff ff12 	bl	8003c3c <__i2b>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8003e1e:	4604      	mov	r4, r0
 8003e20:	6003      	str	r3, [r0, #0]
 8003e22:	f04f 0900 	mov.w	r9, #0
 8003e26:	07eb      	lsls	r3, r5, #31
 8003e28:	d50a      	bpl.n	8003e40 <__pow5mult+0x84>
 8003e2a:	4639      	mov	r1, r7
 8003e2c:	4622      	mov	r2, r4
 8003e2e:	4630      	mov	r0, r6
 8003e30:	f7ff ff1a 	bl	8003c68 <__multiply>
 8003e34:	4639      	mov	r1, r7
 8003e36:	4680      	mov	r8, r0
 8003e38:	4630      	mov	r0, r6
 8003e3a:	f7ff fe47 	bl	8003acc <_Bfree>
 8003e3e:	4647      	mov	r7, r8
 8003e40:	106d      	asrs	r5, r5, #1
 8003e42:	d00b      	beq.n	8003e5c <__pow5mult+0xa0>
 8003e44:	6820      	ldr	r0, [r4, #0]
 8003e46:	b938      	cbnz	r0, 8003e58 <__pow5mult+0x9c>
 8003e48:	4622      	mov	r2, r4
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	4630      	mov	r0, r6
 8003e4e:	f7ff ff0b 	bl	8003c68 <__multiply>
 8003e52:	6020      	str	r0, [r4, #0]
 8003e54:	f8c0 9000 	str.w	r9, [r0]
 8003e58:	4604      	mov	r4, r0
 8003e5a:	e7e4      	b.n	8003e26 <__pow5mult+0x6a>
 8003e5c:	4638      	mov	r0, r7
 8003e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e62:	bf00      	nop
 8003e64:	08004ca8 	.word	0x08004ca8
 8003e68:	08004a75 	.word	0x08004a75
 8003e6c:	08004b58 	.word	0x08004b58

08003e70 <__lshift>:
 8003e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e74:	460c      	mov	r4, r1
 8003e76:	6849      	ldr	r1, [r1, #4]
 8003e78:	6923      	ldr	r3, [r4, #16]
 8003e7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003e7e:	68a3      	ldr	r3, [r4, #8]
 8003e80:	4607      	mov	r7, r0
 8003e82:	4691      	mov	r9, r2
 8003e84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003e88:	f108 0601 	add.w	r6, r8, #1
 8003e8c:	42b3      	cmp	r3, r6
 8003e8e:	db0b      	blt.n	8003ea8 <__lshift+0x38>
 8003e90:	4638      	mov	r0, r7
 8003e92:	f7ff fddb 	bl	8003a4c <_Balloc>
 8003e96:	4605      	mov	r5, r0
 8003e98:	b948      	cbnz	r0, 8003eae <__lshift+0x3e>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	4b2a      	ldr	r3, [pc, #168]	; (8003f48 <__lshift+0xd8>)
 8003e9e:	482b      	ldr	r0, [pc, #172]	; (8003f4c <__lshift+0xdc>)
 8003ea0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003ea4:	f000 faa0 	bl	80043e8 <__assert_func>
 8003ea8:	3101      	adds	r1, #1
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	e7ee      	b.n	8003e8c <__lshift+0x1c>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f100 0114 	add.w	r1, r0, #20
 8003eb4:	f100 0210 	add.w	r2, r0, #16
 8003eb8:	4618      	mov	r0, r3
 8003eba:	4553      	cmp	r3, sl
 8003ebc:	db37      	blt.n	8003f2e <__lshift+0xbe>
 8003ebe:	6920      	ldr	r0, [r4, #16]
 8003ec0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003ec4:	f104 0314 	add.w	r3, r4, #20
 8003ec8:	f019 091f 	ands.w	r9, r9, #31
 8003ecc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003ed0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003ed4:	d02f      	beq.n	8003f36 <__lshift+0xc6>
 8003ed6:	f1c9 0e20 	rsb	lr, r9, #32
 8003eda:	468a      	mov	sl, r1
 8003edc:	f04f 0c00 	mov.w	ip, #0
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	fa02 f209 	lsl.w	r2, r2, r9
 8003ee6:	ea42 020c 	orr.w	r2, r2, ip
 8003eea:	f84a 2b04 	str.w	r2, [sl], #4
 8003eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ef2:	4298      	cmp	r0, r3
 8003ef4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8003ef8:	d8f2      	bhi.n	8003ee0 <__lshift+0x70>
 8003efa:	1b03      	subs	r3, r0, r4
 8003efc:	3b15      	subs	r3, #21
 8003efe:	f023 0303 	bic.w	r3, r3, #3
 8003f02:	3304      	adds	r3, #4
 8003f04:	f104 0215 	add.w	r2, r4, #21
 8003f08:	4290      	cmp	r0, r2
 8003f0a:	bf38      	it	cc
 8003f0c:	2304      	movcc	r3, #4
 8003f0e:	f841 c003 	str.w	ip, [r1, r3]
 8003f12:	f1bc 0f00 	cmp.w	ip, #0
 8003f16:	d001      	beq.n	8003f1c <__lshift+0xac>
 8003f18:	f108 0602 	add.w	r6, r8, #2
 8003f1c:	3e01      	subs	r6, #1
 8003f1e:	4638      	mov	r0, r7
 8003f20:	612e      	str	r6, [r5, #16]
 8003f22:	4621      	mov	r1, r4
 8003f24:	f7ff fdd2 	bl	8003acc <_Bfree>
 8003f28:	4628      	mov	r0, r5
 8003f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8003f32:	3301      	adds	r3, #1
 8003f34:	e7c1      	b.n	8003eba <__lshift+0x4a>
 8003f36:	3904      	subs	r1, #4
 8003f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8003f40:	4298      	cmp	r0, r3
 8003f42:	d8f9      	bhi.n	8003f38 <__lshift+0xc8>
 8003f44:	e7ea      	b.n	8003f1c <__lshift+0xac>
 8003f46:	bf00      	nop
 8003f48:	08004ae7 	.word	0x08004ae7
 8003f4c:	08004b58 	.word	0x08004b58

08003f50 <__mcmp>:
 8003f50:	b530      	push	{r4, r5, lr}
 8003f52:	6902      	ldr	r2, [r0, #16]
 8003f54:	690c      	ldr	r4, [r1, #16]
 8003f56:	1b12      	subs	r2, r2, r4
 8003f58:	d10e      	bne.n	8003f78 <__mcmp+0x28>
 8003f5a:	f100 0314 	add.w	r3, r0, #20
 8003f5e:	3114      	adds	r1, #20
 8003f60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8003f64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003f68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8003f6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8003f70:	42a5      	cmp	r5, r4
 8003f72:	d003      	beq.n	8003f7c <__mcmp+0x2c>
 8003f74:	d305      	bcc.n	8003f82 <__mcmp+0x32>
 8003f76:	2201      	movs	r2, #1
 8003f78:	4610      	mov	r0, r2
 8003f7a:	bd30      	pop	{r4, r5, pc}
 8003f7c:	4283      	cmp	r3, r0
 8003f7e:	d3f3      	bcc.n	8003f68 <__mcmp+0x18>
 8003f80:	e7fa      	b.n	8003f78 <__mcmp+0x28>
 8003f82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f86:	e7f7      	b.n	8003f78 <__mcmp+0x28>

08003f88 <__mdiff>:
 8003f88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f8c:	460c      	mov	r4, r1
 8003f8e:	4606      	mov	r6, r0
 8003f90:	4611      	mov	r1, r2
 8003f92:	4620      	mov	r0, r4
 8003f94:	4690      	mov	r8, r2
 8003f96:	f7ff ffdb 	bl	8003f50 <__mcmp>
 8003f9a:	1e05      	subs	r5, r0, #0
 8003f9c:	d110      	bne.n	8003fc0 <__mdiff+0x38>
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	4630      	mov	r0, r6
 8003fa2:	f7ff fd53 	bl	8003a4c <_Balloc>
 8003fa6:	b930      	cbnz	r0, 8003fb6 <__mdiff+0x2e>
 8003fa8:	4b3a      	ldr	r3, [pc, #232]	; (8004094 <__mdiff+0x10c>)
 8003faa:	4602      	mov	r2, r0
 8003fac:	f240 2132 	movw	r1, #562	; 0x232
 8003fb0:	4839      	ldr	r0, [pc, #228]	; (8004098 <__mdiff+0x110>)
 8003fb2:	f000 fa19 	bl	80043e8 <__assert_func>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003fbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc0:	bfa4      	itt	ge
 8003fc2:	4643      	movge	r3, r8
 8003fc4:	46a0      	movge	r8, r4
 8003fc6:	4630      	mov	r0, r6
 8003fc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003fcc:	bfa6      	itte	ge
 8003fce:	461c      	movge	r4, r3
 8003fd0:	2500      	movge	r5, #0
 8003fd2:	2501      	movlt	r5, #1
 8003fd4:	f7ff fd3a 	bl	8003a4c <_Balloc>
 8003fd8:	b920      	cbnz	r0, 8003fe4 <__mdiff+0x5c>
 8003fda:	4b2e      	ldr	r3, [pc, #184]	; (8004094 <__mdiff+0x10c>)
 8003fdc:	4602      	mov	r2, r0
 8003fde:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003fe2:	e7e5      	b.n	8003fb0 <__mdiff+0x28>
 8003fe4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003fe8:	6926      	ldr	r6, [r4, #16]
 8003fea:	60c5      	str	r5, [r0, #12]
 8003fec:	f104 0914 	add.w	r9, r4, #20
 8003ff0:	f108 0514 	add.w	r5, r8, #20
 8003ff4:	f100 0e14 	add.w	lr, r0, #20
 8003ff8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8003ffc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004000:	f108 0210 	add.w	r2, r8, #16
 8004004:	46f2      	mov	sl, lr
 8004006:	2100      	movs	r1, #0
 8004008:	f859 3b04 	ldr.w	r3, [r9], #4
 800400c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004010:	fa1f f883 	uxth.w	r8, r3
 8004014:	fa11 f18b 	uxtah	r1, r1, fp
 8004018:	0c1b      	lsrs	r3, r3, #16
 800401a:	eba1 0808 	sub.w	r8, r1, r8
 800401e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004022:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004026:	fa1f f888 	uxth.w	r8, r8
 800402a:	1419      	asrs	r1, r3, #16
 800402c:	454e      	cmp	r6, r9
 800402e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004032:	f84a 3b04 	str.w	r3, [sl], #4
 8004036:	d8e7      	bhi.n	8004008 <__mdiff+0x80>
 8004038:	1b33      	subs	r3, r6, r4
 800403a:	3b15      	subs	r3, #21
 800403c:	f023 0303 	bic.w	r3, r3, #3
 8004040:	3304      	adds	r3, #4
 8004042:	3415      	adds	r4, #21
 8004044:	42a6      	cmp	r6, r4
 8004046:	bf38      	it	cc
 8004048:	2304      	movcc	r3, #4
 800404a:	441d      	add	r5, r3
 800404c:	4473      	add	r3, lr
 800404e:	469e      	mov	lr, r3
 8004050:	462e      	mov	r6, r5
 8004052:	4566      	cmp	r6, ip
 8004054:	d30e      	bcc.n	8004074 <__mdiff+0xec>
 8004056:	f10c 0203 	add.w	r2, ip, #3
 800405a:	1b52      	subs	r2, r2, r5
 800405c:	f022 0203 	bic.w	r2, r2, #3
 8004060:	3d03      	subs	r5, #3
 8004062:	45ac      	cmp	ip, r5
 8004064:	bf38      	it	cc
 8004066:	2200      	movcc	r2, #0
 8004068:	441a      	add	r2, r3
 800406a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800406e:	b17b      	cbz	r3, 8004090 <__mdiff+0x108>
 8004070:	6107      	str	r7, [r0, #16]
 8004072:	e7a3      	b.n	8003fbc <__mdiff+0x34>
 8004074:	f856 8b04 	ldr.w	r8, [r6], #4
 8004078:	fa11 f288 	uxtah	r2, r1, r8
 800407c:	1414      	asrs	r4, r2, #16
 800407e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004082:	b292      	uxth	r2, r2
 8004084:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004088:	f84e 2b04 	str.w	r2, [lr], #4
 800408c:	1421      	asrs	r1, r4, #16
 800408e:	e7e0      	b.n	8004052 <__mdiff+0xca>
 8004090:	3f01      	subs	r7, #1
 8004092:	e7ea      	b.n	800406a <__mdiff+0xe2>
 8004094:	08004ae7 	.word	0x08004ae7
 8004098:	08004b58 	.word	0x08004b58

0800409c <__d2b>:
 800409c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80040a0:	4689      	mov	r9, r1
 80040a2:	2101      	movs	r1, #1
 80040a4:	ec57 6b10 	vmov	r6, r7, d0
 80040a8:	4690      	mov	r8, r2
 80040aa:	f7ff fccf 	bl	8003a4c <_Balloc>
 80040ae:	4604      	mov	r4, r0
 80040b0:	b930      	cbnz	r0, 80040c0 <__d2b+0x24>
 80040b2:	4602      	mov	r2, r0
 80040b4:	4b25      	ldr	r3, [pc, #148]	; (800414c <__d2b+0xb0>)
 80040b6:	4826      	ldr	r0, [pc, #152]	; (8004150 <__d2b+0xb4>)
 80040b8:	f240 310a 	movw	r1, #778	; 0x30a
 80040bc:	f000 f994 	bl	80043e8 <__assert_func>
 80040c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80040c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80040c8:	bb35      	cbnz	r5, 8004118 <__d2b+0x7c>
 80040ca:	2e00      	cmp	r6, #0
 80040cc:	9301      	str	r3, [sp, #4]
 80040ce:	d028      	beq.n	8004122 <__d2b+0x86>
 80040d0:	4668      	mov	r0, sp
 80040d2:	9600      	str	r6, [sp, #0]
 80040d4:	f7ff fd82 	bl	8003bdc <__lo0bits>
 80040d8:	9900      	ldr	r1, [sp, #0]
 80040da:	b300      	cbz	r0, 800411e <__d2b+0x82>
 80040dc:	9a01      	ldr	r2, [sp, #4]
 80040de:	f1c0 0320 	rsb	r3, r0, #32
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	430b      	orrs	r3, r1
 80040e8:	40c2      	lsrs	r2, r0
 80040ea:	6163      	str	r3, [r4, #20]
 80040ec:	9201      	str	r2, [sp, #4]
 80040ee:	9b01      	ldr	r3, [sp, #4]
 80040f0:	61a3      	str	r3, [r4, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	bf14      	ite	ne
 80040f6:	2202      	movne	r2, #2
 80040f8:	2201      	moveq	r2, #1
 80040fa:	6122      	str	r2, [r4, #16]
 80040fc:	b1d5      	cbz	r5, 8004134 <__d2b+0x98>
 80040fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004102:	4405      	add	r5, r0
 8004104:	f8c9 5000 	str.w	r5, [r9]
 8004108:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800410c:	f8c8 0000 	str.w	r0, [r8]
 8004110:	4620      	mov	r0, r4
 8004112:	b003      	add	sp, #12
 8004114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004118:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800411c:	e7d5      	b.n	80040ca <__d2b+0x2e>
 800411e:	6161      	str	r1, [r4, #20]
 8004120:	e7e5      	b.n	80040ee <__d2b+0x52>
 8004122:	a801      	add	r0, sp, #4
 8004124:	f7ff fd5a 	bl	8003bdc <__lo0bits>
 8004128:	9b01      	ldr	r3, [sp, #4]
 800412a:	6163      	str	r3, [r4, #20]
 800412c:	2201      	movs	r2, #1
 800412e:	6122      	str	r2, [r4, #16]
 8004130:	3020      	adds	r0, #32
 8004132:	e7e3      	b.n	80040fc <__d2b+0x60>
 8004134:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004138:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800413c:	f8c9 0000 	str.w	r0, [r9]
 8004140:	6918      	ldr	r0, [r3, #16]
 8004142:	f7ff fd2b 	bl	8003b9c <__hi0bits>
 8004146:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800414a:	e7df      	b.n	800410c <__d2b+0x70>
 800414c:	08004ae7 	.word	0x08004ae7
 8004150:	08004b58 	.word	0x08004b58

08004154 <_calloc_r>:
 8004154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004156:	fba1 2402 	umull	r2, r4, r1, r2
 800415a:	b94c      	cbnz	r4, 8004170 <_calloc_r+0x1c>
 800415c:	4611      	mov	r1, r2
 800415e:	9201      	str	r2, [sp, #4]
 8004160:	f000 f87a 	bl	8004258 <_malloc_r>
 8004164:	9a01      	ldr	r2, [sp, #4]
 8004166:	4605      	mov	r5, r0
 8004168:	b930      	cbnz	r0, 8004178 <_calloc_r+0x24>
 800416a:	4628      	mov	r0, r5
 800416c:	b003      	add	sp, #12
 800416e:	bd30      	pop	{r4, r5, pc}
 8004170:	220c      	movs	r2, #12
 8004172:	6002      	str	r2, [r0, #0]
 8004174:	2500      	movs	r5, #0
 8004176:	e7f8      	b.n	800416a <_calloc_r+0x16>
 8004178:	4621      	mov	r1, r4
 800417a:	f7fd fe7f 	bl	8001e7c <memset>
 800417e:	e7f4      	b.n	800416a <_calloc_r+0x16>

08004180 <_free_r>:
 8004180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004182:	2900      	cmp	r1, #0
 8004184:	d044      	beq.n	8004210 <_free_r+0x90>
 8004186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800418a:	9001      	str	r0, [sp, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	f1a1 0404 	sub.w	r4, r1, #4
 8004192:	bfb8      	it	lt
 8004194:	18e4      	addlt	r4, r4, r3
 8004196:	f000 f9ad 	bl	80044f4 <__malloc_lock>
 800419a:	4a1e      	ldr	r2, [pc, #120]	; (8004214 <_free_r+0x94>)
 800419c:	9801      	ldr	r0, [sp, #4]
 800419e:	6813      	ldr	r3, [r2, #0]
 80041a0:	b933      	cbnz	r3, 80041b0 <_free_r+0x30>
 80041a2:	6063      	str	r3, [r4, #4]
 80041a4:	6014      	str	r4, [r2, #0]
 80041a6:	b003      	add	sp, #12
 80041a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041ac:	f000 b9a8 	b.w	8004500 <__malloc_unlock>
 80041b0:	42a3      	cmp	r3, r4
 80041b2:	d908      	bls.n	80041c6 <_free_r+0x46>
 80041b4:	6825      	ldr	r5, [r4, #0]
 80041b6:	1961      	adds	r1, r4, r5
 80041b8:	428b      	cmp	r3, r1
 80041ba:	bf01      	itttt	eq
 80041bc:	6819      	ldreq	r1, [r3, #0]
 80041be:	685b      	ldreq	r3, [r3, #4]
 80041c0:	1949      	addeq	r1, r1, r5
 80041c2:	6021      	streq	r1, [r4, #0]
 80041c4:	e7ed      	b.n	80041a2 <_free_r+0x22>
 80041c6:	461a      	mov	r2, r3
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	b10b      	cbz	r3, 80041d0 <_free_r+0x50>
 80041cc:	42a3      	cmp	r3, r4
 80041ce:	d9fa      	bls.n	80041c6 <_free_r+0x46>
 80041d0:	6811      	ldr	r1, [r2, #0]
 80041d2:	1855      	adds	r5, r2, r1
 80041d4:	42a5      	cmp	r5, r4
 80041d6:	d10b      	bne.n	80041f0 <_free_r+0x70>
 80041d8:	6824      	ldr	r4, [r4, #0]
 80041da:	4421      	add	r1, r4
 80041dc:	1854      	adds	r4, r2, r1
 80041de:	42a3      	cmp	r3, r4
 80041e0:	6011      	str	r1, [r2, #0]
 80041e2:	d1e0      	bne.n	80041a6 <_free_r+0x26>
 80041e4:	681c      	ldr	r4, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	6053      	str	r3, [r2, #4]
 80041ea:	4421      	add	r1, r4
 80041ec:	6011      	str	r1, [r2, #0]
 80041ee:	e7da      	b.n	80041a6 <_free_r+0x26>
 80041f0:	d902      	bls.n	80041f8 <_free_r+0x78>
 80041f2:	230c      	movs	r3, #12
 80041f4:	6003      	str	r3, [r0, #0]
 80041f6:	e7d6      	b.n	80041a6 <_free_r+0x26>
 80041f8:	6825      	ldr	r5, [r4, #0]
 80041fa:	1961      	adds	r1, r4, r5
 80041fc:	428b      	cmp	r3, r1
 80041fe:	bf04      	itt	eq
 8004200:	6819      	ldreq	r1, [r3, #0]
 8004202:	685b      	ldreq	r3, [r3, #4]
 8004204:	6063      	str	r3, [r4, #4]
 8004206:	bf04      	itt	eq
 8004208:	1949      	addeq	r1, r1, r5
 800420a:	6021      	streq	r1, [r4, #0]
 800420c:	6054      	str	r4, [r2, #4]
 800420e:	e7ca      	b.n	80041a6 <_free_r+0x26>
 8004210:	b003      	add	sp, #12
 8004212:	bd30      	pop	{r4, r5, pc}
 8004214:	20000324 	.word	0x20000324

08004218 <sbrk_aligned>:
 8004218:	b570      	push	{r4, r5, r6, lr}
 800421a:	4e0e      	ldr	r6, [pc, #56]	; (8004254 <sbrk_aligned+0x3c>)
 800421c:	460c      	mov	r4, r1
 800421e:	6831      	ldr	r1, [r6, #0]
 8004220:	4605      	mov	r5, r0
 8004222:	b911      	cbnz	r1, 800422a <sbrk_aligned+0x12>
 8004224:	f000 f88c 	bl	8004340 <_sbrk_r>
 8004228:	6030      	str	r0, [r6, #0]
 800422a:	4621      	mov	r1, r4
 800422c:	4628      	mov	r0, r5
 800422e:	f000 f887 	bl	8004340 <_sbrk_r>
 8004232:	1c43      	adds	r3, r0, #1
 8004234:	d00a      	beq.n	800424c <sbrk_aligned+0x34>
 8004236:	1cc4      	adds	r4, r0, #3
 8004238:	f024 0403 	bic.w	r4, r4, #3
 800423c:	42a0      	cmp	r0, r4
 800423e:	d007      	beq.n	8004250 <sbrk_aligned+0x38>
 8004240:	1a21      	subs	r1, r4, r0
 8004242:	4628      	mov	r0, r5
 8004244:	f000 f87c 	bl	8004340 <_sbrk_r>
 8004248:	3001      	adds	r0, #1
 800424a:	d101      	bne.n	8004250 <sbrk_aligned+0x38>
 800424c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004250:	4620      	mov	r0, r4
 8004252:	bd70      	pop	{r4, r5, r6, pc}
 8004254:	20000328 	.word	0x20000328

08004258 <_malloc_r>:
 8004258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800425c:	1ccd      	adds	r5, r1, #3
 800425e:	f025 0503 	bic.w	r5, r5, #3
 8004262:	3508      	adds	r5, #8
 8004264:	2d0c      	cmp	r5, #12
 8004266:	bf38      	it	cc
 8004268:	250c      	movcc	r5, #12
 800426a:	2d00      	cmp	r5, #0
 800426c:	4607      	mov	r7, r0
 800426e:	db01      	blt.n	8004274 <_malloc_r+0x1c>
 8004270:	42a9      	cmp	r1, r5
 8004272:	d905      	bls.n	8004280 <_malloc_r+0x28>
 8004274:	230c      	movs	r3, #12
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	2600      	movs	r6, #0
 800427a:	4630      	mov	r0, r6
 800427c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004280:	4e2e      	ldr	r6, [pc, #184]	; (800433c <_malloc_r+0xe4>)
 8004282:	f000 f937 	bl	80044f4 <__malloc_lock>
 8004286:	6833      	ldr	r3, [r6, #0]
 8004288:	461c      	mov	r4, r3
 800428a:	bb34      	cbnz	r4, 80042da <_malloc_r+0x82>
 800428c:	4629      	mov	r1, r5
 800428e:	4638      	mov	r0, r7
 8004290:	f7ff ffc2 	bl	8004218 <sbrk_aligned>
 8004294:	1c43      	adds	r3, r0, #1
 8004296:	4604      	mov	r4, r0
 8004298:	d14d      	bne.n	8004336 <_malloc_r+0xde>
 800429a:	6834      	ldr	r4, [r6, #0]
 800429c:	4626      	mov	r6, r4
 800429e:	2e00      	cmp	r6, #0
 80042a0:	d140      	bne.n	8004324 <_malloc_r+0xcc>
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	4631      	mov	r1, r6
 80042a6:	4638      	mov	r0, r7
 80042a8:	eb04 0803 	add.w	r8, r4, r3
 80042ac:	f000 f848 	bl	8004340 <_sbrk_r>
 80042b0:	4580      	cmp	r8, r0
 80042b2:	d13a      	bne.n	800432a <_malloc_r+0xd2>
 80042b4:	6821      	ldr	r1, [r4, #0]
 80042b6:	3503      	adds	r5, #3
 80042b8:	1a6d      	subs	r5, r5, r1
 80042ba:	f025 0503 	bic.w	r5, r5, #3
 80042be:	3508      	adds	r5, #8
 80042c0:	2d0c      	cmp	r5, #12
 80042c2:	bf38      	it	cc
 80042c4:	250c      	movcc	r5, #12
 80042c6:	4629      	mov	r1, r5
 80042c8:	4638      	mov	r0, r7
 80042ca:	f7ff ffa5 	bl	8004218 <sbrk_aligned>
 80042ce:	3001      	adds	r0, #1
 80042d0:	d02b      	beq.n	800432a <_malloc_r+0xd2>
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	442b      	add	r3, r5
 80042d6:	6023      	str	r3, [r4, #0]
 80042d8:	e00e      	b.n	80042f8 <_malloc_r+0xa0>
 80042da:	6822      	ldr	r2, [r4, #0]
 80042dc:	1b52      	subs	r2, r2, r5
 80042de:	d41e      	bmi.n	800431e <_malloc_r+0xc6>
 80042e0:	2a0b      	cmp	r2, #11
 80042e2:	d916      	bls.n	8004312 <_malloc_r+0xba>
 80042e4:	1961      	adds	r1, r4, r5
 80042e6:	42a3      	cmp	r3, r4
 80042e8:	6025      	str	r5, [r4, #0]
 80042ea:	bf18      	it	ne
 80042ec:	6059      	strne	r1, [r3, #4]
 80042ee:	6863      	ldr	r3, [r4, #4]
 80042f0:	bf08      	it	eq
 80042f2:	6031      	streq	r1, [r6, #0]
 80042f4:	5162      	str	r2, [r4, r5]
 80042f6:	604b      	str	r3, [r1, #4]
 80042f8:	4638      	mov	r0, r7
 80042fa:	f104 060b 	add.w	r6, r4, #11
 80042fe:	f000 f8ff 	bl	8004500 <__malloc_unlock>
 8004302:	f026 0607 	bic.w	r6, r6, #7
 8004306:	1d23      	adds	r3, r4, #4
 8004308:	1af2      	subs	r2, r6, r3
 800430a:	d0b6      	beq.n	800427a <_malloc_r+0x22>
 800430c:	1b9b      	subs	r3, r3, r6
 800430e:	50a3      	str	r3, [r4, r2]
 8004310:	e7b3      	b.n	800427a <_malloc_r+0x22>
 8004312:	6862      	ldr	r2, [r4, #4]
 8004314:	42a3      	cmp	r3, r4
 8004316:	bf0c      	ite	eq
 8004318:	6032      	streq	r2, [r6, #0]
 800431a:	605a      	strne	r2, [r3, #4]
 800431c:	e7ec      	b.n	80042f8 <_malloc_r+0xa0>
 800431e:	4623      	mov	r3, r4
 8004320:	6864      	ldr	r4, [r4, #4]
 8004322:	e7b2      	b.n	800428a <_malloc_r+0x32>
 8004324:	4634      	mov	r4, r6
 8004326:	6876      	ldr	r6, [r6, #4]
 8004328:	e7b9      	b.n	800429e <_malloc_r+0x46>
 800432a:	230c      	movs	r3, #12
 800432c:	603b      	str	r3, [r7, #0]
 800432e:	4638      	mov	r0, r7
 8004330:	f000 f8e6 	bl	8004500 <__malloc_unlock>
 8004334:	e7a1      	b.n	800427a <_malloc_r+0x22>
 8004336:	6025      	str	r5, [r4, #0]
 8004338:	e7de      	b.n	80042f8 <_malloc_r+0xa0>
 800433a:	bf00      	nop
 800433c:	20000324 	.word	0x20000324

08004340 <_sbrk_r>:
 8004340:	b538      	push	{r3, r4, r5, lr}
 8004342:	4d06      	ldr	r5, [pc, #24]	; (800435c <_sbrk_r+0x1c>)
 8004344:	2300      	movs	r3, #0
 8004346:	4604      	mov	r4, r0
 8004348:	4608      	mov	r0, r1
 800434a:	602b      	str	r3, [r5, #0]
 800434c:	f7fd fc74 	bl	8001c38 <_sbrk>
 8004350:	1c43      	adds	r3, r0, #1
 8004352:	d102      	bne.n	800435a <_sbrk_r+0x1a>
 8004354:	682b      	ldr	r3, [r5, #0]
 8004356:	b103      	cbz	r3, 800435a <_sbrk_r+0x1a>
 8004358:	6023      	str	r3, [r4, #0]
 800435a:	bd38      	pop	{r3, r4, r5, pc}
 800435c:	2000032c 	.word	0x2000032c

08004360 <__sread>:
 8004360:	b510      	push	{r4, lr}
 8004362:	460c      	mov	r4, r1
 8004364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004368:	f000 fa2a 	bl	80047c0 <_read_r>
 800436c:	2800      	cmp	r0, #0
 800436e:	bfab      	itete	ge
 8004370:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004372:	89a3      	ldrhlt	r3, [r4, #12]
 8004374:	181b      	addge	r3, r3, r0
 8004376:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800437a:	bfac      	ite	ge
 800437c:	6563      	strge	r3, [r4, #84]	; 0x54
 800437e:	81a3      	strhlt	r3, [r4, #12]
 8004380:	bd10      	pop	{r4, pc}

08004382 <__swrite>:
 8004382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004386:	461f      	mov	r7, r3
 8004388:	898b      	ldrh	r3, [r1, #12]
 800438a:	05db      	lsls	r3, r3, #23
 800438c:	4605      	mov	r5, r0
 800438e:	460c      	mov	r4, r1
 8004390:	4616      	mov	r6, r2
 8004392:	d505      	bpl.n	80043a0 <__swrite+0x1e>
 8004394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004398:	2302      	movs	r3, #2
 800439a:	2200      	movs	r2, #0
 800439c:	f000 f886 	bl	80044ac <_lseek_r>
 80043a0:	89a3      	ldrh	r3, [r4, #12]
 80043a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043aa:	81a3      	strh	r3, [r4, #12]
 80043ac:	4632      	mov	r2, r6
 80043ae:	463b      	mov	r3, r7
 80043b0:	4628      	mov	r0, r5
 80043b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043b6:	f7fd b9d5 	b.w	8001764 <_write_r>

080043ba <__sseek>:
 80043ba:	b510      	push	{r4, lr}
 80043bc:	460c      	mov	r4, r1
 80043be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043c2:	f000 f873 	bl	80044ac <_lseek_r>
 80043c6:	1c43      	adds	r3, r0, #1
 80043c8:	89a3      	ldrh	r3, [r4, #12]
 80043ca:	bf15      	itete	ne
 80043cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80043ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80043d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80043d6:	81a3      	strheq	r3, [r4, #12]
 80043d8:	bf18      	it	ne
 80043da:	81a3      	strhne	r3, [r4, #12]
 80043dc:	bd10      	pop	{r4, pc}

080043de <__sclose>:
 80043de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043e2:	f000 b81f 	b.w	8004424 <_close_r>
	...

080043e8 <__assert_func>:
 80043e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80043ea:	4614      	mov	r4, r2
 80043ec:	461a      	mov	r2, r3
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <__assert_func+0x2c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4605      	mov	r5, r0
 80043f4:	68d8      	ldr	r0, [r3, #12]
 80043f6:	b14c      	cbz	r4, 800440c <__assert_func+0x24>
 80043f8:	4b07      	ldr	r3, [pc, #28]	; (8004418 <__assert_func+0x30>)
 80043fa:	9100      	str	r1, [sp, #0]
 80043fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004400:	4906      	ldr	r1, [pc, #24]	; (800441c <__assert_func+0x34>)
 8004402:	462b      	mov	r3, r5
 8004404:	f000 f81e 	bl	8004444 <fiprintf>
 8004408:	f000 faba 	bl	8004980 <abort>
 800440c:	4b04      	ldr	r3, [pc, #16]	; (8004420 <__assert_func+0x38>)
 800440e:	461c      	mov	r4, r3
 8004410:	e7f3      	b.n	80043fa <__assert_func+0x12>
 8004412:	bf00      	nop
 8004414:	2000002c 	.word	0x2000002c
 8004418:	08004cb4 	.word	0x08004cb4
 800441c:	08004cc1 	.word	0x08004cc1
 8004420:	08004cef 	.word	0x08004cef

08004424 <_close_r>:
 8004424:	b538      	push	{r3, r4, r5, lr}
 8004426:	4d06      	ldr	r5, [pc, #24]	; (8004440 <_close_r+0x1c>)
 8004428:	2300      	movs	r3, #0
 800442a:	4604      	mov	r4, r0
 800442c:	4608      	mov	r0, r1
 800442e:	602b      	str	r3, [r5, #0]
 8004430:	f7fd fbcd 	bl	8001bce <_close>
 8004434:	1c43      	adds	r3, r0, #1
 8004436:	d102      	bne.n	800443e <_close_r+0x1a>
 8004438:	682b      	ldr	r3, [r5, #0]
 800443a:	b103      	cbz	r3, 800443e <_close_r+0x1a>
 800443c:	6023      	str	r3, [r4, #0]
 800443e:	bd38      	pop	{r3, r4, r5, pc}
 8004440:	2000032c 	.word	0x2000032c

08004444 <fiprintf>:
 8004444:	b40e      	push	{r1, r2, r3}
 8004446:	b503      	push	{r0, r1, lr}
 8004448:	4601      	mov	r1, r0
 800444a:	ab03      	add	r3, sp, #12
 800444c:	4805      	ldr	r0, [pc, #20]	; (8004464 <fiprintf+0x20>)
 800444e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004452:	6800      	ldr	r0, [r0, #0]
 8004454:	9301      	str	r3, [sp, #4]
 8004456:	f000 f883 	bl	8004560 <_vfiprintf_r>
 800445a:	b002      	add	sp, #8
 800445c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004460:	b003      	add	sp, #12
 8004462:	4770      	bx	lr
 8004464:	2000002c 	.word	0x2000002c

08004468 <_fstat_r>:
 8004468:	b538      	push	{r3, r4, r5, lr}
 800446a:	4d07      	ldr	r5, [pc, #28]	; (8004488 <_fstat_r+0x20>)
 800446c:	2300      	movs	r3, #0
 800446e:	4604      	mov	r4, r0
 8004470:	4608      	mov	r0, r1
 8004472:	4611      	mov	r1, r2
 8004474:	602b      	str	r3, [r5, #0]
 8004476:	f7fd fbb6 	bl	8001be6 <_fstat>
 800447a:	1c43      	adds	r3, r0, #1
 800447c:	d102      	bne.n	8004484 <_fstat_r+0x1c>
 800447e:	682b      	ldr	r3, [r5, #0]
 8004480:	b103      	cbz	r3, 8004484 <_fstat_r+0x1c>
 8004482:	6023      	str	r3, [r4, #0]
 8004484:	bd38      	pop	{r3, r4, r5, pc}
 8004486:	bf00      	nop
 8004488:	2000032c 	.word	0x2000032c

0800448c <_isatty_r>:
 800448c:	b538      	push	{r3, r4, r5, lr}
 800448e:	4d06      	ldr	r5, [pc, #24]	; (80044a8 <_isatty_r+0x1c>)
 8004490:	2300      	movs	r3, #0
 8004492:	4604      	mov	r4, r0
 8004494:	4608      	mov	r0, r1
 8004496:	602b      	str	r3, [r5, #0]
 8004498:	f7fd fbb5 	bl	8001c06 <_isatty>
 800449c:	1c43      	adds	r3, r0, #1
 800449e:	d102      	bne.n	80044a6 <_isatty_r+0x1a>
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	b103      	cbz	r3, 80044a6 <_isatty_r+0x1a>
 80044a4:	6023      	str	r3, [r4, #0]
 80044a6:	bd38      	pop	{r3, r4, r5, pc}
 80044a8:	2000032c 	.word	0x2000032c

080044ac <_lseek_r>:
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	4d07      	ldr	r5, [pc, #28]	; (80044cc <_lseek_r+0x20>)
 80044b0:	4604      	mov	r4, r0
 80044b2:	4608      	mov	r0, r1
 80044b4:	4611      	mov	r1, r2
 80044b6:	2200      	movs	r2, #0
 80044b8:	602a      	str	r2, [r5, #0]
 80044ba:	461a      	mov	r2, r3
 80044bc:	f7fd fbae 	bl	8001c1c <_lseek>
 80044c0:	1c43      	adds	r3, r0, #1
 80044c2:	d102      	bne.n	80044ca <_lseek_r+0x1e>
 80044c4:	682b      	ldr	r3, [r5, #0]
 80044c6:	b103      	cbz	r3, 80044ca <_lseek_r+0x1e>
 80044c8:	6023      	str	r3, [r4, #0]
 80044ca:	bd38      	pop	{r3, r4, r5, pc}
 80044cc:	2000032c 	.word	0x2000032c

080044d0 <__ascii_mbtowc>:
 80044d0:	b082      	sub	sp, #8
 80044d2:	b901      	cbnz	r1, 80044d6 <__ascii_mbtowc+0x6>
 80044d4:	a901      	add	r1, sp, #4
 80044d6:	b142      	cbz	r2, 80044ea <__ascii_mbtowc+0x1a>
 80044d8:	b14b      	cbz	r3, 80044ee <__ascii_mbtowc+0x1e>
 80044da:	7813      	ldrb	r3, [r2, #0]
 80044dc:	600b      	str	r3, [r1, #0]
 80044de:	7812      	ldrb	r2, [r2, #0]
 80044e0:	1e10      	subs	r0, r2, #0
 80044e2:	bf18      	it	ne
 80044e4:	2001      	movne	r0, #1
 80044e6:	b002      	add	sp, #8
 80044e8:	4770      	bx	lr
 80044ea:	4610      	mov	r0, r2
 80044ec:	e7fb      	b.n	80044e6 <__ascii_mbtowc+0x16>
 80044ee:	f06f 0001 	mvn.w	r0, #1
 80044f2:	e7f8      	b.n	80044e6 <__ascii_mbtowc+0x16>

080044f4 <__malloc_lock>:
 80044f4:	4801      	ldr	r0, [pc, #4]	; (80044fc <__malloc_lock+0x8>)
 80044f6:	f7ff ba3a 	b.w	800396e <__retarget_lock_acquire_recursive>
 80044fa:	bf00      	nop
 80044fc:	20000320 	.word	0x20000320

08004500 <__malloc_unlock>:
 8004500:	4801      	ldr	r0, [pc, #4]	; (8004508 <__malloc_unlock+0x8>)
 8004502:	f7ff ba35 	b.w	8003970 <__retarget_lock_release_recursive>
 8004506:	bf00      	nop
 8004508:	20000320 	.word	0x20000320

0800450c <__sfputc_r>:
 800450c:	6893      	ldr	r3, [r2, #8]
 800450e:	3b01      	subs	r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	b410      	push	{r4}
 8004514:	6093      	str	r3, [r2, #8]
 8004516:	da08      	bge.n	800452a <__sfputc_r+0x1e>
 8004518:	6994      	ldr	r4, [r2, #24]
 800451a:	42a3      	cmp	r3, r4
 800451c:	db01      	blt.n	8004522 <__sfputc_r+0x16>
 800451e:	290a      	cmp	r1, #10
 8004520:	d103      	bne.n	800452a <__sfputc_r+0x1e>
 8004522:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004526:	f000 b95d 	b.w	80047e4 <__swbuf_r>
 800452a:	6813      	ldr	r3, [r2, #0]
 800452c:	1c58      	adds	r0, r3, #1
 800452e:	6010      	str	r0, [r2, #0]
 8004530:	7019      	strb	r1, [r3, #0]
 8004532:	4608      	mov	r0, r1
 8004534:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004538:	4770      	bx	lr

0800453a <__sfputs_r>:
 800453a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453c:	4606      	mov	r6, r0
 800453e:	460f      	mov	r7, r1
 8004540:	4614      	mov	r4, r2
 8004542:	18d5      	adds	r5, r2, r3
 8004544:	42ac      	cmp	r4, r5
 8004546:	d101      	bne.n	800454c <__sfputs_r+0x12>
 8004548:	2000      	movs	r0, #0
 800454a:	e007      	b.n	800455c <__sfputs_r+0x22>
 800454c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004550:	463a      	mov	r2, r7
 8004552:	4630      	mov	r0, r6
 8004554:	f7ff ffda 	bl	800450c <__sfputc_r>
 8004558:	1c43      	adds	r3, r0, #1
 800455a:	d1f3      	bne.n	8004544 <__sfputs_r+0xa>
 800455c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004560 <_vfiprintf_r>:
 8004560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004564:	460d      	mov	r5, r1
 8004566:	b09d      	sub	sp, #116	; 0x74
 8004568:	4614      	mov	r4, r2
 800456a:	4698      	mov	r8, r3
 800456c:	4606      	mov	r6, r0
 800456e:	b118      	cbz	r0, 8004578 <_vfiprintf_r+0x18>
 8004570:	6983      	ldr	r3, [r0, #24]
 8004572:	b90b      	cbnz	r3, 8004578 <_vfiprintf_r+0x18>
 8004574:	f7ff f958 	bl	8003828 <__sinit>
 8004578:	4b89      	ldr	r3, [pc, #548]	; (80047a0 <_vfiprintf_r+0x240>)
 800457a:	429d      	cmp	r5, r3
 800457c:	d11b      	bne.n	80045b6 <_vfiprintf_r+0x56>
 800457e:	6875      	ldr	r5, [r6, #4]
 8004580:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004582:	07d9      	lsls	r1, r3, #31
 8004584:	d405      	bmi.n	8004592 <_vfiprintf_r+0x32>
 8004586:	89ab      	ldrh	r3, [r5, #12]
 8004588:	059a      	lsls	r2, r3, #22
 800458a:	d402      	bmi.n	8004592 <_vfiprintf_r+0x32>
 800458c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800458e:	f7ff f9ee 	bl	800396e <__retarget_lock_acquire_recursive>
 8004592:	89ab      	ldrh	r3, [r5, #12]
 8004594:	071b      	lsls	r3, r3, #28
 8004596:	d501      	bpl.n	800459c <_vfiprintf_r+0x3c>
 8004598:	692b      	ldr	r3, [r5, #16]
 800459a:	b9eb      	cbnz	r3, 80045d8 <_vfiprintf_r+0x78>
 800459c:	4629      	mov	r1, r5
 800459e:	4630      	mov	r0, r6
 80045a0:	f000 f980 	bl	80048a4 <__swsetup_r>
 80045a4:	b1c0      	cbz	r0, 80045d8 <_vfiprintf_r+0x78>
 80045a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045a8:	07dc      	lsls	r4, r3, #31
 80045aa:	d50e      	bpl.n	80045ca <_vfiprintf_r+0x6a>
 80045ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045b0:	b01d      	add	sp, #116	; 0x74
 80045b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045b6:	4b7b      	ldr	r3, [pc, #492]	; (80047a4 <_vfiprintf_r+0x244>)
 80045b8:	429d      	cmp	r5, r3
 80045ba:	d101      	bne.n	80045c0 <_vfiprintf_r+0x60>
 80045bc:	68b5      	ldr	r5, [r6, #8]
 80045be:	e7df      	b.n	8004580 <_vfiprintf_r+0x20>
 80045c0:	4b79      	ldr	r3, [pc, #484]	; (80047a8 <_vfiprintf_r+0x248>)
 80045c2:	429d      	cmp	r5, r3
 80045c4:	bf08      	it	eq
 80045c6:	68f5      	ldreq	r5, [r6, #12]
 80045c8:	e7da      	b.n	8004580 <_vfiprintf_r+0x20>
 80045ca:	89ab      	ldrh	r3, [r5, #12]
 80045cc:	0598      	lsls	r0, r3, #22
 80045ce:	d4ed      	bmi.n	80045ac <_vfiprintf_r+0x4c>
 80045d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045d2:	f7ff f9cd 	bl	8003970 <__retarget_lock_release_recursive>
 80045d6:	e7e9      	b.n	80045ac <_vfiprintf_r+0x4c>
 80045d8:	2300      	movs	r3, #0
 80045da:	9309      	str	r3, [sp, #36]	; 0x24
 80045dc:	2320      	movs	r3, #32
 80045de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80045e6:	2330      	movs	r3, #48	; 0x30
 80045e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80047ac <_vfiprintf_r+0x24c>
 80045ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045f0:	f04f 0901 	mov.w	r9, #1
 80045f4:	4623      	mov	r3, r4
 80045f6:	469a      	mov	sl, r3
 80045f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045fc:	b10a      	cbz	r2, 8004602 <_vfiprintf_r+0xa2>
 80045fe:	2a25      	cmp	r2, #37	; 0x25
 8004600:	d1f9      	bne.n	80045f6 <_vfiprintf_r+0x96>
 8004602:	ebba 0b04 	subs.w	fp, sl, r4
 8004606:	d00b      	beq.n	8004620 <_vfiprintf_r+0xc0>
 8004608:	465b      	mov	r3, fp
 800460a:	4622      	mov	r2, r4
 800460c:	4629      	mov	r1, r5
 800460e:	4630      	mov	r0, r6
 8004610:	f7ff ff93 	bl	800453a <__sfputs_r>
 8004614:	3001      	adds	r0, #1
 8004616:	f000 80aa 	beq.w	800476e <_vfiprintf_r+0x20e>
 800461a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800461c:	445a      	add	r2, fp
 800461e:	9209      	str	r2, [sp, #36]	; 0x24
 8004620:	f89a 3000 	ldrb.w	r3, [sl]
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 80a2 	beq.w	800476e <_vfiprintf_r+0x20e>
 800462a:	2300      	movs	r3, #0
 800462c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004630:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004634:	f10a 0a01 	add.w	sl, sl, #1
 8004638:	9304      	str	r3, [sp, #16]
 800463a:	9307      	str	r3, [sp, #28]
 800463c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004640:	931a      	str	r3, [sp, #104]	; 0x68
 8004642:	4654      	mov	r4, sl
 8004644:	2205      	movs	r2, #5
 8004646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800464a:	4858      	ldr	r0, [pc, #352]	; (80047ac <_vfiprintf_r+0x24c>)
 800464c:	f7fb fdc8 	bl	80001e0 <memchr>
 8004650:	9a04      	ldr	r2, [sp, #16]
 8004652:	b9d8      	cbnz	r0, 800468c <_vfiprintf_r+0x12c>
 8004654:	06d1      	lsls	r1, r2, #27
 8004656:	bf44      	itt	mi
 8004658:	2320      	movmi	r3, #32
 800465a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800465e:	0713      	lsls	r3, r2, #28
 8004660:	bf44      	itt	mi
 8004662:	232b      	movmi	r3, #43	; 0x2b
 8004664:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004668:	f89a 3000 	ldrb.w	r3, [sl]
 800466c:	2b2a      	cmp	r3, #42	; 0x2a
 800466e:	d015      	beq.n	800469c <_vfiprintf_r+0x13c>
 8004670:	9a07      	ldr	r2, [sp, #28]
 8004672:	4654      	mov	r4, sl
 8004674:	2000      	movs	r0, #0
 8004676:	f04f 0c0a 	mov.w	ip, #10
 800467a:	4621      	mov	r1, r4
 800467c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004680:	3b30      	subs	r3, #48	; 0x30
 8004682:	2b09      	cmp	r3, #9
 8004684:	d94e      	bls.n	8004724 <_vfiprintf_r+0x1c4>
 8004686:	b1b0      	cbz	r0, 80046b6 <_vfiprintf_r+0x156>
 8004688:	9207      	str	r2, [sp, #28]
 800468a:	e014      	b.n	80046b6 <_vfiprintf_r+0x156>
 800468c:	eba0 0308 	sub.w	r3, r0, r8
 8004690:	fa09 f303 	lsl.w	r3, r9, r3
 8004694:	4313      	orrs	r3, r2
 8004696:	9304      	str	r3, [sp, #16]
 8004698:	46a2      	mov	sl, r4
 800469a:	e7d2      	b.n	8004642 <_vfiprintf_r+0xe2>
 800469c:	9b03      	ldr	r3, [sp, #12]
 800469e:	1d19      	adds	r1, r3, #4
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	9103      	str	r1, [sp, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	bfbb      	ittet	lt
 80046a8:	425b      	neglt	r3, r3
 80046aa:	f042 0202 	orrlt.w	r2, r2, #2
 80046ae:	9307      	strge	r3, [sp, #28]
 80046b0:	9307      	strlt	r3, [sp, #28]
 80046b2:	bfb8      	it	lt
 80046b4:	9204      	strlt	r2, [sp, #16]
 80046b6:	7823      	ldrb	r3, [r4, #0]
 80046b8:	2b2e      	cmp	r3, #46	; 0x2e
 80046ba:	d10c      	bne.n	80046d6 <_vfiprintf_r+0x176>
 80046bc:	7863      	ldrb	r3, [r4, #1]
 80046be:	2b2a      	cmp	r3, #42	; 0x2a
 80046c0:	d135      	bne.n	800472e <_vfiprintf_r+0x1ce>
 80046c2:	9b03      	ldr	r3, [sp, #12]
 80046c4:	1d1a      	adds	r2, r3, #4
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	9203      	str	r2, [sp, #12]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	bfb8      	it	lt
 80046ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80046d2:	3402      	adds	r4, #2
 80046d4:	9305      	str	r3, [sp, #20]
 80046d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80047bc <_vfiprintf_r+0x25c>
 80046da:	7821      	ldrb	r1, [r4, #0]
 80046dc:	2203      	movs	r2, #3
 80046de:	4650      	mov	r0, sl
 80046e0:	f7fb fd7e 	bl	80001e0 <memchr>
 80046e4:	b140      	cbz	r0, 80046f8 <_vfiprintf_r+0x198>
 80046e6:	2340      	movs	r3, #64	; 0x40
 80046e8:	eba0 000a 	sub.w	r0, r0, sl
 80046ec:	fa03 f000 	lsl.w	r0, r3, r0
 80046f0:	9b04      	ldr	r3, [sp, #16]
 80046f2:	4303      	orrs	r3, r0
 80046f4:	3401      	adds	r4, #1
 80046f6:	9304      	str	r3, [sp, #16]
 80046f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046fc:	482c      	ldr	r0, [pc, #176]	; (80047b0 <_vfiprintf_r+0x250>)
 80046fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004702:	2206      	movs	r2, #6
 8004704:	f7fb fd6c 	bl	80001e0 <memchr>
 8004708:	2800      	cmp	r0, #0
 800470a:	d03f      	beq.n	800478c <_vfiprintf_r+0x22c>
 800470c:	4b29      	ldr	r3, [pc, #164]	; (80047b4 <_vfiprintf_r+0x254>)
 800470e:	bb1b      	cbnz	r3, 8004758 <_vfiprintf_r+0x1f8>
 8004710:	9b03      	ldr	r3, [sp, #12]
 8004712:	3307      	adds	r3, #7
 8004714:	f023 0307 	bic.w	r3, r3, #7
 8004718:	3308      	adds	r3, #8
 800471a:	9303      	str	r3, [sp, #12]
 800471c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800471e:	443b      	add	r3, r7
 8004720:	9309      	str	r3, [sp, #36]	; 0x24
 8004722:	e767      	b.n	80045f4 <_vfiprintf_r+0x94>
 8004724:	fb0c 3202 	mla	r2, ip, r2, r3
 8004728:	460c      	mov	r4, r1
 800472a:	2001      	movs	r0, #1
 800472c:	e7a5      	b.n	800467a <_vfiprintf_r+0x11a>
 800472e:	2300      	movs	r3, #0
 8004730:	3401      	adds	r4, #1
 8004732:	9305      	str	r3, [sp, #20]
 8004734:	4619      	mov	r1, r3
 8004736:	f04f 0c0a 	mov.w	ip, #10
 800473a:	4620      	mov	r0, r4
 800473c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004740:	3a30      	subs	r2, #48	; 0x30
 8004742:	2a09      	cmp	r2, #9
 8004744:	d903      	bls.n	800474e <_vfiprintf_r+0x1ee>
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0c5      	beq.n	80046d6 <_vfiprintf_r+0x176>
 800474a:	9105      	str	r1, [sp, #20]
 800474c:	e7c3      	b.n	80046d6 <_vfiprintf_r+0x176>
 800474e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004752:	4604      	mov	r4, r0
 8004754:	2301      	movs	r3, #1
 8004756:	e7f0      	b.n	800473a <_vfiprintf_r+0x1da>
 8004758:	ab03      	add	r3, sp, #12
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	462a      	mov	r2, r5
 800475e:	4b16      	ldr	r3, [pc, #88]	; (80047b8 <_vfiprintf_r+0x258>)
 8004760:	a904      	add	r1, sp, #16
 8004762:	4630      	mov	r0, r6
 8004764:	f7fd fc32 	bl	8001fcc <_printf_float>
 8004768:	4607      	mov	r7, r0
 800476a:	1c78      	adds	r0, r7, #1
 800476c:	d1d6      	bne.n	800471c <_vfiprintf_r+0x1bc>
 800476e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004770:	07d9      	lsls	r1, r3, #31
 8004772:	d405      	bmi.n	8004780 <_vfiprintf_r+0x220>
 8004774:	89ab      	ldrh	r3, [r5, #12]
 8004776:	059a      	lsls	r2, r3, #22
 8004778:	d402      	bmi.n	8004780 <_vfiprintf_r+0x220>
 800477a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800477c:	f7ff f8f8 	bl	8003970 <__retarget_lock_release_recursive>
 8004780:	89ab      	ldrh	r3, [r5, #12]
 8004782:	065b      	lsls	r3, r3, #25
 8004784:	f53f af12 	bmi.w	80045ac <_vfiprintf_r+0x4c>
 8004788:	9809      	ldr	r0, [sp, #36]	; 0x24
 800478a:	e711      	b.n	80045b0 <_vfiprintf_r+0x50>
 800478c:	ab03      	add	r3, sp, #12
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	462a      	mov	r2, r5
 8004792:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <_vfiprintf_r+0x258>)
 8004794:	a904      	add	r1, sp, #16
 8004796:	4630      	mov	r0, r6
 8004798:	f7fd febc 	bl	8002514 <_printf_i>
 800479c:	e7e4      	b.n	8004768 <_vfiprintf_r+0x208>
 800479e:	bf00      	nop
 80047a0:	08004b18 	.word	0x08004b18
 80047a4:	08004b38 	.word	0x08004b38
 80047a8:	08004af8 	.word	0x08004af8
 80047ac:	08004cfa 	.word	0x08004cfa
 80047b0:	08004d04 	.word	0x08004d04
 80047b4:	08001fcd 	.word	0x08001fcd
 80047b8:	0800453b 	.word	0x0800453b
 80047bc:	08004d00 	.word	0x08004d00

080047c0 <_read_r>:
 80047c0:	b538      	push	{r3, r4, r5, lr}
 80047c2:	4d07      	ldr	r5, [pc, #28]	; (80047e0 <_read_r+0x20>)
 80047c4:	4604      	mov	r4, r0
 80047c6:	4608      	mov	r0, r1
 80047c8:	4611      	mov	r1, r2
 80047ca:	2200      	movs	r2, #0
 80047cc:	602a      	str	r2, [r5, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	f7fd f9e0 	bl	8001b94 <_read>
 80047d4:	1c43      	adds	r3, r0, #1
 80047d6:	d102      	bne.n	80047de <_read_r+0x1e>
 80047d8:	682b      	ldr	r3, [r5, #0]
 80047da:	b103      	cbz	r3, 80047de <_read_r+0x1e>
 80047dc:	6023      	str	r3, [r4, #0]
 80047de:	bd38      	pop	{r3, r4, r5, pc}
 80047e0:	2000032c 	.word	0x2000032c

080047e4 <__swbuf_r>:
 80047e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e6:	460e      	mov	r6, r1
 80047e8:	4614      	mov	r4, r2
 80047ea:	4605      	mov	r5, r0
 80047ec:	b118      	cbz	r0, 80047f6 <__swbuf_r+0x12>
 80047ee:	6983      	ldr	r3, [r0, #24]
 80047f0:	b90b      	cbnz	r3, 80047f6 <__swbuf_r+0x12>
 80047f2:	f7ff f819 	bl	8003828 <__sinit>
 80047f6:	4b21      	ldr	r3, [pc, #132]	; (800487c <__swbuf_r+0x98>)
 80047f8:	429c      	cmp	r4, r3
 80047fa:	d12b      	bne.n	8004854 <__swbuf_r+0x70>
 80047fc:	686c      	ldr	r4, [r5, #4]
 80047fe:	69a3      	ldr	r3, [r4, #24]
 8004800:	60a3      	str	r3, [r4, #8]
 8004802:	89a3      	ldrh	r3, [r4, #12]
 8004804:	071a      	lsls	r2, r3, #28
 8004806:	d52f      	bpl.n	8004868 <__swbuf_r+0x84>
 8004808:	6923      	ldr	r3, [r4, #16]
 800480a:	b36b      	cbz	r3, 8004868 <__swbuf_r+0x84>
 800480c:	6923      	ldr	r3, [r4, #16]
 800480e:	6820      	ldr	r0, [r4, #0]
 8004810:	1ac0      	subs	r0, r0, r3
 8004812:	6963      	ldr	r3, [r4, #20]
 8004814:	b2f6      	uxtb	r6, r6
 8004816:	4283      	cmp	r3, r0
 8004818:	4637      	mov	r7, r6
 800481a:	dc04      	bgt.n	8004826 <__swbuf_r+0x42>
 800481c:	4621      	mov	r1, r4
 800481e:	4628      	mov	r0, r5
 8004820:	f7fe ff6e 	bl	8003700 <_fflush_r>
 8004824:	bb30      	cbnz	r0, 8004874 <__swbuf_r+0x90>
 8004826:	68a3      	ldr	r3, [r4, #8]
 8004828:	3b01      	subs	r3, #1
 800482a:	60a3      	str	r3, [r4, #8]
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	6022      	str	r2, [r4, #0]
 8004832:	701e      	strb	r6, [r3, #0]
 8004834:	6963      	ldr	r3, [r4, #20]
 8004836:	3001      	adds	r0, #1
 8004838:	4283      	cmp	r3, r0
 800483a:	d004      	beq.n	8004846 <__swbuf_r+0x62>
 800483c:	89a3      	ldrh	r3, [r4, #12]
 800483e:	07db      	lsls	r3, r3, #31
 8004840:	d506      	bpl.n	8004850 <__swbuf_r+0x6c>
 8004842:	2e0a      	cmp	r6, #10
 8004844:	d104      	bne.n	8004850 <__swbuf_r+0x6c>
 8004846:	4621      	mov	r1, r4
 8004848:	4628      	mov	r0, r5
 800484a:	f7fe ff59 	bl	8003700 <_fflush_r>
 800484e:	b988      	cbnz	r0, 8004874 <__swbuf_r+0x90>
 8004850:	4638      	mov	r0, r7
 8004852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004854:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <__swbuf_r+0x9c>)
 8004856:	429c      	cmp	r4, r3
 8004858:	d101      	bne.n	800485e <__swbuf_r+0x7a>
 800485a:	68ac      	ldr	r4, [r5, #8]
 800485c:	e7cf      	b.n	80047fe <__swbuf_r+0x1a>
 800485e:	4b09      	ldr	r3, [pc, #36]	; (8004884 <__swbuf_r+0xa0>)
 8004860:	429c      	cmp	r4, r3
 8004862:	bf08      	it	eq
 8004864:	68ec      	ldreq	r4, [r5, #12]
 8004866:	e7ca      	b.n	80047fe <__swbuf_r+0x1a>
 8004868:	4621      	mov	r1, r4
 800486a:	4628      	mov	r0, r5
 800486c:	f000 f81a 	bl	80048a4 <__swsetup_r>
 8004870:	2800      	cmp	r0, #0
 8004872:	d0cb      	beq.n	800480c <__swbuf_r+0x28>
 8004874:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004878:	e7ea      	b.n	8004850 <__swbuf_r+0x6c>
 800487a:	bf00      	nop
 800487c:	08004b18 	.word	0x08004b18
 8004880:	08004b38 	.word	0x08004b38
 8004884:	08004af8 	.word	0x08004af8

08004888 <__ascii_wctomb>:
 8004888:	b149      	cbz	r1, 800489e <__ascii_wctomb+0x16>
 800488a:	2aff      	cmp	r2, #255	; 0xff
 800488c:	bf85      	ittet	hi
 800488e:	238a      	movhi	r3, #138	; 0x8a
 8004890:	6003      	strhi	r3, [r0, #0]
 8004892:	700a      	strbls	r2, [r1, #0]
 8004894:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8004898:	bf98      	it	ls
 800489a:	2001      	movls	r0, #1
 800489c:	4770      	bx	lr
 800489e:	4608      	mov	r0, r1
 80048a0:	4770      	bx	lr
	...

080048a4 <__swsetup_r>:
 80048a4:	4b32      	ldr	r3, [pc, #200]	; (8004970 <__swsetup_r+0xcc>)
 80048a6:	b570      	push	{r4, r5, r6, lr}
 80048a8:	681d      	ldr	r5, [r3, #0]
 80048aa:	4606      	mov	r6, r0
 80048ac:	460c      	mov	r4, r1
 80048ae:	b125      	cbz	r5, 80048ba <__swsetup_r+0x16>
 80048b0:	69ab      	ldr	r3, [r5, #24]
 80048b2:	b913      	cbnz	r3, 80048ba <__swsetup_r+0x16>
 80048b4:	4628      	mov	r0, r5
 80048b6:	f7fe ffb7 	bl	8003828 <__sinit>
 80048ba:	4b2e      	ldr	r3, [pc, #184]	; (8004974 <__swsetup_r+0xd0>)
 80048bc:	429c      	cmp	r4, r3
 80048be:	d10f      	bne.n	80048e0 <__swsetup_r+0x3c>
 80048c0:	686c      	ldr	r4, [r5, #4]
 80048c2:	89a3      	ldrh	r3, [r4, #12]
 80048c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048c8:	0719      	lsls	r1, r3, #28
 80048ca:	d42c      	bmi.n	8004926 <__swsetup_r+0x82>
 80048cc:	06dd      	lsls	r5, r3, #27
 80048ce:	d411      	bmi.n	80048f4 <__swsetup_r+0x50>
 80048d0:	2309      	movs	r3, #9
 80048d2:	6033      	str	r3, [r6, #0]
 80048d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80048d8:	81a3      	strh	r3, [r4, #12]
 80048da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048de:	e03e      	b.n	800495e <__swsetup_r+0xba>
 80048e0:	4b25      	ldr	r3, [pc, #148]	; (8004978 <__swsetup_r+0xd4>)
 80048e2:	429c      	cmp	r4, r3
 80048e4:	d101      	bne.n	80048ea <__swsetup_r+0x46>
 80048e6:	68ac      	ldr	r4, [r5, #8]
 80048e8:	e7eb      	b.n	80048c2 <__swsetup_r+0x1e>
 80048ea:	4b24      	ldr	r3, [pc, #144]	; (800497c <__swsetup_r+0xd8>)
 80048ec:	429c      	cmp	r4, r3
 80048ee:	bf08      	it	eq
 80048f0:	68ec      	ldreq	r4, [r5, #12]
 80048f2:	e7e6      	b.n	80048c2 <__swsetup_r+0x1e>
 80048f4:	0758      	lsls	r0, r3, #29
 80048f6:	d512      	bpl.n	800491e <__swsetup_r+0x7a>
 80048f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048fa:	b141      	cbz	r1, 800490e <__swsetup_r+0x6a>
 80048fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004900:	4299      	cmp	r1, r3
 8004902:	d002      	beq.n	800490a <__swsetup_r+0x66>
 8004904:	4630      	mov	r0, r6
 8004906:	f7ff fc3b 	bl	8004180 <_free_r>
 800490a:	2300      	movs	r3, #0
 800490c:	6363      	str	r3, [r4, #52]	; 0x34
 800490e:	89a3      	ldrh	r3, [r4, #12]
 8004910:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004914:	81a3      	strh	r3, [r4, #12]
 8004916:	2300      	movs	r3, #0
 8004918:	6063      	str	r3, [r4, #4]
 800491a:	6923      	ldr	r3, [r4, #16]
 800491c:	6023      	str	r3, [r4, #0]
 800491e:	89a3      	ldrh	r3, [r4, #12]
 8004920:	f043 0308 	orr.w	r3, r3, #8
 8004924:	81a3      	strh	r3, [r4, #12]
 8004926:	6923      	ldr	r3, [r4, #16]
 8004928:	b94b      	cbnz	r3, 800493e <__swsetup_r+0x9a>
 800492a:	89a3      	ldrh	r3, [r4, #12]
 800492c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004934:	d003      	beq.n	800493e <__swsetup_r+0x9a>
 8004936:	4621      	mov	r1, r4
 8004938:	4630      	mov	r0, r6
 800493a:	f7ff f83f 	bl	80039bc <__smakebuf_r>
 800493e:	89a0      	ldrh	r0, [r4, #12]
 8004940:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004944:	f010 0301 	ands.w	r3, r0, #1
 8004948:	d00a      	beq.n	8004960 <__swsetup_r+0xbc>
 800494a:	2300      	movs	r3, #0
 800494c:	60a3      	str	r3, [r4, #8]
 800494e:	6963      	ldr	r3, [r4, #20]
 8004950:	425b      	negs	r3, r3
 8004952:	61a3      	str	r3, [r4, #24]
 8004954:	6923      	ldr	r3, [r4, #16]
 8004956:	b943      	cbnz	r3, 800496a <__swsetup_r+0xc6>
 8004958:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800495c:	d1ba      	bne.n	80048d4 <__swsetup_r+0x30>
 800495e:	bd70      	pop	{r4, r5, r6, pc}
 8004960:	0781      	lsls	r1, r0, #30
 8004962:	bf58      	it	pl
 8004964:	6963      	ldrpl	r3, [r4, #20]
 8004966:	60a3      	str	r3, [r4, #8]
 8004968:	e7f4      	b.n	8004954 <__swsetup_r+0xb0>
 800496a:	2000      	movs	r0, #0
 800496c:	e7f7      	b.n	800495e <__swsetup_r+0xba>
 800496e:	bf00      	nop
 8004970:	2000002c 	.word	0x2000002c
 8004974:	08004b18 	.word	0x08004b18
 8004978:	08004b38 	.word	0x08004b38
 800497c:	08004af8 	.word	0x08004af8

08004980 <abort>:
 8004980:	b508      	push	{r3, lr}
 8004982:	2006      	movs	r0, #6
 8004984:	f000 f82c 	bl	80049e0 <raise>
 8004988:	2001      	movs	r0, #1
 800498a:	f7fd f8f9 	bl	8001b80 <_exit>

0800498e <_raise_r>:
 800498e:	291f      	cmp	r1, #31
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4604      	mov	r4, r0
 8004994:	460d      	mov	r5, r1
 8004996:	d904      	bls.n	80049a2 <_raise_r+0x14>
 8004998:	2316      	movs	r3, #22
 800499a:	6003      	str	r3, [r0, #0]
 800499c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049a0:	bd38      	pop	{r3, r4, r5, pc}
 80049a2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80049a4:	b112      	cbz	r2, 80049ac <_raise_r+0x1e>
 80049a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80049aa:	b94b      	cbnz	r3, 80049c0 <_raise_r+0x32>
 80049ac:	4620      	mov	r0, r4
 80049ae:	f000 f831 	bl	8004a14 <_getpid_r>
 80049b2:	462a      	mov	r2, r5
 80049b4:	4601      	mov	r1, r0
 80049b6:	4620      	mov	r0, r4
 80049b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049bc:	f000 b818 	b.w	80049f0 <_kill_r>
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d00a      	beq.n	80049da <_raise_r+0x4c>
 80049c4:	1c59      	adds	r1, r3, #1
 80049c6:	d103      	bne.n	80049d0 <_raise_r+0x42>
 80049c8:	2316      	movs	r3, #22
 80049ca:	6003      	str	r3, [r0, #0]
 80049cc:	2001      	movs	r0, #1
 80049ce:	e7e7      	b.n	80049a0 <_raise_r+0x12>
 80049d0:	2400      	movs	r4, #0
 80049d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80049d6:	4628      	mov	r0, r5
 80049d8:	4798      	blx	r3
 80049da:	2000      	movs	r0, #0
 80049dc:	e7e0      	b.n	80049a0 <_raise_r+0x12>
	...

080049e0 <raise>:
 80049e0:	4b02      	ldr	r3, [pc, #8]	; (80049ec <raise+0xc>)
 80049e2:	4601      	mov	r1, r0
 80049e4:	6818      	ldr	r0, [r3, #0]
 80049e6:	f7ff bfd2 	b.w	800498e <_raise_r>
 80049ea:	bf00      	nop
 80049ec:	2000002c 	.word	0x2000002c

080049f0 <_kill_r>:
 80049f0:	b538      	push	{r3, r4, r5, lr}
 80049f2:	4d07      	ldr	r5, [pc, #28]	; (8004a10 <_kill_r+0x20>)
 80049f4:	2300      	movs	r3, #0
 80049f6:	4604      	mov	r4, r0
 80049f8:	4608      	mov	r0, r1
 80049fa:	4611      	mov	r1, r2
 80049fc:	602b      	str	r3, [r5, #0]
 80049fe:	f7fd f8af 	bl	8001b60 <_kill>
 8004a02:	1c43      	adds	r3, r0, #1
 8004a04:	d102      	bne.n	8004a0c <_kill_r+0x1c>
 8004a06:	682b      	ldr	r3, [r5, #0]
 8004a08:	b103      	cbz	r3, 8004a0c <_kill_r+0x1c>
 8004a0a:	6023      	str	r3, [r4, #0]
 8004a0c:	bd38      	pop	{r3, r4, r5, pc}
 8004a0e:	bf00      	nop
 8004a10:	2000032c 	.word	0x2000032c

08004a14 <_getpid_r>:
 8004a14:	f7fd b89c 	b.w	8001b50 <_getpid>

08004a18 <_init>:
 8004a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1a:	bf00      	nop
 8004a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1e:	bc08      	pop	{r3}
 8004a20:	469e      	mov	lr, r3
 8004a22:	4770      	bx	lr

08004a24 <_fini>:
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	bf00      	nop
 8004a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2a:	bc08      	pop	{r3}
 8004a2c:	469e      	mov	lr, r3
 8004a2e:	4770      	bx	lr
