
exercise_2.5-abs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  08005d20  08005d20  00015d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062fc  080062fc  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  080062fc  080062fc  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062fc  080062fc  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062fc  080062fc  000162fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006300  08006300  00016300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08006304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  200001fc  08006500  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08006500  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a239  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001850  00000000  00000000  0002a465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  0002bcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  0002c960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001127d  00000000  00000000  0002d548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009441  00000000  00000000  0003e7c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005c171  00000000  00000000  00047c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a3d77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aa4  00000000  00000000  000a3dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d08 	.word	0x08005d08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	08005d08 	.word	0x08005d08

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_AUTOINJECMODE(ADC_InitStruct->ADC_AutoInjMode));
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfRegChannel));

  /*---------------------------- ADCx CFGR Configuration -----------------*/
  /* Get the ADCx CFGR value */
  tmpreg1 = ADCx->CFGR;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	60fb      	str	r3, [r7, #12]
  /* Clear SCAN bit */
  tmpreg1 &= CFGR_CLEAR_Mask; 
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <ADC_Init+0x80>)
 8000c60:	4013      	ands	r3, r2
 8000c62:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
  ADC_InitStruct->ADC_Resolution|                 
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 8000c6c:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	689b      	ldr	r3, [r3, #8]
  ADC_InitStruct->ADC_Resolution|                 
 8000c72:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	68db      	ldr	r3, [r3, #12]
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
 8000c78:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_DataAlign|                 
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	691b      	ldr	r3, [r3, #16]
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
 8000c7e:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_OverrunMode|        
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	695b      	ldr	r3, [r3, #20]
  ADC_InitStruct->ADC_DataAlign|                 
 8000c84:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_AutoInjMode;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	699b      	ldr	r3, [r3, #24]
  ADC_InitStruct->ADC_OverrunMode|        
 8000c8a:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx CFGR */
  ADCx->CFGR = tmpreg1;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	60da      	str	r2, [r3, #12]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9c:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= ~(uint32_t)(ADC_SQR1_L);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f023 030f 	bic.w	r3, r3, #15
 8000ca4:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfRegChannel value */
  tmpreg1 |= (uint32_t) (ADC_InitStruct->ADC_NbrOfRegChannel - 1);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	7f1b      	ldrb	r3, [r3, #28]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	461a      	mov	r2, r3
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1; 
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	631a      	str	r2, [r3, #48]	; 0x30
   
}  
 8000cba:	bf00      	nop
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	fdffc007 	.word	0xfdffc007

08000ccc <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;                 
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	605a      	str	r2, [r3, #4]
  ADC_InitStruct->ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;         
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  ADC_InitStruct->ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;                 
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  ADC_InitStruct->ADC_OverrunMode = DISABLE;   
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	615a      	str	r2, [r3, #20]
  ADC_InitStruct->ADC_AutoInjMode = DISABLE;  
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  ADC_InitStruct->ADC_NbrOfRegChannel = 1; 
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2201      	movs	r2, #1
 8000d02:	771a      	strb	r2, [r3, #28]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d006      	beq.n	8000d30 <ADC_Cmd+0x20>
  {
    /* Set the ADEN bit */
    ADCx->CR |= ADC_CR_ADEN;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f043 0201 	orr.w	r2, r3, #1
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral: Set the ADDIS bit */
    ADCx->CR |= ADC_CR_ADDIS;
  }
}
 8000d2e:	e005      	b.n	8000d3c <ADC_Cmd+0x2c>
    ADCx->CR |= ADC_CR_ADDIS;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f043 0202 	orr.w	r2, r3, #2
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADCAL bit */
  ADCx->CR |= ADC_CR_ADCAL;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <ADC_SelectCalibrationMode>:
  *          @arg ADC_CalibrationMode_Single: to select the calibration for single channel
  *          @arg ADC_CalibrationMode_Differential: to select the calibration for differential channel         
  * @retval None
  */
void ADC_SelectCalibrationMode(ADC_TypeDef* ADCx, uint32_t ADC_CalibrationMode)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CALIBRATION_MODE(ADC_CalibrationMode));
  /* Set or Reset the ADCALDIF bit */
  ADCx->CR &= (~ADC_CR_ADCALDIF);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
  ADCx->CR |= ADC_CalibrationMode;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	431a      	orrs	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	609a      	str	r2, [r3, #8]

}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b085      	sub	sp, #20
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR & ADC_CR_ADCAL) != (uint32_t)RESET)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	da02      	bge.n	8000db0 <ADC_GetCalibrationStatus+0x1a>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 8000daa:	2301      	movs	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	e001      	b.n	8000db4 <ADC_GetCalibrationStatus+0x1e>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <ADC_GetDisableCmdStatus>:
  * @brief  Gets the selected ADC disable command Status.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The new state of ADC ADC disable command (SET or RESET).
  */
FlagStatus ADC_GetDisableCmdStatus(ADC_TypeDef* ADCx)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b085      	sub	sp, #20
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of ADDIS bit */
  if ((ADCx->CR & ADC_CR_ADDIS) != (uint32_t)RESET)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d002      	beq.n	8000de0 <ADC_GetDisableCmdStatus+0x1e>
  {
    /* ADDIS bit is set */
    bitstatus = SET;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	73fb      	strb	r3, [r7, #15]
 8000dde:	e001      	b.n	8000de4 <ADC_GetDisableCmdStatus+0x22>
  }
  else
  {
    /* ADDIS bit is reset */
    bitstatus = RESET;
 8000de0:	2300      	movs	r3, #0
 8000de2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADDIS bit status */
  return  bitstatus;
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <ADC_VoltageRegulatorCmd>:
  * @param  NewState: new state of the ADCx Voltage Regulator.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VoltageRegulatorCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* set the intermediate state before moving the ADC voltage regulator 
  from enable state to disable state or from disable state to enable state */
  ADCx->CR &= ~(ADC_CR_ADVREGEN);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	609a      	str	r2, [r3, #8]
  
  if (NewState != DISABLE)
 8000e0a:	78fb      	ldrb	r3, [r7, #3]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d006      	beq.n	8000e1e <ADC_VoltageRegulatorCmd+0x2c>
  {
    /* Set the ADVREGEN bit 0 */
    ADCx->CR |= ADC_CR_ADVREGEN_0;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
  else
  {
    /* Set the ADVREGEN bit 1 */
    ADCx->CR |=ADC_CR_ADVREGEN_1;
  }
}
 8000e1c:	e005      	b.n	8000e2a <ADC_VoltageRegulatorCmd+0x38>
    ADCx->CR |=ADC_CR_ADVREGEN_1;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	609a      	str	r2, [r3, #8]
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <ADC_VrefintCmd>:
  * @param  NewState: new state of the Vrefint.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VrefintCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e4a:	d003      	beq.n	8000e54 <ADC_VrefintCmd+0x1c>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a15      	ldr	r2, [pc, #84]	; (8000ea4 <ADC_VrefintCmd+0x6c>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d110      	bne.n	8000e76 <ADC_VrefintCmd+0x3e>
  {
    if (NewState != DISABLE)
 8000e54:	78fb      	ldrb	r3, [r7, #3]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d006      	beq.n	8000e68 <ADC_VrefintCmd+0x30>
    {
      /* Enable the Vrefint channel*/
      ADC1_2->CCR |= ADC12_CCR_VREFEN;
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <ADC_VrefintCmd+0x70>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <ADC_VrefintCmd+0x70>)
 8000e60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e64:	6093      	str	r3, [r2, #8]
    if (NewState != DISABLE)
 8000e66:	e017      	b.n	8000e98 <ADC_VrefintCmd+0x60>
    }
    else
    {
      /* Disable the Vrefint channel*/
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_VREFEN;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <ADC_VrefintCmd+0x70>)
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <ADC_VrefintCmd+0x70>)
 8000e6e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000e72:	6093      	str	r3, [r2, #8]
    if (NewState != DISABLE)
 8000e74:	e010      	b.n	8000e98 <ADC_VrefintCmd+0x60>
    }
  }
  else
  {
    if (NewState != DISABLE)
 8000e76:	78fb      	ldrb	r3, [r7, #3]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d006      	beq.n	8000e8a <ADC_VrefintCmd+0x52>
    {
      /* Enable the Vrefint channel*/
      ADC3_4->CCR |= ADC34_CCR_VREFEN;
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <ADC_VrefintCmd+0x74>)
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <ADC_VrefintCmd+0x74>)
 8000e82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e86:	6093      	str	r3, [r2, #8]
    {
      /* Disable the Vrefint channel*/
      ADC3_4->CCR &= ~(uint32_t)ADC34_CCR_VREFEN;
    }
  }
}
 8000e88:	e006      	b.n	8000e98 <ADC_VrefintCmd+0x60>
      ADC3_4->CCR &= ~(uint32_t)ADC34_CCR_VREFEN;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <ADC_VrefintCmd+0x74>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	4a07      	ldr	r2, [pc, #28]	; (8000eac <ADC_VrefintCmd+0x74>)
 8000e90:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000e94:	6093      	str	r3, [r2, #8]
}
 8000e96:	e7ff      	b.n	8000e98 <ADC_VrefintCmd+0x60>
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	50000100 	.word	0x50000100
 8000ea8:	50000300 	.word	0x50000300
 8000eac:	50000700 	.word	0x50000700

08000eb0 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	4608      	mov	r0, r1
 8000eba:	4611      	mov	r1, r2
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	70fb      	strb	r3, [r7, #3]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	70bb      	strb	r3, [r7, #2]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 8000ed2:	78bb      	ldrb	r3, [r7, #2]
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	d821      	bhi.n	8000f1c <ADC_RegularChannelConfig+0x6c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 8000ede:	78ba      	ldrb	r2, [r7, #2]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	461a      	mov	r2, r3
 8000eea:	231f      	movs	r3, #31
 8000eec:	4093      	lsls	r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 8000efa:	78f9      	ldrb	r1, [r7, #3]
 8000efc:	78ba      	ldrb	r2, [r7, #2]
 8000efe:	4613      	mov	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	4413      	add	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	631a      	str	r2, [r3, #48]	; 0x30
 8000f1a:	e074      	b.n	8001006 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 8000f1c:	78bb      	ldrb	r3, [r7, #2]
 8000f1e:	2b09      	cmp	r3, #9
 8000f20:	d823      	bhi.n	8000f6a <ADC_RegularChannelConfig+0xba>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f26:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 8000f28:	78bb      	ldrb	r3, [r7, #2]
 8000f2a:	1f5a      	subs	r2, r3, #5
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	4413      	add	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	461a      	mov	r2, r3
 8000f36:	231f      	movs	r3, #31
 8000f38:	4093      	lsls	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	4013      	ands	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 8000f46:	78f9      	ldrb	r1, [r7, #3]
 8000f48:	78bb      	ldrb	r3, [r7, #2]
 8000f4a:	1f5a      	subs	r2, r3, #5
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	635a      	str	r2, [r3, #52]	; 0x34
 8000f68:	e04d      	b.n	8001006 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 8000f6a:	78bb      	ldrb	r3, [r7, #2]
 8000f6c:	2b0e      	cmp	r3, #14
 8000f6e:	d825      	bhi.n	8000fbc <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f74:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 8000f76:	78bb      	ldrb	r3, [r7, #2]
 8000f78:	f1a3 020a 	sub.w	r2, r3, #10
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4413      	add	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	461a      	mov	r2, r3
 8000f86:	231f      	movs	r3, #31
 8000f88:	4093      	lsls	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	4013      	ands	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 8000f96:	78f9      	ldrb	r1, [r7, #3]
 8000f98:	78bb      	ldrb	r3, [r7, #2]
 8000f9a:	f1a3 020a 	sub.w	r2, r3, #10
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	4413      	add	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	639a      	str	r2, [r3, #56]	; 0x38
 8000fba:	e024      	b.n	8001006 <ADC_RegularChannelConfig+0x156>
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 8000fc2:	78bb      	ldrb	r3, [r7, #2]
 8000fc4:	f1a3 020f 	sub.w	r2, r3, #15
 8000fc8:	4613      	mov	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	4413      	add	r3, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	231f      	movs	r3, #31
 8000fd4:	4093      	lsls	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 8000fe2:	78f9      	ldrb	r1, [r7, #3]
 8000fe4:	78bb      	ldrb	r3, [r7, #2]
 8000fe6:	f1a3 020f 	sub.w	r2, r3, #15
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	2b09      	cmp	r3, #9
 800100a:	d923      	bls.n	8001054 <ADC_RegularChannelConfig+0x1a4>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 8001012:	78fb      	ldrb	r3, [r7, #3]
 8001014:	f1a3 020a 	sub.w	r2, r3, #10
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	2207      	movs	r2, #7
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	699a      	ldr	r2, [r3, #24]
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	43db      	mvns	r3, r3
 800102e:	401a      	ands	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6999      	ldr	r1, [r3, #24]
 8001038:	7878      	ldrb	r0, [r7, #1]
 800103a:	78fb      	ldrb	r3, [r7, #3]
 800103c:	f1a3 020a 	sub.w	r2, r3, #10
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	fa00 f303 	lsl.w	r3, r0, r3
 800104a:	ea41 0203 	orr.w	r2, r1, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	619a      	str	r2, [r3, #24]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
  }
}
 8001052:	e01f      	b.n	8001094 <ADC_RegularChannelConfig+0x1e4>
    tmpreg1 = ADCx->SMPR1;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	60fb      	str	r3, [r7, #12]
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 800105a:	78fb      	ldrb	r3, [r7, #3]
 800105c:	1e5a      	subs	r2, r3, #1
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	2238      	movs	r2, #56	; 0x38
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	60bb      	str	r3, [r7, #8]
	ADCx->SMPR1 &= ~tmpreg2;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	695a      	ldr	r2, [r3, #20]
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	43db      	mvns	r3, r3
 8001074:	401a      	ands	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	615a      	str	r2, [r3, #20]
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6959      	ldr	r1, [r3, #20]
 800107e:	7878      	ldrb	r0, [r7, #1]
 8001080:	78fa      	ldrb	r2, [r7, #3]
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	fa00 f303 	lsl.w	r3, r0, r3
 800108c:	ea41 0203 	orr.w	r2, r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	615a      	str	r2, [r3, #20]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <ADC_StartConversion>:
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f043 0204 	orr.w	r2, r3, #4
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	609a      	str	r2, [r3, #8]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	b29b      	uxth	r3, r3
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 80010da:	b480      	push	{r7}
 80010dc:	b085      	sub	sp, #20
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80010e4:	2300      	movs	r3, #0
 80010e6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	4013      	ands	r3, r2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d002      	beq.n	80010fa <ADC_GetFlagStatus+0x20>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	e001      	b.n	80010fe <ADC_GetFlagStatus+0x24>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80010fa:	2300      	movs	r3, #0
 80010fc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 800110c:	b480      	push	{r7}
 800110e:	b087      	sub	sp, #28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	e07c      	b.n	8001222 <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001128:	2201      	movs	r2, #1
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	429a      	cmp	r2, r3
 8001142:	d16b      	bne.n	800121c <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	791b      	ldrb	r3, [r3, #4]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d003      	beq.n	8001154 <GPIO_Init+0x48>
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	791b      	ldrb	r3, [r3, #4]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d134      	bne.n	80011be <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2103      	movs	r1, #3
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	401a      	ands	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	795b      	ldrb	r3, [r3, #5]
 8001172:	4619      	mov	r1, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	fa01 f303 	lsl.w	r3, r1, r3
 800117c:	431a      	orrs	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	889b      	ldrh	r3, [r3, #4]
 8001186:	b29a      	uxth	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	b29b      	uxth	r3, r3
 800118c:	4619      	mov	r1, r3
 800118e:	2301      	movs	r3, #1
 8001190:	408b      	lsls	r3, r1
 8001192:	b29b      	uxth	r3, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	b29b      	uxth	r3, r3
 8001198:	4013      	ands	r3, r2
 800119a:	b29a      	uxth	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	889b      	ldrh	r3, [r3, #4]
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	799b      	ldrb	r3, [r3, #6]
 80011aa:	4619      	mov	r1, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2103      	movs	r1, #3
 80011c8:	fa01 f303 	lsl.w	r3, r1, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	401a      	ands	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	791b      	ldrb	r3, [r3, #4]
 80011dc:	4619      	mov	r1, r3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	431a      	orrs	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68da      	ldr	r2, [r3, #12]
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2103      	movs	r1, #3
 80011f8:	fa01 f303 	lsl.w	r3, r1, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	401a      	ands	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68da      	ldr	r2, [r3, #12]
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	79db      	ldrb	r3, [r3, #7]
 800120c:	4619      	mov	r1, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	3301      	adds	r3, #1
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2b0f      	cmp	r3, #15
 8001226:	f67f af7f 	bls.w	8001128 <GPIO_Init+0x1c>
    }
  }
}
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	371c      	adds	r7, #28
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001246:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2202      	movs	r2, #2
 8001252:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	71da      	strb	r2, [r3, #7]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	230f      	movs	r3, #15
 800127e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	78db      	ldrb	r3, [r3, #3]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d03a      	beq.n	80012fe <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001288:	4b28      	ldr	r3, [pc, #160]	; (800132c <NVIC_Init+0xc0>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	43db      	mvns	r3, r3
 800128e:	0a1b      	lsrs	r3, r3, #8
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	f1c3 0304 	rsb	r3, r3, #4
 800129c:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa22 f303 	lsr.w	r3, r2, r3
 80012a6:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	785b      	ldrb	r3, [r3, #1]
 80012ac:	461a      	mov	r2, r3
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	789b      	ldrb	r3, [r3, #2]
 80012ba:	461a      	mov	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4013      	ands	r3, r2
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	011b      	lsls	r3, r3, #4
 80012ca:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80012cc:	4a18      	ldr	r2, [pc, #96]	; (8001330 <NVIC_Init+0xc4>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	6979      	ldr	r1, [r7, #20]
 80012d4:	b2c9      	uxtb	r1, r1
 80012d6:	4413      	add	r3, r2
 80012d8:	460a      	mov	r2, r1
 80012da:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80012e6:	4912      	ldr	r1, [pc, #72]	; (8001330 <NVIC_Init+0xc4>)
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	7812      	ldrb	r2, [r2, #0]
 80012ec:	0952      	lsrs	r2, r2, #5
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80012f2:	2201      	movs	r2, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80012f8:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80012fc:	e00f      	b.n	800131e <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001306:	490a      	ldr	r1, [pc, #40]	; (8001330 <NVIC_Init+0xc4>)
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	7812      	ldrb	r2, [r2, #0]
 800130c:	0952      	lsrs	r2, r2, #5
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001312:	2201      	movs	r2, #1
 8001314:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001316:	f100 0320 	add.w	r3, r0, #32
 800131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800131e:	bf00      	nop
 8001320:	371c      	adds	r7, #28
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00
 8001330:	e000e100 	.word	0xe000e100

08001334 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001334:	b480      	push	{r7}
 8001336:	b08b      	sub	sp, #44	; 0x2c
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
 8001344:	2300      	movs	r3, #0
 8001346:	61bb      	str	r3, [r7, #24]
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800135c:	4b8b      	ldr	r3, [pc, #556]	; (800158c <RCC_GetClocksFreq+0x258>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 030c 	and.w	r3, r3, #12
 8001364:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	2b08      	cmp	r3, #8
 800136a:	d011      	beq.n	8001390 <RCC_GetClocksFreq+0x5c>
 800136c:	6a3b      	ldr	r3, [r7, #32]
 800136e:	2b08      	cmp	r3, #8
 8001370:	d837      	bhi.n	80013e2 <RCC_GetClocksFreq+0xae>
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <RCC_GetClocksFreq+0x4c>
 8001378:	6a3b      	ldr	r3, [r7, #32]
 800137a:	2b04      	cmp	r3, #4
 800137c:	d004      	beq.n	8001388 <RCC_GetClocksFreq+0x54>
 800137e:	e030      	b.n	80013e2 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a83      	ldr	r2, [pc, #524]	; (8001590 <RCC_GetClocksFreq+0x25c>)
 8001384:	601a      	str	r2, [r3, #0]
      break;
 8001386:	e030      	b.n	80013ea <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a81      	ldr	r2, [pc, #516]	; (8001590 <RCC_GetClocksFreq+0x25c>)
 800138c:	601a      	str	r2, [r3, #0]
      break;
 800138e:	e02c      	b.n	80013ea <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8001390:	4b7e      	ldr	r3, [pc, #504]	; (800158c <RCC_GetClocksFreq+0x258>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001398:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800139a:	4b7c      	ldr	r3, [pc, #496]	; (800158c <RCC_GetClocksFreq+0x258>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a2:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	0c9b      	lsrs	r3, r3, #18
 80013a8:	3302      	adds	r3, #2
 80013aa:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d105      	bne.n	80013be <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	4a77      	ldr	r2, [pc, #476]	; (8001594 <RCC_GetClocksFreq+0x260>)
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
 80013bc:	e00d      	b.n	80013da <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80013be:	4b73      	ldr	r3, [pc, #460]	; (800158c <RCC_GetClocksFreq+0x258>)
 80013c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	3301      	adds	r3, #1
 80013c8:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80013ca:	4a71      	ldr	r2, [pc, #452]	; (8001590 <RCC_GetClocksFreq+0x25c>)
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fb02 f303 	mul.w	r3, r2, r3
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013de:	601a      	str	r2, [r3, #0]
      break;
 80013e0:	e003      	b.n	80013ea <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a6a      	ldr	r2, [pc, #424]	; (8001590 <RCC_GetClocksFreq+0x25c>)
 80013e6:	601a      	str	r2, [r3, #0]
      break;
 80013e8:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80013ea:	4b68      	ldr	r3, [pc, #416]	; (800158c <RCC_GetClocksFreq+0x258>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013f2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 80013fa:	4a67      	ldr	r2, [pc, #412]	; (8001598 <RCC_GetClocksFreq+0x264>)
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	4413      	add	r3, r2
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	40da      	lsrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001412:	4b5e      	ldr	r3, [pc, #376]	; (800158c <RCC_GetClocksFreq+0x258>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800141a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 800141c:	6a3b      	ldr	r3, [r7, #32]
 800141e:	0a1b      	lsrs	r3, r3, #8
 8001420:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8001422:	4a5d      	ldr	r2, [pc, #372]	; (8001598 <RCC_GetClocksFreq+0x264>)
 8001424:	6a3b      	ldr	r3, [r7, #32]
 8001426:	4413      	add	r3, r2
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	40da      	lsrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800143a:	4b54      	ldr	r3, [pc, #336]	; (800158c <RCC_GetClocksFreq+0x258>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001442:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	0adb      	lsrs	r3, r3, #11
 8001448:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 800144a:	4a53      	ldr	r2, [pc, #332]	; (8001598 <RCC_GetClocksFreq+0x264>)
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	4413      	add	r3, r2
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	40da      	lsrs	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8001462:	4b4a      	ldr	r3, [pc, #296]	; (800158c <RCC_GetClocksFreq+0x258>)
 8001464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001466:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800146a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8001472:	4a4a      	ldr	r2, [pc, #296]	; (800159c <RCC_GetClocksFreq+0x268>)
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800147a:	b29b      	uxth	r3, r3
 800147c:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8001488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	611a      	str	r2, [r3, #16]
 8001494:	e003      	b.n	800149e <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <RCC_GetClocksFreq+0x258>)
 80014a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a2:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80014a6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	0a5b      	lsrs	r3, r3, #9
 80014ac:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80014ae:	4a3b      	ldr	r2, [pc, #236]	; (800159c <RCC_GetClocksFreq+0x268>)
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	f003 0310 	and.w	r3, r3, #16
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d006      	beq.n	80014d2 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 80014c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	615a      	str	r2, [r3, #20]
 80014d0:	e003      	b.n	80014da <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80014da:	4b2c      	ldr	r3, [pc, #176]	; (800158c <RCC_GetClocksFreq+0x258>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	2b10      	cmp	r3, #16
 80014e4:	d003      	beq.n	80014ee <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a29      	ldr	r2, [pc, #164]	; (8001590 <RCC_GetClocksFreq+0x25c>)
 80014ea:	619a      	str	r2, [r3, #24]
 80014ec:	e003      	b.n	80014f6 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 80014f6:	4b25      	ldr	r3, [pc, #148]	; (800158c <RCC_GetClocksFreq+0x258>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0320 	and.w	r3, r3, #32
 80014fe:	2b20      	cmp	r3, #32
 8001500:	d003      	beq.n	800150a <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a22      	ldr	r2, [pc, #136]	; (8001590 <RCC_GetClocksFreq+0x25c>)
 8001506:	61da      	str	r2, [r3, #28]
 8001508:	e003      	b.n	8001512 <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8001512:	4b1e      	ldr	r3, [pc, #120]	; (800158c <RCC_GetClocksFreq+0x258>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800151e:	d10d      	bne.n	800153c <RCC_GetClocksFreq+0x208>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001526:	429a      	cmp	r2, r3
 8001528:	d108      	bne.n	800153c <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	429a      	cmp	r2, r3
 8001530:	d104      	bne.n	800153c <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	005a      	lsls	r2, r3, #1
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	621a      	str	r2, [r3, #32]
 800153a:	e003      	b.n	8001544 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68da      	ldr	r2, [r3, #12]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <RCC_GetClocksFreq+0x258>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800154c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001550:	d10d      	bne.n	800156e <RCC_GetClocksFreq+0x23a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001558:	429a      	cmp	r2, r3
 800155a:	d108      	bne.n	800156e <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	429a      	cmp	r2, r3
 8001562:	d104      	bne.n	800156e <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	005a      	lsls	r2, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	625a      	str	r2, [r3, #36]	; 0x24
 800156c:	e003      	b.n	8001576 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <RCC_GetClocksFreq+0x258>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10e      	bne.n	80015a0 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	629a      	str	r2, [r3, #40]	; 0x28
 800158a:	e028      	b.n	80015de <RCC_GetClocksFreq+0x2aa>
 800158c:	40021000 	.word	0x40021000
 8001590:	007a1200 	.word	0x007a1200
 8001594:	003d0900 	.word	0x003d0900
 8001598:	20000000 	.word	0x20000000
 800159c:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80015a0:	4b6c      	ldr	r3, [pc, #432]	; (8001754 <RCC_GetClocksFreq+0x420>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d104      	bne.n	80015b6 <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
 80015b4:	e013      	b.n	80015de <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80015b6:	4b67      	ldr	r3, [pc, #412]	; (8001754 <RCC_GetClocksFreq+0x420>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d104      	bne.n	80015cc <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015c8:	629a      	str	r2, [r3, #40]	; 0x28
 80015ca:	e008      	b.n	80015de <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 80015cc:	4b61      	ldr	r3, [pc, #388]	; (8001754 <RCC_GetClocksFreq+0x420>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d102      	bne.n	80015de <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a5f      	ldr	r2, [pc, #380]	; (8001758 <RCC_GetClocksFreq+0x424>)
 80015dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 80015de:	4b5d      	ldr	r3, [pc, #372]	; (8001754 <RCC_GetClocksFreq+0x420>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d104      	bne.n	80015f4 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80015f2:	e021      	b.n	8001638 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 80015f4:	4b57      	ldr	r3, [pc, #348]	; (8001754 <RCC_GetClocksFreq+0x420>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001600:	d104      	bne.n	800160c <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	62da      	str	r2, [r3, #44]	; 0x2c
 800160a:	e015      	b.n	8001638 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800160c:	4b51      	ldr	r3, [pc, #324]	; (8001754 <RCC_GetClocksFreq+0x420>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001614:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001618:	d104      	bne.n	8001624 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001620:	62da      	str	r2, [r3, #44]	; 0x2c
 8001622:	e009      	b.n	8001638 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8001624:	4b4b      	ldr	r3, [pc, #300]	; (8001754 <RCC_GetClocksFreq+0x420>)
 8001626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001628:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800162c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001630:	d102      	bne.n	8001638 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a48      	ldr	r2, [pc, #288]	; (8001758 <RCC_GetClocksFreq+0x424>)
 8001636:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8001638:	4b46      	ldr	r3, [pc, #280]	; (8001754 <RCC_GetClocksFreq+0x420>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d104      	bne.n	800164e <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	631a      	str	r2, [r3, #48]	; 0x30
 800164c:	e021      	b.n	8001692 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800164e:	4b41      	ldr	r3, [pc, #260]	; (8001754 <RCC_GetClocksFreq+0x420>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001656:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800165a:	d104      	bne.n	8001666 <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	631a      	str	r2, [r3, #48]	; 0x30
 8001664:	e015      	b.n	8001692 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8001666:	4b3b      	ldr	r3, [pc, #236]	; (8001754 <RCC_GetClocksFreq+0x420>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800166e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001672:	d104      	bne.n	800167e <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800167a:	631a      	str	r2, [r3, #48]	; 0x30
 800167c:	e009      	b.n	8001692 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 800167e:	4b35      	ldr	r3, [pc, #212]	; (8001754 <RCC_GetClocksFreq+0x420>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001686:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800168a:	d102      	bne.n	8001692 <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a32      	ldr	r2, [pc, #200]	; (8001758 <RCC_GetClocksFreq+0x424>)
 8001690:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8001692:	4b30      	ldr	r3, [pc, #192]	; (8001754 <RCC_GetClocksFreq+0x420>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d104      	bne.n	80016a8 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	635a      	str	r2, [r3, #52]	; 0x34
 80016a6:	e021      	b.n	80016ec <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80016a8:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <RCC_GetClocksFreq+0x420>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80016b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016b4:	d104      	bne.n	80016c0 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	635a      	str	r2, [r3, #52]	; 0x34
 80016be:	e015      	b.n	80016ec <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 80016c0:	4b24      	ldr	r3, [pc, #144]	; (8001754 <RCC_GetClocksFreq+0x420>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80016c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80016cc:	d104      	bne.n	80016d8 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016d4:	635a      	str	r2, [r3, #52]	; 0x34
 80016d6:	e009      	b.n	80016ec <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <RCC_GetClocksFreq+0x420>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80016e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80016e4:	d102      	bne.n	80016ec <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a1b      	ldr	r2, [pc, #108]	; (8001758 <RCC_GetClocksFreq+0x424>)
 80016ea:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <RCC_GetClocksFreq+0x420>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d104      	bne.n	8001702 <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8001700:	e021      	b.n	8001746 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8001702:	4b14      	ldr	r3, [pc, #80]	; (8001754 <RCC_GetClocksFreq+0x420>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800170a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800170e:	d104      	bne.n	800171a <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001718:	e015      	b.n	8001746 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <RCC_GetClocksFreq+0x420>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001722:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001726:	d104      	bne.n	8001732 <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800172e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001730:	e009      	b.n	8001746 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <RCC_GetClocksFreq+0x420>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800173a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800173e:	d102      	bne.n	8001746 <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a05      	ldr	r2, [pc, #20]	; (8001758 <RCC_GetClocksFreq+0x424>)
 8001744:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001746:	bf00      	nop
 8001748:	372c      	adds	r7, #44	; 0x2c
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000
 8001758:	007a1200 	.word	0x007a1200

0800175c <RCC_ADCCLKConfig>:
  *     @arg RCC_ADC34PLLCLK_Div128: ADC34 clock = PLLCLK/128                                  
  *     @arg RCC_ADC34PLLCLK_Div256: ADC34 clock = PLLCLK/256
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PLLCLK)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PLLCLK));

  tmp = (RCC_PLLCLK >> 28);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	0f1b      	lsrs	r3, r3, #28
 800176c:	60fb      	str	r3, [r7, #12]
  
  /* Clears ADCPRE34 bits */
  if (tmp != 0)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d006      	beq.n	8001782 <RCC_ADCCLKConfig+0x26>
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE34;
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <RCC_ADCCLKConfig+0x4c>)
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	4a0b      	ldr	r2, [pc, #44]	; (80017a8 <RCC_ADCCLKConfig+0x4c>)
 800177a:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 800177e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001780:	e005      	b.n	800178e <RCC_ADCCLKConfig+0x32>
  }
   /* Clears ADCPRE12 bits */
  else
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12;
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <RCC_ADCCLKConfig+0x4c>)
 8001784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001786:	4a08      	ldr	r2, [pc, #32]	; (80017a8 <RCC_ADCCLKConfig+0x4c>)
 8001788:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800178c:	62d3      	str	r3, [r2, #44]	; 0x2c
  }
  /* Set ADCPRE bits according to RCC_PLLCLK value */
  RCC->CFGR2 |= RCC_PLLCLK;
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <RCC_ADCCLKConfig+0x4c>)
 8001790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001792:	4905      	ldr	r1, [pc, #20]	; (80017a8 <RCC_ADCCLKConfig+0x4c>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4313      	orrs	r3, r2
 8001798:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000

080017ac <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d006      	beq.n	80017cc <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <RCC_AHBPeriphClockCmd+0x3c>)
 80017c0:	695a      	ldr	r2, [r3, #20]
 80017c2:	4909      	ldr	r1, [pc, #36]	; (80017e8 <RCC_AHBPeriphClockCmd+0x3c>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80017ca:	e006      	b.n	80017da <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <RCC_AHBPeriphClockCmd+0x3c>)
 80017ce:	695a      	ldr	r2, [r3, #20]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	43db      	mvns	r3, r3
 80017d4:	4904      	ldr	r1, [pc, #16]	; (80017e8 <RCC_AHBPeriphClockCmd+0x3c>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	614b      	str	r3, [r1, #20]
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000

080017ec <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d006      	beq.n	800180c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <RCC_APB1PeriphClockCmd+0x3c>)
 8001800:	69da      	ldr	r2, [r3, #28]
 8001802:	4909      	ldr	r1, [pc, #36]	; (8001828 <RCC_APB1PeriphClockCmd+0x3c>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4313      	orrs	r3, r2
 8001808:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800180a:	e006      	b.n	800181a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <RCC_APB1PeriphClockCmd+0x3c>)
 800180e:	69da      	ldr	r2, [r3, #28]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	43db      	mvns	r3, r3
 8001814:	4904      	ldr	r1, [pc, #16]	; (8001828 <RCC_APB1PeriphClockCmd+0x3c>)
 8001816:	4013      	ands	r3, r2
 8001818:	61cb      	str	r3, [r1, #28]
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000

0800182c <SPI_SendData8>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	70fb      	strb	r3, [r7, #3]
  uint32_t spixbase = 0x00;
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	330c      	adds	r3, #12
 8001844:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	78fa      	ldrb	r2, [r7, #3]
 800184a:	701a      	strb	r2, [r3, #0]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	891b      	ldrh	r3, [r3, #8]
 800186c:	b29a      	uxth	r2, r3
 800186e:	887b      	ldrh	r3, [r7, #2]
 8001870:	4013      	ands	r3, r2
 8001872:	b29b      	uxth	r3, r3
 8001874:	2b00      	cmp	r3, #0
 8001876:	d002      	beq.n	800187e <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001878:	2301      	movs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
 800187c:	e001      	b.n	8001882 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800187e:	2300      	movs	r3, #0
 8001880:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d008      	beq.n	80018b4 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80018b2:	e007      	b.n	80018c4 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	f023 0301 	bic.w	r3, r3, #1
 80018be:	b29a      	uxth	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	801a      	strh	r2, [r3, #0]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
 80018dc:	4613      	mov	r3, r2
 80018de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80018e0:	787b      	ldrb	r3, [r7, #1]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d006      	beq.n	80018f4 <TIM_ITConfig+0x24>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	887b      	ldrh	r3, [r7, #2]
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	60da      	str	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80018f2:	e007      	b.n	8001904 <TIM_ITConfig+0x34>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	887a      	ldrh	r2, [r7, #2]
 80018fa:	43d2      	mvns	r2, r2
 80018fc:	b292      	uxth	r2, r2
 80018fe:	401a      	ands	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	60da      	str	r2, [r3, #12]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8001920:	2300      	movs	r3, #0
 8001922:	81bb      	strh	r3, [r7, #12]
 8001924:	2300      	movs	r3, #0
 8001926:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	b29a      	uxth	r2, r3
 800192e:	887b      	ldrh	r3, [r7, #2]
 8001930:	4013      	ands	r3, r2
 8001932:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	b29a      	uxth	r2, r3
 800193a:	887b      	ldrh	r3, [r7, #2]
 800193c:	4013      	ands	r3, r2
 800193e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001940:	89bb      	ldrh	r3, [r7, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d005      	beq.n	8001952 <TIM_GetITStatus+0x42>
 8001946:	897b      	ldrh	r3, [r7, #10]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
 8001950:	e001      	b.n	8001956 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8001952:	2300      	movs	r3, #0
 8001954:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001956:	7bfb      	ldrb	r3, [r7, #15]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001970:	887b      	ldrh	r3, [r7, #2]
 8001972:	43db      	mvns	r3, r3
 8001974:	b29b      	uxth	r3, r3
 8001976:	461a      	mov	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	611a      	str	r2, [r3, #16]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8001994:	887b      	ldrh	r3, [r7, #2]
 8001996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800199a:	b29a      	uxth	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	4613      	mov	r3, r2
 80019b8:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	0a1b      	lsrs	r3, r3, #8
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80019de:	2201      	movs	r2, #1
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d103      	bne.n	80019f6 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3304      	adds	r3, #4
 80019f2:	61fb      	str	r3, [r7, #28]
 80019f4:	e005      	b.n	8001a02 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d102      	bne.n	8001a02 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	3308      	adds	r3, #8
 8001a00:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d006      	beq.n	8001a16 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	6819      	ldr	r1, [r3, #0]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001a14:	e006      	b.n	8001a24 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	6819      	ldr	r1, [r3, #0]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43da      	mvns	r2, r3
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	400a      	ands	r2, r1
 8001a22:	601a      	str	r2, [r3, #0]
}
 8001a24:	bf00      	nop
 8001a26:	3724      	adds	r7, #36	; 0x24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69da      	ldr	r2, [r3, #28]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	4013      	ands	r3, r2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d002      	beq.n	8001a50 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	73fb      	strb	r3, [r7, #15]
 8001a4e:	e001      	b.n	8001a54 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b087      	sub	sp, #28
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	2300      	movs	r3, #0
 8001a76:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d105      	bne.n	8001aa8 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	e00d      	b.n	8001ac4 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d105      	bne.n	8001aba <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	e004      	b.n	8001ac4 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	0c1b      	lsrs	r3, r3, #16
 8001ac8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001aca:	2201      	movs	r2, #1
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4013      	ands	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <USART_GetITStatus+0x8e>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8001aea:	2301      	movs	r3, #1
 8001aec:	74fb      	strb	r3, [r7, #19]
 8001aee:	e001      	b.n	8001af4 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8001af0:	2300      	movs	r3, #0
 8001af2:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001af4:	7cfb      	ldrb	r3, [r7, #19]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	371c      	adds	r7, #28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	f003 031f 	and.w	r3, r3, #31
 8001b14:	2201      	movs	r2, #1
 8001b16:	fa02 f103 	lsl.w	r1, r2, r3
 8001b1a:	4a06      	ldr	r2, [pc, #24]	; (8001b34 <NVIC_EnableIRQ+0x30>)
 8001b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b20:	095b      	lsrs	r3, r3, #5
 8001b22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000e100 	.word	0xe000e100

08001b38 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	4619      	mov	r1, r3
 8001b48:	4807      	ldr	r0, [pc, #28]	; (8001b68 <uart_put_char+0x30>)
 8001b4a:	f7ff ff1d 	bl	8001988 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8001b4e:	bf00      	nop
 8001b50:	2180      	movs	r1, #128	; 0x80
 8001b52:	4805      	ldr	r0, [pc, #20]	; (8001b68 <uart_put_char+0x30>)
 8001b54:	f7ff ff6c 	bl	8001a30 <USART_GetFlagStatus>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f8      	beq.n	8001b50 <uart_put_char+0x18>
}
 8001b5e:	bf00      	nop
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40004400 	.word	0x40004400

08001b6c <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	e012      	b.n	8001ba6 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b0a      	cmp	r3, #10
 8001b8a:	d102      	bne.n	8001b92 <_write_r+0x26>
            uart_put_char('\r');
 8001b8c:	200d      	movs	r0, #13
 8001b8e:	f7ff ffd3 	bl	8001b38 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	4413      	add	r3, r2
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ffcc 	bl	8001b38 <uart_put_char>
    for (n = 0; n < len; n++) {
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	dbe8      	blt.n	8001b80 <_write_r+0x14>
    }

    return len;
 8001bae:	683b      	ldr	r3, [r7, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8001bbc:	4915      	ldr	r1, [pc, #84]	; (8001c14 <USART2_IRQHandler+0x5c>)
 8001bbe:	4816      	ldr	r0, [pc, #88]	; (8001c18 <USART2_IRQHandler+0x60>)
 8001bc0:	f7ff ff4f 	bl	8001a62 <USART_GetITStatus>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d021      	beq.n	8001c0e <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <USART2_IRQHandler+0x60>)
 8001bcc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001bce:	b299      	uxth	r1, r3
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <USART2_IRQHandler+0x64>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	b2d0      	uxtb	r0, r2
 8001bda:	4a10      	ldr	r2, [pc, #64]	; (8001c1c <USART2_IRQHandler+0x64>)
 8001bdc:	7010      	strb	r0, [r2, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	b2c9      	uxtb	r1, r1
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <USART2_IRQHandler+0x68>)
 8001be4:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8001be6:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <USART2_IRQHandler+0x6c>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2bff      	cmp	r3, #255	; 0xff
 8001bee:	d107      	bne.n	8001c00 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <USART2_IRQHandler+0x70>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <USART2_IRQHandler+0x70>)
 8001bfc:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8001bfe:	e006      	b.n	8001c0e <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <USART2_IRQHandler+0x6c>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	3301      	adds	r3, #1
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <USART2_IRQHandler+0x6c>)
 8001c0c:	701a      	strb	r2, [r3, #0]
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	00050105 	.word	0x00050105
 8001c18:	40004400 	.word	0x40004400
 8001c1c:	20000318 	.word	0x20000318
 8001c20:	20000218 	.word	0x20000218
 8001c24:	2000031a 	.word	0x2000031a
 8001c28:	20000319 	.word	0x20000319

08001c2c <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b094      	sub	sp, #80	; 0x50
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8001c34:	4b86      	ldr	r3, [pc, #536]	; (8001e50 <uart_init+0x224>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f001 fd3b 	bl	80036b8 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8001c42:	4b83      	ldr	r3, [pc, #524]	; (8001e50 <uart_init+0x224>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f001 fd34 	bl	80036b8 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8001c50:	4b80      	ldr	r3, [pc, #512]	; (8001e54 <uart_init+0x228>)
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	4a7f      	ldr	r2, [pc, #508]	; (8001e54 <uart_init+0x228>)
 8001c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5a:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8001c5c:	4b7d      	ldr	r3, [pc, #500]	; (8001e54 <uart_init+0x228>)
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	4a7c      	ldr	r2, [pc, #496]	; (8001e54 <uart_init+0x228>)
 8001c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c66:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8001c68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001c72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c76:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8001c78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001c82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c86:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8001c88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001c92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001c96:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001c98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ca2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001ca6:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8001ca8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cb6:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001cb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001cc2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001cc6:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8001cc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ccc:	889b      	ldrh	r3, [r3, #4]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001cd4:	f023 030c 	bic.w	r3, r3, #12
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001cdc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ce0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ce4:	8892      	ldrh	r2, [r2, #4]
 8001ce6:	b292      	uxth	r2, r2
 8001ce8:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8001cea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001cf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cf8:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001cfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001d04:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001d08:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8001d0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001d14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d18:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001d1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001d24:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001d28:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8001d2a:	4b4b      	ldr	r3, [pc, #300]	; (8001e58 <uart_init+0x22c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a4a      	ldr	r2, [pc, #296]	; (8001e58 <uart_init+0x22c>)
 8001d30:	f023 0301 	bic.w	r3, r3, #1
 8001d34:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8001d36:	4b48      	ldr	r3, [pc, #288]	; (8001e58 <uart_init+0x22c>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4a47      	ldr	r2, [pc, #284]	; (8001e58 <uart_init+0x22c>)
 8001d3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d40:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8001d42:	4b45      	ldr	r3, [pc, #276]	; (8001e58 <uart_init+0x22c>)
 8001d44:	4a44      	ldr	r2, [pc, #272]	; (8001e58 <uart_init+0x22c>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8001d4a:	4b43      	ldr	r3, [pc, #268]	; (8001e58 <uart_init+0x22c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a42      	ldr	r2, [pc, #264]	; (8001e58 <uart_init+0x22c>)
 8001d50:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d54:	f023 030c 	bic.w	r3, r3, #12
 8001d58:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8001d5a:	4b3f      	ldr	r3, [pc, #252]	; (8001e58 <uart_init+0x22c>)
 8001d5c:	4a3e      	ldr	r2, [pc, #248]	; (8001e58 <uart_init+0x22c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8001d62:	4b3d      	ldr	r3, [pc, #244]	; (8001e58 <uart_init+0x22c>)
 8001d64:	4a3c      	ldr	r2, [pc, #240]	; (8001e58 <uart_init+0x22c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <uart_init+0x22c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a3a      	ldr	r2, [pc, #232]	; (8001e58 <uart_init+0x22c>)
 8001d70:	f043 030c 	orr.w	r3, r3, #12
 8001d74:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8001d76:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <uart_init+0x22c>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	4a37      	ldr	r2, [pc, #220]	; (8001e58 <uart_init+0x22c>)
 8001d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d80:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8001d82:	4b35      	ldr	r3, [pc, #212]	; (8001e58 <uart_init+0x22c>)
 8001d84:	4a34      	ldr	r2, [pc, #208]	; (8001e58 <uart_init+0x22c>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d8e:	2300      	movs	r3, #0
 8001d90:	647b      	str	r3, [r7, #68]	; 0x44
 8001d92:	2300      	movs	r3, #0
 8001d94:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8001d96:	f107 0308 	add.w	r3, r7, #8
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff faca 	bl	8001334 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da2:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001da4:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <uart_init+0x22c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d010      	beq.n	8001dd2 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8001db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001db2:	005a      	lsls	r2, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dba:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	fb01 f202 	mul.w	r2, r1, r2
 8001dcc:	1a9b      	subs	r3, r3, r2
 8001dce:	64bb      	str	r3, [r7, #72]	; 0x48
 8001dd0:	e00d      	b.n	8001dee <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8001dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dda:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8001ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	fbb3 f2f2 	udiv	r2, r3, r2
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	fb01 f202 	mul.w	r2, r1, r2
 8001dea:	1a9b      	subs	r3, r3, r2
 8001dec:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	085b      	lsrs	r3, r3, #1
 8001df2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d302      	bcc.n	8001dfe <uart_init+0x1d2>
        divider++;
 8001df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <uart_init+0x22c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00b      	beq.n	8001e22 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8001e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e0c:	085b      	lsrs	r3, r3, #1
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8001e14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e16:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8001e22:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <uart_init+0x22c>)
 8001e24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e26:	b292      	uxth	r2, r2
 8001e28:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <uart_init+0x22c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <uart_init+0x22c>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8001e36:	2201      	movs	r2, #1
 8001e38:	4908      	ldr	r1, [pc, #32]	; (8001e5c <uart_init+0x230>)
 8001e3a:	4807      	ldr	r0, [pc, #28]	; (8001e58 <uart_init+0x22c>)
 8001e3c:	f7ff fdb6 	bl	80019ac <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001e40:	2026      	movs	r0, #38	; 0x26
 8001e42:	f7ff fe5f 	bl	8001b04 <NVIC_EnableIRQ>
}
 8001e46:	bf00      	nop
 8001e48:	3750      	adds	r7, #80	; 0x50
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	2000002c 	.word	0x2000002c
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40004400 	.word	0x40004400
 8001e5c:	00050105 	.word	0x00050105

08001e60 <lcd_transmit_byte>:
#include "charset.h"

/*****************************/
/*** LCD Control Functions ***/
/*****************************/
void lcd_transmit_byte(uint8_t data) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
    GPIOB->ODR &= ~(0x0001 << 6); // CS = 0 - Start Transmission
 8001e6a:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <lcd_transmit_byte+0x5c>)
 8001e6c:	8a9b      	ldrh	r3, [r3, #20]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <lcd_transmit_byte+0x5c>)
 8001e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	8293      	strh	r3, [r2, #20]
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8001e7a:	bf00      	nop
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	4810      	ldr	r0, [pc, #64]	; (8001ec0 <lcd_transmit_byte+0x60>)
 8001e80:	f7ff fcea 	bl	8001858 <SPI_I2S_GetFlagStatus>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d1f8      	bne.n	8001e7c <lcd_transmit_byte+0x1c>
    SPI_SendData8(SPI2, data);
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	480c      	ldr	r0, [pc, #48]	; (8001ec0 <lcd_transmit_byte+0x60>)
 8001e90:	f7ff fccc 	bl	800182c <SPI_SendData8>
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8001e94:	bf00      	nop
 8001e96:	2102      	movs	r1, #2
 8001e98:	4809      	ldr	r0, [pc, #36]	; (8001ec0 <lcd_transmit_byte+0x60>)
 8001e9a:	f7ff fcdd 	bl	8001858 <SPI_I2S_GetFlagStatus>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d1f8      	bne.n	8001e96 <lcd_transmit_byte+0x36>
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - End Transmission
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <lcd_transmit_byte+0x5c>)
 8001ea6:	8a9b      	ldrh	r3, [r3, #20]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <lcd_transmit_byte+0x5c>)
 8001eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	8293      	strh	r3, [r2, #20]
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	48000400 	.word	0x48000400
 8001ec0:	40003800 	.word	0x40003800

08001ec4 <lcd_push_buffer>:

void lcd_push_buffer(uint8_t* buffer)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
    int i = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]

    //page 0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8001ed0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ed4:	8a9b      	ldrh	r3, [r3, #20]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f7ff ffbb 	bl	8001e60 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8001eea:	2010      	movs	r0, #16
 8001eec:	f7ff ffb8 	bl	8001e60 <lcd_transmit_byte>
    lcd_transmit_byte(0xB0);      // set page address  0
 8001ef0:	20b0      	movs	r0, #176	; 0xb0
 8001ef2:	f7ff ffb5 	bl	8001e60 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8001ef6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001efa:	8a9b      	ldrh	r3, [r3, #20]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	8293      	strh	r3, [r2, #20]
    for(i=0; i<128; i++) {
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	e009      	b.n	8001f24 <lcd_push_buffer+0x60>
       lcd_transmit_byte(buffer[i]);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ffa1 	bl	8001e60 <lcd_transmit_byte>
    for(i=0; i<128; i++) {
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	3301      	adds	r3, #1
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2b7f      	cmp	r3, #127	; 0x7f
 8001f28:	ddf2      	ble.n	8001f10 <lcd_push_buffer+0x4c>
    }

    // page 1
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8001f2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f2e:	8a9b      	ldrh	r3, [r3, #20]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7ff ff8e 	bl	8001e60 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8001f44:	2010      	movs	r0, #16
 8001f46:	f7ff ff8b 	bl	8001e60 <lcd_transmit_byte>
    lcd_transmit_byte(0xB1);      // set page address  1
 8001f4a:	20b1      	movs	r0, #177	; 0xb1
 8001f4c:	f7ff ff88 	bl	8001e60 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8001f50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f54:	8a9b      	ldrh	r3, [r3, #20]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	8293      	strh	r3, [r2, #20]
    for( i = 128 ; i < 256 ; i++ ) {
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	e009      	b.n	8001f7e <lcd_push_buffer+0xba>
       lcd_transmit_byte(buffer[i]);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	4413      	add	r3, r2
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff ff74 	bl	8001e60 <lcd_transmit_byte>
    for( i = 128 ; i < 256 ; i++ ) {
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2bff      	cmp	r3, #255	; 0xff
 8001f82:	ddf2      	ble.n	8001f6a <lcd_push_buffer+0xa6>
    }

    //page 2
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8001f84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f88:	8a9b      	ldrh	r3, [r3, #20]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f7ff ff61 	bl	8001e60 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8001f9e:	2010      	movs	r0, #16
 8001fa0:	f7ff ff5e 	bl	8001e60 <lcd_transmit_byte>
    lcd_transmit_byte(0xB2);      // set page address  2
 8001fa4:	20b2      	movs	r0, #178	; 0xb2
 8001fa6:	f7ff ff5b 	bl	8001e60 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8001faa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001fae:	8a9b      	ldrh	r3, [r3, #20]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	8293      	strh	r3, [r2, #20]
    for(i=256; i<384; i++) {
 8001fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	e009      	b.n	8001fda <lcd_push_buffer+0x116>
       lcd_transmit_byte(buffer[i]);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	4413      	add	r3, r2
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff ff46 	bl	8001e60 <lcd_transmit_byte>
    for(i=256; i<384; i++) {
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8001fe0:	dbf1      	blt.n	8001fc6 <lcd_push_buffer+0x102>
    }

    //page 3
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8001fe2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001fe6:	8a9b      	ldrh	r3, [r3, #20]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001fee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f7ff ff32 	bl	8001e60 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8001ffc:	2010      	movs	r0, #16
 8001ffe:	f7ff ff2f 	bl	8001e60 <lcd_transmit_byte>
    lcd_transmit_byte(0xB3);      // set page address  3
 8002002:	20b3      	movs	r0, #179	; 0xb3
 8002004:	f7ff ff2c 	bl	8001e60 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8002008:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800200c:	8a9b      	ldrh	r3, [r3, #20]
 800200e:	b29b      	uxth	r3, r3
 8002010:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002018:	b29b      	uxth	r3, r3
 800201a:	8293      	strh	r3, [r2, #20]
    for(i=384; i<512; i++) {
 800201c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	e009      	b.n	8002038 <lcd_push_buffer+0x174>
       lcd_transmit_byte(buffer[i]);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff17 	bl	8001e60 <lcd_transmit_byte>
    for(i=384; i<512; i++) {
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	3301      	adds	r3, #1
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800203e:	dbf1      	blt.n	8002024 <lcd_push_buffer+0x160>
    }
}
 8002040:	bf00      	nop
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <lcd_reset>:

void lcd_reset()
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Reset Command/Data
 8002052:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002056:	8a9b      	ldrh	r3, [r3, #20]
 8002058:	b29b      	uxth	r3, r3
 800205a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800205e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002062:	b29b      	uxth	r3, r3
 8002064:	8293      	strh	r3, [r2, #20]
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - Reset C/S
 8002066:	4b2f      	ldr	r3, [pc, #188]	; (8002124 <lcd_reset+0xd8>)
 8002068:	8a9b      	ldrh	r3, [r3, #20]
 800206a:	b29b      	uxth	r3, r3
 800206c:	4a2d      	ldr	r2, [pc, #180]	; (8002124 <lcd_reset+0xd8>)
 800206e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002072:	b29b      	uxth	r3, r3
 8002074:	8293      	strh	r3, [r2, #20]

    GPIOB->ODR &= ~(0x0001 << 14); // RESET = 0 - Reset Display
 8002076:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <lcd_reset+0xd8>)
 8002078:	8a9b      	ldrh	r3, [r3, #20]
 800207a:	b29b      	uxth	r3, r3
 800207c:	4a29      	ldr	r2, [pc, #164]	; (8002124 <lcd_reset+0xd8>)
 800207e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002082:	b29b      	uxth	r3, r3
 8002084:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 4680 ; i++) { asm("nop"); }; // Wait
 8002086:	2300      	movs	r3, #0
 8002088:	607b      	str	r3, [r7, #4]
 800208a:	e003      	b.n	8002094 <lcd_reset+0x48>
 800208c:	bf00      	nop
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3301      	adds	r3, #1
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f241 2247 	movw	r2, #4679	; 0x1247
 800209a:	4293      	cmp	r3, r2
 800209c:	d9f6      	bls.n	800208c <lcd_reset+0x40>
    GPIOB->ODR |=  (0x0001 << 14); // RESET = 1 - Stop Reset
 800209e:	4b21      	ldr	r3, [pc, #132]	; (8002124 <lcd_reset+0xd8>)
 80020a0:	8a9b      	ldrh	r3, [r3, #20]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	4a1f      	ldr	r2, [pc, #124]	; (8002124 <lcd_reset+0xd8>)
 80020a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 390000 ; i++) { asm("nop"); }; // Wait
 80020ae:	2300      	movs	r3, #0
 80020b0:	603b      	str	r3, [r7, #0]
 80020b2:	e003      	b.n	80020bc <lcd_reset+0x70>
 80020b4:	bf00      	nop
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	4a1a      	ldr	r2, [pc, #104]	; (8002128 <lcd_reset+0xdc>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d9f7      	bls.n	80020b4 <lcd_reset+0x68>

    // Configure Display
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80020c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020c8:	8a9b      	ldrh	r3, [r3, #20]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80020d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	8293      	strh	r3, [r2, #20]

    lcd_transmit_byte(0xAE);  // Turn off display
 80020d8:	20ae      	movs	r0, #174	; 0xae
 80020da:	f7ff fec1 	bl	8001e60 <lcd_transmit_byte>
    lcd_transmit_byte(0xA2);  // Set bias voltage to 1/9
 80020de:	20a2      	movs	r0, #162	; 0xa2
 80020e0:	f7ff febe 	bl	8001e60 <lcd_transmit_byte>

    lcd_transmit_byte(0xA0);  // Set display RAM address normal
 80020e4:	20a0      	movs	r0, #160	; 0xa0
 80020e6:	f7ff febb 	bl	8001e60 <lcd_transmit_byte>
    lcd_transmit_byte(0xC8);  // Set update direction
 80020ea:	20c8      	movs	r0, #200	; 0xc8
 80020ec:	f7ff feb8 	bl	8001e60 <lcd_transmit_byte>

    lcd_transmit_byte(0x22);  // Set internal resistor ratio
 80020f0:	2022      	movs	r0, #34	; 0x22
 80020f2:	f7ff feb5 	bl	8001e60 <lcd_transmit_byte>
    lcd_transmit_byte(0x2F);  // Set operating mode
 80020f6:	202f      	movs	r0, #47	; 0x2f
 80020f8:	f7ff feb2 	bl	8001e60 <lcd_transmit_byte>
    lcd_transmit_byte(0x40);  // Set start line address
 80020fc:	2040      	movs	r0, #64	; 0x40
 80020fe:	f7ff feaf 	bl	8001e60 <lcd_transmit_byte>

    lcd_transmit_byte(0xAF);  // Turn on display
 8002102:	20af      	movs	r0, #175	; 0xaf
 8002104:	f7ff feac 	bl	8001e60 <lcd_transmit_byte>

    lcd_transmit_byte(0x81);  // Set output voltage
 8002108:	2081      	movs	r0, #129	; 0x81
 800210a:	f7ff fea9 	bl	8001e60 <lcd_transmit_byte>
    lcd_transmit_byte(0x17);  // Set contrast
 800210e:	2017      	movs	r0, #23
 8002110:	f7ff fea6 	bl	8001e60 <lcd_transmit_byte>

    lcd_transmit_byte(0xA6);  // Set normal mode
 8002114:	20a6      	movs	r0, #166	; 0xa6
 8002116:	f7ff fea3 	bl	8001e60 <lcd_transmit_byte>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	48000400 	.word	0x48000400
 8002128:	0005f36f 	.word	0x0005f36f

0800212c <init_spi_lcd>:

void init_spi_lcd() {
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
    // Enable Clocks
    RCC->AHBENR  |= 0x00020000 | 0x00040000;    // Enable Clock for GPIO Banks A and B
 8002130:	4b9d      	ldr	r3, [pc, #628]	; (80023a8 <init_spi_lcd+0x27c>)
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	4a9c      	ldr	r2, [pc, #624]	; (80023a8 <init_spi_lcd+0x27c>)
 8002136:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 800213a:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= 0x00004000;                 // Enable Clock for SPI2
 800213c:	4b9a      	ldr	r3, [pc, #616]	; (80023a8 <init_spi_lcd+0x27c>)
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	4a99      	ldr	r2, [pc, #612]	; (80023a8 <init_spi_lcd+0x27c>)
 8002142:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002146:	61d3      	str	r3, [r2, #28]

    // Connect pins to SPI2
    GPIOB->AFR[13 >> 0x03] &= ~(0x0000000F << ((13 & 0x00000007) * 4)); // Clear alternate function for PB13
 8002148:	4b98      	ldr	r3, [pc, #608]	; (80023ac <init_spi_lcd+0x280>)
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	4a97      	ldr	r2, [pc, #604]	; (80023ac <init_spi_lcd+0x280>)
 800214e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002152:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[13 >> 0x03] |=  (0x00000005 << ((13 & 0x00000007) * 4)); // Set alternate 5 function for PB13 - SCLK
 8002154:	4b95      	ldr	r3, [pc, #596]	; (80023ac <init_spi_lcd+0x280>)
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	4a94      	ldr	r2, [pc, #592]	; (80023ac <init_spi_lcd+0x280>)
 800215a:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800215e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] &= ~(0x0000000F << ((15 & 0x00000007) * 4)); // Clear alternate function for PB15
 8002160:	4b92      	ldr	r3, [pc, #584]	; (80023ac <init_spi_lcd+0x280>)
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	4a91      	ldr	r2, [pc, #580]	; (80023ac <init_spi_lcd+0x280>)
 8002166:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800216a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] |=  (0x00000005 << ((15 & 0x00000007) * 4)); // Set alternate 5 function for PB15 - MOSI
 800216c:	4b8f      	ldr	r3, [pc, #572]	; (80023ac <init_spi_lcd+0x280>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	4a8e      	ldr	r2, [pc, #568]	; (80023ac <init_spi_lcd+0x280>)
 8002172:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8002176:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB13 and PB15 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear speed register
 8002178:	4b8c      	ldr	r3, [pc, #560]	; (80023ac <init_spi_lcd+0x280>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4a8b      	ldr	r2, [pc, #556]	; (80023ac <init_spi_lcd+0x280>)
 800217e:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8002182:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (13 * 2) | 0x00000001 << (15 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8002184:	4b89      	ldr	r3, [pc, #548]	; (80023ac <init_spi_lcd+0x280>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4a88      	ldr	r2, [pc, #544]	; (80023ac <init_spi_lcd+0x280>)
 800218a:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 800218e:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (13)     | 0x0001     << (15));        // Clear output type register
 8002190:	4b86      	ldr	r3, [pc, #536]	; (80023ac <init_spi_lcd+0x280>)
 8002192:	889b      	ldrh	r3, [r3, #4]
 8002194:	b29a      	uxth	r2, r3
 8002196:	4985      	ldr	r1, [pc, #532]	; (80023ac <init_spi_lcd+0x280>)
 8002198:	f645 73ff 	movw	r3, #24575	; 0x5fff
 800219c:	4013      	ands	r3, r2
 800219e:	b29b      	uxth	r3, r3
 80021a0:	808b      	strh	r3, [r1, #4]
    GPIOB->OTYPER  |=  (0x0000     << (13)     | 0x0000     << (15));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80021a2:	4a82      	ldr	r2, [pc, #520]	; (80023ac <init_spi_lcd+0x280>)
 80021a4:	4b81      	ldr	r3, [pc, #516]	; (80023ac <init_spi_lcd+0x280>)
 80021a6:	8892      	ldrh	r2, [r2, #4]
 80021a8:	b292      	uxth	r2, r2
 80021aa:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear mode register
 80021ac:	4b7f      	ldr	r3, [pc, #508]	; (80023ac <init_spi_lcd+0x280>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a7e      	ldr	r2, [pc, #504]	; (80023ac <init_spi_lcd+0x280>)
 80021b2:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 80021b6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (13 * 2) | 0x00000002 << (15 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80021b8:	4b7c      	ldr	r3, [pc, #496]	; (80023ac <init_spi_lcd+0x280>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a7b      	ldr	r2, [pc, #492]	; (80023ac <init_spi_lcd+0x280>)
 80021be:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 80021c2:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear push/pull register
 80021c4:	4b79      	ldr	r3, [pc, #484]	; (80023ac <init_spi_lcd+0x280>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4a78      	ldr	r2, [pc, #480]	; (80023ac <init_spi_lcd+0x280>)
 80021ca:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 80021ce:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (13 * 2) | 0x00000000 << (15 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80021d0:	4b76      	ldr	r3, [pc, #472]	; (80023ac <init_spi_lcd+0x280>)
 80021d2:	4a76      	ldr	r2, [pc, #472]	; (80023ac <init_spi_lcd+0x280>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	60d3      	str	r3, [r2, #12]

    // Initialize REEST, nCS, and A0
    // Configure pins PB6 and PB14 for 10 MHz output
    GPIOB->OSPEEDR &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear speed register
 80021d8:	4b74      	ldr	r3, [pc, #464]	; (80023ac <init_spi_lcd+0x280>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4a73      	ldr	r2, [pc, #460]	; (80023ac <init_spi_lcd+0x280>)
 80021de:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 80021e2:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80021e4:	4b71      	ldr	r3, [pc, #452]	; (80023ac <init_spi_lcd+0x280>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	4a70      	ldr	r2, [pc, #448]	; (80023ac <init_spi_lcd+0x280>)
 80021ea:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 80021ee:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (6)     | 0x0001     << (14));        // Clear output type register
 80021f0:	4b6e      	ldr	r3, [pc, #440]	; (80023ac <init_spi_lcd+0x280>)
 80021f2:	889b      	ldrh	r3, [r3, #4]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	4a6d      	ldr	r2, [pc, #436]	; (80023ac <init_spi_lcd+0x280>)
 80021f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002200:	b29b      	uxth	r3, r3
 8002202:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0000     << (6)     | 0x0000     << (14));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8002204:	4a69      	ldr	r2, [pc, #420]	; (80023ac <init_spi_lcd+0x280>)
 8002206:	4b69      	ldr	r3, [pc, #420]	; (80023ac <init_spi_lcd+0x280>)
 8002208:	8892      	ldrh	r2, [r2, #4]
 800220a:	b292      	uxth	r2, r2
 800220c:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear mode register
 800220e:	4b67      	ldr	r3, [pc, #412]	; (80023ac <init_spi_lcd+0x280>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a66      	ldr	r2, [pc, #408]	; (80023ac <init_spi_lcd+0x280>)
 8002214:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 8002218:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 800221a:	4b64      	ldr	r3, [pc, #400]	; (80023ac <init_spi_lcd+0x280>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a63      	ldr	r2, [pc, #396]	; (80023ac <init_spi_lcd+0x280>)
 8002220:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 8002224:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear push/pull register
 8002226:	4b61      	ldr	r3, [pc, #388]	; (80023ac <init_spi_lcd+0x280>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	4a60      	ldr	r2, [pc, #384]	; (80023ac <init_spi_lcd+0x280>)
 800222c:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 8002230:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (6 * 2) | 0x00000000 << (14 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8002232:	4b5e      	ldr	r3, [pc, #376]	; (80023ac <init_spi_lcd+0x280>)
 8002234:	4a5d      	ldr	r2, [pc, #372]	; (80023ac <init_spi_lcd+0x280>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	60d3      	str	r3, [r2, #12]
    // Configure pin PA8 for 10 MHz output
    GPIOA->OSPEEDR &= ~0x00000003 << (8 * 2);    // Clear speed register
 800223a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002244:	0c9b      	lsrs	r3, r3, #18
 8002246:	049b      	lsls	r3, r3, #18
 8002248:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  0x00000001 << (8 * 2);    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 800224a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002258:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~0x0001     << (8);        // Clear output type register
 800225a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800225e:	889b      	ldrh	r3, [r3, #4]
 8002260:	b29b      	uxth	r3, r3
 8002262:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002266:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	b29b      	uxth	r3, r3
 8002270:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  0x0000     << (8);        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8002272:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002276:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800227a:	8892      	ldrh	r2, [r2, #4]
 800227c:	b292      	uxth	r2, r2
 800227e:	809a      	strh	r2, [r3, #4]


    GPIOA->MODER   &= ~0x00000003 << (8 * 2);    // Clear mode register
 8002280:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800228a:	0c9b      	lsrs	r3, r3, #18
 800228c:	049b      	lsls	r3, r3, #18
 800228e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  0x00000001 << (8 * 2);    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8002290:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800229a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229e:	6013      	str	r3, [r2, #0]

    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // This is needed for UART to work. It makes no sense.
 80022a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80022aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022ae:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));
 80022b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80022ba:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80022be:	6013      	str	r3, [r2, #0]

    GPIOA->PUPDR   &= ~0x00000003 << (8 * 2);    // Clear push/pull register
 80022c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80022ca:	0c9b      	lsrs	r3, r3, #18
 80022cc:	049b      	lsls	r3, r3, #18
 80022ce:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  0x00000000 << (8 * 2);    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80022d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80022d4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	60d3      	str	r3, [r2, #12]

    GPIOB->ODR |=  (0x0001 << 6); // CS = 1
 80022dc:	4b33      	ldr	r3, [pc, #204]	; (80023ac <init_spi_lcd+0x280>)
 80022de:	8a9b      	ldrh	r3, [r3, #20]
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	4a32      	ldr	r2, [pc, #200]	; (80023ac <init_spi_lcd+0x280>)
 80022e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	8293      	strh	r3, [r2, #20]

    // Configure SPI2
    SPI2->CR1 &= 0x3040; // Clear CR1 Register
 80022ec:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <init_spi_lcd+0x284>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	4a2f      	ldr	r2, [pc, #188]	; (80023b0 <init_spi_lcd+0x284>)
 80022f4:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Configure direction (0x0000 - 2 Lines Full Duplex, 0x0400 - 2 Lines RX Only, 0x8000 - 1 Line RX, 0xC000 - 1 Line TX)
 80022fc:	4a2c      	ldr	r2, [pc, #176]	; (80023b0 <init_spi_lcd+0x284>)
 80022fe:	4b2c      	ldr	r3, [pc, #176]	; (80023b0 <init_spi_lcd+0x284>)
 8002300:	8812      	ldrh	r2, [r2, #0]
 8002302:	b292      	uxth	r2, r2
 8002304:	801a      	strh	r2, [r3, #0]
    SPI2->CR1 |= 0x0104; // Configure mode (0x0000 - Slave, 0x0104 - Master)
 8002306:	4b2a      	ldr	r3, [pc, #168]	; (80023b0 <init_spi_lcd+0x284>)
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	b29b      	uxth	r3, r3
 800230c:	4a28      	ldr	r2, [pc, #160]	; (80023b0 <init_spi_lcd+0x284>)
 800230e:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 8002312:	b29b      	uxth	r3, r3
 8002314:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0002; // Configure clock polarity (0x0000 - Low, 0x0002 - High)
 8002316:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <init_spi_lcd+0x284>)
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	4a24      	ldr	r2, [pc, #144]	; (80023b0 <init_spi_lcd+0x284>)
 800231e:	f043 0302 	orr.w	r3, r3, #2
 8002322:	b29b      	uxth	r3, r3
 8002324:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0001; // Configure clock phase (0x0000 - 1 Edge, 0x0001 - 2 Edge)
 8002326:	4b22      	ldr	r3, [pc, #136]	; (80023b0 <init_spi_lcd+0x284>)
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	4a20      	ldr	r2, [pc, #128]	; (80023b0 <init_spi_lcd+0x284>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	b29b      	uxth	r3, r3
 8002334:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0200; // Configure chip select (0x0000 - Hardware based, 0x0200 - Software based)
 8002336:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <init_spi_lcd+0x284>)
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	b29b      	uxth	r3, r3
 800233c:	4a1c      	ldr	r2, [pc, #112]	; (80023b0 <init_spi_lcd+0x284>)
 800233e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002342:	b29b      	uxth	r3, r3
 8002344:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0008; // Set Baud Rate Prescaler (0x0000 - 2, 0x0008 - 4, 0x0018 - 8, 0x0020 - 16, 0x0028 - 32, 0x0028 - 64, 0x0030 - 128, 0x0038 - 128)
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <init_spi_lcd+0x284>)
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	b29b      	uxth	r3, r3
 800234c:	4a18      	ldr	r2, [pc, #96]	; (80023b0 <init_spi_lcd+0x284>)
 800234e:	f043 0308 	orr.w	r3, r3, #8
 8002352:	b29b      	uxth	r3, r3
 8002354:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Set Bit Order (0x0000 - MSB First, 0x0080 - LSB First)
 8002356:	4a16      	ldr	r2, [pc, #88]	; (80023b0 <init_spi_lcd+0x284>)
 8002358:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <init_spi_lcd+0x284>)
 800235a:	8812      	ldrh	r2, [r2, #0]
 800235c:	b292      	uxth	r2, r2
 800235e:	801a      	strh	r2, [r3, #0]
    SPI2->CR2 &= ~0x0F00; // Clear CR2 Register
 8002360:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <init_spi_lcd+0x284>)
 8002362:	889b      	ldrh	r3, [r3, #4]
 8002364:	b29b      	uxth	r3, r3
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <init_spi_lcd+0x284>)
 8002368:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800236c:	b29b      	uxth	r3, r3
 800236e:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x0700; // Set Number of Bits (0x0300 - 4, 0x0400 - 5, 0x0500 - 6, ...);
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <init_spi_lcd+0x284>)
 8002372:	889b      	ldrh	r3, [r3, #4]
 8002374:	b29b      	uxth	r3, r3
 8002376:	4a0e      	ldr	r2, [pc, #56]	; (80023b0 <init_spi_lcd+0x284>)
 8002378:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800237c:	b29b      	uxth	r3, r3
 800237e:	8093      	strh	r3, [r2, #4]
    SPI2->I2SCFGR &= ~0x0800; // Disable I2S
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <init_spi_lcd+0x284>)
 8002382:	8b9b      	ldrh	r3, [r3, #28]
 8002384:	b29b      	uxth	r3, r3
 8002386:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <init_spi_lcd+0x284>)
 8002388:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800238c:	b29b      	uxth	r3, r3
 800238e:	8393      	strh	r3, [r2, #28]
    SPI2->CRCPR = 7; // Set CRC polynomial order
 8002390:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <init_spi_lcd+0x284>)
 8002392:	2207      	movs	r2, #7
 8002394:	821a      	strh	r2, [r3, #16]
    SPI2->CR2 &= ~0x1000;
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <init_spi_lcd+0x284>)
 8002398:	889b      	ldrh	r3, [r3, #4]
 800239a:	b29b      	uxth	r3, r3
 800239c:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <init_spi_lcd+0x284>)
 800239e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	e006      	b.n	80023b4 <init_spi_lcd+0x288>
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	48000400 	.word	0x48000400
 80023b0:	40003800 	.word	0x40003800
 80023b4:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x1000; // Configure RXFIFO return at (0x0000 - Half-full (16 bits), 0x1000 - Quarter-full (8 bits))
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <init_spi_lcd+0x2b4>)
 80023b8:	889b      	ldrh	r3, [r3, #4]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	4a08      	ldr	r2, [pc, #32]	; (80023e0 <init_spi_lcd+0x2b4>)
 80023be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	8093      	strh	r3, [r2, #4]
    SPI2->CR1 |= 0x0040; // Enable SPI2
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <init_spi_lcd+0x2b4>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <init_spi_lcd+0x2b4>)
 80023ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	8013      	strh	r3, [r2, #0]

    lcd_reset();
 80023d6:	f7ff fe39 	bl	800204c <lcd_reset>
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40003800 	.word	0x40003800

080023e4 <generate_line_buff>:

void generate_line_buff(uint8_t * str, uint8_t * linebuff, uint16_t bufflen){
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	4613      	mov	r3, r2
 80023f0:	80fb      	strh	r3, [r7, #6]
    uint8_t idx;
    //convert each character to a 5+1 (CHAR_WIDTH) slices and add it to the line buffer
    for(int i = 0; i<bufflen; i++){
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	e06d      	b.n	80024d4 <generate_line_buff+0xf0>
        if (str[i] == '\0'){
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4413      	add	r3, r2
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d06c      	beq.n	80024de <generate_line_buff+0xfa>
            break;
        }
        idx = CHAR_WIDTH*i;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	0052      	lsls	r2, r2, #1
 800240c:	4413      	add	r3, r2
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	74fb      	strb	r3, [r7, #19]
        linebuff[idx] = character_data[str[i]-0x20][0];
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	4413      	add	r3, r2
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	f1a3 0220 	sub.w	r2, r3, #32
 800241e:	7cfb      	ldrb	r3, [r7, #19]
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	4419      	add	r1, r3
 8002424:	4831      	ldr	r0, [pc, #196]	; (80024ec <generate_line_buff+0x108>)
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	4403      	add	r3, r0
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	700b      	strb	r3, [r1, #0]
        linebuff[idx+1] = character_data[str[i]-0x20][1];
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4413      	add	r3, r2
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	f1a3 0220 	sub.w	r2, r3, #32
 800243e:	7cfb      	ldrb	r3, [r7, #19]
 8002440:	3301      	adds	r3, #1
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	4419      	add	r1, r3
 8002446:	4829      	ldr	r0, [pc, #164]	; (80024ec <generate_line_buff+0x108>)
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	4403      	add	r3, r0
 8002450:	3301      	adds	r3, #1
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	700b      	strb	r3, [r1, #0]
        linebuff[idx+2] = character_data[str[i]-0x20][2];
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4413      	add	r3, r2
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	f1a3 0220 	sub.w	r2, r3, #32
 8002462:	7cfb      	ldrb	r3, [r7, #19]
 8002464:	3302      	adds	r3, #2
 8002466:	68b9      	ldr	r1, [r7, #8]
 8002468:	4419      	add	r1, r3
 800246a:	4820      	ldr	r0, [pc, #128]	; (80024ec <generate_line_buff+0x108>)
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	4403      	add	r3, r0
 8002474:	3302      	adds	r3, #2
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	700b      	strb	r3, [r1, #0]
        linebuff[idx+3] = character_data[str[i]-0x20][3];
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4413      	add	r3, r2
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	f1a3 0220 	sub.w	r2, r3, #32
 8002486:	7cfb      	ldrb	r3, [r7, #19]
 8002488:	3303      	adds	r3, #3
 800248a:	68b9      	ldr	r1, [r7, #8]
 800248c:	4419      	add	r1, r3
 800248e:	4817      	ldr	r0, [pc, #92]	; (80024ec <generate_line_buff+0x108>)
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	4403      	add	r3, r0
 8002498:	3303      	adds	r3, #3
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	700b      	strb	r3, [r1, #0]
        linebuff[idx+4] = character_data[str[i]-0x20][4];
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	f1a3 0220 	sub.w	r2, r3, #32
 80024aa:	7cfb      	ldrb	r3, [r7, #19]
 80024ac:	3304      	adds	r3, #4
 80024ae:	68b9      	ldr	r1, [r7, #8]
 80024b0:	4419      	add	r1, r3
 80024b2:	480e      	ldr	r0, [pc, #56]	; (80024ec <generate_line_buff+0x108>)
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	4403      	add	r3, r0
 80024bc:	3304      	adds	r3, #4
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	700b      	strb	r3, [r1, #0]
        linebuff[idx+5] = 0x00;
 80024c2:	7cfb      	ldrb	r3, [r7, #19]
 80024c4:	3305      	adds	r3, #5
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	4413      	add	r3, r2
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i<bufflen; i++){
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	3301      	adds	r3, #1
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	429a      	cmp	r2, r3
 80024da:	db8d      	blt.n	80023f8 <generate_line_buff+0x14>
    }
}
 80024dc:	e000      	b.n	80024e0 <generate_line_buff+0xfc>
            break;
 80024de:	bf00      	nop
}
 80024e0:	bf00      	nop
 80024e2:	371c      	adds	r7, #28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	08005d44 	.word	0x08005d44

080024f0 <write_line_buff>:

void write_line_buff(uint8_t * linebuff, uint8_t * lcdbuff, uint8_t xoffset, uint8_t yoffset, uint8_t scrollena){
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	4611      	mov	r1, r2
 80024fc:	461a      	mov	r2, r3
 80024fe:	460b      	mov	r3, r1
 8002500:	71fb      	strb	r3, [r7, #7]
 8002502:	4613      	mov	r3, r2
 8002504:	71bb      	strb	r3, [r7, #6]
    //  y offset refers to the line offset
    //note:     String will be capped, if it is longer than LCD_LINE_SIZE slices (i.e. 1 line)
    //note2:    String will be capped, if it exceeds size of lcdBuffer.
    //note3:    If scrolling is enabled, the LCD line will wrap around when xoffset is large enough.
    //          Otherwise, it will be capped.
    if (scrollena > 0){
 8002506:	f897 3020 	ldrb.w	r3, [r7, #32]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d019      	beq.n	8002542 <write_line_buff+0x52>
        for(uint8_t idx = 0; idx<LCD_LINE_SIZE; idx++){
 800250e:	2300      	movs	r3, #0
 8002510:	75fb      	strb	r3, [r7, #23]
 8002512:	e011      	b.n	8002538 <write_line_buff+0x48>
            lcdbuff[idx+yoffset*LCD_LINE_SIZE] = linebuff[(idx + xoffset) & LCD_LINE_BUFF_SIZE-1];
 8002514:	7dfa      	ldrb	r2, [r7, #23]
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	4413      	add	r3, r2
 800251a:	b2db      	uxtb	r3, r3
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	441a      	add	r2, r3
 8002520:	7df9      	ldrb	r1, [r7, #23]
 8002522:	79bb      	ldrb	r3, [r7, #6]
 8002524:	01db      	lsls	r3, r3, #7
 8002526:	440b      	add	r3, r1
 8002528:	4619      	mov	r1, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	440b      	add	r3, r1
 800252e:	7812      	ldrb	r2, [r2, #0]
 8002530:	701a      	strb	r2, [r3, #0]
        for(uint8_t idx = 0; idx<LCD_LINE_SIZE; idx++){
 8002532:	7dfb      	ldrb	r3, [r7, #23]
 8002534:	3301      	adds	r3, #1
 8002536:	75fb      	strb	r3, [r7, #23]
 8002538:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800253c:	2b00      	cmp	r3, #0
 800253e:	dae9      	bge.n	8002514 <write_line_buff+0x24>
        }
    }else{
        memcpy(lcdbuff + xoffset+yoffset*LCD_LINE_SIZE, linebuff, sizeof(uint8_t) * LCD_LINE_SIZE-xoffset);
    }

}
 8002540:	e00c      	b.n	800255c <write_line_buff+0x6c>
        memcpy(lcdbuff + xoffset+yoffset*LCD_LINE_SIZE, linebuff, sizeof(uint8_t) * LCD_LINE_SIZE-xoffset);
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	79ba      	ldrb	r2, [r7, #6]
 8002546:	01d2      	lsls	r2, r2, #7
 8002548:	4413      	add	r3, r2
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	18d0      	adds	r0, r2, r3
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002554:	461a      	mov	r2, r3
 8002556:	68f9      	ldr	r1, [r7, #12]
 8002558:	f000 fc2e 	bl	8002db8 <memcpy>
}
 800255c:	bf00      	nop
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <lcd_write_string>:

void lcd_write_string(uint8_t * str, uint8_t * lcdBuff, uint8_t xoffset, uint8_t yoffset){
 8002564:	b590      	push	{r4, r7, lr}
 8002566:	b0c7      	sub	sp, #284	; 0x11c
 8002568:	af02      	add	r7, sp, #8
 800256a:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800256e:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8002572:	6020      	str	r0, [r4, #0]
 8002574:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8002578:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 800257c:	6001      	str	r1, [r0, #0]
 800257e:	4619      	mov	r1, r3
 8002580:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002584:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002588:	701a      	strb	r2, [r3, #0]
 800258a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800258e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002592:	460a      	mov	r2, r1
 8002594:	701a      	strb	r2, [r3, #0]
    uint8_t lineBuff[256];
    memset(lineBuff,0x00,256);
 8002596:	f107 0310 	add.w	r3, r7, #16
 800259a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800259e:	2100      	movs	r1, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fc17 	bl	8002dd4 <memset>
    //render a string and add to the line buffer (256 slices long)
    generate_line_buff(str, lineBuff, 255);
 80025a6:	f107 0110 	add.w	r1, r7, #16
 80025aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80025b2:	22ff      	movs	r2, #255	; 0xff
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	f7ff ff15 	bl	80023e4 <generate_line_buff>
    //add line buffer to LCD buffer at a specific x,y position
    //  (horizontal scrolling is always disabled!)
    write_line_buff(lineBuff, lcdBuff, xoffset, yoffset, 0);
 80025ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025be:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80025c2:	781c      	ldrb	r4, [r3, #0]
 80025c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025c8:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80025cc:	781a      	ldrb	r2, [r3, #0]
 80025ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025d2:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 80025d6:	f107 0010 	add.w	r0, r7, #16
 80025da:	2300      	movs	r3, #0
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	4623      	mov	r3, r4
 80025e0:	6809      	ldr	r1, [r1, #0]
 80025e2:	f7ff ff85 	bl	80024f0 <write_line_buff>
}
 80025e6:	bf00      	nop
 80025e8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd90      	pop	{r4, r7, pc}

080025f0 <NVIC_EnableIRQ>:
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	f003 031f 	and.w	r3, r3, #31
 8002600:	2201      	movs	r2, #1
 8002602:	fa02 f103 	lsl.w	r1, r2, r3
 8002606:	4a06      	ldr	r2, [pc, #24]	; (8002620 <NVIC_EnableIRQ+0x30>)
 8002608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000e100 	.word	0xe000e100

08002624 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	6039      	str	r1, [r7, #0]
 800262e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8002630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002634:	2b00      	cmp	r3, #0
 8002636:	da0b      	bge.n	8002650 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	b2da      	uxtb	r2, r3
 800263c:	490c      	ldr	r1, [pc, #48]	; (8002670 <NVIC_SetPriority+0x4c>)
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	3b04      	subs	r3, #4
 8002646:	0112      	lsls	r2, r2, #4
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	440b      	add	r3, r1
 800264c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800264e:	e009      	b.n	8002664 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	4907      	ldr	r1, [pc, #28]	; (8002674 <NVIC_SetPriority+0x50>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	440b      	add	r3, r1
 8002660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000ed00 	.word	0xe000ed00
 8002674:	e000e100 	.word	0xe000e100

08002678 <initTimer>:
uint8_t fbuffer[512];
uint16_t volatile adc1;
uint16_t volatile adc2;
uint8_t volatile ADCupdate=0;

void initTimer(void){
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
 800267e:	2101      	movs	r1, #1
 8002680:	2001      	movs	r0, #1
 8002682:	f7ff f8b3 	bl	80017ec <RCC_APB1PeriphClockCmd>
	NVIC_InitTypeDef NVIC_InitStructure;
	// NVIC for timer
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8002686:	231c      	movs	r3, #28
 8002688:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800268a:	2301      	movs	r3, #1
 800268c:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStructure);
 8002696:	1d3b      	adds	r3, r7, #4
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe fde7 	bl	800126c <NVIC_Init>
	TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE);
 800269e:	2201      	movs	r2, #1
 80026a0:	2101      	movs	r1, #1
 80026a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80026a6:	f7ff f913 	bl	80018d0 <TIM_ITConfig>
	TIM_Cmd(TIM2,ENABLE);
 80026aa:	2101      	movs	r1, #1
 80026ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80026b0:	f7ff f8ee 	bl	8001890 <TIM_Cmd>
	//Settings timer
	RCC->APB1ENR |= RCC_APB1Periph_TIM2; // Enable clock line to timer 2
 80026b4:	4b16      	ldr	r3, [pc, #88]	; (8002710 <initTimer+0x98>)
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	4a15      	ldr	r2, [pc, #84]	; (8002710 <initTimer+0x98>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	61d3      	str	r3, [r2, #28]
	TIM2->CR1=0xB01;
 80026c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026c4:	f640 3201 	movw	r2, #2817	; 0xb01
 80026c8:	801a      	strh	r2, [r3, #0]
	TIM2->PSC=6399; //change pre-scaler frequency to 10kHz
 80026ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026ce:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80026d2:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->ARR=999; //count up to 100
 80026d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026dc:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->DIER |= 0x0001; // Enable timer 2 interrupts
 80026de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	60d3      	str	r3, [r2, #12]
    //NVIC settings
	NVIC_SetPriority(TIM2_IRQn, 1); // Set interrupt priority interrupts
 80026ee:	2101      	movs	r1, #1
 80026f0:	201c      	movs	r0, #28
 80026f2:	f7ff ff97 	bl	8002624 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn); // Enable interrupt
 80026f6:	201c      	movs	r0, #28
 80026f8:	f7ff ff7a 	bl	80025f0 <NVIC_EnableIRQ>
	TIM_Cmd(TIM2,DISABLE);
 80026fc:	2100      	movs	r1, #0
 80026fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002702:	f7ff f8c5 	bl	8001890 <TIM_Cmd>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000

08002714 <ADC_setup_pA>:

void ADC_setup_pA(void){
 8002714:	b580      	push	{r7, lr}
 8002716:	b08a      	sub	sp, #40	; 0x28
 8002718:	af00      	add	r7, sp, #0
	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div8); //adc clk
 800271a:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800271e:	f7ff f81d 	bl	800175c <RCC_ADCCLKConfig>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE); //enable adc
 8002722:	2101      	movs	r1, #1
 8002724:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002728:	f7ff f840 	bl	80017ac <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE); //gpio clock
 800272c:	2101      	movs	r1, #1
 800272e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002732:	f7ff f83b 	bl	80017ac <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructAll; // Define typedef struct for setting pins

	GPIO_StructInit(&GPIO_InitStructAll); // Initialize GPIO struct
 8002736:	f107 0320 	add.w	r3, r7, #32
 800273a:	4618      	mov	r0, r3
 800273c:	f7fe fd7c 	bl	8001238 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_AN; // Set as input
 8002740:	2303      	movs	r3, #3
 8002742:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN; // Set as pull down
 8002746:	2302      	movs	r3, #2
 8002748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_0; // Set so the configuration is on pin 4
 800274c:	2301      	movs	r3, #1
 800274e:	623b      	str	r3, [r7, #32]
	GPIO_Init(GPIOA, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 8002750:	f107 0320 	add.w	r3, r7, #32
 8002754:	4619      	mov	r1, r3
 8002756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800275a:	f7fe fcd7 	bl	800110c <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll); // Initialize GPIO struct
 800275e:	f107 0320 	add.w	r3, r7, #32
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe fd68 	bl	8001238 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_AN; // Set as input
 8002768:	2303      	movs	r3, #3
 800276a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN; // Set as pull down
 800276e:	2302      	movs	r3, #2
 8002770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_1; // Set so the configuration is on pin 4
 8002774:	2302      	movs	r3, #2
 8002776:	623b      	str	r3, [r7, #32]
	GPIO_Init(GPIOA, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 8002778:	f107 0320 	add.w	r3, r7, #32
 800277c:	4619      	mov	r1, r3
 800277e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002782:	f7fe fcc3 	bl	800110c <GPIO_Init>

	ADC_InitTypeDef ADC_InitStructAll; //struct for adc config

	ADC_StructInit(&ADC_InitStructAll); //settings for the adc
 8002786:	463b      	mov	r3, r7
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe fa9f 	bl	8000ccc <ADC_StructInit>
	ADC_InitStructAll.ADC_ContinuousConvMode = DISABLE;
 800278e:	2300      	movs	r3, #0
 8002790:	603b      	str	r3, [r7, #0]
	ADC_InitStructAll.ADC_Resolution = ADC_Resolution_12b;
 8002792:	2300      	movs	r3, #0
 8002794:	607b      	str	r3, [r7, #4]
	ADC_InitStructAll.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
	ADC_InitStructAll.ADC_DataAlign = ADC_DataAlign_Right;
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
	ADC_InitStructAll.ADC_NbrOfRegChannel = 1;
 800279e:	2301      	movs	r3, #1
 80027a0:	773b      	strb	r3, [r7, #28]
	ADC_Init(ADC1,&ADC_InitStructAll); // init the adc settings
 80027a2:	463b      	mov	r3, r7
 80027a4:	4619      	mov	r1, r3
 80027a6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80027aa:	f7fe fa4d 	bl	8000c48 <ADC_Init>
	ADC_Cmd(ADC1,ENABLE); //enable adc
 80027ae:	2101      	movs	r1, #1
 80027b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80027b4:	f7fe faac 	bl	8000d10 <ADC_Cmd>
	// set internal reference voltage source and wait
}
 80027b8:	bf00      	nop
 80027ba:	3728      	adds	r7, #40	; 0x28
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <ADC_Calibrate>:

void ADC_Calibrate(){
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
	ADC_VoltageRegulatorCmd(ADC1,ENABLE);
 80027c6:	2101      	movs	r1, #1
 80027c8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80027cc:	f7fe fb11 	bl	8000df2 <ADC_VoltageRegulatorCmd>
	//Wait for at least 10uS before continuing...
	for(uint32_t i = 0; i<10000;i++);
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	e002      	b.n	80027dc <ADC_Calibrate+0x1c>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	3301      	adds	r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f242 720f 	movw	r2, #9999	; 0x270f
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d9f7      	bls.n	80027d6 <ADC_Calibrate+0x16>

	ADC_Cmd(ADC1,DISABLE);
 80027e6:	2100      	movs	r1, #0
 80027e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80027ec:	f7fe fa90 	bl	8000d10 <ADC_Cmd>
	while(ADC_GetDisableCmdStatus(ADC1)){} // wait for disable of ADC
 80027f0:	bf00      	nop
 80027f2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80027f6:	f7fe fae4 	bl	8000dc2 <ADC_GetDisableCmdStatus>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f8      	bne.n	80027f2 <ADC_Calibrate+0x32>

	ADC_SelectCalibrationMode(ADC1,ADC_CalibrationMode_Single); //select calibration mode
 8002800:	2100      	movs	r1, #0
 8002802:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002806:	f7fe faaf 	bl	8000d68 <ADC_SelectCalibrationMode>
	ADC_StartCalibration(ADC1); //calibrate adc
 800280a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800280e:	f7fe fa9b 	bl	8000d48 <ADC_StartCalibration>
	while(ADC_GetCalibrationStatus(ADC1)){} //wait for calibration
 8002812:	bf00      	nop
 8002814:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002818:	f7fe fabd 	bl	8000d96 <ADC_GetCalibrationStatus>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f8      	bne.n	8002814 <ADC_Calibrate+0x54>
	for(uint32_t i = 0; i<100;i++);//wait more
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	e002      	b.n	800282e <ADC_Calibrate+0x6e>
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	3301      	adds	r3, #1
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b63      	cmp	r3, #99	; 0x63
 8002832:	d9f9      	bls.n	8002828 <ADC_Calibrate+0x68>

	ADC_VrefintCmd(ADC1,ENABLE); // setup ref voltage to channel 18
 8002834:	2101      	movs	r1, #1
 8002836:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800283a:	f7fe fafd 	bl	8000e38 <ADC_VrefintCmd>
	for(uint32_t i = 0; i<10000;i++); // wait for some time
 800283e:	2300      	movs	r3, #0
 8002840:	607b      	str	r3, [r7, #4]
 8002842:	e002      	b.n	800284a <ADC_Calibrate+0x8a>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3301      	adds	r3, #1
 8002848:	607b      	str	r3, [r7, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002850:	4293      	cmp	r3, r2
 8002852:	d9f7      	bls.n	8002844 <ADC_Calibrate+0x84>

	ADC_Cmd(ADC1,ENABLE);// turn on ADC
 8002854:	2101      	movs	r1, #1
 8002856:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800285a:	f7fe fa59 	bl	8000d10 <ADC_Cmd>
	while((!ADC_GetFlagStatus(ADC1,ADC_FLAG_RDY))){	} //wait for adc to turn on
 800285e:	bf00      	nop
 8002860:	2101      	movs	r1, #1
 8002862:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002866:	f7fe fc38 	bl	80010da <ADC_GetFlagStatus>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f7      	beq.n	8002860 <ADC_Calibrate+0xa0>

	ADC_RegularChannelConfig(ADC1, ADC_Channel_18, 1, ADC_SampleTime_19Cycles5); //wait for 2.2us
 8002870:	2304      	movs	r3, #4
 8002872:	2201      	movs	r2, #1
 8002874:	2112      	movs	r1, #18
 8002876:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800287a:	f7fe fb19 	bl	8000eb0 <ADC_RegularChannelConfig>
	ADC_StartConversion(ADC1); // Start ADC read
 800287e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002882:	f7fe fc0d 	bl	80010a0 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 8002886:	bf00      	nop
 8002888:	2104      	movs	r1, #4
 800288a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800288e:	f7fe fc24 	bl	80010da <ADC_GetFlagStatus>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f7      	beq.n	8002888 <ADC_Calibrate+0xc8>

	uint16_t VREFINT_DATA = ADC_GetConversionValue(ADC1); // save measured data
 8002898:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800289c:	f7fe fc10 	bl	80010c0 <ADC_GetConversionValue>
 80028a0:	4603      	mov	r3, r0
 80028a2:	807b      	strh	r3, [r7, #2]
	V_ABS = ((3.3 * (VREFINT_CAL / VREFINT_DATA)) / 4095); // calculate the voltage/adc step
 80028a4:	4b16      	ldr	r3, [pc, #88]	; (8002900 <ADC_Calibrate+0x140>)
 80028a6:	881a      	ldrh	r2, [r3, #0]
 80028a8:	887b      	ldrh	r3, [r7, #2]
 80028aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fd fe37 	bl	8000524 <__aeabi_i2d>
 80028b6:	a30e      	add	r3, pc, #56	; (adr r3, 80028f0 <ADC_Calibrate+0x130>)
 80028b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028bc:	f7fd fe9c 	bl	80005f8 <__aeabi_dmul>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	a30b      	add	r3, pc, #44	; (adr r3, 80028f8 <ADC_Calibrate+0x138>)
 80028ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ce:	f7fd ffbd 	bl	800084c <__aeabi_ddiv>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4610      	mov	r0, r2
 80028d8:	4619      	mov	r1, r3
 80028da:	f7fe f965 	bl	8000ba8 <__aeabi_d2f>
 80028de:	4603      	mov	r3, r0
 80028e0:	4a08      	ldr	r2, [pc, #32]	; (8002904 <ADC_Calibrate+0x144>)
 80028e2:	6013      	str	r3, [r2, #0]
}
 80028e4:	bf00      	nop
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	f3af 8000 	nop.w
 80028f0:	66666666 	.word	0x66666666
 80028f4:	400a6666 	.word	0x400a6666
 80028f8:	00000000 	.word	0x00000000
 80028fc:	40affe00 	.word	0x40affe00
 8002900:	1ffff7ba 	.word	0x1ffff7ba
 8002904:	2000031c 	.word	0x2000031c

08002908 <ADC_measure_PA>:

uint16_t ADC_measure_PA(uint8_t channel){
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
	uint16_t x;
	ADC_RegularChannelConfig(ADC1, channel, 1, ADC_SampleTime_1Cycles5);
 8002912:	79f9      	ldrb	r1, [r7, #7]
 8002914:	2300      	movs	r3, #0
 8002916:	2201      	movs	r2, #1
 8002918:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800291c:	f7fe fac8 	bl	8000eb0 <ADC_RegularChannelConfig>
	ADC_StartConversion(ADC1); // Start ADC read
 8002920:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002924:	f7fe fbbc 	bl	80010a0 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 8002928:	bf00      	nop
 800292a:	2104      	movs	r1, #4
 800292c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002930:	f7fe fbd3 	bl	80010da <ADC_GetFlagStatus>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f7      	beq.n	800292a <ADC_measure_PA+0x22>
	x = ADC_GetConversionValue(ADC1) ; // savemeasured data
 800293a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800293e:	f7fe fbbf 	bl	80010c0 <ADC_GetConversionValue>
 8002942:	4603      	mov	r3, r0
 8002944:	81fb      	strh	r3, [r7, #14]
	return x;
 8002946:	89fb      	ldrh	r3, [r7, #14]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) { //timer interrupt handler
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
	if(TIM_GetITStatus(TIM2,TIM_IT_Update) != RESET){ //if interrupt occurs
 8002954:	2101      	movs	r1, #1
 8002956:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800295a:	f7fe ffd9 	bl	8001910 <TIM_GetITStatus>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <TIM2_IRQHandler+0x24>
		TIM_ClearITPendingBit(TIM2,TIM_IT_Update); // Clear interrupt bit
 8002964:	2101      	movs	r1, #1
 8002966:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800296a:	f7fe fffb 	bl	8001964 <TIM_ClearITPendingBit>
		ADCupdate=1;
 800296e:	4b02      	ldr	r3, [pc, #8]	; (8002978 <TIM2_IRQHandler+0x28>)
 8002970:	2201      	movs	r2, #1
 8002972:	701a      	strb	r2, [r3, #0]
	}
}
 8002974:	bf00      	nop
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000534 	.word	0x20000534

0800297c <LCD_data_print>:

void LCD_data_print(void){
 800297c:	b5b0      	push	{r4, r5, r7, lr}
 800297e:	af00      	add	r7, sp, #0
	lcd_write_string((uint8_t*)"ADC data", fbuffer, 20, 0);
 8002980:	2300      	movs	r3, #0
 8002982:	2214      	movs	r2, #20
 8002984:	4921      	ldr	r1, [pc, #132]	; (8002a0c <LCD_data_print+0x90>)
 8002986:	4822      	ldr	r0, [pc, #136]	; (8002a10 <LCD_data_print+0x94>)
 8002988:	f7ff fdec 	bl	8002564 <lcd_write_string>
	sprintf(str,"Pot1: %0.3f",(double)adc1* (double)V_ABS);
 800298c:	4b21      	ldr	r3, [pc, #132]	; (8002a14 <LCD_data_print+0x98>)
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	b29b      	uxth	r3, r3
 8002992:	4618      	mov	r0, r3
 8002994:	f7fd fdb6 	bl	8000504 <__aeabi_ui2d>
 8002998:	4604      	mov	r4, r0
 800299a:	460d      	mov	r5, r1
 800299c:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <LCD_data_print+0x9c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fd fdd1 	bl	8000548 <__aeabi_f2d>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4620      	mov	r0, r4
 80029ac:	4629      	mov	r1, r5
 80029ae:	f7fd fe23 	bl	80005f8 <__aeabi_dmul>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4919      	ldr	r1, [pc, #100]	; (8002a1c <LCD_data_print+0xa0>)
 80029b8:	4819      	ldr	r0, [pc, #100]	; (8002a20 <LCD_data_print+0xa4>)
 80029ba:	f000 ff4b 	bl	8003854 <siprintf>
	lcd_write_string(str, fbuffer, 20, 2);
 80029be:	2302      	movs	r3, #2
 80029c0:	2214      	movs	r2, #20
 80029c2:	4912      	ldr	r1, [pc, #72]	; (8002a0c <LCD_data_print+0x90>)
 80029c4:	4816      	ldr	r0, [pc, #88]	; (8002a20 <LCD_data_print+0xa4>)
 80029c6:	f7ff fdcd 	bl	8002564 <lcd_write_string>
	sprintf(str,"Pot2: %0.3f",(float)adc2* (float)V_ABS);
 80029ca:	4b16      	ldr	r3, [pc, #88]	; (8002a24 <LCD_data_print+0xa8>)
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	ee07 3a90 	vmov	s15, r3
 80029d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029d8:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <LCD_data_print+0x9c>)
 80029da:	edd3 7a00 	vldr	s15, [r3]
 80029de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029e2:	ee17 0a90 	vmov	r0, s15
 80029e6:	f7fd fdaf 	bl	8000548 <__aeabi_f2d>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	490e      	ldr	r1, [pc, #56]	; (8002a28 <LCD_data_print+0xac>)
 80029f0:	480b      	ldr	r0, [pc, #44]	; (8002a20 <LCD_data_print+0xa4>)
 80029f2:	f000 ff2f 	bl	8003854 <siprintf>
	lcd_write_string(str, fbuffer, 20, 3);
 80029f6:	2303      	movs	r3, #3
 80029f8:	2214      	movs	r2, #20
 80029fa:	4904      	ldr	r1, [pc, #16]	; (8002a0c <LCD_data_print+0x90>)
 80029fc:	4808      	ldr	r0, [pc, #32]	; (8002a20 <LCD_data_print+0xa4>)
 80029fe:	f7ff fdb1 	bl	8002564 <lcd_write_string>
	lcd_push_buffer(fbuffer);
 8002a02:	4802      	ldr	r0, [pc, #8]	; (8002a0c <LCD_data_print+0x90>)
 8002a04:	f7ff fa5e 	bl	8001ec4 <lcd_push_buffer>
}
 8002a08:	bf00      	nop
 8002a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a0c:	20000330 	.word	0x20000330
 8002a10:	08005d20 	.word	0x08005d20
 8002a14:	20000530 	.word	0x20000530
 8002a18:	2000031c 	.word	0x2000031c
 8002a1c:	08005d2c 	.word	0x08005d2c
 8002a20:	20000320 	.word	0x20000320
 8002a24:	20000532 	.word	0x20000532
 8002a28:	08005d38 	.word	0x08005d38

08002a2c <main>:
//	lcd_write_string(str, fbuffer, 20, 3);
//	lcd_push_buffer(fbuffer);
//}

int main(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
	uart_init(9600);
 8002a30:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8002a34:	f7ff f8fa 	bl	8001c2c <uart_init>
	ADC_setup_pA();
 8002a38:	f7ff fe6c 	bl	8002714 <ADC_setup_pA>
	ADC_Calibrate();
 8002a3c:	f7ff fec0 	bl	80027c0 <ADC_Calibrate>
	initTimer();
 8002a40:	f7ff fe1a 	bl	8002678 <initTimer>
	init_spi_lcd();
 8002a44:	f7ff fb72 	bl	800212c <init_spi_lcd>
	memset(fbuffer,0x00,512); // Sets each element of the buffer to 0xAA
 8002a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4812      	ldr	r0, [pc, #72]	; (8002a98 <main+0x6c>)
 8002a50:	f000 f9c0 	bl	8002dd4 <memset>
	lcd_push_buffer(fbuffer);
 8002a54:	4810      	ldr	r0, [pc, #64]	; (8002a98 <main+0x6c>)
 8002a56:	f7ff fa35 	bl	8001ec4 <lcd_push_buffer>
	TIM_Cmd(TIM2,ENABLE);
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a60:	f7fe ff16 	bl	8001890 <TIM_Cmd>
	while(1){
		if(ADCupdate == 1){
 8002a64:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <main+0x70>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d1fa      	bne.n	8002a64 <main+0x38>
			adc1 = ADC_measure_PA(1);
 8002a6e:	2001      	movs	r0, #1
 8002a70:	f7ff ff4a 	bl	8002908 <ADC_measure_PA>
 8002a74:	4603      	mov	r3, r0
 8002a76:	461a      	mov	r2, r3
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <main+0x74>)
 8002a7a:	801a      	strh	r2, [r3, #0]
			adc2 = ADC_measure_PA(2);
 8002a7c:	2002      	movs	r0, #2
 8002a7e:	f7ff ff43 	bl	8002908 <ADC_measure_PA>
 8002a82:	4603      	mov	r3, r0
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <main+0x78>)
 8002a88:	801a      	strh	r2, [r3, #0]
			LCD_data_print();
 8002a8a:	f7ff ff77 	bl	800297c <LCD_data_print>
			ADCupdate=0;
 8002a8e:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <main+0x70>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
		if(ADCupdate == 1){
 8002a94:	e7e6      	b.n	8002a64 <main+0x38>
 8002a96:	bf00      	nop
 8002a98:	20000330 	.word	0x20000330
 8002a9c:	20000534 	.word	0x20000534
 8002aa0:	20000530 	.word	0x20000530
 8002aa4:	20000532 	.word	0x20000532

08002aa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
	return 1;
 8002aac:	2301      	movs	r3, #1
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <_kill>:

int _kill(int pid, int sig)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ac2:	f000 f94f 	bl	8002d64 <__errno>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2216      	movs	r2, #22
 8002aca:	601a      	str	r2, [r3, #0]
	return -1;
 8002acc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <_exit>:

void _exit (int status)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ae0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff ffe7 	bl	8002ab8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002aea:	e7fe      	b.n	8002aea <_exit+0x12>

08002aec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	e00a      	b.n	8002b14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002afe:	f3af 8000 	nop.w
 8002b02:	4601      	mov	r1, r0
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	60ba      	str	r2, [r7, #8]
 8002b0a:	b2ca      	uxtb	r2, r1
 8002b0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	3301      	adds	r3, #1
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	dbf0      	blt.n	8002afe <_read+0x12>
	}

return len;
 8002b1c:	687b      	ldr	r3, [r7, #4]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
	return -1;
 8002b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b4e:	605a      	str	r2, [r3, #4]
	return 0;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <_isatty>:

int _isatty(int file)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
	return 1;
 8002b66:	2301      	movs	r3, #1
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
	return 0;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002b98:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <_sbrk+0x50>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d102      	bne.n	8002ba6 <_sbrk+0x16>
		heap_end = &end;
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <_sbrk+0x50>)
 8002ba2:	4a10      	ldr	r2, [pc, #64]	; (8002be4 <_sbrk+0x54>)
 8002ba4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <_sbrk+0x50>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <_sbrk+0x50>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	466a      	mov	r2, sp
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d907      	bls.n	8002bca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002bba:	f000 f8d3 	bl	8002d64 <__errno>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	220c      	movs	r2, #12
 8002bc2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bc8:	e006      	b.n	8002bd8 <_sbrk+0x48>
	}

	heap_end += incr;
 8002bca:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <_sbrk+0x50>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	4a03      	ldr	r2, [pc, #12]	; (8002be0 <_sbrk+0x50>)
 8002bd4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20000538 	.word	0x20000538
 8002be4:	20000550 	.word	0x20000550

08002be8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bec:	4b1f      	ldr	r3, [pc, #124]	; (8002c6c <SystemInit+0x84>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf2:	4a1e      	ldr	r2, [pc, #120]	; (8002c6c <SystemInit+0x84>)
 8002bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002bfc:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <SystemInit+0x88>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a1b      	ldr	r2, [pc, #108]	; (8002c70 <SystemInit+0x88>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8002c08:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <SystemInit+0x88>)
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	4918      	ldr	r1, [pc, #96]	; (8002c70 <SystemInit+0x88>)
 8002c0e:	4b19      	ldr	r3, [pc, #100]	; (8002c74 <SystemInit+0x8c>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002c14:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <SystemInit+0x88>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a15      	ldr	r2, [pc, #84]	; (8002c70 <SystemInit+0x88>)
 8002c1a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c22:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002c24:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <SystemInit+0x88>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a11      	ldr	r2, [pc, #68]	; (8002c70 <SystemInit+0x88>)
 8002c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002c30:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <SystemInit+0x88>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4a0e      	ldr	r2, [pc, #56]	; (8002c70 <SystemInit+0x88>)
 8002c36:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002c3a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <SystemInit+0x88>)
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	4a0b      	ldr	r2, [pc, #44]	; (8002c70 <SystemInit+0x88>)
 8002c42:	f023 030f 	bic.w	r3, r3, #15
 8002c46:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8002c48:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <SystemInit+0x88>)
 8002c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c4c:	4908      	ldr	r1, [pc, #32]	; (8002c70 <SystemInit+0x88>)
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <SystemInit+0x90>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <SystemInit+0x88>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002c5a:	f000 f80f 	bl	8002c7c <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002c5e:	4b03      	ldr	r3, [pc, #12]	; (8002c6c <SystemInit+0x84>)
 8002c60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c64:	609a      	str	r2, [r3, #8]
#endif  
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	e000ed00 	.word	0xe000ed00
 8002c70:	40021000 	.word	0x40021000
 8002c74:	f87fc00c 	.word	0xf87fc00c
 8002c78:	ff00fccc 	.word	0xff00fccc

08002c7c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8002c80:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <SetSysClock+0x8c>)
 8002c82:	2212      	movs	r2, #18
 8002c84:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002c86:	4b21      	ldr	r3, [pc, #132]	; (8002d0c <SetSysClock+0x90>)
 8002c88:	4a20      	ldr	r2, [pc, #128]	; (8002d0c <SetSysClock+0x90>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002c8e:	4b1f      	ldr	r3, [pc, #124]	; (8002d0c <SetSysClock+0x90>)
 8002c90:	4a1e      	ldr	r2, [pc, #120]	; (8002d0c <SetSysClock+0x90>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002c96:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <SetSysClock+0x90>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <SetSysClock+0x90>)
 8002c9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ca0:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002ca2:	4b1a      	ldr	r3, [pc, #104]	; (8002d0c <SetSysClock+0x90>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4a19      	ldr	r2, [pc, #100]	; (8002d0c <SetSysClock+0x90>)
 8002ca8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002cac:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8002cae:	4b17      	ldr	r3, [pc, #92]	; (8002d0c <SetSysClock+0x90>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	4a16      	ldr	r2, [pc, #88]	; (8002d0c <SetSysClock+0x90>)
 8002cb4:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8002cb8:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8002cba:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <SetSysClock+0x90>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a13      	ldr	r2, [pc, #76]	; (8002d0c <SetSysClock+0x90>)
 8002cc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cc4:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002cc6:	bf00      	nop
 8002cc8:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <SetSysClock+0x90>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f9      	beq.n	8002cc8 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002cd4:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <SetSysClock+0x90>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	4a0c      	ldr	r2, [pc, #48]	; (8002d0c <SetSysClock+0x90>)
 8002cda:	f023 0303 	bic.w	r3, r3, #3
 8002cde:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8002ce0:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <SetSysClock+0x90>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4a09      	ldr	r2, [pc, #36]	; (8002d0c <SetSysClock+0x90>)
 8002ce6:	f043 0302 	orr.w	r3, r3, #2
 8002cea:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002cec:	bf00      	nop
 8002cee:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <SetSysClock+0x90>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d1f9      	bne.n	8002cee <SetSysClock+0x72>
  {
  }
}
 8002cfa:	bf00      	nop
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40022000 	.word	0x40022000
 8002d0c:	40021000 	.word	0x40021000

08002d10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d10:	480d      	ldr	r0, [pc, #52]	; (8002d48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d12:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d14:	480d      	ldr	r0, [pc, #52]	; (8002d4c <LoopForever+0x6>)
  ldr r1, =_edata
 8002d16:	490e      	ldr	r1, [pc, #56]	; (8002d50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d18:	4a0e      	ldr	r2, [pc, #56]	; (8002d54 <LoopForever+0xe>)
  movs r3, #0
 8002d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d1c:	e002      	b.n	8002d24 <LoopCopyDataInit>

08002d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d22:	3304      	adds	r3, #4

08002d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d28:	d3f9      	bcc.n	8002d1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d2a:	4a0b      	ldr	r2, [pc, #44]	; (8002d58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d2c:	4c0b      	ldr	r4, [pc, #44]	; (8002d5c <LoopForever+0x16>)
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d30:	e001      	b.n	8002d36 <LoopFillZerobss>

08002d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d34:	3204      	adds	r2, #4

08002d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d38:	d3fb      	bcc.n	8002d32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d3a:	f7ff ff55 	bl	8002be8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002d3e:	f000 f817 	bl	8002d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d42:	f7ff fe73 	bl	8002a2c <main>

08002d46 <LoopForever>:

LoopForever:
    b LoopForever
 8002d46:	e7fe      	b.n	8002d46 <LoopForever>
  ldr   r0, =_estack
 8002d48:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d50:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002d54:	08006304 	.word	0x08006304
  ldr r2, =_sbss
 8002d58:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002d5c:	2000054c 	.word	0x2000054c

08002d60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d60:	e7fe      	b.n	8002d60 <ADC1_2_IRQHandler>
	...

08002d64 <__errno>:
 8002d64:	4b01      	ldr	r3, [pc, #4]	; (8002d6c <__errno+0x8>)
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	2000002c 	.word	0x2000002c

08002d70 <__libc_init_array>:
 8002d70:	b570      	push	{r4, r5, r6, lr}
 8002d72:	4d0d      	ldr	r5, [pc, #52]	; (8002da8 <__libc_init_array+0x38>)
 8002d74:	4c0d      	ldr	r4, [pc, #52]	; (8002dac <__libc_init_array+0x3c>)
 8002d76:	1b64      	subs	r4, r4, r5
 8002d78:	10a4      	asrs	r4, r4, #2
 8002d7a:	2600      	movs	r6, #0
 8002d7c:	42a6      	cmp	r6, r4
 8002d7e:	d109      	bne.n	8002d94 <__libc_init_array+0x24>
 8002d80:	4d0b      	ldr	r5, [pc, #44]	; (8002db0 <__libc_init_array+0x40>)
 8002d82:	4c0c      	ldr	r4, [pc, #48]	; (8002db4 <__libc_init_array+0x44>)
 8002d84:	f002 ffc0 	bl	8005d08 <_init>
 8002d88:	1b64      	subs	r4, r4, r5
 8002d8a:	10a4      	asrs	r4, r4, #2
 8002d8c:	2600      	movs	r6, #0
 8002d8e:	42a6      	cmp	r6, r4
 8002d90:	d105      	bne.n	8002d9e <__libc_init_array+0x2e>
 8002d92:	bd70      	pop	{r4, r5, r6, pc}
 8002d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d98:	4798      	blx	r3
 8002d9a:	3601      	adds	r6, #1
 8002d9c:	e7ee      	b.n	8002d7c <__libc_init_array+0xc>
 8002d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002da2:	4798      	blx	r3
 8002da4:	3601      	adds	r6, #1
 8002da6:	e7f2      	b.n	8002d8e <__libc_init_array+0x1e>
 8002da8:	080062fc 	.word	0x080062fc
 8002dac:	080062fc 	.word	0x080062fc
 8002db0:	080062fc 	.word	0x080062fc
 8002db4:	08006300 	.word	0x08006300

08002db8 <memcpy>:
 8002db8:	440a      	add	r2, r1
 8002dba:	4291      	cmp	r1, r2
 8002dbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002dc0:	d100      	bne.n	8002dc4 <memcpy+0xc>
 8002dc2:	4770      	bx	lr
 8002dc4:	b510      	push	{r4, lr}
 8002dc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002dce:	4291      	cmp	r1, r2
 8002dd0:	d1f9      	bne.n	8002dc6 <memcpy+0xe>
 8002dd2:	bd10      	pop	{r4, pc}

08002dd4 <memset>:
 8002dd4:	4402      	add	r2, r0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d100      	bne.n	8002dde <memset+0xa>
 8002ddc:	4770      	bx	lr
 8002dde:	f803 1b01 	strb.w	r1, [r3], #1
 8002de2:	e7f9      	b.n	8002dd8 <memset+0x4>

08002de4 <__cvt>:
 8002de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002de8:	ec55 4b10 	vmov	r4, r5, d0
 8002dec:	2d00      	cmp	r5, #0
 8002dee:	460e      	mov	r6, r1
 8002df0:	4619      	mov	r1, r3
 8002df2:	462b      	mov	r3, r5
 8002df4:	bfbb      	ittet	lt
 8002df6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002dfa:	461d      	movlt	r5, r3
 8002dfc:	2300      	movge	r3, #0
 8002dfe:	232d      	movlt	r3, #45	; 0x2d
 8002e00:	700b      	strb	r3, [r1, #0]
 8002e02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002e08:	4691      	mov	r9, r2
 8002e0a:	f023 0820 	bic.w	r8, r3, #32
 8002e0e:	bfbc      	itt	lt
 8002e10:	4622      	movlt	r2, r4
 8002e12:	4614      	movlt	r4, r2
 8002e14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002e18:	d005      	beq.n	8002e26 <__cvt+0x42>
 8002e1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002e1e:	d100      	bne.n	8002e22 <__cvt+0x3e>
 8002e20:	3601      	adds	r6, #1
 8002e22:	2102      	movs	r1, #2
 8002e24:	e000      	b.n	8002e28 <__cvt+0x44>
 8002e26:	2103      	movs	r1, #3
 8002e28:	ab03      	add	r3, sp, #12
 8002e2a:	9301      	str	r3, [sp, #4]
 8002e2c:	ab02      	add	r3, sp, #8
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	ec45 4b10 	vmov	d0, r4, r5
 8002e34:	4653      	mov	r3, sl
 8002e36:	4632      	mov	r2, r6
 8002e38:	f000 fdba 	bl	80039b0 <_dtoa_r>
 8002e3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002e40:	4607      	mov	r7, r0
 8002e42:	d102      	bne.n	8002e4a <__cvt+0x66>
 8002e44:	f019 0f01 	tst.w	r9, #1
 8002e48:	d022      	beq.n	8002e90 <__cvt+0xac>
 8002e4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002e4e:	eb07 0906 	add.w	r9, r7, r6
 8002e52:	d110      	bne.n	8002e76 <__cvt+0x92>
 8002e54:	783b      	ldrb	r3, [r7, #0]
 8002e56:	2b30      	cmp	r3, #48	; 0x30
 8002e58:	d10a      	bne.n	8002e70 <__cvt+0x8c>
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	4620      	mov	r0, r4
 8002e60:	4629      	mov	r1, r5
 8002e62:	f7fd fe31 	bl	8000ac8 <__aeabi_dcmpeq>
 8002e66:	b918      	cbnz	r0, 8002e70 <__cvt+0x8c>
 8002e68:	f1c6 0601 	rsb	r6, r6, #1
 8002e6c:	f8ca 6000 	str.w	r6, [sl]
 8002e70:	f8da 3000 	ldr.w	r3, [sl]
 8002e74:	4499      	add	r9, r3
 8002e76:	2200      	movs	r2, #0
 8002e78:	2300      	movs	r3, #0
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	f7fd fe23 	bl	8000ac8 <__aeabi_dcmpeq>
 8002e82:	b108      	cbz	r0, 8002e88 <__cvt+0xa4>
 8002e84:	f8cd 900c 	str.w	r9, [sp, #12]
 8002e88:	2230      	movs	r2, #48	; 0x30
 8002e8a:	9b03      	ldr	r3, [sp, #12]
 8002e8c:	454b      	cmp	r3, r9
 8002e8e:	d307      	bcc.n	8002ea0 <__cvt+0xbc>
 8002e90:	9b03      	ldr	r3, [sp, #12]
 8002e92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e94:	1bdb      	subs	r3, r3, r7
 8002e96:	4638      	mov	r0, r7
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	b004      	add	sp, #16
 8002e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ea0:	1c59      	adds	r1, r3, #1
 8002ea2:	9103      	str	r1, [sp, #12]
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	e7f0      	b.n	8002e8a <__cvt+0xa6>

08002ea8 <__exponent>:
 8002ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2900      	cmp	r1, #0
 8002eae:	bfb8      	it	lt
 8002eb0:	4249      	neglt	r1, r1
 8002eb2:	f803 2b02 	strb.w	r2, [r3], #2
 8002eb6:	bfb4      	ite	lt
 8002eb8:	222d      	movlt	r2, #45	; 0x2d
 8002eba:	222b      	movge	r2, #43	; 0x2b
 8002ebc:	2909      	cmp	r1, #9
 8002ebe:	7042      	strb	r2, [r0, #1]
 8002ec0:	dd2a      	ble.n	8002f18 <__exponent+0x70>
 8002ec2:	f10d 0407 	add.w	r4, sp, #7
 8002ec6:	46a4      	mov	ip, r4
 8002ec8:	270a      	movs	r7, #10
 8002eca:	46a6      	mov	lr, r4
 8002ecc:	460a      	mov	r2, r1
 8002ece:	fb91 f6f7 	sdiv	r6, r1, r7
 8002ed2:	fb07 1516 	mls	r5, r7, r6, r1
 8002ed6:	3530      	adds	r5, #48	; 0x30
 8002ed8:	2a63      	cmp	r2, #99	; 0x63
 8002eda:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8002ede:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002ee2:	4631      	mov	r1, r6
 8002ee4:	dcf1      	bgt.n	8002eca <__exponent+0x22>
 8002ee6:	3130      	adds	r1, #48	; 0x30
 8002ee8:	f1ae 0502 	sub.w	r5, lr, #2
 8002eec:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002ef0:	1c44      	adds	r4, r0, #1
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	4561      	cmp	r1, ip
 8002ef6:	d30a      	bcc.n	8002f0e <__exponent+0x66>
 8002ef8:	f10d 0209 	add.w	r2, sp, #9
 8002efc:	eba2 020e 	sub.w	r2, r2, lr
 8002f00:	4565      	cmp	r5, ip
 8002f02:	bf88      	it	hi
 8002f04:	2200      	movhi	r2, #0
 8002f06:	4413      	add	r3, r2
 8002f08:	1a18      	subs	r0, r3, r0
 8002f0a:	b003      	add	sp, #12
 8002f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f12:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002f16:	e7ed      	b.n	8002ef4 <__exponent+0x4c>
 8002f18:	2330      	movs	r3, #48	; 0x30
 8002f1a:	3130      	adds	r1, #48	; 0x30
 8002f1c:	7083      	strb	r3, [r0, #2]
 8002f1e:	70c1      	strb	r1, [r0, #3]
 8002f20:	1d03      	adds	r3, r0, #4
 8002f22:	e7f1      	b.n	8002f08 <__exponent+0x60>

08002f24 <_printf_float>:
 8002f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f28:	ed2d 8b02 	vpush	{d8}
 8002f2c:	b08d      	sub	sp, #52	; 0x34
 8002f2e:	460c      	mov	r4, r1
 8002f30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002f34:	4616      	mov	r6, r2
 8002f36:	461f      	mov	r7, r3
 8002f38:	4605      	mov	r5, r0
 8002f3a:	f001 fcdf 	bl	80048fc <_localeconv_r>
 8002f3e:	f8d0 a000 	ldr.w	sl, [r0]
 8002f42:	4650      	mov	r0, sl
 8002f44:	f7fd f944 	bl	80001d0 <strlen>
 8002f48:	2300      	movs	r3, #0
 8002f4a:	930a      	str	r3, [sp, #40]	; 0x28
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	9305      	str	r3, [sp, #20]
 8002f50:	f8d8 3000 	ldr.w	r3, [r8]
 8002f54:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002f58:	3307      	adds	r3, #7
 8002f5a:	f023 0307 	bic.w	r3, r3, #7
 8002f5e:	f103 0208 	add.w	r2, r3, #8
 8002f62:	f8c8 2000 	str.w	r2, [r8]
 8002f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002f6e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002f72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002f76:	9307      	str	r3, [sp, #28]
 8002f78:	f8cd 8018 	str.w	r8, [sp, #24]
 8002f7c:	ee08 0a10 	vmov	s16, r0
 8002f80:	4b9f      	ldr	r3, [pc, #636]	; (8003200 <_printf_float+0x2dc>)
 8002f82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002f86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f8a:	f7fd fdcf 	bl	8000b2c <__aeabi_dcmpun>
 8002f8e:	bb88      	cbnz	r0, 8002ff4 <_printf_float+0xd0>
 8002f90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002f94:	4b9a      	ldr	r3, [pc, #616]	; (8003200 <_printf_float+0x2dc>)
 8002f96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f9a:	f7fd fda9 	bl	8000af0 <__aeabi_dcmple>
 8002f9e:	bb48      	cbnz	r0, 8002ff4 <_printf_float+0xd0>
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	4640      	mov	r0, r8
 8002fa6:	4649      	mov	r1, r9
 8002fa8:	f7fd fd98 	bl	8000adc <__aeabi_dcmplt>
 8002fac:	b110      	cbz	r0, 8002fb4 <_printf_float+0x90>
 8002fae:	232d      	movs	r3, #45	; 0x2d
 8002fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fb4:	4b93      	ldr	r3, [pc, #588]	; (8003204 <_printf_float+0x2e0>)
 8002fb6:	4894      	ldr	r0, [pc, #592]	; (8003208 <_printf_float+0x2e4>)
 8002fb8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002fbc:	bf94      	ite	ls
 8002fbe:	4698      	movls	r8, r3
 8002fc0:	4680      	movhi	r8, r0
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	6123      	str	r3, [r4, #16]
 8002fc6:	9b05      	ldr	r3, [sp, #20]
 8002fc8:	f023 0204 	bic.w	r2, r3, #4
 8002fcc:	6022      	str	r2, [r4, #0]
 8002fce:	f04f 0900 	mov.w	r9, #0
 8002fd2:	9700      	str	r7, [sp, #0]
 8002fd4:	4633      	mov	r3, r6
 8002fd6:	aa0b      	add	r2, sp, #44	; 0x2c
 8002fd8:	4621      	mov	r1, r4
 8002fda:	4628      	mov	r0, r5
 8002fdc:	f000 f9d8 	bl	8003390 <_printf_common>
 8002fe0:	3001      	adds	r0, #1
 8002fe2:	f040 8090 	bne.w	8003106 <_printf_float+0x1e2>
 8002fe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fea:	b00d      	add	sp, #52	; 0x34
 8002fec:	ecbd 8b02 	vpop	{d8}
 8002ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ff4:	4642      	mov	r2, r8
 8002ff6:	464b      	mov	r3, r9
 8002ff8:	4640      	mov	r0, r8
 8002ffa:	4649      	mov	r1, r9
 8002ffc:	f7fd fd96 	bl	8000b2c <__aeabi_dcmpun>
 8003000:	b140      	cbz	r0, 8003014 <_printf_float+0xf0>
 8003002:	464b      	mov	r3, r9
 8003004:	2b00      	cmp	r3, #0
 8003006:	bfbc      	itt	lt
 8003008:	232d      	movlt	r3, #45	; 0x2d
 800300a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800300e:	487f      	ldr	r0, [pc, #508]	; (800320c <_printf_float+0x2e8>)
 8003010:	4b7f      	ldr	r3, [pc, #508]	; (8003210 <_printf_float+0x2ec>)
 8003012:	e7d1      	b.n	8002fb8 <_printf_float+0x94>
 8003014:	6863      	ldr	r3, [r4, #4]
 8003016:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800301a:	9206      	str	r2, [sp, #24]
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	d13f      	bne.n	80030a0 <_printf_float+0x17c>
 8003020:	2306      	movs	r3, #6
 8003022:	6063      	str	r3, [r4, #4]
 8003024:	9b05      	ldr	r3, [sp, #20]
 8003026:	6861      	ldr	r1, [r4, #4]
 8003028:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800302c:	2300      	movs	r3, #0
 800302e:	9303      	str	r3, [sp, #12]
 8003030:	ab0a      	add	r3, sp, #40	; 0x28
 8003032:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003036:	ab09      	add	r3, sp, #36	; 0x24
 8003038:	ec49 8b10 	vmov	d0, r8, r9
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	6022      	str	r2, [r4, #0]
 8003040:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003044:	4628      	mov	r0, r5
 8003046:	f7ff fecd 	bl	8002de4 <__cvt>
 800304a:	9b06      	ldr	r3, [sp, #24]
 800304c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800304e:	2b47      	cmp	r3, #71	; 0x47
 8003050:	4680      	mov	r8, r0
 8003052:	d108      	bne.n	8003066 <_printf_float+0x142>
 8003054:	1cc8      	adds	r0, r1, #3
 8003056:	db02      	blt.n	800305e <_printf_float+0x13a>
 8003058:	6863      	ldr	r3, [r4, #4]
 800305a:	4299      	cmp	r1, r3
 800305c:	dd41      	ble.n	80030e2 <_printf_float+0x1be>
 800305e:	f1ab 0b02 	sub.w	fp, fp, #2
 8003062:	fa5f fb8b 	uxtb.w	fp, fp
 8003066:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800306a:	d820      	bhi.n	80030ae <_printf_float+0x18a>
 800306c:	3901      	subs	r1, #1
 800306e:	465a      	mov	r2, fp
 8003070:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003074:	9109      	str	r1, [sp, #36]	; 0x24
 8003076:	f7ff ff17 	bl	8002ea8 <__exponent>
 800307a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800307c:	1813      	adds	r3, r2, r0
 800307e:	2a01      	cmp	r2, #1
 8003080:	4681      	mov	r9, r0
 8003082:	6123      	str	r3, [r4, #16]
 8003084:	dc02      	bgt.n	800308c <_printf_float+0x168>
 8003086:	6822      	ldr	r2, [r4, #0]
 8003088:	07d2      	lsls	r2, r2, #31
 800308a:	d501      	bpl.n	8003090 <_printf_float+0x16c>
 800308c:	3301      	adds	r3, #1
 800308e:	6123      	str	r3, [r4, #16]
 8003090:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003094:	2b00      	cmp	r3, #0
 8003096:	d09c      	beq.n	8002fd2 <_printf_float+0xae>
 8003098:	232d      	movs	r3, #45	; 0x2d
 800309a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800309e:	e798      	b.n	8002fd2 <_printf_float+0xae>
 80030a0:	9a06      	ldr	r2, [sp, #24]
 80030a2:	2a47      	cmp	r2, #71	; 0x47
 80030a4:	d1be      	bne.n	8003024 <_printf_float+0x100>
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1bc      	bne.n	8003024 <_printf_float+0x100>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e7b9      	b.n	8003022 <_printf_float+0xfe>
 80030ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80030b2:	d118      	bne.n	80030e6 <_printf_float+0x1c2>
 80030b4:	2900      	cmp	r1, #0
 80030b6:	6863      	ldr	r3, [r4, #4]
 80030b8:	dd0b      	ble.n	80030d2 <_printf_float+0x1ae>
 80030ba:	6121      	str	r1, [r4, #16]
 80030bc:	b913      	cbnz	r3, 80030c4 <_printf_float+0x1a0>
 80030be:	6822      	ldr	r2, [r4, #0]
 80030c0:	07d0      	lsls	r0, r2, #31
 80030c2:	d502      	bpl.n	80030ca <_printf_float+0x1a6>
 80030c4:	3301      	adds	r3, #1
 80030c6:	440b      	add	r3, r1
 80030c8:	6123      	str	r3, [r4, #16]
 80030ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80030cc:	f04f 0900 	mov.w	r9, #0
 80030d0:	e7de      	b.n	8003090 <_printf_float+0x16c>
 80030d2:	b913      	cbnz	r3, 80030da <_printf_float+0x1b6>
 80030d4:	6822      	ldr	r2, [r4, #0]
 80030d6:	07d2      	lsls	r2, r2, #31
 80030d8:	d501      	bpl.n	80030de <_printf_float+0x1ba>
 80030da:	3302      	adds	r3, #2
 80030dc:	e7f4      	b.n	80030c8 <_printf_float+0x1a4>
 80030de:	2301      	movs	r3, #1
 80030e0:	e7f2      	b.n	80030c8 <_printf_float+0x1a4>
 80030e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80030e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030e8:	4299      	cmp	r1, r3
 80030ea:	db05      	blt.n	80030f8 <_printf_float+0x1d4>
 80030ec:	6823      	ldr	r3, [r4, #0]
 80030ee:	6121      	str	r1, [r4, #16]
 80030f0:	07d8      	lsls	r0, r3, #31
 80030f2:	d5ea      	bpl.n	80030ca <_printf_float+0x1a6>
 80030f4:	1c4b      	adds	r3, r1, #1
 80030f6:	e7e7      	b.n	80030c8 <_printf_float+0x1a4>
 80030f8:	2900      	cmp	r1, #0
 80030fa:	bfd4      	ite	le
 80030fc:	f1c1 0202 	rsble	r2, r1, #2
 8003100:	2201      	movgt	r2, #1
 8003102:	4413      	add	r3, r2
 8003104:	e7e0      	b.n	80030c8 <_printf_float+0x1a4>
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	055a      	lsls	r2, r3, #21
 800310a:	d407      	bmi.n	800311c <_printf_float+0x1f8>
 800310c:	6923      	ldr	r3, [r4, #16]
 800310e:	4642      	mov	r2, r8
 8003110:	4631      	mov	r1, r6
 8003112:	4628      	mov	r0, r5
 8003114:	47b8      	blx	r7
 8003116:	3001      	adds	r0, #1
 8003118:	d12c      	bne.n	8003174 <_printf_float+0x250>
 800311a:	e764      	b.n	8002fe6 <_printf_float+0xc2>
 800311c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003120:	f240 80e0 	bls.w	80032e4 <_printf_float+0x3c0>
 8003124:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003128:	2200      	movs	r2, #0
 800312a:	2300      	movs	r3, #0
 800312c:	f7fd fccc 	bl	8000ac8 <__aeabi_dcmpeq>
 8003130:	2800      	cmp	r0, #0
 8003132:	d034      	beq.n	800319e <_printf_float+0x27a>
 8003134:	4a37      	ldr	r2, [pc, #220]	; (8003214 <_printf_float+0x2f0>)
 8003136:	2301      	movs	r3, #1
 8003138:	4631      	mov	r1, r6
 800313a:	4628      	mov	r0, r5
 800313c:	47b8      	blx	r7
 800313e:	3001      	adds	r0, #1
 8003140:	f43f af51 	beq.w	8002fe6 <_printf_float+0xc2>
 8003144:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003148:	429a      	cmp	r2, r3
 800314a:	db02      	blt.n	8003152 <_printf_float+0x22e>
 800314c:	6823      	ldr	r3, [r4, #0]
 800314e:	07d8      	lsls	r0, r3, #31
 8003150:	d510      	bpl.n	8003174 <_printf_float+0x250>
 8003152:	ee18 3a10 	vmov	r3, s16
 8003156:	4652      	mov	r2, sl
 8003158:	4631      	mov	r1, r6
 800315a:	4628      	mov	r0, r5
 800315c:	47b8      	blx	r7
 800315e:	3001      	adds	r0, #1
 8003160:	f43f af41 	beq.w	8002fe6 <_printf_float+0xc2>
 8003164:	f04f 0800 	mov.w	r8, #0
 8003168:	f104 091a 	add.w	r9, r4, #26
 800316c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800316e:	3b01      	subs	r3, #1
 8003170:	4543      	cmp	r3, r8
 8003172:	dc09      	bgt.n	8003188 <_printf_float+0x264>
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	079b      	lsls	r3, r3, #30
 8003178:	f100 8105 	bmi.w	8003386 <_printf_float+0x462>
 800317c:	68e0      	ldr	r0, [r4, #12]
 800317e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003180:	4298      	cmp	r0, r3
 8003182:	bfb8      	it	lt
 8003184:	4618      	movlt	r0, r3
 8003186:	e730      	b.n	8002fea <_printf_float+0xc6>
 8003188:	2301      	movs	r3, #1
 800318a:	464a      	mov	r2, r9
 800318c:	4631      	mov	r1, r6
 800318e:	4628      	mov	r0, r5
 8003190:	47b8      	blx	r7
 8003192:	3001      	adds	r0, #1
 8003194:	f43f af27 	beq.w	8002fe6 <_printf_float+0xc2>
 8003198:	f108 0801 	add.w	r8, r8, #1
 800319c:	e7e6      	b.n	800316c <_printf_float+0x248>
 800319e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	dc39      	bgt.n	8003218 <_printf_float+0x2f4>
 80031a4:	4a1b      	ldr	r2, [pc, #108]	; (8003214 <_printf_float+0x2f0>)
 80031a6:	2301      	movs	r3, #1
 80031a8:	4631      	mov	r1, r6
 80031aa:	4628      	mov	r0, r5
 80031ac:	47b8      	blx	r7
 80031ae:	3001      	adds	r0, #1
 80031b0:	f43f af19 	beq.w	8002fe6 <_printf_float+0xc2>
 80031b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80031b8:	4313      	orrs	r3, r2
 80031ba:	d102      	bne.n	80031c2 <_printf_float+0x29e>
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	07d9      	lsls	r1, r3, #31
 80031c0:	d5d8      	bpl.n	8003174 <_printf_float+0x250>
 80031c2:	ee18 3a10 	vmov	r3, s16
 80031c6:	4652      	mov	r2, sl
 80031c8:	4631      	mov	r1, r6
 80031ca:	4628      	mov	r0, r5
 80031cc:	47b8      	blx	r7
 80031ce:	3001      	adds	r0, #1
 80031d0:	f43f af09 	beq.w	8002fe6 <_printf_float+0xc2>
 80031d4:	f04f 0900 	mov.w	r9, #0
 80031d8:	f104 0a1a 	add.w	sl, r4, #26
 80031dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031de:	425b      	negs	r3, r3
 80031e0:	454b      	cmp	r3, r9
 80031e2:	dc01      	bgt.n	80031e8 <_printf_float+0x2c4>
 80031e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031e6:	e792      	b.n	800310e <_printf_float+0x1ea>
 80031e8:	2301      	movs	r3, #1
 80031ea:	4652      	mov	r2, sl
 80031ec:	4631      	mov	r1, r6
 80031ee:	4628      	mov	r0, r5
 80031f0:	47b8      	blx	r7
 80031f2:	3001      	adds	r0, #1
 80031f4:	f43f aef7 	beq.w	8002fe6 <_printf_float+0xc2>
 80031f8:	f109 0901 	add.w	r9, r9, #1
 80031fc:	e7ee      	b.n	80031dc <_printf_float+0x2b8>
 80031fe:	bf00      	nop
 8003200:	7fefffff 	.word	0x7fefffff
 8003204:	08005f24 	.word	0x08005f24
 8003208:	08005f28 	.word	0x08005f28
 800320c:	08005f30 	.word	0x08005f30
 8003210:	08005f2c 	.word	0x08005f2c
 8003214:	08005f34 	.word	0x08005f34
 8003218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800321a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800321c:	429a      	cmp	r2, r3
 800321e:	bfa8      	it	ge
 8003220:	461a      	movge	r2, r3
 8003222:	2a00      	cmp	r2, #0
 8003224:	4691      	mov	r9, r2
 8003226:	dc37      	bgt.n	8003298 <_printf_float+0x374>
 8003228:	f04f 0b00 	mov.w	fp, #0
 800322c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003230:	f104 021a 	add.w	r2, r4, #26
 8003234:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003236:	9305      	str	r3, [sp, #20]
 8003238:	eba3 0309 	sub.w	r3, r3, r9
 800323c:	455b      	cmp	r3, fp
 800323e:	dc33      	bgt.n	80032a8 <_printf_float+0x384>
 8003240:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003244:	429a      	cmp	r2, r3
 8003246:	db3b      	blt.n	80032c0 <_printf_float+0x39c>
 8003248:	6823      	ldr	r3, [r4, #0]
 800324a:	07da      	lsls	r2, r3, #31
 800324c:	d438      	bmi.n	80032c0 <_printf_float+0x39c>
 800324e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003250:	9a05      	ldr	r2, [sp, #20]
 8003252:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003254:	1a9a      	subs	r2, r3, r2
 8003256:	eba3 0901 	sub.w	r9, r3, r1
 800325a:	4591      	cmp	r9, r2
 800325c:	bfa8      	it	ge
 800325e:	4691      	movge	r9, r2
 8003260:	f1b9 0f00 	cmp.w	r9, #0
 8003264:	dc35      	bgt.n	80032d2 <_printf_float+0x3ae>
 8003266:	f04f 0800 	mov.w	r8, #0
 800326a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800326e:	f104 0a1a 	add.w	sl, r4, #26
 8003272:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	eba3 0309 	sub.w	r3, r3, r9
 800327c:	4543      	cmp	r3, r8
 800327e:	f77f af79 	ble.w	8003174 <_printf_float+0x250>
 8003282:	2301      	movs	r3, #1
 8003284:	4652      	mov	r2, sl
 8003286:	4631      	mov	r1, r6
 8003288:	4628      	mov	r0, r5
 800328a:	47b8      	blx	r7
 800328c:	3001      	adds	r0, #1
 800328e:	f43f aeaa 	beq.w	8002fe6 <_printf_float+0xc2>
 8003292:	f108 0801 	add.w	r8, r8, #1
 8003296:	e7ec      	b.n	8003272 <_printf_float+0x34e>
 8003298:	4613      	mov	r3, r2
 800329a:	4631      	mov	r1, r6
 800329c:	4642      	mov	r2, r8
 800329e:	4628      	mov	r0, r5
 80032a0:	47b8      	blx	r7
 80032a2:	3001      	adds	r0, #1
 80032a4:	d1c0      	bne.n	8003228 <_printf_float+0x304>
 80032a6:	e69e      	b.n	8002fe6 <_printf_float+0xc2>
 80032a8:	2301      	movs	r3, #1
 80032aa:	4631      	mov	r1, r6
 80032ac:	4628      	mov	r0, r5
 80032ae:	9205      	str	r2, [sp, #20]
 80032b0:	47b8      	blx	r7
 80032b2:	3001      	adds	r0, #1
 80032b4:	f43f ae97 	beq.w	8002fe6 <_printf_float+0xc2>
 80032b8:	9a05      	ldr	r2, [sp, #20]
 80032ba:	f10b 0b01 	add.w	fp, fp, #1
 80032be:	e7b9      	b.n	8003234 <_printf_float+0x310>
 80032c0:	ee18 3a10 	vmov	r3, s16
 80032c4:	4652      	mov	r2, sl
 80032c6:	4631      	mov	r1, r6
 80032c8:	4628      	mov	r0, r5
 80032ca:	47b8      	blx	r7
 80032cc:	3001      	adds	r0, #1
 80032ce:	d1be      	bne.n	800324e <_printf_float+0x32a>
 80032d0:	e689      	b.n	8002fe6 <_printf_float+0xc2>
 80032d2:	9a05      	ldr	r2, [sp, #20]
 80032d4:	464b      	mov	r3, r9
 80032d6:	4442      	add	r2, r8
 80032d8:	4631      	mov	r1, r6
 80032da:	4628      	mov	r0, r5
 80032dc:	47b8      	blx	r7
 80032de:	3001      	adds	r0, #1
 80032e0:	d1c1      	bne.n	8003266 <_printf_float+0x342>
 80032e2:	e680      	b.n	8002fe6 <_printf_float+0xc2>
 80032e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80032e6:	2a01      	cmp	r2, #1
 80032e8:	dc01      	bgt.n	80032ee <_printf_float+0x3ca>
 80032ea:	07db      	lsls	r3, r3, #31
 80032ec:	d538      	bpl.n	8003360 <_printf_float+0x43c>
 80032ee:	2301      	movs	r3, #1
 80032f0:	4642      	mov	r2, r8
 80032f2:	4631      	mov	r1, r6
 80032f4:	4628      	mov	r0, r5
 80032f6:	47b8      	blx	r7
 80032f8:	3001      	adds	r0, #1
 80032fa:	f43f ae74 	beq.w	8002fe6 <_printf_float+0xc2>
 80032fe:	ee18 3a10 	vmov	r3, s16
 8003302:	4652      	mov	r2, sl
 8003304:	4631      	mov	r1, r6
 8003306:	4628      	mov	r0, r5
 8003308:	47b8      	blx	r7
 800330a:	3001      	adds	r0, #1
 800330c:	f43f ae6b 	beq.w	8002fe6 <_printf_float+0xc2>
 8003310:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003314:	2200      	movs	r2, #0
 8003316:	2300      	movs	r3, #0
 8003318:	f7fd fbd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800331c:	b9d8      	cbnz	r0, 8003356 <_printf_float+0x432>
 800331e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003320:	f108 0201 	add.w	r2, r8, #1
 8003324:	3b01      	subs	r3, #1
 8003326:	4631      	mov	r1, r6
 8003328:	4628      	mov	r0, r5
 800332a:	47b8      	blx	r7
 800332c:	3001      	adds	r0, #1
 800332e:	d10e      	bne.n	800334e <_printf_float+0x42a>
 8003330:	e659      	b.n	8002fe6 <_printf_float+0xc2>
 8003332:	2301      	movs	r3, #1
 8003334:	4652      	mov	r2, sl
 8003336:	4631      	mov	r1, r6
 8003338:	4628      	mov	r0, r5
 800333a:	47b8      	blx	r7
 800333c:	3001      	adds	r0, #1
 800333e:	f43f ae52 	beq.w	8002fe6 <_printf_float+0xc2>
 8003342:	f108 0801 	add.w	r8, r8, #1
 8003346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003348:	3b01      	subs	r3, #1
 800334a:	4543      	cmp	r3, r8
 800334c:	dcf1      	bgt.n	8003332 <_printf_float+0x40e>
 800334e:	464b      	mov	r3, r9
 8003350:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003354:	e6dc      	b.n	8003110 <_printf_float+0x1ec>
 8003356:	f04f 0800 	mov.w	r8, #0
 800335a:	f104 0a1a 	add.w	sl, r4, #26
 800335e:	e7f2      	b.n	8003346 <_printf_float+0x422>
 8003360:	2301      	movs	r3, #1
 8003362:	4642      	mov	r2, r8
 8003364:	e7df      	b.n	8003326 <_printf_float+0x402>
 8003366:	2301      	movs	r3, #1
 8003368:	464a      	mov	r2, r9
 800336a:	4631      	mov	r1, r6
 800336c:	4628      	mov	r0, r5
 800336e:	47b8      	blx	r7
 8003370:	3001      	adds	r0, #1
 8003372:	f43f ae38 	beq.w	8002fe6 <_printf_float+0xc2>
 8003376:	f108 0801 	add.w	r8, r8, #1
 800337a:	68e3      	ldr	r3, [r4, #12]
 800337c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800337e:	1a5b      	subs	r3, r3, r1
 8003380:	4543      	cmp	r3, r8
 8003382:	dcf0      	bgt.n	8003366 <_printf_float+0x442>
 8003384:	e6fa      	b.n	800317c <_printf_float+0x258>
 8003386:	f04f 0800 	mov.w	r8, #0
 800338a:	f104 0919 	add.w	r9, r4, #25
 800338e:	e7f4      	b.n	800337a <_printf_float+0x456>

08003390 <_printf_common>:
 8003390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003394:	4616      	mov	r6, r2
 8003396:	4699      	mov	r9, r3
 8003398:	688a      	ldr	r2, [r1, #8]
 800339a:	690b      	ldr	r3, [r1, #16]
 800339c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033a0:	4293      	cmp	r3, r2
 80033a2:	bfb8      	it	lt
 80033a4:	4613      	movlt	r3, r2
 80033a6:	6033      	str	r3, [r6, #0]
 80033a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033ac:	4607      	mov	r7, r0
 80033ae:	460c      	mov	r4, r1
 80033b0:	b10a      	cbz	r2, 80033b6 <_printf_common+0x26>
 80033b2:	3301      	adds	r3, #1
 80033b4:	6033      	str	r3, [r6, #0]
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	0699      	lsls	r1, r3, #26
 80033ba:	bf42      	ittt	mi
 80033bc:	6833      	ldrmi	r3, [r6, #0]
 80033be:	3302      	addmi	r3, #2
 80033c0:	6033      	strmi	r3, [r6, #0]
 80033c2:	6825      	ldr	r5, [r4, #0]
 80033c4:	f015 0506 	ands.w	r5, r5, #6
 80033c8:	d106      	bne.n	80033d8 <_printf_common+0x48>
 80033ca:	f104 0a19 	add.w	sl, r4, #25
 80033ce:	68e3      	ldr	r3, [r4, #12]
 80033d0:	6832      	ldr	r2, [r6, #0]
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	42ab      	cmp	r3, r5
 80033d6:	dc26      	bgt.n	8003426 <_printf_common+0x96>
 80033d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80033dc:	1e13      	subs	r3, r2, #0
 80033de:	6822      	ldr	r2, [r4, #0]
 80033e0:	bf18      	it	ne
 80033e2:	2301      	movne	r3, #1
 80033e4:	0692      	lsls	r2, r2, #26
 80033e6:	d42b      	bmi.n	8003440 <_printf_common+0xb0>
 80033e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033ec:	4649      	mov	r1, r9
 80033ee:	4638      	mov	r0, r7
 80033f0:	47c0      	blx	r8
 80033f2:	3001      	adds	r0, #1
 80033f4:	d01e      	beq.n	8003434 <_printf_common+0xa4>
 80033f6:	6823      	ldr	r3, [r4, #0]
 80033f8:	68e5      	ldr	r5, [r4, #12]
 80033fa:	6832      	ldr	r2, [r6, #0]
 80033fc:	f003 0306 	and.w	r3, r3, #6
 8003400:	2b04      	cmp	r3, #4
 8003402:	bf08      	it	eq
 8003404:	1aad      	subeq	r5, r5, r2
 8003406:	68a3      	ldr	r3, [r4, #8]
 8003408:	6922      	ldr	r2, [r4, #16]
 800340a:	bf0c      	ite	eq
 800340c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003410:	2500      	movne	r5, #0
 8003412:	4293      	cmp	r3, r2
 8003414:	bfc4      	itt	gt
 8003416:	1a9b      	subgt	r3, r3, r2
 8003418:	18ed      	addgt	r5, r5, r3
 800341a:	2600      	movs	r6, #0
 800341c:	341a      	adds	r4, #26
 800341e:	42b5      	cmp	r5, r6
 8003420:	d11a      	bne.n	8003458 <_printf_common+0xc8>
 8003422:	2000      	movs	r0, #0
 8003424:	e008      	b.n	8003438 <_printf_common+0xa8>
 8003426:	2301      	movs	r3, #1
 8003428:	4652      	mov	r2, sl
 800342a:	4649      	mov	r1, r9
 800342c:	4638      	mov	r0, r7
 800342e:	47c0      	blx	r8
 8003430:	3001      	adds	r0, #1
 8003432:	d103      	bne.n	800343c <_printf_common+0xac>
 8003434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800343c:	3501      	adds	r5, #1
 800343e:	e7c6      	b.n	80033ce <_printf_common+0x3e>
 8003440:	18e1      	adds	r1, r4, r3
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	2030      	movs	r0, #48	; 0x30
 8003446:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800344a:	4422      	add	r2, r4
 800344c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003450:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003454:	3302      	adds	r3, #2
 8003456:	e7c7      	b.n	80033e8 <_printf_common+0x58>
 8003458:	2301      	movs	r3, #1
 800345a:	4622      	mov	r2, r4
 800345c:	4649      	mov	r1, r9
 800345e:	4638      	mov	r0, r7
 8003460:	47c0      	blx	r8
 8003462:	3001      	adds	r0, #1
 8003464:	d0e6      	beq.n	8003434 <_printf_common+0xa4>
 8003466:	3601      	adds	r6, #1
 8003468:	e7d9      	b.n	800341e <_printf_common+0x8e>
	...

0800346c <_printf_i>:
 800346c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003470:	7e0f      	ldrb	r7, [r1, #24]
 8003472:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003474:	2f78      	cmp	r7, #120	; 0x78
 8003476:	4691      	mov	r9, r2
 8003478:	4680      	mov	r8, r0
 800347a:	460c      	mov	r4, r1
 800347c:	469a      	mov	sl, r3
 800347e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003482:	d807      	bhi.n	8003494 <_printf_i+0x28>
 8003484:	2f62      	cmp	r7, #98	; 0x62
 8003486:	d80a      	bhi.n	800349e <_printf_i+0x32>
 8003488:	2f00      	cmp	r7, #0
 800348a:	f000 80d8 	beq.w	800363e <_printf_i+0x1d2>
 800348e:	2f58      	cmp	r7, #88	; 0x58
 8003490:	f000 80a3 	beq.w	80035da <_printf_i+0x16e>
 8003494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003498:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800349c:	e03a      	b.n	8003514 <_printf_i+0xa8>
 800349e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034a2:	2b15      	cmp	r3, #21
 80034a4:	d8f6      	bhi.n	8003494 <_printf_i+0x28>
 80034a6:	a101      	add	r1, pc, #4	; (adr r1, 80034ac <_printf_i+0x40>)
 80034a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034ac:	08003505 	.word	0x08003505
 80034b0:	08003519 	.word	0x08003519
 80034b4:	08003495 	.word	0x08003495
 80034b8:	08003495 	.word	0x08003495
 80034bc:	08003495 	.word	0x08003495
 80034c0:	08003495 	.word	0x08003495
 80034c4:	08003519 	.word	0x08003519
 80034c8:	08003495 	.word	0x08003495
 80034cc:	08003495 	.word	0x08003495
 80034d0:	08003495 	.word	0x08003495
 80034d4:	08003495 	.word	0x08003495
 80034d8:	08003625 	.word	0x08003625
 80034dc:	08003549 	.word	0x08003549
 80034e0:	08003607 	.word	0x08003607
 80034e4:	08003495 	.word	0x08003495
 80034e8:	08003495 	.word	0x08003495
 80034ec:	08003647 	.word	0x08003647
 80034f0:	08003495 	.word	0x08003495
 80034f4:	08003549 	.word	0x08003549
 80034f8:	08003495 	.word	0x08003495
 80034fc:	08003495 	.word	0x08003495
 8003500:	0800360f 	.word	0x0800360f
 8003504:	682b      	ldr	r3, [r5, #0]
 8003506:	1d1a      	adds	r2, r3, #4
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	602a      	str	r2, [r5, #0]
 800350c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003514:	2301      	movs	r3, #1
 8003516:	e0a3      	b.n	8003660 <_printf_i+0x1f4>
 8003518:	6820      	ldr	r0, [r4, #0]
 800351a:	6829      	ldr	r1, [r5, #0]
 800351c:	0606      	lsls	r6, r0, #24
 800351e:	f101 0304 	add.w	r3, r1, #4
 8003522:	d50a      	bpl.n	800353a <_printf_i+0xce>
 8003524:	680e      	ldr	r6, [r1, #0]
 8003526:	602b      	str	r3, [r5, #0]
 8003528:	2e00      	cmp	r6, #0
 800352a:	da03      	bge.n	8003534 <_printf_i+0xc8>
 800352c:	232d      	movs	r3, #45	; 0x2d
 800352e:	4276      	negs	r6, r6
 8003530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003534:	485e      	ldr	r0, [pc, #376]	; (80036b0 <_printf_i+0x244>)
 8003536:	230a      	movs	r3, #10
 8003538:	e019      	b.n	800356e <_printf_i+0x102>
 800353a:	680e      	ldr	r6, [r1, #0]
 800353c:	602b      	str	r3, [r5, #0]
 800353e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003542:	bf18      	it	ne
 8003544:	b236      	sxthne	r6, r6
 8003546:	e7ef      	b.n	8003528 <_printf_i+0xbc>
 8003548:	682b      	ldr	r3, [r5, #0]
 800354a:	6820      	ldr	r0, [r4, #0]
 800354c:	1d19      	adds	r1, r3, #4
 800354e:	6029      	str	r1, [r5, #0]
 8003550:	0601      	lsls	r1, r0, #24
 8003552:	d501      	bpl.n	8003558 <_printf_i+0xec>
 8003554:	681e      	ldr	r6, [r3, #0]
 8003556:	e002      	b.n	800355e <_printf_i+0xf2>
 8003558:	0646      	lsls	r6, r0, #25
 800355a:	d5fb      	bpl.n	8003554 <_printf_i+0xe8>
 800355c:	881e      	ldrh	r6, [r3, #0]
 800355e:	4854      	ldr	r0, [pc, #336]	; (80036b0 <_printf_i+0x244>)
 8003560:	2f6f      	cmp	r7, #111	; 0x6f
 8003562:	bf0c      	ite	eq
 8003564:	2308      	moveq	r3, #8
 8003566:	230a      	movne	r3, #10
 8003568:	2100      	movs	r1, #0
 800356a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800356e:	6865      	ldr	r5, [r4, #4]
 8003570:	60a5      	str	r5, [r4, #8]
 8003572:	2d00      	cmp	r5, #0
 8003574:	bfa2      	ittt	ge
 8003576:	6821      	ldrge	r1, [r4, #0]
 8003578:	f021 0104 	bicge.w	r1, r1, #4
 800357c:	6021      	strge	r1, [r4, #0]
 800357e:	b90e      	cbnz	r6, 8003584 <_printf_i+0x118>
 8003580:	2d00      	cmp	r5, #0
 8003582:	d04d      	beq.n	8003620 <_printf_i+0x1b4>
 8003584:	4615      	mov	r5, r2
 8003586:	fbb6 f1f3 	udiv	r1, r6, r3
 800358a:	fb03 6711 	mls	r7, r3, r1, r6
 800358e:	5dc7      	ldrb	r7, [r0, r7]
 8003590:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003594:	4637      	mov	r7, r6
 8003596:	42bb      	cmp	r3, r7
 8003598:	460e      	mov	r6, r1
 800359a:	d9f4      	bls.n	8003586 <_printf_i+0x11a>
 800359c:	2b08      	cmp	r3, #8
 800359e:	d10b      	bne.n	80035b8 <_printf_i+0x14c>
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	07de      	lsls	r6, r3, #31
 80035a4:	d508      	bpl.n	80035b8 <_printf_i+0x14c>
 80035a6:	6923      	ldr	r3, [r4, #16]
 80035a8:	6861      	ldr	r1, [r4, #4]
 80035aa:	4299      	cmp	r1, r3
 80035ac:	bfde      	ittt	le
 80035ae:	2330      	movle	r3, #48	; 0x30
 80035b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80035b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80035b8:	1b52      	subs	r2, r2, r5
 80035ba:	6122      	str	r2, [r4, #16]
 80035bc:	f8cd a000 	str.w	sl, [sp]
 80035c0:	464b      	mov	r3, r9
 80035c2:	aa03      	add	r2, sp, #12
 80035c4:	4621      	mov	r1, r4
 80035c6:	4640      	mov	r0, r8
 80035c8:	f7ff fee2 	bl	8003390 <_printf_common>
 80035cc:	3001      	adds	r0, #1
 80035ce:	d14c      	bne.n	800366a <_printf_i+0x1fe>
 80035d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035d4:	b004      	add	sp, #16
 80035d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035da:	4835      	ldr	r0, [pc, #212]	; (80036b0 <_printf_i+0x244>)
 80035dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80035e0:	6829      	ldr	r1, [r5, #0]
 80035e2:	6823      	ldr	r3, [r4, #0]
 80035e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80035e8:	6029      	str	r1, [r5, #0]
 80035ea:	061d      	lsls	r5, r3, #24
 80035ec:	d514      	bpl.n	8003618 <_printf_i+0x1ac>
 80035ee:	07df      	lsls	r7, r3, #31
 80035f0:	bf44      	itt	mi
 80035f2:	f043 0320 	orrmi.w	r3, r3, #32
 80035f6:	6023      	strmi	r3, [r4, #0]
 80035f8:	b91e      	cbnz	r6, 8003602 <_printf_i+0x196>
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	f023 0320 	bic.w	r3, r3, #32
 8003600:	6023      	str	r3, [r4, #0]
 8003602:	2310      	movs	r3, #16
 8003604:	e7b0      	b.n	8003568 <_printf_i+0xfc>
 8003606:	6823      	ldr	r3, [r4, #0]
 8003608:	f043 0320 	orr.w	r3, r3, #32
 800360c:	6023      	str	r3, [r4, #0]
 800360e:	2378      	movs	r3, #120	; 0x78
 8003610:	4828      	ldr	r0, [pc, #160]	; (80036b4 <_printf_i+0x248>)
 8003612:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003616:	e7e3      	b.n	80035e0 <_printf_i+0x174>
 8003618:	0659      	lsls	r1, r3, #25
 800361a:	bf48      	it	mi
 800361c:	b2b6      	uxthmi	r6, r6
 800361e:	e7e6      	b.n	80035ee <_printf_i+0x182>
 8003620:	4615      	mov	r5, r2
 8003622:	e7bb      	b.n	800359c <_printf_i+0x130>
 8003624:	682b      	ldr	r3, [r5, #0]
 8003626:	6826      	ldr	r6, [r4, #0]
 8003628:	6961      	ldr	r1, [r4, #20]
 800362a:	1d18      	adds	r0, r3, #4
 800362c:	6028      	str	r0, [r5, #0]
 800362e:	0635      	lsls	r5, r6, #24
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	d501      	bpl.n	8003638 <_printf_i+0x1cc>
 8003634:	6019      	str	r1, [r3, #0]
 8003636:	e002      	b.n	800363e <_printf_i+0x1d2>
 8003638:	0670      	lsls	r0, r6, #25
 800363a:	d5fb      	bpl.n	8003634 <_printf_i+0x1c8>
 800363c:	8019      	strh	r1, [r3, #0]
 800363e:	2300      	movs	r3, #0
 8003640:	6123      	str	r3, [r4, #16]
 8003642:	4615      	mov	r5, r2
 8003644:	e7ba      	b.n	80035bc <_printf_i+0x150>
 8003646:	682b      	ldr	r3, [r5, #0]
 8003648:	1d1a      	adds	r2, r3, #4
 800364a:	602a      	str	r2, [r5, #0]
 800364c:	681d      	ldr	r5, [r3, #0]
 800364e:	6862      	ldr	r2, [r4, #4]
 8003650:	2100      	movs	r1, #0
 8003652:	4628      	mov	r0, r5
 8003654:	f7fc fdc4 	bl	80001e0 <memchr>
 8003658:	b108      	cbz	r0, 800365e <_printf_i+0x1f2>
 800365a:	1b40      	subs	r0, r0, r5
 800365c:	6060      	str	r0, [r4, #4]
 800365e:	6863      	ldr	r3, [r4, #4]
 8003660:	6123      	str	r3, [r4, #16]
 8003662:	2300      	movs	r3, #0
 8003664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003668:	e7a8      	b.n	80035bc <_printf_i+0x150>
 800366a:	6923      	ldr	r3, [r4, #16]
 800366c:	462a      	mov	r2, r5
 800366e:	4649      	mov	r1, r9
 8003670:	4640      	mov	r0, r8
 8003672:	47d0      	blx	sl
 8003674:	3001      	adds	r0, #1
 8003676:	d0ab      	beq.n	80035d0 <_printf_i+0x164>
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	079b      	lsls	r3, r3, #30
 800367c:	d413      	bmi.n	80036a6 <_printf_i+0x23a>
 800367e:	68e0      	ldr	r0, [r4, #12]
 8003680:	9b03      	ldr	r3, [sp, #12]
 8003682:	4298      	cmp	r0, r3
 8003684:	bfb8      	it	lt
 8003686:	4618      	movlt	r0, r3
 8003688:	e7a4      	b.n	80035d4 <_printf_i+0x168>
 800368a:	2301      	movs	r3, #1
 800368c:	4632      	mov	r2, r6
 800368e:	4649      	mov	r1, r9
 8003690:	4640      	mov	r0, r8
 8003692:	47d0      	blx	sl
 8003694:	3001      	adds	r0, #1
 8003696:	d09b      	beq.n	80035d0 <_printf_i+0x164>
 8003698:	3501      	adds	r5, #1
 800369a:	68e3      	ldr	r3, [r4, #12]
 800369c:	9903      	ldr	r1, [sp, #12]
 800369e:	1a5b      	subs	r3, r3, r1
 80036a0:	42ab      	cmp	r3, r5
 80036a2:	dcf2      	bgt.n	800368a <_printf_i+0x21e>
 80036a4:	e7eb      	b.n	800367e <_printf_i+0x212>
 80036a6:	2500      	movs	r5, #0
 80036a8:	f104 0619 	add.w	r6, r4, #25
 80036ac:	e7f5      	b.n	800369a <_printf_i+0x22e>
 80036ae:	bf00      	nop
 80036b0:	08005f36 	.word	0x08005f36
 80036b4:	08005f47 	.word	0x08005f47

080036b8 <setbuf>:
 80036b8:	2900      	cmp	r1, #0
 80036ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036be:	bf0c      	ite	eq
 80036c0:	2202      	moveq	r2, #2
 80036c2:	2200      	movne	r2, #0
 80036c4:	f000 b800 	b.w	80036c8 <setvbuf>

080036c8 <setvbuf>:
 80036c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80036cc:	461d      	mov	r5, r3
 80036ce:	4b5d      	ldr	r3, [pc, #372]	; (8003844 <setvbuf+0x17c>)
 80036d0:	681f      	ldr	r7, [r3, #0]
 80036d2:	4604      	mov	r4, r0
 80036d4:	460e      	mov	r6, r1
 80036d6:	4690      	mov	r8, r2
 80036d8:	b127      	cbz	r7, 80036e4 <setvbuf+0x1c>
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	b913      	cbnz	r3, 80036e4 <setvbuf+0x1c>
 80036de:	4638      	mov	r0, r7
 80036e0:	f001 f86e 	bl	80047c0 <__sinit>
 80036e4:	4b58      	ldr	r3, [pc, #352]	; (8003848 <setvbuf+0x180>)
 80036e6:	429c      	cmp	r4, r3
 80036e8:	d167      	bne.n	80037ba <setvbuf+0xf2>
 80036ea:	687c      	ldr	r4, [r7, #4]
 80036ec:	f1b8 0f02 	cmp.w	r8, #2
 80036f0:	d006      	beq.n	8003700 <setvbuf+0x38>
 80036f2:	f1b8 0f01 	cmp.w	r8, #1
 80036f6:	f200 809f 	bhi.w	8003838 <setvbuf+0x170>
 80036fa:	2d00      	cmp	r5, #0
 80036fc:	f2c0 809c 	blt.w	8003838 <setvbuf+0x170>
 8003700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003702:	07db      	lsls	r3, r3, #31
 8003704:	d405      	bmi.n	8003712 <setvbuf+0x4a>
 8003706:	89a3      	ldrh	r3, [r4, #12]
 8003708:	0598      	lsls	r0, r3, #22
 800370a:	d402      	bmi.n	8003712 <setvbuf+0x4a>
 800370c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800370e:	f001 f8fa 	bl	8004906 <__retarget_lock_acquire_recursive>
 8003712:	4621      	mov	r1, r4
 8003714:	4638      	mov	r0, r7
 8003716:	f000 ffbf 	bl	8004698 <_fflush_r>
 800371a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800371c:	b141      	cbz	r1, 8003730 <setvbuf+0x68>
 800371e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003722:	4299      	cmp	r1, r3
 8003724:	d002      	beq.n	800372c <setvbuf+0x64>
 8003726:	4638      	mov	r0, r7
 8003728:	f001 fcf6 	bl	8005118 <_free_r>
 800372c:	2300      	movs	r3, #0
 800372e:	6363      	str	r3, [r4, #52]	; 0x34
 8003730:	2300      	movs	r3, #0
 8003732:	61a3      	str	r3, [r4, #24]
 8003734:	6063      	str	r3, [r4, #4]
 8003736:	89a3      	ldrh	r3, [r4, #12]
 8003738:	0619      	lsls	r1, r3, #24
 800373a:	d503      	bpl.n	8003744 <setvbuf+0x7c>
 800373c:	6921      	ldr	r1, [r4, #16]
 800373e:	4638      	mov	r0, r7
 8003740:	f001 fcea 	bl	8005118 <_free_r>
 8003744:	89a3      	ldrh	r3, [r4, #12]
 8003746:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800374a:	f023 0303 	bic.w	r3, r3, #3
 800374e:	f1b8 0f02 	cmp.w	r8, #2
 8003752:	81a3      	strh	r3, [r4, #12]
 8003754:	d06c      	beq.n	8003830 <setvbuf+0x168>
 8003756:	ab01      	add	r3, sp, #4
 8003758:	466a      	mov	r2, sp
 800375a:	4621      	mov	r1, r4
 800375c:	4638      	mov	r0, r7
 800375e:	f001 f8d4 	bl	800490a <__swhatbuf_r>
 8003762:	89a3      	ldrh	r3, [r4, #12]
 8003764:	4318      	orrs	r0, r3
 8003766:	81a0      	strh	r0, [r4, #12]
 8003768:	2d00      	cmp	r5, #0
 800376a:	d130      	bne.n	80037ce <setvbuf+0x106>
 800376c:	9d00      	ldr	r5, [sp, #0]
 800376e:	4628      	mov	r0, r5
 8003770:	f001 f930 	bl	80049d4 <malloc>
 8003774:	4606      	mov	r6, r0
 8003776:	2800      	cmp	r0, #0
 8003778:	d155      	bne.n	8003826 <setvbuf+0x15e>
 800377a:	f8dd 9000 	ldr.w	r9, [sp]
 800377e:	45a9      	cmp	r9, r5
 8003780:	d14a      	bne.n	8003818 <setvbuf+0x150>
 8003782:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003786:	2200      	movs	r2, #0
 8003788:	60a2      	str	r2, [r4, #8]
 800378a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800378e:	6022      	str	r2, [r4, #0]
 8003790:	6122      	str	r2, [r4, #16]
 8003792:	2201      	movs	r2, #1
 8003794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003798:	6162      	str	r2, [r4, #20]
 800379a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800379c:	f043 0302 	orr.w	r3, r3, #2
 80037a0:	07d2      	lsls	r2, r2, #31
 80037a2:	81a3      	strh	r3, [r4, #12]
 80037a4:	d405      	bmi.n	80037b2 <setvbuf+0xea>
 80037a6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80037aa:	d102      	bne.n	80037b2 <setvbuf+0xea>
 80037ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037ae:	f001 f8ab 	bl	8004908 <__retarget_lock_release_recursive>
 80037b2:	4628      	mov	r0, r5
 80037b4:	b003      	add	sp, #12
 80037b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037ba:	4b24      	ldr	r3, [pc, #144]	; (800384c <setvbuf+0x184>)
 80037bc:	429c      	cmp	r4, r3
 80037be:	d101      	bne.n	80037c4 <setvbuf+0xfc>
 80037c0:	68bc      	ldr	r4, [r7, #8]
 80037c2:	e793      	b.n	80036ec <setvbuf+0x24>
 80037c4:	4b22      	ldr	r3, [pc, #136]	; (8003850 <setvbuf+0x188>)
 80037c6:	429c      	cmp	r4, r3
 80037c8:	bf08      	it	eq
 80037ca:	68fc      	ldreq	r4, [r7, #12]
 80037cc:	e78e      	b.n	80036ec <setvbuf+0x24>
 80037ce:	2e00      	cmp	r6, #0
 80037d0:	d0cd      	beq.n	800376e <setvbuf+0xa6>
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	b913      	cbnz	r3, 80037dc <setvbuf+0x114>
 80037d6:	4638      	mov	r0, r7
 80037d8:	f000 fff2 	bl	80047c0 <__sinit>
 80037dc:	f1b8 0f01 	cmp.w	r8, #1
 80037e0:	bf08      	it	eq
 80037e2:	89a3      	ldrheq	r3, [r4, #12]
 80037e4:	6026      	str	r6, [r4, #0]
 80037e6:	bf04      	itt	eq
 80037e8:	f043 0301 	orreq.w	r3, r3, #1
 80037ec:	81a3      	strheq	r3, [r4, #12]
 80037ee:	89a2      	ldrh	r2, [r4, #12]
 80037f0:	f012 0308 	ands.w	r3, r2, #8
 80037f4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80037f8:	d01c      	beq.n	8003834 <setvbuf+0x16c>
 80037fa:	07d3      	lsls	r3, r2, #31
 80037fc:	bf41      	itttt	mi
 80037fe:	2300      	movmi	r3, #0
 8003800:	426d      	negmi	r5, r5
 8003802:	60a3      	strmi	r3, [r4, #8]
 8003804:	61a5      	strmi	r5, [r4, #24]
 8003806:	bf58      	it	pl
 8003808:	60a5      	strpl	r5, [r4, #8]
 800380a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800380c:	f015 0501 	ands.w	r5, r5, #1
 8003810:	d115      	bne.n	800383e <setvbuf+0x176>
 8003812:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003816:	e7c8      	b.n	80037aa <setvbuf+0xe2>
 8003818:	4648      	mov	r0, r9
 800381a:	f001 f8db 	bl	80049d4 <malloc>
 800381e:	4606      	mov	r6, r0
 8003820:	2800      	cmp	r0, #0
 8003822:	d0ae      	beq.n	8003782 <setvbuf+0xba>
 8003824:	464d      	mov	r5, r9
 8003826:	89a3      	ldrh	r3, [r4, #12]
 8003828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800382c:	81a3      	strh	r3, [r4, #12]
 800382e:	e7d0      	b.n	80037d2 <setvbuf+0x10a>
 8003830:	2500      	movs	r5, #0
 8003832:	e7a8      	b.n	8003786 <setvbuf+0xbe>
 8003834:	60a3      	str	r3, [r4, #8]
 8003836:	e7e8      	b.n	800380a <setvbuf+0x142>
 8003838:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800383c:	e7b9      	b.n	80037b2 <setvbuf+0xea>
 800383e:	2500      	movs	r5, #0
 8003840:	e7b7      	b.n	80037b2 <setvbuf+0xea>
 8003842:	bf00      	nop
 8003844:	2000002c 	.word	0x2000002c
 8003848:	08006008 	.word	0x08006008
 800384c:	08006028 	.word	0x08006028
 8003850:	08005fe8 	.word	0x08005fe8

08003854 <siprintf>:
 8003854:	b40e      	push	{r1, r2, r3}
 8003856:	b500      	push	{lr}
 8003858:	b09c      	sub	sp, #112	; 0x70
 800385a:	ab1d      	add	r3, sp, #116	; 0x74
 800385c:	9002      	str	r0, [sp, #8]
 800385e:	9006      	str	r0, [sp, #24]
 8003860:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003864:	4809      	ldr	r0, [pc, #36]	; (800388c <siprintf+0x38>)
 8003866:	9107      	str	r1, [sp, #28]
 8003868:	9104      	str	r1, [sp, #16]
 800386a:	4909      	ldr	r1, [pc, #36]	; (8003890 <siprintf+0x3c>)
 800386c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003870:	9105      	str	r1, [sp, #20]
 8003872:	6800      	ldr	r0, [r0, #0]
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	a902      	add	r1, sp, #8
 8003878:	f001 fd8a 	bl	8005390 <_svfiprintf_r>
 800387c:	9b02      	ldr	r3, [sp, #8]
 800387e:	2200      	movs	r2, #0
 8003880:	701a      	strb	r2, [r3, #0]
 8003882:	b01c      	add	sp, #112	; 0x70
 8003884:	f85d eb04 	ldr.w	lr, [sp], #4
 8003888:	b003      	add	sp, #12
 800388a:	4770      	bx	lr
 800388c:	2000002c 	.word	0x2000002c
 8003890:	ffff0208 	.word	0xffff0208

08003894 <quorem>:
 8003894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003898:	6903      	ldr	r3, [r0, #16]
 800389a:	690c      	ldr	r4, [r1, #16]
 800389c:	42a3      	cmp	r3, r4
 800389e:	4607      	mov	r7, r0
 80038a0:	f2c0 8081 	blt.w	80039a6 <quorem+0x112>
 80038a4:	3c01      	subs	r4, #1
 80038a6:	f101 0814 	add.w	r8, r1, #20
 80038aa:	f100 0514 	add.w	r5, r0, #20
 80038ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80038b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80038bc:	3301      	adds	r3, #1
 80038be:	429a      	cmp	r2, r3
 80038c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80038c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80038c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80038cc:	d331      	bcc.n	8003932 <quorem+0x9e>
 80038ce:	f04f 0e00 	mov.w	lr, #0
 80038d2:	4640      	mov	r0, r8
 80038d4:	46ac      	mov	ip, r5
 80038d6:	46f2      	mov	sl, lr
 80038d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80038dc:	b293      	uxth	r3, r2
 80038de:	fb06 e303 	mla	r3, r6, r3, lr
 80038e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	ebaa 0303 	sub.w	r3, sl, r3
 80038ec:	f8dc a000 	ldr.w	sl, [ip]
 80038f0:	0c12      	lsrs	r2, r2, #16
 80038f2:	fa13 f38a 	uxtah	r3, r3, sl
 80038f6:	fb06 e202 	mla	r2, r6, r2, lr
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	9b00      	ldr	r3, [sp, #0]
 80038fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003902:	b292      	uxth	r2, r2
 8003904:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003908:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800390c:	f8bd 3000 	ldrh.w	r3, [sp]
 8003910:	4581      	cmp	r9, r0
 8003912:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003916:	f84c 3b04 	str.w	r3, [ip], #4
 800391a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800391e:	d2db      	bcs.n	80038d8 <quorem+0x44>
 8003920:	f855 300b 	ldr.w	r3, [r5, fp]
 8003924:	b92b      	cbnz	r3, 8003932 <quorem+0x9e>
 8003926:	9b01      	ldr	r3, [sp, #4]
 8003928:	3b04      	subs	r3, #4
 800392a:	429d      	cmp	r5, r3
 800392c:	461a      	mov	r2, r3
 800392e:	d32e      	bcc.n	800398e <quorem+0xfa>
 8003930:	613c      	str	r4, [r7, #16]
 8003932:	4638      	mov	r0, r7
 8003934:	f001 fad8 	bl	8004ee8 <__mcmp>
 8003938:	2800      	cmp	r0, #0
 800393a:	db24      	blt.n	8003986 <quorem+0xf2>
 800393c:	3601      	adds	r6, #1
 800393e:	4628      	mov	r0, r5
 8003940:	f04f 0c00 	mov.w	ip, #0
 8003944:	f858 2b04 	ldr.w	r2, [r8], #4
 8003948:	f8d0 e000 	ldr.w	lr, [r0]
 800394c:	b293      	uxth	r3, r2
 800394e:	ebac 0303 	sub.w	r3, ip, r3
 8003952:	0c12      	lsrs	r2, r2, #16
 8003954:	fa13 f38e 	uxtah	r3, r3, lr
 8003958:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800395c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003960:	b29b      	uxth	r3, r3
 8003962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003966:	45c1      	cmp	r9, r8
 8003968:	f840 3b04 	str.w	r3, [r0], #4
 800396c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003970:	d2e8      	bcs.n	8003944 <quorem+0xb0>
 8003972:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003976:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800397a:	b922      	cbnz	r2, 8003986 <quorem+0xf2>
 800397c:	3b04      	subs	r3, #4
 800397e:	429d      	cmp	r5, r3
 8003980:	461a      	mov	r2, r3
 8003982:	d30a      	bcc.n	800399a <quorem+0x106>
 8003984:	613c      	str	r4, [r7, #16]
 8003986:	4630      	mov	r0, r6
 8003988:	b003      	add	sp, #12
 800398a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	3b04      	subs	r3, #4
 8003992:	2a00      	cmp	r2, #0
 8003994:	d1cc      	bne.n	8003930 <quorem+0x9c>
 8003996:	3c01      	subs	r4, #1
 8003998:	e7c7      	b.n	800392a <quorem+0x96>
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	3b04      	subs	r3, #4
 800399e:	2a00      	cmp	r2, #0
 80039a0:	d1f0      	bne.n	8003984 <quorem+0xf0>
 80039a2:	3c01      	subs	r4, #1
 80039a4:	e7eb      	b.n	800397e <quorem+0xea>
 80039a6:	2000      	movs	r0, #0
 80039a8:	e7ee      	b.n	8003988 <quorem+0xf4>
 80039aa:	0000      	movs	r0, r0
 80039ac:	0000      	movs	r0, r0
	...

080039b0 <_dtoa_r>:
 80039b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b4:	ed2d 8b04 	vpush	{d8-d9}
 80039b8:	ec57 6b10 	vmov	r6, r7, d0
 80039bc:	b093      	sub	sp, #76	; 0x4c
 80039be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80039c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80039c4:	9106      	str	r1, [sp, #24]
 80039c6:	ee10 aa10 	vmov	sl, s0
 80039ca:	4604      	mov	r4, r0
 80039cc:	9209      	str	r2, [sp, #36]	; 0x24
 80039ce:	930c      	str	r3, [sp, #48]	; 0x30
 80039d0:	46bb      	mov	fp, r7
 80039d2:	b975      	cbnz	r5, 80039f2 <_dtoa_r+0x42>
 80039d4:	2010      	movs	r0, #16
 80039d6:	f000 fffd 	bl	80049d4 <malloc>
 80039da:	4602      	mov	r2, r0
 80039dc:	6260      	str	r0, [r4, #36]	; 0x24
 80039de:	b920      	cbnz	r0, 80039ea <_dtoa_r+0x3a>
 80039e0:	4ba7      	ldr	r3, [pc, #668]	; (8003c80 <_dtoa_r+0x2d0>)
 80039e2:	21ea      	movs	r1, #234	; 0xea
 80039e4:	48a7      	ldr	r0, [pc, #668]	; (8003c84 <_dtoa_r+0x2d4>)
 80039e6:	f001 fe27 	bl	8005638 <__assert_func>
 80039ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80039ee:	6005      	str	r5, [r0, #0]
 80039f0:	60c5      	str	r5, [r0, #12]
 80039f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039f4:	6819      	ldr	r1, [r3, #0]
 80039f6:	b151      	cbz	r1, 8003a0e <_dtoa_r+0x5e>
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	604a      	str	r2, [r1, #4]
 80039fc:	2301      	movs	r3, #1
 80039fe:	4093      	lsls	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
 8003a02:	4620      	mov	r0, r4
 8003a04:	f001 f82e 	bl	8004a64 <_Bfree>
 8003a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	1e3b      	subs	r3, r7, #0
 8003a10:	bfaa      	itet	ge
 8003a12:	2300      	movge	r3, #0
 8003a14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8003a18:	f8c8 3000 	strge.w	r3, [r8]
 8003a1c:	4b9a      	ldr	r3, [pc, #616]	; (8003c88 <_dtoa_r+0x2d8>)
 8003a1e:	bfbc      	itt	lt
 8003a20:	2201      	movlt	r2, #1
 8003a22:	f8c8 2000 	strlt.w	r2, [r8]
 8003a26:	ea33 030b 	bics.w	r3, r3, fp
 8003a2a:	d11b      	bne.n	8003a64 <_dtoa_r+0xb4>
 8003a2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003a2e:	f242 730f 	movw	r3, #9999	; 0x270f
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003a38:	4333      	orrs	r3, r6
 8003a3a:	f000 8592 	beq.w	8004562 <_dtoa_r+0xbb2>
 8003a3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a40:	b963      	cbnz	r3, 8003a5c <_dtoa_r+0xac>
 8003a42:	4b92      	ldr	r3, [pc, #584]	; (8003c8c <_dtoa_r+0x2dc>)
 8003a44:	e022      	b.n	8003a8c <_dtoa_r+0xdc>
 8003a46:	4b92      	ldr	r3, [pc, #584]	; (8003c90 <_dtoa_r+0x2e0>)
 8003a48:	9301      	str	r3, [sp, #4]
 8003a4a:	3308      	adds	r3, #8
 8003a4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	9801      	ldr	r0, [sp, #4]
 8003a52:	b013      	add	sp, #76	; 0x4c
 8003a54:	ecbd 8b04 	vpop	{d8-d9}
 8003a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a5c:	4b8b      	ldr	r3, [pc, #556]	; (8003c8c <_dtoa_r+0x2dc>)
 8003a5e:	9301      	str	r3, [sp, #4]
 8003a60:	3303      	adds	r3, #3
 8003a62:	e7f3      	b.n	8003a4c <_dtoa_r+0x9c>
 8003a64:	2200      	movs	r2, #0
 8003a66:	2300      	movs	r3, #0
 8003a68:	4650      	mov	r0, sl
 8003a6a:	4659      	mov	r1, fp
 8003a6c:	f7fd f82c 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a70:	ec4b ab19 	vmov	d9, sl, fp
 8003a74:	4680      	mov	r8, r0
 8003a76:	b158      	cbz	r0, 8003a90 <_dtoa_r+0xe0>
 8003a78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 856b 	beq.w	800455c <_dtoa_r+0xbac>
 8003a86:	4883      	ldr	r0, [pc, #524]	; (8003c94 <_dtoa_r+0x2e4>)
 8003a88:	6018      	str	r0, [r3, #0]
 8003a8a:	1e43      	subs	r3, r0, #1
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	e7df      	b.n	8003a50 <_dtoa_r+0xa0>
 8003a90:	ec4b ab10 	vmov	d0, sl, fp
 8003a94:	aa10      	add	r2, sp, #64	; 0x40
 8003a96:	a911      	add	r1, sp, #68	; 0x44
 8003a98:	4620      	mov	r0, r4
 8003a9a:	f001 facb 	bl	8005034 <__d2b>
 8003a9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8003aa2:	ee08 0a10 	vmov	s16, r0
 8003aa6:	2d00      	cmp	r5, #0
 8003aa8:	f000 8084 	beq.w	8003bb4 <_dtoa_r+0x204>
 8003aac:	ee19 3a90 	vmov	r3, s19
 8003ab0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ab4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003ab8:	4656      	mov	r6, sl
 8003aba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003abe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003ac2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8003ac6:	4b74      	ldr	r3, [pc, #464]	; (8003c98 <_dtoa_r+0x2e8>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	4630      	mov	r0, r6
 8003acc:	4639      	mov	r1, r7
 8003ace:	f7fc fbdb 	bl	8000288 <__aeabi_dsub>
 8003ad2:	a365      	add	r3, pc, #404	; (adr r3, 8003c68 <_dtoa_r+0x2b8>)
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	f7fc fd8e 	bl	80005f8 <__aeabi_dmul>
 8003adc:	a364      	add	r3, pc, #400	; (adr r3, 8003c70 <_dtoa_r+0x2c0>)
 8003ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae2:	f7fc fbd3 	bl	800028c <__adddf3>
 8003ae6:	4606      	mov	r6, r0
 8003ae8:	4628      	mov	r0, r5
 8003aea:	460f      	mov	r7, r1
 8003aec:	f7fc fd1a 	bl	8000524 <__aeabi_i2d>
 8003af0:	a361      	add	r3, pc, #388	; (adr r3, 8003c78 <_dtoa_r+0x2c8>)
 8003af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af6:	f7fc fd7f 	bl	80005f8 <__aeabi_dmul>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4630      	mov	r0, r6
 8003b00:	4639      	mov	r1, r7
 8003b02:	f7fc fbc3 	bl	800028c <__adddf3>
 8003b06:	4606      	mov	r6, r0
 8003b08:	460f      	mov	r7, r1
 8003b0a:	f7fd f825 	bl	8000b58 <__aeabi_d2iz>
 8003b0e:	2200      	movs	r2, #0
 8003b10:	9000      	str	r0, [sp, #0]
 8003b12:	2300      	movs	r3, #0
 8003b14:	4630      	mov	r0, r6
 8003b16:	4639      	mov	r1, r7
 8003b18:	f7fc ffe0 	bl	8000adc <__aeabi_dcmplt>
 8003b1c:	b150      	cbz	r0, 8003b34 <_dtoa_r+0x184>
 8003b1e:	9800      	ldr	r0, [sp, #0]
 8003b20:	f7fc fd00 	bl	8000524 <__aeabi_i2d>
 8003b24:	4632      	mov	r2, r6
 8003b26:	463b      	mov	r3, r7
 8003b28:	f7fc ffce 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b2c:	b910      	cbnz	r0, 8003b34 <_dtoa_r+0x184>
 8003b2e:	9b00      	ldr	r3, [sp, #0]
 8003b30:	3b01      	subs	r3, #1
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	9b00      	ldr	r3, [sp, #0]
 8003b36:	2b16      	cmp	r3, #22
 8003b38:	d85a      	bhi.n	8003bf0 <_dtoa_r+0x240>
 8003b3a:	9a00      	ldr	r2, [sp, #0]
 8003b3c:	4b57      	ldr	r3, [pc, #348]	; (8003c9c <_dtoa_r+0x2ec>)
 8003b3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b46:	ec51 0b19 	vmov	r0, r1, d9
 8003b4a:	f7fc ffc7 	bl	8000adc <__aeabi_dcmplt>
 8003b4e:	2800      	cmp	r0, #0
 8003b50:	d050      	beq.n	8003bf4 <_dtoa_r+0x244>
 8003b52:	9b00      	ldr	r3, [sp, #0]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	2300      	movs	r3, #0
 8003b5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003b5e:	1b5d      	subs	r5, r3, r5
 8003b60:	1e6b      	subs	r3, r5, #1
 8003b62:	9305      	str	r3, [sp, #20]
 8003b64:	bf45      	ittet	mi
 8003b66:	f1c5 0301 	rsbmi	r3, r5, #1
 8003b6a:	9304      	strmi	r3, [sp, #16]
 8003b6c:	2300      	movpl	r3, #0
 8003b6e:	2300      	movmi	r3, #0
 8003b70:	bf4c      	ite	mi
 8003b72:	9305      	strmi	r3, [sp, #20]
 8003b74:	9304      	strpl	r3, [sp, #16]
 8003b76:	9b00      	ldr	r3, [sp, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	db3d      	blt.n	8003bf8 <_dtoa_r+0x248>
 8003b7c:	9b05      	ldr	r3, [sp, #20]
 8003b7e:	9a00      	ldr	r2, [sp, #0]
 8003b80:	920a      	str	r2, [sp, #40]	; 0x28
 8003b82:	4413      	add	r3, r2
 8003b84:	9305      	str	r3, [sp, #20]
 8003b86:	2300      	movs	r3, #0
 8003b88:	9307      	str	r3, [sp, #28]
 8003b8a:	9b06      	ldr	r3, [sp, #24]
 8003b8c:	2b09      	cmp	r3, #9
 8003b8e:	f200 8089 	bhi.w	8003ca4 <_dtoa_r+0x2f4>
 8003b92:	2b05      	cmp	r3, #5
 8003b94:	bfc4      	itt	gt
 8003b96:	3b04      	subgt	r3, #4
 8003b98:	9306      	strgt	r3, [sp, #24]
 8003b9a:	9b06      	ldr	r3, [sp, #24]
 8003b9c:	f1a3 0302 	sub.w	r3, r3, #2
 8003ba0:	bfcc      	ite	gt
 8003ba2:	2500      	movgt	r5, #0
 8003ba4:	2501      	movle	r5, #1
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	f200 8087 	bhi.w	8003cba <_dtoa_r+0x30a>
 8003bac:	e8df f003 	tbb	[pc, r3]
 8003bb0:	59383a2d 	.word	0x59383a2d
 8003bb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003bb8:	441d      	add	r5, r3
 8003bba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	bfc1      	itttt	gt
 8003bc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003bc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003bca:	fa0b f303 	lslgt.w	r3, fp, r3
 8003bce:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003bd2:	bfda      	itte	le
 8003bd4:	f1c3 0320 	rsble	r3, r3, #32
 8003bd8:	fa06 f003 	lslle.w	r0, r6, r3
 8003bdc:	4318      	orrgt	r0, r3
 8003bde:	f7fc fc91 	bl	8000504 <__aeabi_ui2d>
 8003be2:	2301      	movs	r3, #1
 8003be4:	4606      	mov	r6, r0
 8003be6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003bea:	3d01      	subs	r5, #1
 8003bec:	930e      	str	r3, [sp, #56]	; 0x38
 8003bee:	e76a      	b.n	8003ac6 <_dtoa_r+0x116>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e7b2      	b.n	8003b5a <_dtoa_r+0x1aa>
 8003bf4:	900b      	str	r0, [sp, #44]	; 0x2c
 8003bf6:	e7b1      	b.n	8003b5c <_dtoa_r+0x1ac>
 8003bf8:	9b04      	ldr	r3, [sp, #16]
 8003bfa:	9a00      	ldr	r2, [sp, #0]
 8003bfc:	1a9b      	subs	r3, r3, r2
 8003bfe:	9304      	str	r3, [sp, #16]
 8003c00:	4253      	negs	r3, r2
 8003c02:	9307      	str	r3, [sp, #28]
 8003c04:	2300      	movs	r3, #0
 8003c06:	930a      	str	r3, [sp, #40]	; 0x28
 8003c08:	e7bf      	b.n	8003b8a <_dtoa_r+0x1da>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	9308      	str	r3, [sp, #32]
 8003c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	dc55      	bgt.n	8003cc0 <_dtoa_r+0x310>
 8003c14:	2301      	movs	r3, #1
 8003c16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	9209      	str	r2, [sp, #36]	; 0x24
 8003c1e:	e00c      	b.n	8003c3a <_dtoa_r+0x28a>
 8003c20:	2301      	movs	r3, #1
 8003c22:	e7f3      	b.n	8003c0c <_dtoa_r+0x25c>
 8003c24:	2300      	movs	r3, #0
 8003c26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c28:	9308      	str	r3, [sp, #32]
 8003c2a:	9b00      	ldr	r3, [sp, #0]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	9302      	str	r3, [sp, #8]
 8003c30:	3301      	adds	r3, #1
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	9303      	str	r3, [sp, #12]
 8003c36:	bfb8      	it	lt
 8003c38:	2301      	movlt	r3, #1
 8003c3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	6042      	str	r2, [r0, #4]
 8003c40:	2204      	movs	r2, #4
 8003c42:	f102 0614 	add.w	r6, r2, #20
 8003c46:	429e      	cmp	r6, r3
 8003c48:	6841      	ldr	r1, [r0, #4]
 8003c4a:	d93d      	bls.n	8003cc8 <_dtoa_r+0x318>
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	f000 fec9 	bl	80049e4 <_Balloc>
 8003c52:	9001      	str	r0, [sp, #4]
 8003c54:	2800      	cmp	r0, #0
 8003c56:	d13b      	bne.n	8003cd0 <_dtoa_r+0x320>
 8003c58:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <_dtoa_r+0x2f0>)
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003c60:	e6c0      	b.n	80039e4 <_dtoa_r+0x34>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e7df      	b.n	8003c26 <_dtoa_r+0x276>
 8003c66:	bf00      	nop
 8003c68:	636f4361 	.word	0x636f4361
 8003c6c:	3fd287a7 	.word	0x3fd287a7
 8003c70:	8b60c8b3 	.word	0x8b60c8b3
 8003c74:	3fc68a28 	.word	0x3fc68a28
 8003c78:	509f79fb 	.word	0x509f79fb
 8003c7c:	3fd34413 	.word	0x3fd34413
 8003c80:	08005f65 	.word	0x08005f65
 8003c84:	08005f7c 	.word	0x08005f7c
 8003c88:	7ff00000 	.word	0x7ff00000
 8003c8c:	08005f61 	.word	0x08005f61
 8003c90:	08005f58 	.word	0x08005f58
 8003c94:	08005f35 	.word	0x08005f35
 8003c98:	3ff80000 	.word	0x3ff80000
 8003c9c:	080060d0 	.word	0x080060d0
 8003ca0:	08005fd7 	.word	0x08005fd7
 8003ca4:	2501      	movs	r5, #1
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	9306      	str	r3, [sp, #24]
 8003caa:	9508      	str	r5, [sp, #32]
 8003cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2312      	movs	r3, #18
 8003cb8:	e7b0      	b.n	8003c1c <_dtoa_r+0x26c>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	9308      	str	r3, [sp, #32]
 8003cbe:	e7f5      	b.n	8003cac <_dtoa_r+0x2fc>
 8003cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003cc6:	e7b8      	b.n	8003c3a <_dtoa_r+0x28a>
 8003cc8:	3101      	adds	r1, #1
 8003cca:	6041      	str	r1, [r0, #4]
 8003ccc:	0052      	lsls	r2, r2, #1
 8003cce:	e7b8      	b.n	8003c42 <_dtoa_r+0x292>
 8003cd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cd2:	9a01      	ldr	r2, [sp, #4]
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	9b03      	ldr	r3, [sp, #12]
 8003cd8:	2b0e      	cmp	r3, #14
 8003cda:	f200 809d 	bhi.w	8003e18 <_dtoa_r+0x468>
 8003cde:	2d00      	cmp	r5, #0
 8003ce0:	f000 809a 	beq.w	8003e18 <_dtoa_r+0x468>
 8003ce4:	9b00      	ldr	r3, [sp, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	dd32      	ble.n	8003d50 <_dtoa_r+0x3a0>
 8003cea:	4ab7      	ldr	r2, [pc, #732]	; (8003fc8 <_dtoa_r+0x618>)
 8003cec:	f003 030f 	and.w	r3, r3, #15
 8003cf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003cf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003cf8:	9b00      	ldr	r3, [sp, #0]
 8003cfa:	05d8      	lsls	r0, r3, #23
 8003cfc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8003d00:	d516      	bpl.n	8003d30 <_dtoa_r+0x380>
 8003d02:	4bb2      	ldr	r3, [pc, #712]	; (8003fcc <_dtoa_r+0x61c>)
 8003d04:	ec51 0b19 	vmov	r0, r1, d9
 8003d08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d0c:	f7fc fd9e 	bl	800084c <__aeabi_ddiv>
 8003d10:	f007 070f 	and.w	r7, r7, #15
 8003d14:	4682      	mov	sl, r0
 8003d16:	468b      	mov	fp, r1
 8003d18:	2503      	movs	r5, #3
 8003d1a:	4eac      	ldr	r6, [pc, #688]	; (8003fcc <_dtoa_r+0x61c>)
 8003d1c:	b957      	cbnz	r7, 8003d34 <_dtoa_r+0x384>
 8003d1e:	4642      	mov	r2, r8
 8003d20:	464b      	mov	r3, r9
 8003d22:	4650      	mov	r0, sl
 8003d24:	4659      	mov	r1, fp
 8003d26:	f7fc fd91 	bl	800084c <__aeabi_ddiv>
 8003d2a:	4682      	mov	sl, r0
 8003d2c:	468b      	mov	fp, r1
 8003d2e:	e028      	b.n	8003d82 <_dtoa_r+0x3d2>
 8003d30:	2502      	movs	r5, #2
 8003d32:	e7f2      	b.n	8003d1a <_dtoa_r+0x36a>
 8003d34:	07f9      	lsls	r1, r7, #31
 8003d36:	d508      	bpl.n	8003d4a <_dtoa_r+0x39a>
 8003d38:	4640      	mov	r0, r8
 8003d3a:	4649      	mov	r1, r9
 8003d3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003d40:	f7fc fc5a 	bl	80005f8 <__aeabi_dmul>
 8003d44:	3501      	adds	r5, #1
 8003d46:	4680      	mov	r8, r0
 8003d48:	4689      	mov	r9, r1
 8003d4a:	107f      	asrs	r7, r7, #1
 8003d4c:	3608      	adds	r6, #8
 8003d4e:	e7e5      	b.n	8003d1c <_dtoa_r+0x36c>
 8003d50:	f000 809b 	beq.w	8003e8a <_dtoa_r+0x4da>
 8003d54:	9b00      	ldr	r3, [sp, #0]
 8003d56:	4f9d      	ldr	r7, [pc, #628]	; (8003fcc <_dtoa_r+0x61c>)
 8003d58:	425e      	negs	r6, r3
 8003d5a:	4b9b      	ldr	r3, [pc, #620]	; (8003fc8 <_dtoa_r+0x618>)
 8003d5c:	f006 020f 	and.w	r2, r6, #15
 8003d60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d68:	ec51 0b19 	vmov	r0, r1, d9
 8003d6c:	f7fc fc44 	bl	80005f8 <__aeabi_dmul>
 8003d70:	1136      	asrs	r6, r6, #4
 8003d72:	4682      	mov	sl, r0
 8003d74:	468b      	mov	fp, r1
 8003d76:	2300      	movs	r3, #0
 8003d78:	2502      	movs	r5, #2
 8003d7a:	2e00      	cmp	r6, #0
 8003d7c:	d17a      	bne.n	8003e74 <_dtoa_r+0x4c4>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1d3      	bne.n	8003d2a <_dtoa_r+0x37a>
 8003d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 8082 	beq.w	8003e8e <_dtoa_r+0x4de>
 8003d8a:	4b91      	ldr	r3, [pc, #580]	; (8003fd0 <_dtoa_r+0x620>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	4650      	mov	r0, sl
 8003d90:	4659      	mov	r1, fp
 8003d92:	f7fc fea3 	bl	8000adc <__aeabi_dcmplt>
 8003d96:	2800      	cmp	r0, #0
 8003d98:	d079      	beq.n	8003e8e <_dtoa_r+0x4de>
 8003d9a:	9b03      	ldr	r3, [sp, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d076      	beq.n	8003e8e <_dtoa_r+0x4de>
 8003da0:	9b02      	ldr	r3, [sp, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	dd36      	ble.n	8003e14 <_dtoa_r+0x464>
 8003da6:	9b00      	ldr	r3, [sp, #0]
 8003da8:	4650      	mov	r0, sl
 8003daa:	4659      	mov	r1, fp
 8003dac:	1e5f      	subs	r7, r3, #1
 8003dae:	2200      	movs	r2, #0
 8003db0:	4b88      	ldr	r3, [pc, #544]	; (8003fd4 <_dtoa_r+0x624>)
 8003db2:	f7fc fc21 	bl	80005f8 <__aeabi_dmul>
 8003db6:	9e02      	ldr	r6, [sp, #8]
 8003db8:	4682      	mov	sl, r0
 8003dba:	468b      	mov	fp, r1
 8003dbc:	3501      	adds	r5, #1
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	f7fc fbb0 	bl	8000524 <__aeabi_i2d>
 8003dc4:	4652      	mov	r2, sl
 8003dc6:	465b      	mov	r3, fp
 8003dc8:	f7fc fc16 	bl	80005f8 <__aeabi_dmul>
 8003dcc:	4b82      	ldr	r3, [pc, #520]	; (8003fd8 <_dtoa_r+0x628>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f7fc fa5c 	bl	800028c <__adddf3>
 8003dd4:	46d0      	mov	r8, sl
 8003dd6:	46d9      	mov	r9, fp
 8003dd8:	4682      	mov	sl, r0
 8003dda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8003dde:	2e00      	cmp	r6, #0
 8003de0:	d158      	bne.n	8003e94 <_dtoa_r+0x4e4>
 8003de2:	4b7e      	ldr	r3, [pc, #504]	; (8003fdc <_dtoa_r+0x62c>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	4640      	mov	r0, r8
 8003de8:	4649      	mov	r1, r9
 8003dea:	f7fc fa4d 	bl	8000288 <__aeabi_dsub>
 8003dee:	4652      	mov	r2, sl
 8003df0:	465b      	mov	r3, fp
 8003df2:	4680      	mov	r8, r0
 8003df4:	4689      	mov	r9, r1
 8003df6:	f7fc fe8f 	bl	8000b18 <__aeabi_dcmpgt>
 8003dfa:	2800      	cmp	r0, #0
 8003dfc:	f040 8295 	bne.w	800432a <_dtoa_r+0x97a>
 8003e00:	4652      	mov	r2, sl
 8003e02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003e06:	4640      	mov	r0, r8
 8003e08:	4649      	mov	r1, r9
 8003e0a:	f7fc fe67 	bl	8000adc <__aeabi_dcmplt>
 8003e0e:	2800      	cmp	r0, #0
 8003e10:	f040 8289 	bne.w	8004326 <_dtoa_r+0x976>
 8003e14:	ec5b ab19 	vmov	sl, fp, d9
 8003e18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f2c0 8148 	blt.w	80040b0 <_dtoa_r+0x700>
 8003e20:	9a00      	ldr	r2, [sp, #0]
 8003e22:	2a0e      	cmp	r2, #14
 8003e24:	f300 8144 	bgt.w	80040b0 <_dtoa_r+0x700>
 8003e28:	4b67      	ldr	r3, [pc, #412]	; (8003fc8 <_dtoa_r+0x618>)
 8003e2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f280 80d5 	bge.w	8003fe4 <_dtoa_r+0x634>
 8003e3a:	9b03      	ldr	r3, [sp, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f300 80d1 	bgt.w	8003fe4 <_dtoa_r+0x634>
 8003e42:	f040 826f 	bne.w	8004324 <_dtoa_r+0x974>
 8003e46:	4b65      	ldr	r3, [pc, #404]	; (8003fdc <_dtoa_r+0x62c>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	4640      	mov	r0, r8
 8003e4c:	4649      	mov	r1, r9
 8003e4e:	f7fc fbd3 	bl	80005f8 <__aeabi_dmul>
 8003e52:	4652      	mov	r2, sl
 8003e54:	465b      	mov	r3, fp
 8003e56:	f7fc fe55 	bl	8000b04 <__aeabi_dcmpge>
 8003e5a:	9e03      	ldr	r6, [sp, #12]
 8003e5c:	4637      	mov	r7, r6
 8003e5e:	2800      	cmp	r0, #0
 8003e60:	f040 8245 	bne.w	80042ee <_dtoa_r+0x93e>
 8003e64:	9d01      	ldr	r5, [sp, #4]
 8003e66:	2331      	movs	r3, #49	; 0x31
 8003e68:	f805 3b01 	strb.w	r3, [r5], #1
 8003e6c:	9b00      	ldr	r3, [sp, #0]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	e240      	b.n	80042f6 <_dtoa_r+0x946>
 8003e74:	07f2      	lsls	r2, r6, #31
 8003e76:	d505      	bpl.n	8003e84 <_dtoa_r+0x4d4>
 8003e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e7c:	f7fc fbbc 	bl	80005f8 <__aeabi_dmul>
 8003e80:	3501      	adds	r5, #1
 8003e82:	2301      	movs	r3, #1
 8003e84:	1076      	asrs	r6, r6, #1
 8003e86:	3708      	adds	r7, #8
 8003e88:	e777      	b.n	8003d7a <_dtoa_r+0x3ca>
 8003e8a:	2502      	movs	r5, #2
 8003e8c:	e779      	b.n	8003d82 <_dtoa_r+0x3d2>
 8003e8e:	9f00      	ldr	r7, [sp, #0]
 8003e90:	9e03      	ldr	r6, [sp, #12]
 8003e92:	e794      	b.n	8003dbe <_dtoa_r+0x40e>
 8003e94:	9901      	ldr	r1, [sp, #4]
 8003e96:	4b4c      	ldr	r3, [pc, #304]	; (8003fc8 <_dtoa_r+0x618>)
 8003e98:	4431      	add	r1, r6
 8003e9a:	910d      	str	r1, [sp, #52]	; 0x34
 8003e9c:	9908      	ldr	r1, [sp, #32]
 8003e9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003ea2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003ea6:	2900      	cmp	r1, #0
 8003ea8:	d043      	beq.n	8003f32 <_dtoa_r+0x582>
 8003eaa:	494d      	ldr	r1, [pc, #308]	; (8003fe0 <_dtoa_r+0x630>)
 8003eac:	2000      	movs	r0, #0
 8003eae:	f7fc fccd 	bl	800084c <__aeabi_ddiv>
 8003eb2:	4652      	mov	r2, sl
 8003eb4:	465b      	mov	r3, fp
 8003eb6:	f7fc f9e7 	bl	8000288 <__aeabi_dsub>
 8003eba:	9d01      	ldr	r5, [sp, #4]
 8003ebc:	4682      	mov	sl, r0
 8003ebe:	468b      	mov	fp, r1
 8003ec0:	4649      	mov	r1, r9
 8003ec2:	4640      	mov	r0, r8
 8003ec4:	f7fc fe48 	bl	8000b58 <__aeabi_d2iz>
 8003ec8:	4606      	mov	r6, r0
 8003eca:	f7fc fb2b 	bl	8000524 <__aeabi_i2d>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4640      	mov	r0, r8
 8003ed4:	4649      	mov	r1, r9
 8003ed6:	f7fc f9d7 	bl	8000288 <__aeabi_dsub>
 8003eda:	3630      	adds	r6, #48	; 0x30
 8003edc:	f805 6b01 	strb.w	r6, [r5], #1
 8003ee0:	4652      	mov	r2, sl
 8003ee2:	465b      	mov	r3, fp
 8003ee4:	4680      	mov	r8, r0
 8003ee6:	4689      	mov	r9, r1
 8003ee8:	f7fc fdf8 	bl	8000adc <__aeabi_dcmplt>
 8003eec:	2800      	cmp	r0, #0
 8003eee:	d163      	bne.n	8003fb8 <_dtoa_r+0x608>
 8003ef0:	4642      	mov	r2, r8
 8003ef2:	464b      	mov	r3, r9
 8003ef4:	4936      	ldr	r1, [pc, #216]	; (8003fd0 <_dtoa_r+0x620>)
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	f7fc f9c6 	bl	8000288 <__aeabi_dsub>
 8003efc:	4652      	mov	r2, sl
 8003efe:	465b      	mov	r3, fp
 8003f00:	f7fc fdec 	bl	8000adc <__aeabi_dcmplt>
 8003f04:	2800      	cmp	r0, #0
 8003f06:	f040 80b5 	bne.w	8004074 <_dtoa_r+0x6c4>
 8003f0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f0c:	429d      	cmp	r5, r3
 8003f0e:	d081      	beq.n	8003e14 <_dtoa_r+0x464>
 8003f10:	4b30      	ldr	r3, [pc, #192]	; (8003fd4 <_dtoa_r+0x624>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	4650      	mov	r0, sl
 8003f16:	4659      	mov	r1, fp
 8003f18:	f7fc fb6e 	bl	80005f8 <__aeabi_dmul>
 8003f1c:	4b2d      	ldr	r3, [pc, #180]	; (8003fd4 <_dtoa_r+0x624>)
 8003f1e:	4682      	mov	sl, r0
 8003f20:	468b      	mov	fp, r1
 8003f22:	4640      	mov	r0, r8
 8003f24:	4649      	mov	r1, r9
 8003f26:	2200      	movs	r2, #0
 8003f28:	f7fc fb66 	bl	80005f8 <__aeabi_dmul>
 8003f2c:	4680      	mov	r8, r0
 8003f2e:	4689      	mov	r9, r1
 8003f30:	e7c6      	b.n	8003ec0 <_dtoa_r+0x510>
 8003f32:	4650      	mov	r0, sl
 8003f34:	4659      	mov	r1, fp
 8003f36:	f7fc fb5f 	bl	80005f8 <__aeabi_dmul>
 8003f3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f3c:	9d01      	ldr	r5, [sp, #4]
 8003f3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f40:	4682      	mov	sl, r0
 8003f42:	468b      	mov	fp, r1
 8003f44:	4649      	mov	r1, r9
 8003f46:	4640      	mov	r0, r8
 8003f48:	f7fc fe06 	bl	8000b58 <__aeabi_d2iz>
 8003f4c:	4606      	mov	r6, r0
 8003f4e:	f7fc fae9 	bl	8000524 <__aeabi_i2d>
 8003f52:	3630      	adds	r6, #48	; 0x30
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4640      	mov	r0, r8
 8003f5a:	4649      	mov	r1, r9
 8003f5c:	f7fc f994 	bl	8000288 <__aeabi_dsub>
 8003f60:	f805 6b01 	strb.w	r6, [r5], #1
 8003f64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f66:	429d      	cmp	r5, r3
 8003f68:	4680      	mov	r8, r0
 8003f6a:	4689      	mov	r9, r1
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	d124      	bne.n	8003fbc <_dtoa_r+0x60c>
 8003f72:	4b1b      	ldr	r3, [pc, #108]	; (8003fe0 <_dtoa_r+0x630>)
 8003f74:	4650      	mov	r0, sl
 8003f76:	4659      	mov	r1, fp
 8003f78:	f7fc f988 	bl	800028c <__adddf3>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4640      	mov	r0, r8
 8003f82:	4649      	mov	r1, r9
 8003f84:	f7fc fdc8 	bl	8000b18 <__aeabi_dcmpgt>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	d173      	bne.n	8004074 <_dtoa_r+0x6c4>
 8003f8c:	4652      	mov	r2, sl
 8003f8e:	465b      	mov	r3, fp
 8003f90:	4913      	ldr	r1, [pc, #76]	; (8003fe0 <_dtoa_r+0x630>)
 8003f92:	2000      	movs	r0, #0
 8003f94:	f7fc f978 	bl	8000288 <__aeabi_dsub>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4640      	mov	r0, r8
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	f7fc fd9c 	bl	8000adc <__aeabi_dcmplt>
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	f43f af35 	beq.w	8003e14 <_dtoa_r+0x464>
 8003faa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003fac:	1e6b      	subs	r3, r5, #1
 8003fae:	930f      	str	r3, [sp, #60]	; 0x3c
 8003fb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003fb4:	2b30      	cmp	r3, #48	; 0x30
 8003fb6:	d0f8      	beq.n	8003faa <_dtoa_r+0x5fa>
 8003fb8:	9700      	str	r7, [sp, #0]
 8003fba:	e049      	b.n	8004050 <_dtoa_r+0x6a0>
 8003fbc:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <_dtoa_r+0x624>)
 8003fbe:	f7fc fb1b 	bl	80005f8 <__aeabi_dmul>
 8003fc2:	4680      	mov	r8, r0
 8003fc4:	4689      	mov	r9, r1
 8003fc6:	e7bd      	b.n	8003f44 <_dtoa_r+0x594>
 8003fc8:	080060d0 	.word	0x080060d0
 8003fcc:	080060a8 	.word	0x080060a8
 8003fd0:	3ff00000 	.word	0x3ff00000
 8003fd4:	40240000 	.word	0x40240000
 8003fd8:	401c0000 	.word	0x401c0000
 8003fdc:	40140000 	.word	0x40140000
 8003fe0:	3fe00000 	.word	0x3fe00000
 8003fe4:	9d01      	ldr	r5, [sp, #4]
 8003fe6:	4656      	mov	r6, sl
 8003fe8:	465f      	mov	r7, fp
 8003fea:	4642      	mov	r2, r8
 8003fec:	464b      	mov	r3, r9
 8003fee:	4630      	mov	r0, r6
 8003ff0:	4639      	mov	r1, r7
 8003ff2:	f7fc fc2b 	bl	800084c <__aeabi_ddiv>
 8003ff6:	f7fc fdaf 	bl	8000b58 <__aeabi_d2iz>
 8003ffa:	4682      	mov	sl, r0
 8003ffc:	f7fc fa92 	bl	8000524 <__aeabi_i2d>
 8004000:	4642      	mov	r2, r8
 8004002:	464b      	mov	r3, r9
 8004004:	f7fc faf8 	bl	80005f8 <__aeabi_dmul>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4630      	mov	r0, r6
 800400e:	4639      	mov	r1, r7
 8004010:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004014:	f7fc f938 	bl	8000288 <__aeabi_dsub>
 8004018:	f805 6b01 	strb.w	r6, [r5], #1
 800401c:	9e01      	ldr	r6, [sp, #4]
 800401e:	9f03      	ldr	r7, [sp, #12]
 8004020:	1bae      	subs	r6, r5, r6
 8004022:	42b7      	cmp	r7, r6
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	d135      	bne.n	8004096 <_dtoa_r+0x6e6>
 800402a:	f7fc f92f 	bl	800028c <__adddf3>
 800402e:	4642      	mov	r2, r8
 8004030:	464b      	mov	r3, r9
 8004032:	4606      	mov	r6, r0
 8004034:	460f      	mov	r7, r1
 8004036:	f7fc fd6f 	bl	8000b18 <__aeabi_dcmpgt>
 800403a:	b9d0      	cbnz	r0, 8004072 <_dtoa_r+0x6c2>
 800403c:	4642      	mov	r2, r8
 800403e:	464b      	mov	r3, r9
 8004040:	4630      	mov	r0, r6
 8004042:	4639      	mov	r1, r7
 8004044:	f7fc fd40 	bl	8000ac8 <__aeabi_dcmpeq>
 8004048:	b110      	cbz	r0, 8004050 <_dtoa_r+0x6a0>
 800404a:	f01a 0f01 	tst.w	sl, #1
 800404e:	d110      	bne.n	8004072 <_dtoa_r+0x6c2>
 8004050:	4620      	mov	r0, r4
 8004052:	ee18 1a10 	vmov	r1, s16
 8004056:	f000 fd05 	bl	8004a64 <_Bfree>
 800405a:	2300      	movs	r3, #0
 800405c:	9800      	ldr	r0, [sp, #0]
 800405e:	702b      	strb	r3, [r5, #0]
 8004060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004062:	3001      	adds	r0, #1
 8004064:	6018      	str	r0, [r3, #0]
 8004066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004068:	2b00      	cmp	r3, #0
 800406a:	f43f acf1 	beq.w	8003a50 <_dtoa_r+0xa0>
 800406e:	601d      	str	r5, [r3, #0]
 8004070:	e4ee      	b.n	8003a50 <_dtoa_r+0xa0>
 8004072:	9f00      	ldr	r7, [sp, #0]
 8004074:	462b      	mov	r3, r5
 8004076:	461d      	mov	r5, r3
 8004078:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800407c:	2a39      	cmp	r2, #57	; 0x39
 800407e:	d106      	bne.n	800408e <_dtoa_r+0x6de>
 8004080:	9a01      	ldr	r2, [sp, #4]
 8004082:	429a      	cmp	r2, r3
 8004084:	d1f7      	bne.n	8004076 <_dtoa_r+0x6c6>
 8004086:	9901      	ldr	r1, [sp, #4]
 8004088:	2230      	movs	r2, #48	; 0x30
 800408a:	3701      	adds	r7, #1
 800408c:	700a      	strb	r2, [r1, #0]
 800408e:	781a      	ldrb	r2, [r3, #0]
 8004090:	3201      	adds	r2, #1
 8004092:	701a      	strb	r2, [r3, #0]
 8004094:	e790      	b.n	8003fb8 <_dtoa_r+0x608>
 8004096:	4ba6      	ldr	r3, [pc, #664]	; (8004330 <_dtoa_r+0x980>)
 8004098:	2200      	movs	r2, #0
 800409a:	f7fc faad 	bl	80005f8 <__aeabi_dmul>
 800409e:	2200      	movs	r2, #0
 80040a0:	2300      	movs	r3, #0
 80040a2:	4606      	mov	r6, r0
 80040a4:	460f      	mov	r7, r1
 80040a6:	f7fc fd0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80040aa:	2800      	cmp	r0, #0
 80040ac:	d09d      	beq.n	8003fea <_dtoa_r+0x63a>
 80040ae:	e7cf      	b.n	8004050 <_dtoa_r+0x6a0>
 80040b0:	9a08      	ldr	r2, [sp, #32]
 80040b2:	2a00      	cmp	r2, #0
 80040b4:	f000 80d7 	beq.w	8004266 <_dtoa_r+0x8b6>
 80040b8:	9a06      	ldr	r2, [sp, #24]
 80040ba:	2a01      	cmp	r2, #1
 80040bc:	f300 80ba 	bgt.w	8004234 <_dtoa_r+0x884>
 80040c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040c2:	2a00      	cmp	r2, #0
 80040c4:	f000 80b2 	beq.w	800422c <_dtoa_r+0x87c>
 80040c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80040cc:	9e07      	ldr	r6, [sp, #28]
 80040ce:	9d04      	ldr	r5, [sp, #16]
 80040d0:	9a04      	ldr	r2, [sp, #16]
 80040d2:	441a      	add	r2, r3
 80040d4:	9204      	str	r2, [sp, #16]
 80040d6:	9a05      	ldr	r2, [sp, #20]
 80040d8:	2101      	movs	r1, #1
 80040da:	441a      	add	r2, r3
 80040dc:	4620      	mov	r0, r4
 80040de:	9205      	str	r2, [sp, #20]
 80040e0:	f000 fd78 	bl	8004bd4 <__i2b>
 80040e4:	4607      	mov	r7, r0
 80040e6:	2d00      	cmp	r5, #0
 80040e8:	dd0c      	ble.n	8004104 <_dtoa_r+0x754>
 80040ea:	9b05      	ldr	r3, [sp, #20]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	dd09      	ble.n	8004104 <_dtoa_r+0x754>
 80040f0:	42ab      	cmp	r3, r5
 80040f2:	9a04      	ldr	r2, [sp, #16]
 80040f4:	bfa8      	it	ge
 80040f6:	462b      	movge	r3, r5
 80040f8:	1ad2      	subs	r2, r2, r3
 80040fa:	9204      	str	r2, [sp, #16]
 80040fc:	9a05      	ldr	r2, [sp, #20]
 80040fe:	1aed      	subs	r5, r5, r3
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	9305      	str	r3, [sp, #20]
 8004104:	9b07      	ldr	r3, [sp, #28]
 8004106:	b31b      	cbz	r3, 8004150 <_dtoa_r+0x7a0>
 8004108:	9b08      	ldr	r3, [sp, #32]
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 80af 	beq.w	800426e <_dtoa_r+0x8be>
 8004110:	2e00      	cmp	r6, #0
 8004112:	dd13      	ble.n	800413c <_dtoa_r+0x78c>
 8004114:	4639      	mov	r1, r7
 8004116:	4632      	mov	r2, r6
 8004118:	4620      	mov	r0, r4
 800411a:	f000 fe1b 	bl	8004d54 <__pow5mult>
 800411e:	ee18 2a10 	vmov	r2, s16
 8004122:	4601      	mov	r1, r0
 8004124:	4607      	mov	r7, r0
 8004126:	4620      	mov	r0, r4
 8004128:	f000 fd6a 	bl	8004c00 <__multiply>
 800412c:	ee18 1a10 	vmov	r1, s16
 8004130:	4680      	mov	r8, r0
 8004132:	4620      	mov	r0, r4
 8004134:	f000 fc96 	bl	8004a64 <_Bfree>
 8004138:	ee08 8a10 	vmov	s16, r8
 800413c:	9b07      	ldr	r3, [sp, #28]
 800413e:	1b9a      	subs	r2, r3, r6
 8004140:	d006      	beq.n	8004150 <_dtoa_r+0x7a0>
 8004142:	ee18 1a10 	vmov	r1, s16
 8004146:	4620      	mov	r0, r4
 8004148:	f000 fe04 	bl	8004d54 <__pow5mult>
 800414c:	ee08 0a10 	vmov	s16, r0
 8004150:	2101      	movs	r1, #1
 8004152:	4620      	mov	r0, r4
 8004154:	f000 fd3e 	bl	8004bd4 <__i2b>
 8004158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800415a:	2b00      	cmp	r3, #0
 800415c:	4606      	mov	r6, r0
 800415e:	f340 8088 	ble.w	8004272 <_dtoa_r+0x8c2>
 8004162:	461a      	mov	r2, r3
 8004164:	4601      	mov	r1, r0
 8004166:	4620      	mov	r0, r4
 8004168:	f000 fdf4 	bl	8004d54 <__pow5mult>
 800416c:	9b06      	ldr	r3, [sp, #24]
 800416e:	2b01      	cmp	r3, #1
 8004170:	4606      	mov	r6, r0
 8004172:	f340 8081 	ble.w	8004278 <_dtoa_r+0x8c8>
 8004176:	f04f 0800 	mov.w	r8, #0
 800417a:	6933      	ldr	r3, [r6, #16]
 800417c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004180:	6918      	ldr	r0, [r3, #16]
 8004182:	f000 fcd7 	bl	8004b34 <__hi0bits>
 8004186:	f1c0 0020 	rsb	r0, r0, #32
 800418a:	9b05      	ldr	r3, [sp, #20]
 800418c:	4418      	add	r0, r3
 800418e:	f010 001f 	ands.w	r0, r0, #31
 8004192:	f000 8092 	beq.w	80042ba <_dtoa_r+0x90a>
 8004196:	f1c0 0320 	rsb	r3, r0, #32
 800419a:	2b04      	cmp	r3, #4
 800419c:	f340 808a 	ble.w	80042b4 <_dtoa_r+0x904>
 80041a0:	f1c0 001c 	rsb	r0, r0, #28
 80041a4:	9b04      	ldr	r3, [sp, #16]
 80041a6:	4403      	add	r3, r0
 80041a8:	9304      	str	r3, [sp, #16]
 80041aa:	9b05      	ldr	r3, [sp, #20]
 80041ac:	4403      	add	r3, r0
 80041ae:	4405      	add	r5, r0
 80041b0:	9305      	str	r3, [sp, #20]
 80041b2:	9b04      	ldr	r3, [sp, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	dd07      	ble.n	80041c8 <_dtoa_r+0x818>
 80041b8:	ee18 1a10 	vmov	r1, s16
 80041bc:	461a      	mov	r2, r3
 80041be:	4620      	mov	r0, r4
 80041c0:	f000 fe22 	bl	8004e08 <__lshift>
 80041c4:	ee08 0a10 	vmov	s16, r0
 80041c8:	9b05      	ldr	r3, [sp, #20]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	dd05      	ble.n	80041da <_dtoa_r+0x82a>
 80041ce:	4631      	mov	r1, r6
 80041d0:	461a      	mov	r2, r3
 80041d2:	4620      	mov	r0, r4
 80041d4:	f000 fe18 	bl	8004e08 <__lshift>
 80041d8:	4606      	mov	r6, r0
 80041da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d06e      	beq.n	80042be <_dtoa_r+0x90e>
 80041e0:	ee18 0a10 	vmov	r0, s16
 80041e4:	4631      	mov	r1, r6
 80041e6:	f000 fe7f 	bl	8004ee8 <__mcmp>
 80041ea:	2800      	cmp	r0, #0
 80041ec:	da67      	bge.n	80042be <_dtoa_r+0x90e>
 80041ee:	9b00      	ldr	r3, [sp, #0]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	ee18 1a10 	vmov	r1, s16
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	220a      	movs	r2, #10
 80041fa:	2300      	movs	r3, #0
 80041fc:	4620      	mov	r0, r4
 80041fe:	f000 fc53 	bl	8004aa8 <__multadd>
 8004202:	9b08      	ldr	r3, [sp, #32]
 8004204:	ee08 0a10 	vmov	s16, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 81b1 	beq.w	8004570 <_dtoa_r+0xbc0>
 800420e:	2300      	movs	r3, #0
 8004210:	4639      	mov	r1, r7
 8004212:	220a      	movs	r2, #10
 8004214:	4620      	mov	r0, r4
 8004216:	f000 fc47 	bl	8004aa8 <__multadd>
 800421a:	9b02      	ldr	r3, [sp, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	4607      	mov	r7, r0
 8004220:	f300 808e 	bgt.w	8004340 <_dtoa_r+0x990>
 8004224:	9b06      	ldr	r3, [sp, #24]
 8004226:	2b02      	cmp	r3, #2
 8004228:	dc51      	bgt.n	80042ce <_dtoa_r+0x91e>
 800422a:	e089      	b.n	8004340 <_dtoa_r+0x990>
 800422c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800422e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004232:	e74b      	b.n	80040cc <_dtoa_r+0x71c>
 8004234:	9b03      	ldr	r3, [sp, #12]
 8004236:	1e5e      	subs	r6, r3, #1
 8004238:	9b07      	ldr	r3, [sp, #28]
 800423a:	42b3      	cmp	r3, r6
 800423c:	bfbf      	itttt	lt
 800423e:	9b07      	ldrlt	r3, [sp, #28]
 8004240:	9607      	strlt	r6, [sp, #28]
 8004242:	1af2      	sublt	r2, r6, r3
 8004244:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004246:	bfb6      	itet	lt
 8004248:	189b      	addlt	r3, r3, r2
 800424a:	1b9e      	subge	r6, r3, r6
 800424c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800424e:	9b03      	ldr	r3, [sp, #12]
 8004250:	bfb8      	it	lt
 8004252:	2600      	movlt	r6, #0
 8004254:	2b00      	cmp	r3, #0
 8004256:	bfb7      	itett	lt
 8004258:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800425c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004260:	1a9d      	sublt	r5, r3, r2
 8004262:	2300      	movlt	r3, #0
 8004264:	e734      	b.n	80040d0 <_dtoa_r+0x720>
 8004266:	9e07      	ldr	r6, [sp, #28]
 8004268:	9d04      	ldr	r5, [sp, #16]
 800426a:	9f08      	ldr	r7, [sp, #32]
 800426c:	e73b      	b.n	80040e6 <_dtoa_r+0x736>
 800426e:	9a07      	ldr	r2, [sp, #28]
 8004270:	e767      	b.n	8004142 <_dtoa_r+0x792>
 8004272:	9b06      	ldr	r3, [sp, #24]
 8004274:	2b01      	cmp	r3, #1
 8004276:	dc18      	bgt.n	80042aa <_dtoa_r+0x8fa>
 8004278:	f1ba 0f00 	cmp.w	sl, #0
 800427c:	d115      	bne.n	80042aa <_dtoa_r+0x8fa>
 800427e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004282:	b993      	cbnz	r3, 80042aa <_dtoa_r+0x8fa>
 8004284:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004288:	0d1b      	lsrs	r3, r3, #20
 800428a:	051b      	lsls	r3, r3, #20
 800428c:	b183      	cbz	r3, 80042b0 <_dtoa_r+0x900>
 800428e:	9b04      	ldr	r3, [sp, #16]
 8004290:	3301      	adds	r3, #1
 8004292:	9304      	str	r3, [sp, #16]
 8004294:	9b05      	ldr	r3, [sp, #20]
 8004296:	3301      	adds	r3, #1
 8004298:	9305      	str	r3, [sp, #20]
 800429a:	f04f 0801 	mov.w	r8, #1
 800429e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f47f af6a 	bne.w	800417a <_dtoa_r+0x7ca>
 80042a6:	2001      	movs	r0, #1
 80042a8:	e76f      	b.n	800418a <_dtoa_r+0x7da>
 80042aa:	f04f 0800 	mov.w	r8, #0
 80042ae:	e7f6      	b.n	800429e <_dtoa_r+0x8ee>
 80042b0:	4698      	mov	r8, r3
 80042b2:	e7f4      	b.n	800429e <_dtoa_r+0x8ee>
 80042b4:	f43f af7d 	beq.w	80041b2 <_dtoa_r+0x802>
 80042b8:	4618      	mov	r0, r3
 80042ba:	301c      	adds	r0, #28
 80042bc:	e772      	b.n	80041a4 <_dtoa_r+0x7f4>
 80042be:	9b03      	ldr	r3, [sp, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	dc37      	bgt.n	8004334 <_dtoa_r+0x984>
 80042c4:	9b06      	ldr	r3, [sp, #24]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	dd34      	ble.n	8004334 <_dtoa_r+0x984>
 80042ca:	9b03      	ldr	r3, [sp, #12]
 80042cc:	9302      	str	r3, [sp, #8]
 80042ce:	9b02      	ldr	r3, [sp, #8]
 80042d0:	b96b      	cbnz	r3, 80042ee <_dtoa_r+0x93e>
 80042d2:	4631      	mov	r1, r6
 80042d4:	2205      	movs	r2, #5
 80042d6:	4620      	mov	r0, r4
 80042d8:	f000 fbe6 	bl	8004aa8 <__multadd>
 80042dc:	4601      	mov	r1, r0
 80042de:	4606      	mov	r6, r0
 80042e0:	ee18 0a10 	vmov	r0, s16
 80042e4:	f000 fe00 	bl	8004ee8 <__mcmp>
 80042e8:	2800      	cmp	r0, #0
 80042ea:	f73f adbb 	bgt.w	8003e64 <_dtoa_r+0x4b4>
 80042ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042f0:	9d01      	ldr	r5, [sp, #4]
 80042f2:	43db      	mvns	r3, r3
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	f04f 0800 	mov.w	r8, #0
 80042fa:	4631      	mov	r1, r6
 80042fc:	4620      	mov	r0, r4
 80042fe:	f000 fbb1 	bl	8004a64 <_Bfree>
 8004302:	2f00      	cmp	r7, #0
 8004304:	f43f aea4 	beq.w	8004050 <_dtoa_r+0x6a0>
 8004308:	f1b8 0f00 	cmp.w	r8, #0
 800430c:	d005      	beq.n	800431a <_dtoa_r+0x96a>
 800430e:	45b8      	cmp	r8, r7
 8004310:	d003      	beq.n	800431a <_dtoa_r+0x96a>
 8004312:	4641      	mov	r1, r8
 8004314:	4620      	mov	r0, r4
 8004316:	f000 fba5 	bl	8004a64 <_Bfree>
 800431a:	4639      	mov	r1, r7
 800431c:	4620      	mov	r0, r4
 800431e:	f000 fba1 	bl	8004a64 <_Bfree>
 8004322:	e695      	b.n	8004050 <_dtoa_r+0x6a0>
 8004324:	2600      	movs	r6, #0
 8004326:	4637      	mov	r7, r6
 8004328:	e7e1      	b.n	80042ee <_dtoa_r+0x93e>
 800432a:	9700      	str	r7, [sp, #0]
 800432c:	4637      	mov	r7, r6
 800432e:	e599      	b.n	8003e64 <_dtoa_r+0x4b4>
 8004330:	40240000 	.word	0x40240000
 8004334:	9b08      	ldr	r3, [sp, #32]
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 80ca 	beq.w	80044d0 <_dtoa_r+0xb20>
 800433c:	9b03      	ldr	r3, [sp, #12]
 800433e:	9302      	str	r3, [sp, #8]
 8004340:	2d00      	cmp	r5, #0
 8004342:	dd05      	ble.n	8004350 <_dtoa_r+0x9a0>
 8004344:	4639      	mov	r1, r7
 8004346:	462a      	mov	r2, r5
 8004348:	4620      	mov	r0, r4
 800434a:	f000 fd5d 	bl	8004e08 <__lshift>
 800434e:	4607      	mov	r7, r0
 8004350:	f1b8 0f00 	cmp.w	r8, #0
 8004354:	d05b      	beq.n	800440e <_dtoa_r+0xa5e>
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	4620      	mov	r0, r4
 800435a:	f000 fb43 	bl	80049e4 <_Balloc>
 800435e:	4605      	mov	r5, r0
 8004360:	b928      	cbnz	r0, 800436e <_dtoa_r+0x9be>
 8004362:	4b87      	ldr	r3, [pc, #540]	; (8004580 <_dtoa_r+0xbd0>)
 8004364:	4602      	mov	r2, r0
 8004366:	f240 21ea 	movw	r1, #746	; 0x2ea
 800436a:	f7ff bb3b 	b.w	80039e4 <_dtoa_r+0x34>
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	3202      	adds	r2, #2
 8004372:	0092      	lsls	r2, r2, #2
 8004374:	f107 010c 	add.w	r1, r7, #12
 8004378:	300c      	adds	r0, #12
 800437a:	f7fe fd1d 	bl	8002db8 <memcpy>
 800437e:	2201      	movs	r2, #1
 8004380:	4629      	mov	r1, r5
 8004382:	4620      	mov	r0, r4
 8004384:	f000 fd40 	bl	8004e08 <__lshift>
 8004388:	9b01      	ldr	r3, [sp, #4]
 800438a:	f103 0901 	add.w	r9, r3, #1
 800438e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004392:	4413      	add	r3, r2
 8004394:	9305      	str	r3, [sp, #20]
 8004396:	f00a 0301 	and.w	r3, sl, #1
 800439a:	46b8      	mov	r8, r7
 800439c:	9304      	str	r3, [sp, #16]
 800439e:	4607      	mov	r7, r0
 80043a0:	4631      	mov	r1, r6
 80043a2:	ee18 0a10 	vmov	r0, s16
 80043a6:	f7ff fa75 	bl	8003894 <quorem>
 80043aa:	4641      	mov	r1, r8
 80043ac:	9002      	str	r0, [sp, #8]
 80043ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80043b2:	ee18 0a10 	vmov	r0, s16
 80043b6:	f000 fd97 	bl	8004ee8 <__mcmp>
 80043ba:	463a      	mov	r2, r7
 80043bc:	9003      	str	r0, [sp, #12]
 80043be:	4631      	mov	r1, r6
 80043c0:	4620      	mov	r0, r4
 80043c2:	f000 fdad 	bl	8004f20 <__mdiff>
 80043c6:	68c2      	ldr	r2, [r0, #12]
 80043c8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80043cc:	4605      	mov	r5, r0
 80043ce:	bb02      	cbnz	r2, 8004412 <_dtoa_r+0xa62>
 80043d0:	4601      	mov	r1, r0
 80043d2:	ee18 0a10 	vmov	r0, s16
 80043d6:	f000 fd87 	bl	8004ee8 <__mcmp>
 80043da:	4602      	mov	r2, r0
 80043dc:	4629      	mov	r1, r5
 80043de:	4620      	mov	r0, r4
 80043e0:	9207      	str	r2, [sp, #28]
 80043e2:	f000 fb3f 	bl	8004a64 <_Bfree>
 80043e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80043ea:	ea43 0102 	orr.w	r1, r3, r2
 80043ee:	9b04      	ldr	r3, [sp, #16]
 80043f0:	430b      	orrs	r3, r1
 80043f2:	464d      	mov	r5, r9
 80043f4:	d10f      	bne.n	8004416 <_dtoa_r+0xa66>
 80043f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80043fa:	d02a      	beq.n	8004452 <_dtoa_r+0xaa2>
 80043fc:	9b03      	ldr	r3, [sp, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	dd02      	ble.n	8004408 <_dtoa_r+0xa58>
 8004402:	9b02      	ldr	r3, [sp, #8]
 8004404:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004408:	f88b a000 	strb.w	sl, [fp]
 800440c:	e775      	b.n	80042fa <_dtoa_r+0x94a>
 800440e:	4638      	mov	r0, r7
 8004410:	e7ba      	b.n	8004388 <_dtoa_r+0x9d8>
 8004412:	2201      	movs	r2, #1
 8004414:	e7e2      	b.n	80043dc <_dtoa_r+0xa2c>
 8004416:	9b03      	ldr	r3, [sp, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	db04      	blt.n	8004426 <_dtoa_r+0xa76>
 800441c:	9906      	ldr	r1, [sp, #24]
 800441e:	430b      	orrs	r3, r1
 8004420:	9904      	ldr	r1, [sp, #16]
 8004422:	430b      	orrs	r3, r1
 8004424:	d122      	bne.n	800446c <_dtoa_r+0xabc>
 8004426:	2a00      	cmp	r2, #0
 8004428:	ddee      	ble.n	8004408 <_dtoa_r+0xa58>
 800442a:	ee18 1a10 	vmov	r1, s16
 800442e:	2201      	movs	r2, #1
 8004430:	4620      	mov	r0, r4
 8004432:	f000 fce9 	bl	8004e08 <__lshift>
 8004436:	4631      	mov	r1, r6
 8004438:	ee08 0a10 	vmov	s16, r0
 800443c:	f000 fd54 	bl	8004ee8 <__mcmp>
 8004440:	2800      	cmp	r0, #0
 8004442:	dc03      	bgt.n	800444c <_dtoa_r+0xa9c>
 8004444:	d1e0      	bne.n	8004408 <_dtoa_r+0xa58>
 8004446:	f01a 0f01 	tst.w	sl, #1
 800444a:	d0dd      	beq.n	8004408 <_dtoa_r+0xa58>
 800444c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004450:	d1d7      	bne.n	8004402 <_dtoa_r+0xa52>
 8004452:	2339      	movs	r3, #57	; 0x39
 8004454:	f88b 3000 	strb.w	r3, [fp]
 8004458:	462b      	mov	r3, r5
 800445a:	461d      	mov	r5, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004462:	2a39      	cmp	r2, #57	; 0x39
 8004464:	d071      	beq.n	800454a <_dtoa_r+0xb9a>
 8004466:	3201      	adds	r2, #1
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	e746      	b.n	80042fa <_dtoa_r+0x94a>
 800446c:	2a00      	cmp	r2, #0
 800446e:	dd07      	ble.n	8004480 <_dtoa_r+0xad0>
 8004470:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004474:	d0ed      	beq.n	8004452 <_dtoa_r+0xaa2>
 8004476:	f10a 0301 	add.w	r3, sl, #1
 800447a:	f88b 3000 	strb.w	r3, [fp]
 800447e:	e73c      	b.n	80042fa <_dtoa_r+0x94a>
 8004480:	9b05      	ldr	r3, [sp, #20]
 8004482:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004486:	4599      	cmp	r9, r3
 8004488:	d047      	beq.n	800451a <_dtoa_r+0xb6a>
 800448a:	ee18 1a10 	vmov	r1, s16
 800448e:	2300      	movs	r3, #0
 8004490:	220a      	movs	r2, #10
 8004492:	4620      	mov	r0, r4
 8004494:	f000 fb08 	bl	8004aa8 <__multadd>
 8004498:	45b8      	cmp	r8, r7
 800449a:	ee08 0a10 	vmov	s16, r0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	f04f 020a 	mov.w	r2, #10
 80044a6:	4641      	mov	r1, r8
 80044a8:	4620      	mov	r0, r4
 80044aa:	d106      	bne.n	80044ba <_dtoa_r+0xb0a>
 80044ac:	f000 fafc 	bl	8004aa8 <__multadd>
 80044b0:	4680      	mov	r8, r0
 80044b2:	4607      	mov	r7, r0
 80044b4:	f109 0901 	add.w	r9, r9, #1
 80044b8:	e772      	b.n	80043a0 <_dtoa_r+0x9f0>
 80044ba:	f000 faf5 	bl	8004aa8 <__multadd>
 80044be:	4639      	mov	r1, r7
 80044c0:	4680      	mov	r8, r0
 80044c2:	2300      	movs	r3, #0
 80044c4:	220a      	movs	r2, #10
 80044c6:	4620      	mov	r0, r4
 80044c8:	f000 faee 	bl	8004aa8 <__multadd>
 80044cc:	4607      	mov	r7, r0
 80044ce:	e7f1      	b.n	80044b4 <_dtoa_r+0xb04>
 80044d0:	9b03      	ldr	r3, [sp, #12]
 80044d2:	9302      	str	r3, [sp, #8]
 80044d4:	9d01      	ldr	r5, [sp, #4]
 80044d6:	ee18 0a10 	vmov	r0, s16
 80044da:	4631      	mov	r1, r6
 80044dc:	f7ff f9da 	bl	8003894 <quorem>
 80044e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80044e4:	9b01      	ldr	r3, [sp, #4]
 80044e6:	f805 ab01 	strb.w	sl, [r5], #1
 80044ea:	1aea      	subs	r2, r5, r3
 80044ec:	9b02      	ldr	r3, [sp, #8]
 80044ee:	4293      	cmp	r3, r2
 80044f0:	dd09      	ble.n	8004506 <_dtoa_r+0xb56>
 80044f2:	ee18 1a10 	vmov	r1, s16
 80044f6:	2300      	movs	r3, #0
 80044f8:	220a      	movs	r2, #10
 80044fa:	4620      	mov	r0, r4
 80044fc:	f000 fad4 	bl	8004aa8 <__multadd>
 8004500:	ee08 0a10 	vmov	s16, r0
 8004504:	e7e7      	b.n	80044d6 <_dtoa_r+0xb26>
 8004506:	9b02      	ldr	r3, [sp, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	bfc8      	it	gt
 800450c:	461d      	movgt	r5, r3
 800450e:	9b01      	ldr	r3, [sp, #4]
 8004510:	bfd8      	it	le
 8004512:	2501      	movle	r5, #1
 8004514:	441d      	add	r5, r3
 8004516:	f04f 0800 	mov.w	r8, #0
 800451a:	ee18 1a10 	vmov	r1, s16
 800451e:	2201      	movs	r2, #1
 8004520:	4620      	mov	r0, r4
 8004522:	f000 fc71 	bl	8004e08 <__lshift>
 8004526:	4631      	mov	r1, r6
 8004528:	ee08 0a10 	vmov	s16, r0
 800452c:	f000 fcdc 	bl	8004ee8 <__mcmp>
 8004530:	2800      	cmp	r0, #0
 8004532:	dc91      	bgt.n	8004458 <_dtoa_r+0xaa8>
 8004534:	d102      	bne.n	800453c <_dtoa_r+0xb8c>
 8004536:	f01a 0f01 	tst.w	sl, #1
 800453a:	d18d      	bne.n	8004458 <_dtoa_r+0xaa8>
 800453c:	462b      	mov	r3, r5
 800453e:	461d      	mov	r5, r3
 8004540:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004544:	2a30      	cmp	r2, #48	; 0x30
 8004546:	d0fa      	beq.n	800453e <_dtoa_r+0xb8e>
 8004548:	e6d7      	b.n	80042fa <_dtoa_r+0x94a>
 800454a:	9a01      	ldr	r2, [sp, #4]
 800454c:	429a      	cmp	r2, r3
 800454e:	d184      	bne.n	800445a <_dtoa_r+0xaaa>
 8004550:	9b00      	ldr	r3, [sp, #0]
 8004552:	3301      	adds	r3, #1
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	2331      	movs	r3, #49	; 0x31
 8004558:	7013      	strb	r3, [r2, #0]
 800455a:	e6ce      	b.n	80042fa <_dtoa_r+0x94a>
 800455c:	4b09      	ldr	r3, [pc, #36]	; (8004584 <_dtoa_r+0xbd4>)
 800455e:	f7ff ba95 	b.w	8003a8c <_dtoa_r+0xdc>
 8004562:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004564:	2b00      	cmp	r3, #0
 8004566:	f47f aa6e 	bne.w	8003a46 <_dtoa_r+0x96>
 800456a:	4b07      	ldr	r3, [pc, #28]	; (8004588 <_dtoa_r+0xbd8>)
 800456c:	f7ff ba8e 	b.w	8003a8c <_dtoa_r+0xdc>
 8004570:	9b02      	ldr	r3, [sp, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	dcae      	bgt.n	80044d4 <_dtoa_r+0xb24>
 8004576:	9b06      	ldr	r3, [sp, #24]
 8004578:	2b02      	cmp	r3, #2
 800457a:	f73f aea8 	bgt.w	80042ce <_dtoa_r+0x91e>
 800457e:	e7a9      	b.n	80044d4 <_dtoa_r+0xb24>
 8004580:	08005fd7 	.word	0x08005fd7
 8004584:	08005f34 	.word	0x08005f34
 8004588:	08005f58 	.word	0x08005f58

0800458c <__sflush_r>:
 800458c:	898a      	ldrh	r2, [r1, #12]
 800458e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004592:	4605      	mov	r5, r0
 8004594:	0710      	lsls	r0, r2, #28
 8004596:	460c      	mov	r4, r1
 8004598:	d458      	bmi.n	800464c <__sflush_r+0xc0>
 800459a:	684b      	ldr	r3, [r1, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	dc05      	bgt.n	80045ac <__sflush_r+0x20>
 80045a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	dc02      	bgt.n	80045ac <__sflush_r+0x20>
 80045a6:	2000      	movs	r0, #0
 80045a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045ae:	2e00      	cmp	r6, #0
 80045b0:	d0f9      	beq.n	80045a6 <__sflush_r+0x1a>
 80045b2:	2300      	movs	r3, #0
 80045b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045b8:	682f      	ldr	r7, [r5, #0]
 80045ba:	602b      	str	r3, [r5, #0]
 80045bc:	d032      	beq.n	8004624 <__sflush_r+0x98>
 80045be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045c0:	89a3      	ldrh	r3, [r4, #12]
 80045c2:	075a      	lsls	r2, r3, #29
 80045c4:	d505      	bpl.n	80045d2 <__sflush_r+0x46>
 80045c6:	6863      	ldr	r3, [r4, #4]
 80045c8:	1ac0      	subs	r0, r0, r3
 80045ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045cc:	b10b      	cbz	r3, 80045d2 <__sflush_r+0x46>
 80045ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045d0:	1ac0      	subs	r0, r0, r3
 80045d2:	2300      	movs	r3, #0
 80045d4:	4602      	mov	r2, r0
 80045d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045d8:	6a21      	ldr	r1, [r4, #32]
 80045da:	4628      	mov	r0, r5
 80045dc:	47b0      	blx	r6
 80045de:	1c43      	adds	r3, r0, #1
 80045e0:	89a3      	ldrh	r3, [r4, #12]
 80045e2:	d106      	bne.n	80045f2 <__sflush_r+0x66>
 80045e4:	6829      	ldr	r1, [r5, #0]
 80045e6:	291d      	cmp	r1, #29
 80045e8:	d82c      	bhi.n	8004644 <__sflush_r+0xb8>
 80045ea:	4a2a      	ldr	r2, [pc, #168]	; (8004694 <__sflush_r+0x108>)
 80045ec:	40ca      	lsrs	r2, r1
 80045ee:	07d6      	lsls	r6, r2, #31
 80045f0:	d528      	bpl.n	8004644 <__sflush_r+0xb8>
 80045f2:	2200      	movs	r2, #0
 80045f4:	6062      	str	r2, [r4, #4]
 80045f6:	04d9      	lsls	r1, r3, #19
 80045f8:	6922      	ldr	r2, [r4, #16]
 80045fa:	6022      	str	r2, [r4, #0]
 80045fc:	d504      	bpl.n	8004608 <__sflush_r+0x7c>
 80045fe:	1c42      	adds	r2, r0, #1
 8004600:	d101      	bne.n	8004606 <__sflush_r+0x7a>
 8004602:	682b      	ldr	r3, [r5, #0]
 8004604:	b903      	cbnz	r3, 8004608 <__sflush_r+0x7c>
 8004606:	6560      	str	r0, [r4, #84]	; 0x54
 8004608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800460a:	602f      	str	r7, [r5, #0]
 800460c:	2900      	cmp	r1, #0
 800460e:	d0ca      	beq.n	80045a6 <__sflush_r+0x1a>
 8004610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004614:	4299      	cmp	r1, r3
 8004616:	d002      	beq.n	800461e <__sflush_r+0x92>
 8004618:	4628      	mov	r0, r5
 800461a:	f000 fd7d 	bl	8005118 <_free_r>
 800461e:	2000      	movs	r0, #0
 8004620:	6360      	str	r0, [r4, #52]	; 0x34
 8004622:	e7c1      	b.n	80045a8 <__sflush_r+0x1c>
 8004624:	6a21      	ldr	r1, [r4, #32]
 8004626:	2301      	movs	r3, #1
 8004628:	4628      	mov	r0, r5
 800462a:	47b0      	blx	r6
 800462c:	1c41      	adds	r1, r0, #1
 800462e:	d1c7      	bne.n	80045c0 <__sflush_r+0x34>
 8004630:	682b      	ldr	r3, [r5, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0c4      	beq.n	80045c0 <__sflush_r+0x34>
 8004636:	2b1d      	cmp	r3, #29
 8004638:	d001      	beq.n	800463e <__sflush_r+0xb2>
 800463a:	2b16      	cmp	r3, #22
 800463c:	d101      	bne.n	8004642 <__sflush_r+0xb6>
 800463e:	602f      	str	r7, [r5, #0]
 8004640:	e7b1      	b.n	80045a6 <__sflush_r+0x1a>
 8004642:	89a3      	ldrh	r3, [r4, #12]
 8004644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004648:	81a3      	strh	r3, [r4, #12]
 800464a:	e7ad      	b.n	80045a8 <__sflush_r+0x1c>
 800464c:	690f      	ldr	r7, [r1, #16]
 800464e:	2f00      	cmp	r7, #0
 8004650:	d0a9      	beq.n	80045a6 <__sflush_r+0x1a>
 8004652:	0793      	lsls	r3, r2, #30
 8004654:	680e      	ldr	r6, [r1, #0]
 8004656:	bf08      	it	eq
 8004658:	694b      	ldreq	r3, [r1, #20]
 800465a:	600f      	str	r7, [r1, #0]
 800465c:	bf18      	it	ne
 800465e:	2300      	movne	r3, #0
 8004660:	eba6 0807 	sub.w	r8, r6, r7
 8004664:	608b      	str	r3, [r1, #8]
 8004666:	f1b8 0f00 	cmp.w	r8, #0
 800466a:	dd9c      	ble.n	80045a6 <__sflush_r+0x1a>
 800466c:	6a21      	ldr	r1, [r4, #32]
 800466e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004670:	4643      	mov	r3, r8
 8004672:	463a      	mov	r2, r7
 8004674:	4628      	mov	r0, r5
 8004676:	47b0      	blx	r6
 8004678:	2800      	cmp	r0, #0
 800467a:	dc06      	bgt.n	800468a <__sflush_r+0xfe>
 800467c:	89a3      	ldrh	r3, [r4, #12]
 800467e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004682:	81a3      	strh	r3, [r4, #12]
 8004684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004688:	e78e      	b.n	80045a8 <__sflush_r+0x1c>
 800468a:	4407      	add	r7, r0
 800468c:	eba8 0800 	sub.w	r8, r8, r0
 8004690:	e7e9      	b.n	8004666 <__sflush_r+0xda>
 8004692:	bf00      	nop
 8004694:	20400001 	.word	0x20400001

08004698 <_fflush_r>:
 8004698:	b538      	push	{r3, r4, r5, lr}
 800469a:	690b      	ldr	r3, [r1, #16]
 800469c:	4605      	mov	r5, r0
 800469e:	460c      	mov	r4, r1
 80046a0:	b913      	cbnz	r3, 80046a8 <_fflush_r+0x10>
 80046a2:	2500      	movs	r5, #0
 80046a4:	4628      	mov	r0, r5
 80046a6:	bd38      	pop	{r3, r4, r5, pc}
 80046a8:	b118      	cbz	r0, 80046b2 <_fflush_r+0x1a>
 80046aa:	6983      	ldr	r3, [r0, #24]
 80046ac:	b90b      	cbnz	r3, 80046b2 <_fflush_r+0x1a>
 80046ae:	f000 f887 	bl	80047c0 <__sinit>
 80046b2:	4b14      	ldr	r3, [pc, #80]	; (8004704 <_fflush_r+0x6c>)
 80046b4:	429c      	cmp	r4, r3
 80046b6:	d11b      	bne.n	80046f0 <_fflush_r+0x58>
 80046b8:	686c      	ldr	r4, [r5, #4]
 80046ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0ef      	beq.n	80046a2 <_fflush_r+0xa>
 80046c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80046c4:	07d0      	lsls	r0, r2, #31
 80046c6:	d404      	bmi.n	80046d2 <_fflush_r+0x3a>
 80046c8:	0599      	lsls	r1, r3, #22
 80046ca:	d402      	bmi.n	80046d2 <_fflush_r+0x3a>
 80046cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046ce:	f000 f91a 	bl	8004906 <__retarget_lock_acquire_recursive>
 80046d2:	4628      	mov	r0, r5
 80046d4:	4621      	mov	r1, r4
 80046d6:	f7ff ff59 	bl	800458c <__sflush_r>
 80046da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046dc:	07da      	lsls	r2, r3, #31
 80046de:	4605      	mov	r5, r0
 80046e0:	d4e0      	bmi.n	80046a4 <_fflush_r+0xc>
 80046e2:	89a3      	ldrh	r3, [r4, #12]
 80046e4:	059b      	lsls	r3, r3, #22
 80046e6:	d4dd      	bmi.n	80046a4 <_fflush_r+0xc>
 80046e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046ea:	f000 f90d 	bl	8004908 <__retarget_lock_release_recursive>
 80046ee:	e7d9      	b.n	80046a4 <_fflush_r+0xc>
 80046f0:	4b05      	ldr	r3, [pc, #20]	; (8004708 <_fflush_r+0x70>)
 80046f2:	429c      	cmp	r4, r3
 80046f4:	d101      	bne.n	80046fa <_fflush_r+0x62>
 80046f6:	68ac      	ldr	r4, [r5, #8]
 80046f8:	e7df      	b.n	80046ba <_fflush_r+0x22>
 80046fa:	4b04      	ldr	r3, [pc, #16]	; (800470c <_fflush_r+0x74>)
 80046fc:	429c      	cmp	r4, r3
 80046fe:	bf08      	it	eq
 8004700:	68ec      	ldreq	r4, [r5, #12]
 8004702:	e7da      	b.n	80046ba <_fflush_r+0x22>
 8004704:	08006008 	.word	0x08006008
 8004708:	08006028 	.word	0x08006028
 800470c:	08005fe8 	.word	0x08005fe8

08004710 <std>:
 8004710:	2300      	movs	r3, #0
 8004712:	b510      	push	{r4, lr}
 8004714:	4604      	mov	r4, r0
 8004716:	e9c0 3300 	strd	r3, r3, [r0]
 800471a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800471e:	6083      	str	r3, [r0, #8]
 8004720:	8181      	strh	r1, [r0, #12]
 8004722:	6643      	str	r3, [r0, #100]	; 0x64
 8004724:	81c2      	strh	r2, [r0, #14]
 8004726:	6183      	str	r3, [r0, #24]
 8004728:	4619      	mov	r1, r3
 800472a:	2208      	movs	r2, #8
 800472c:	305c      	adds	r0, #92	; 0x5c
 800472e:	f7fe fb51 	bl	8002dd4 <memset>
 8004732:	4b05      	ldr	r3, [pc, #20]	; (8004748 <std+0x38>)
 8004734:	6263      	str	r3, [r4, #36]	; 0x24
 8004736:	4b05      	ldr	r3, [pc, #20]	; (800474c <std+0x3c>)
 8004738:	62a3      	str	r3, [r4, #40]	; 0x28
 800473a:	4b05      	ldr	r3, [pc, #20]	; (8004750 <std+0x40>)
 800473c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800473e:	4b05      	ldr	r3, [pc, #20]	; (8004754 <std+0x44>)
 8004740:	6224      	str	r4, [r4, #32]
 8004742:	6323      	str	r3, [r4, #48]	; 0x30
 8004744:	bd10      	pop	{r4, pc}
 8004746:	bf00      	nop
 8004748:	080055b1 	.word	0x080055b1
 800474c:	080055d3 	.word	0x080055d3
 8004750:	0800560b 	.word	0x0800560b
 8004754:	0800562f 	.word	0x0800562f

08004758 <_cleanup_r>:
 8004758:	4901      	ldr	r1, [pc, #4]	; (8004760 <_cleanup_r+0x8>)
 800475a:	f000 b8af 	b.w	80048bc <_fwalk_reent>
 800475e:	bf00      	nop
 8004760:	08004699 	.word	0x08004699

08004764 <__sfmoreglue>:
 8004764:	b570      	push	{r4, r5, r6, lr}
 8004766:	2268      	movs	r2, #104	; 0x68
 8004768:	1e4d      	subs	r5, r1, #1
 800476a:	4355      	muls	r5, r2
 800476c:	460e      	mov	r6, r1
 800476e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004772:	f000 fd3d 	bl	80051f0 <_malloc_r>
 8004776:	4604      	mov	r4, r0
 8004778:	b140      	cbz	r0, 800478c <__sfmoreglue+0x28>
 800477a:	2100      	movs	r1, #0
 800477c:	e9c0 1600 	strd	r1, r6, [r0]
 8004780:	300c      	adds	r0, #12
 8004782:	60a0      	str	r0, [r4, #8]
 8004784:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004788:	f7fe fb24 	bl	8002dd4 <memset>
 800478c:	4620      	mov	r0, r4
 800478e:	bd70      	pop	{r4, r5, r6, pc}

08004790 <__sfp_lock_acquire>:
 8004790:	4801      	ldr	r0, [pc, #4]	; (8004798 <__sfp_lock_acquire+0x8>)
 8004792:	f000 b8b8 	b.w	8004906 <__retarget_lock_acquire_recursive>
 8004796:	bf00      	nop
 8004798:	2000053d 	.word	0x2000053d

0800479c <__sfp_lock_release>:
 800479c:	4801      	ldr	r0, [pc, #4]	; (80047a4 <__sfp_lock_release+0x8>)
 800479e:	f000 b8b3 	b.w	8004908 <__retarget_lock_release_recursive>
 80047a2:	bf00      	nop
 80047a4:	2000053d 	.word	0x2000053d

080047a8 <__sinit_lock_acquire>:
 80047a8:	4801      	ldr	r0, [pc, #4]	; (80047b0 <__sinit_lock_acquire+0x8>)
 80047aa:	f000 b8ac 	b.w	8004906 <__retarget_lock_acquire_recursive>
 80047ae:	bf00      	nop
 80047b0:	2000053e 	.word	0x2000053e

080047b4 <__sinit_lock_release>:
 80047b4:	4801      	ldr	r0, [pc, #4]	; (80047bc <__sinit_lock_release+0x8>)
 80047b6:	f000 b8a7 	b.w	8004908 <__retarget_lock_release_recursive>
 80047ba:	bf00      	nop
 80047bc:	2000053e 	.word	0x2000053e

080047c0 <__sinit>:
 80047c0:	b510      	push	{r4, lr}
 80047c2:	4604      	mov	r4, r0
 80047c4:	f7ff fff0 	bl	80047a8 <__sinit_lock_acquire>
 80047c8:	69a3      	ldr	r3, [r4, #24]
 80047ca:	b11b      	cbz	r3, 80047d4 <__sinit+0x14>
 80047cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047d0:	f7ff bff0 	b.w	80047b4 <__sinit_lock_release>
 80047d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80047d8:	6523      	str	r3, [r4, #80]	; 0x50
 80047da:	4b13      	ldr	r3, [pc, #76]	; (8004828 <__sinit+0x68>)
 80047dc:	4a13      	ldr	r2, [pc, #76]	; (800482c <__sinit+0x6c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80047e2:	42a3      	cmp	r3, r4
 80047e4:	bf04      	itt	eq
 80047e6:	2301      	moveq	r3, #1
 80047e8:	61a3      	streq	r3, [r4, #24]
 80047ea:	4620      	mov	r0, r4
 80047ec:	f000 f820 	bl	8004830 <__sfp>
 80047f0:	6060      	str	r0, [r4, #4]
 80047f2:	4620      	mov	r0, r4
 80047f4:	f000 f81c 	bl	8004830 <__sfp>
 80047f8:	60a0      	str	r0, [r4, #8]
 80047fa:	4620      	mov	r0, r4
 80047fc:	f000 f818 	bl	8004830 <__sfp>
 8004800:	2200      	movs	r2, #0
 8004802:	60e0      	str	r0, [r4, #12]
 8004804:	2104      	movs	r1, #4
 8004806:	6860      	ldr	r0, [r4, #4]
 8004808:	f7ff ff82 	bl	8004710 <std>
 800480c:	68a0      	ldr	r0, [r4, #8]
 800480e:	2201      	movs	r2, #1
 8004810:	2109      	movs	r1, #9
 8004812:	f7ff ff7d 	bl	8004710 <std>
 8004816:	68e0      	ldr	r0, [r4, #12]
 8004818:	2202      	movs	r2, #2
 800481a:	2112      	movs	r1, #18
 800481c:	f7ff ff78 	bl	8004710 <std>
 8004820:	2301      	movs	r3, #1
 8004822:	61a3      	str	r3, [r4, #24]
 8004824:	e7d2      	b.n	80047cc <__sinit+0xc>
 8004826:	bf00      	nop
 8004828:	08005f20 	.word	0x08005f20
 800482c:	08004759 	.word	0x08004759

08004830 <__sfp>:
 8004830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004832:	4607      	mov	r7, r0
 8004834:	f7ff ffac 	bl	8004790 <__sfp_lock_acquire>
 8004838:	4b1e      	ldr	r3, [pc, #120]	; (80048b4 <__sfp+0x84>)
 800483a:	681e      	ldr	r6, [r3, #0]
 800483c:	69b3      	ldr	r3, [r6, #24]
 800483e:	b913      	cbnz	r3, 8004846 <__sfp+0x16>
 8004840:	4630      	mov	r0, r6
 8004842:	f7ff ffbd 	bl	80047c0 <__sinit>
 8004846:	3648      	adds	r6, #72	; 0x48
 8004848:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800484c:	3b01      	subs	r3, #1
 800484e:	d503      	bpl.n	8004858 <__sfp+0x28>
 8004850:	6833      	ldr	r3, [r6, #0]
 8004852:	b30b      	cbz	r3, 8004898 <__sfp+0x68>
 8004854:	6836      	ldr	r6, [r6, #0]
 8004856:	e7f7      	b.n	8004848 <__sfp+0x18>
 8004858:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800485c:	b9d5      	cbnz	r5, 8004894 <__sfp+0x64>
 800485e:	4b16      	ldr	r3, [pc, #88]	; (80048b8 <__sfp+0x88>)
 8004860:	60e3      	str	r3, [r4, #12]
 8004862:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004866:	6665      	str	r5, [r4, #100]	; 0x64
 8004868:	f000 f84c 	bl	8004904 <__retarget_lock_init_recursive>
 800486c:	f7ff ff96 	bl	800479c <__sfp_lock_release>
 8004870:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004874:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004878:	6025      	str	r5, [r4, #0]
 800487a:	61a5      	str	r5, [r4, #24]
 800487c:	2208      	movs	r2, #8
 800487e:	4629      	mov	r1, r5
 8004880:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004884:	f7fe faa6 	bl	8002dd4 <memset>
 8004888:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800488c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004890:	4620      	mov	r0, r4
 8004892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004894:	3468      	adds	r4, #104	; 0x68
 8004896:	e7d9      	b.n	800484c <__sfp+0x1c>
 8004898:	2104      	movs	r1, #4
 800489a:	4638      	mov	r0, r7
 800489c:	f7ff ff62 	bl	8004764 <__sfmoreglue>
 80048a0:	4604      	mov	r4, r0
 80048a2:	6030      	str	r0, [r6, #0]
 80048a4:	2800      	cmp	r0, #0
 80048a6:	d1d5      	bne.n	8004854 <__sfp+0x24>
 80048a8:	f7ff ff78 	bl	800479c <__sfp_lock_release>
 80048ac:	230c      	movs	r3, #12
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	e7ee      	b.n	8004890 <__sfp+0x60>
 80048b2:	bf00      	nop
 80048b4:	08005f20 	.word	0x08005f20
 80048b8:	ffff0001 	.word	0xffff0001

080048bc <_fwalk_reent>:
 80048bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048c0:	4606      	mov	r6, r0
 80048c2:	4688      	mov	r8, r1
 80048c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048c8:	2700      	movs	r7, #0
 80048ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048ce:	f1b9 0901 	subs.w	r9, r9, #1
 80048d2:	d505      	bpl.n	80048e0 <_fwalk_reent+0x24>
 80048d4:	6824      	ldr	r4, [r4, #0]
 80048d6:	2c00      	cmp	r4, #0
 80048d8:	d1f7      	bne.n	80048ca <_fwalk_reent+0xe>
 80048da:	4638      	mov	r0, r7
 80048dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048e0:	89ab      	ldrh	r3, [r5, #12]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d907      	bls.n	80048f6 <_fwalk_reent+0x3a>
 80048e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048ea:	3301      	adds	r3, #1
 80048ec:	d003      	beq.n	80048f6 <_fwalk_reent+0x3a>
 80048ee:	4629      	mov	r1, r5
 80048f0:	4630      	mov	r0, r6
 80048f2:	47c0      	blx	r8
 80048f4:	4307      	orrs	r7, r0
 80048f6:	3568      	adds	r5, #104	; 0x68
 80048f8:	e7e9      	b.n	80048ce <_fwalk_reent+0x12>
	...

080048fc <_localeconv_r>:
 80048fc:	4800      	ldr	r0, [pc, #0]	; (8004900 <_localeconv_r+0x4>)
 80048fe:	4770      	bx	lr
 8004900:	20000180 	.word	0x20000180

08004904 <__retarget_lock_init_recursive>:
 8004904:	4770      	bx	lr

08004906 <__retarget_lock_acquire_recursive>:
 8004906:	4770      	bx	lr

08004908 <__retarget_lock_release_recursive>:
 8004908:	4770      	bx	lr

0800490a <__swhatbuf_r>:
 800490a:	b570      	push	{r4, r5, r6, lr}
 800490c:	460e      	mov	r6, r1
 800490e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004912:	2900      	cmp	r1, #0
 8004914:	b096      	sub	sp, #88	; 0x58
 8004916:	4614      	mov	r4, r2
 8004918:	461d      	mov	r5, r3
 800491a:	da08      	bge.n	800492e <__swhatbuf_r+0x24>
 800491c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	602a      	str	r2, [r5, #0]
 8004924:	061a      	lsls	r2, r3, #24
 8004926:	d410      	bmi.n	800494a <__swhatbuf_r+0x40>
 8004928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800492c:	e00e      	b.n	800494c <__swhatbuf_r+0x42>
 800492e:	466a      	mov	r2, sp
 8004930:	f000 fec2 	bl	80056b8 <_fstat_r>
 8004934:	2800      	cmp	r0, #0
 8004936:	dbf1      	blt.n	800491c <__swhatbuf_r+0x12>
 8004938:	9a01      	ldr	r2, [sp, #4]
 800493a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800493e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004942:	425a      	negs	r2, r3
 8004944:	415a      	adcs	r2, r3
 8004946:	602a      	str	r2, [r5, #0]
 8004948:	e7ee      	b.n	8004928 <__swhatbuf_r+0x1e>
 800494a:	2340      	movs	r3, #64	; 0x40
 800494c:	2000      	movs	r0, #0
 800494e:	6023      	str	r3, [r4, #0]
 8004950:	b016      	add	sp, #88	; 0x58
 8004952:	bd70      	pop	{r4, r5, r6, pc}

08004954 <__smakebuf_r>:
 8004954:	898b      	ldrh	r3, [r1, #12]
 8004956:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004958:	079d      	lsls	r5, r3, #30
 800495a:	4606      	mov	r6, r0
 800495c:	460c      	mov	r4, r1
 800495e:	d507      	bpl.n	8004970 <__smakebuf_r+0x1c>
 8004960:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	6123      	str	r3, [r4, #16]
 8004968:	2301      	movs	r3, #1
 800496a:	6163      	str	r3, [r4, #20]
 800496c:	b002      	add	sp, #8
 800496e:	bd70      	pop	{r4, r5, r6, pc}
 8004970:	ab01      	add	r3, sp, #4
 8004972:	466a      	mov	r2, sp
 8004974:	f7ff ffc9 	bl	800490a <__swhatbuf_r>
 8004978:	9900      	ldr	r1, [sp, #0]
 800497a:	4605      	mov	r5, r0
 800497c:	4630      	mov	r0, r6
 800497e:	f000 fc37 	bl	80051f0 <_malloc_r>
 8004982:	b948      	cbnz	r0, 8004998 <__smakebuf_r+0x44>
 8004984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004988:	059a      	lsls	r2, r3, #22
 800498a:	d4ef      	bmi.n	800496c <__smakebuf_r+0x18>
 800498c:	f023 0303 	bic.w	r3, r3, #3
 8004990:	f043 0302 	orr.w	r3, r3, #2
 8004994:	81a3      	strh	r3, [r4, #12]
 8004996:	e7e3      	b.n	8004960 <__smakebuf_r+0xc>
 8004998:	4b0d      	ldr	r3, [pc, #52]	; (80049d0 <__smakebuf_r+0x7c>)
 800499a:	62b3      	str	r3, [r6, #40]	; 0x28
 800499c:	89a3      	ldrh	r3, [r4, #12]
 800499e:	6020      	str	r0, [r4, #0]
 80049a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a4:	81a3      	strh	r3, [r4, #12]
 80049a6:	9b00      	ldr	r3, [sp, #0]
 80049a8:	6163      	str	r3, [r4, #20]
 80049aa:	9b01      	ldr	r3, [sp, #4]
 80049ac:	6120      	str	r0, [r4, #16]
 80049ae:	b15b      	cbz	r3, 80049c8 <__smakebuf_r+0x74>
 80049b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049b4:	4630      	mov	r0, r6
 80049b6:	f000 fe91 	bl	80056dc <_isatty_r>
 80049ba:	b128      	cbz	r0, 80049c8 <__smakebuf_r+0x74>
 80049bc:	89a3      	ldrh	r3, [r4, #12]
 80049be:	f023 0303 	bic.w	r3, r3, #3
 80049c2:	f043 0301 	orr.w	r3, r3, #1
 80049c6:	81a3      	strh	r3, [r4, #12]
 80049c8:	89a0      	ldrh	r0, [r4, #12]
 80049ca:	4305      	orrs	r5, r0
 80049cc:	81a5      	strh	r5, [r4, #12]
 80049ce:	e7cd      	b.n	800496c <__smakebuf_r+0x18>
 80049d0:	08004759 	.word	0x08004759

080049d4 <malloc>:
 80049d4:	4b02      	ldr	r3, [pc, #8]	; (80049e0 <malloc+0xc>)
 80049d6:	4601      	mov	r1, r0
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	f000 bc09 	b.w	80051f0 <_malloc_r>
 80049de:	bf00      	nop
 80049e0:	2000002c 	.word	0x2000002c

080049e4 <_Balloc>:
 80049e4:	b570      	push	{r4, r5, r6, lr}
 80049e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80049e8:	4604      	mov	r4, r0
 80049ea:	460d      	mov	r5, r1
 80049ec:	b976      	cbnz	r6, 8004a0c <_Balloc+0x28>
 80049ee:	2010      	movs	r0, #16
 80049f0:	f7ff fff0 	bl	80049d4 <malloc>
 80049f4:	4602      	mov	r2, r0
 80049f6:	6260      	str	r0, [r4, #36]	; 0x24
 80049f8:	b920      	cbnz	r0, 8004a04 <_Balloc+0x20>
 80049fa:	4b18      	ldr	r3, [pc, #96]	; (8004a5c <_Balloc+0x78>)
 80049fc:	4818      	ldr	r0, [pc, #96]	; (8004a60 <_Balloc+0x7c>)
 80049fe:	2166      	movs	r1, #102	; 0x66
 8004a00:	f000 fe1a 	bl	8005638 <__assert_func>
 8004a04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a08:	6006      	str	r6, [r0, #0]
 8004a0a:	60c6      	str	r6, [r0, #12]
 8004a0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004a0e:	68f3      	ldr	r3, [r6, #12]
 8004a10:	b183      	cbz	r3, 8004a34 <_Balloc+0x50>
 8004a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004a1a:	b9b8      	cbnz	r0, 8004a4c <_Balloc+0x68>
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	fa01 f605 	lsl.w	r6, r1, r5
 8004a22:	1d72      	adds	r2, r6, #5
 8004a24:	0092      	lsls	r2, r2, #2
 8004a26:	4620      	mov	r0, r4
 8004a28:	f000 fb60 	bl	80050ec <_calloc_r>
 8004a2c:	b160      	cbz	r0, 8004a48 <_Balloc+0x64>
 8004a2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004a32:	e00e      	b.n	8004a52 <_Balloc+0x6e>
 8004a34:	2221      	movs	r2, #33	; 0x21
 8004a36:	2104      	movs	r1, #4
 8004a38:	4620      	mov	r0, r4
 8004a3a:	f000 fb57 	bl	80050ec <_calloc_r>
 8004a3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a40:	60f0      	str	r0, [r6, #12]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e4      	bne.n	8004a12 <_Balloc+0x2e>
 8004a48:	2000      	movs	r0, #0
 8004a4a:	bd70      	pop	{r4, r5, r6, pc}
 8004a4c:	6802      	ldr	r2, [r0, #0]
 8004a4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004a52:	2300      	movs	r3, #0
 8004a54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004a58:	e7f7      	b.n	8004a4a <_Balloc+0x66>
 8004a5a:	bf00      	nop
 8004a5c:	08005f65 	.word	0x08005f65
 8004a60:	08006048 	.word	0x08006048

08004a64 <_Bfree>:
 8004a64:	b570      	push	{r4, r5, r6, lr}
 8004a66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004a68:	4605      	mov	r5, r0
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	b976      	cbnz	r6, 8004a8c <_Bfree+0x28>
 8004a6e:	2010      	movs	r0, #16
 8004a70:	f7ff ffb0 	bl	80049d4 <malloc>
 8004a74:	4602      	mov	r2, r0
 8004a76:	6268      	str	r0, [r5, #36]	; 0x24
 8004a78:	b920      	cbnz	r0, 8004a84 <_Bfree+0x20>
 8004a7a:	4b09      	ldr	r3, [pc, #36]	; (8004aa0 <_Bfree+0x3c>)
 8004a7c:	4809      	ldr	r0, [pc, #36]	; (8004aa4 <_Bfree+0x40>)
 8004a7e:	218a      	movs	r1, #138	; 0x8a
 8004a80:	f000 fdda 	bl	8005638 <__assert_func>
 8004a84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a88:	6006      	str	r6, [r0, #0]
 8004a8a:	60c6      	str	r6, [r0, #12]
 8004a8c:	b13c      	cbz	r4, 8004a9e <_Bfree+0x3a>
 8004a8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004a90:	6862      	ldr	r2, [r4, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a98:	6021      	str	r1, [r4, #0]
 8004a9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004a9e:	bd70      	pop	{r4, r5, r6, pc}
 8004aa0:	08005f65 	.word	0x08005f65
 8004aa4:	08006048 	.word	0x08006048

08004aa8 <__multadd>:
 8004aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aac:	690d      	ldr	r5, [r1, #16]
 8004aae:	4607      	mov	r7, r0
 8004ab0:	460c      	mov	r4, r1
 8004ab2:	461e      	mov	r6, r3
 8004ab4:	f101 0c14 	add.w	ip, r1, #20
 8004ab8:	2000      	movs	r0, #0
 8004aba:	f8dc 3000 	ldr.w	r3, [ip]
 8004abe:	b299      	uxth	r1, r3
 8004ac0:	fb02 6101 	mla	r1, r2, r1, r6
 8004ac4:	0c1e      	lsrs	r6, r3, #16
 8004ac6:	0c0b      	lsrs	r3, r1, #16
 8004ac8:	fb02 3306 	mla	r3, r2, r6, r3
 8004acc:	b289      	uxth	r1, r1
 8004ace:	3001      	adds	r0, #1
 8004ad0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004ad4:	4285      	cmp	r5, r0
 8004ad6:	f84c 1b04 	str.w	r1, [ip], #4
 8004ada:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004ade:	dcec      	bgt.n	8004aba <__multadd+0x12>
 8004ae0:	b30e      	cbz	r6, 8004b26 <__multadd+0x7e>
 8004ae2:	68a3      	ldr	r3, [r4, #8]
 8004ae4:	42ab      	cmp	r3, r5
 8004ae6:	dc19      	bgt.n	8004b1c <__multadd+0x74>
 8004ae8:	6861      	ldr	r1, [r4, #4]
 8004aea:	4638      	mov	r0, r7
 8004aec:	3101      	adds	r1, #1
 8004aee:	f7ff ff79 	bl	80049e4 <_Balloc>
 8004af2:	4680      	mov	r8, r0
 8004af4:	b928      	cbnz	r0, 8004b02 <__multadd+0x5a>
 8004af6:	4602      	mov	r2, r0
 8004af8:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <__multadd+0x84>)
 8004afa:	480d      	ldr	r0, [pc, #52]	; (8004b30 <__multadd+0x88>)
 8004afc:	21b5      	movs	r1, #181	; 0xb5
 8004afe:	f000 fd9b 	bl	8005638 <__assert_func>
 8004b02:	6922      	ldr	r2, [r4, #16]
 8004b04:	3202      	adds	r2, #2
 8004b06:	f104 010c 	add.w	r1, r4, #12
 8004b0a:	0092      	lsls	r2, r2, #2
 8004b0c:	300c      	adds	r0, #12
 8004b0e:	f7fe f953 	bl	8002db8 <memcpy>
 8004b12:	4621      	mov	r1, r4
 8004b14:	4638      	mov	r0, r7
 8004b16:	f7ff ffa5 	bl	8004a64 <_Bfree>
 8004b1a:	4644      	mov	r4, r8
 8004b1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004b20:	3501      	adds	r5, #1
 8004b22:	615e      	str	r6, [r3, #20]
 8004b24:	6125      	str	r5, [r4, #16]
 8004b26:	4620      	mov	r0, r4
 8004b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b2c:	08005fd7 	.word	0x08005fd7
 8004b30:	08006048 	.word	0x08006048

08004b34 <__hi0bits>:
 8004b34:	0c03      	lsrs	r3, r0, #16
 8004b36:	041b      	lsls	r3, r3, #16
 8004b38:	b9d3      	cbnz	r3, 8004b70 <__hi0bits+0x3c>
 8004b3a:	0400      	lsls	r0, r0, #16
 8004b3c:	2310      	movs	r3, #16
 8004b3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004b42:	bf04      	itt	eq
 8004b44:	0200      	lsleq	r0, r0, #8
 8004b46:	3308      	addeq	r3, #8
 8004b48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004b4c:	bf04      	itt	eq
 8004b4e:	0100      	lsleq	r0, r0, #4
 8004b50:	3304      	addeq	r3, #4
 8004b52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004b56:	bf04      	itt	eq
 8004b58:	0080      	lsleq	r0, r0, #2
 8004b5a:	3302      	addeq	r3, #2
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	db05      	blt.n	8004b6c <__hi0bits+0x38>
 8004b60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004b64:	f103 0301 	add.w	r3, r3, #1
 8004b68:	bf08      	it	eq
 8004b6a:	2320      	moveq	r3, #32
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	4770      	bx	lr
 8004b70:	2300      	movs	r3, #0
 8004b72:	e7e4      	b.n	8004b3e <__hi0bits+0xa>

08004b74 <__lo0bits>:
 8004b74:	6803      	ldr	r3, [r0, #0]
 8004b76:	f013 0207 	ands.w	r2, r3, #7
 8004b7a:	4601      	mov	r1, r0
 8004b7c:	d00b      	beq.n	8004b96 <__lo0bits+0x22>
 8004b7e:	07da      	lsls	r2, r3, #31
 8004b80:	d423      	bmi.n	8004bca <__lo0bits+0x56>
 8004b82:	0798      	lsls	r0, r3, #30
 8004b84:	bf49      	itett	mi
 8004b86:	085b      	lsrmi	r3, r3, #1
 8004b88:	089b      	lsrpl	r3, r3, #2
 8004b8a:	2001      	movmi	r0, #1
 8004b8c:	600b      	strmi	r3, [r1, #0]
 8004b8e:	bf5c      	itt	pl
 8004b90:	600b      	strpl	r3, [r1, #0]
 8004b92:	2002      	movpl	r0, #2
 8004b94:	4770      	bx	lr
 8004b96:	b298      	uxth	r0, r3
 8004b98:	b9a8      	cbnz	r0, 8004bc6 <__lo0bits+0x52>
 8004b9a:	0c1b      	lsrs	r3, r3, #16
 8004b9c:	2010      	movs	r0, #16
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	b90a      	cbnz	r2, 8004ba6 <__lo0bits+0x32>
 8004ba2:	3008      	adds	r0, #8
 8004ba4:	0a1b      	lsrs	r3, r3, #8
 8004ba6:	071a      	lsls	r2, r3, #28
 8004ba8:	bf04      	itt	eq
 8004baa:	091b      	lsreq	r3, r3, #4
 8004bac:	3004      	addeq	r0, #4
 8004bae:	079a      	lsls	r2, r3, #30
 8004bb0:	bf04      	itt	eq
 8004bb2:	089b      	lsreq	r3, r3, #2
 8004bb4:	3002      	addeq	r0, #2
 8004bb6:	07da      	lsls	r2, r3, #31
 8004bb8:	d403      	bmi.n	8004bc2 <__lo0bits+0x4e>
 8004bba:	085b      	lsrs	r3, r3, #1
 8004bbc:	f100 0001 	add.w	r0, r0, #1
 8004bc0:	d005      	beq.n	8004bce <__lo0bits+0x5a>
 8004bc2:	600b      	str	r3, [r1, #0]
 8004bc4:	4770      	bx	lr
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	e7e9      	b.n	8004b9e <__lo0bits+0x2a>
 8004bca:	2000      	movs	r0, #0
 8004bcc:	4770      	bx	lr
 8004bce:	2020      	movs	r0, #32
 8004bd0:	4770      	bx	lr
	...

08004bd4 <__i2b>:
 8004bd4:	b510      	push	{r4, lr}
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	2101      	movs	r1, #1
 8004bda:	f7ff ff03 	bl	80049e4 <_Balloc>
 8004bde:	4602      	mov	r2, r0
 8004be0:	b928      	cbnz	r0, 8004bee <__i2b+0x1a>
 8004be2:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <__i2b+0x24>)
 8004be4:	4805      	ldr	r0, [pc, #20]	; (8004bfc <__i2b+0x28>)
 8004be6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004bea:	f000 fd25 	bl	8005638 <__assert_func>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	6144      	str	r4, [r0, #20]
 8004bf2:	6103      	str	r3, [r0, #16]
 8004bf4:	bd10      	pop	{r4, pc}
 8004bf6:	bf00      	nop
 8004bf8:	08005fd7 	.word	0x08005fd7
 8004bfc:	08006048 	.word	0x08006048

08004c00 <__multiply>:
 8004c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c04:	4691      	mov	r9, r2
 8004c06:	690a      	ldr	r2, [r1, #16]
 8004c08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	bfb8      	it	lt
 8004c10:	460b      	movlt	r3, r1
 8004c12:	460c      	mov	r4, r1
 8004c14:	bfbc      	itt	lt
 8004c16:	464c      	movlt	r4, r9
 8004c18:	4699      	movlt	r9, r3
 8004c1a:	6927      	ldr	r7, [r4, #16]
 8004c1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004c20:	68a3      	ldr	r3, [r4, #8]
 8004c22:	6861      	ldr	r1, [r4, #4]
 8004c24:	eb07 060a 	add.w	r6, r7, sl
 8004c28:	42b3      	cmp	r3, r6
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	bfb8      	it	lt
 8004c2e:	3101      	addlt	r1, #1
 8004c30:	f7ff fed8 	bl	80049e4 <_Balloc>
 8004c34:	b930      	cbnz	r0, 8004c44 <__multiply+0x44>
 8004c36:	4602      	mov	r2, r0
 8004c38:	4b44      	ldr	r3, [pc, #272]	; (8004d4c <__multiply+0x14c>)
 8004c3a:	4845      	ldr	r0, [pc, #276]	; (8004d50 <__multiply+0x150>)
 8004c3c:	f240 115d 	movw	r1, #349	; 0x15d
 8004c40:	f000 fcfa 	bl	8005638 <__assert_func>
 8004c44:	f100 0514 	add.w	r5, r0, #20
 8004c48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004c4c:	462b      	mov	r3, r5
 8004c4e:	2200      	movs	r2, #0
 8004c50:	4543      	cmp	r3, r8
 8004c52:	d321      	bcc.n	8004c98 <__multiply+0x98>
 8004c54:	f104 0314 	add.w	r3, r4, #20
 8004c58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004c5c:	f109 0314 	add.w	r3, r9, #20
 8004c60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004c64:	9202      	str	r2, [sp, #8]
 8004c66:	1b3a      	subs	r2, r7, r4
 8004c68:	3a15      	subs	r2, #21
 8004c6a:	f022 0203 	bic.w	r2, r2, #3
 8004c6e:	3204      	adds	r2, #4
 8004c70:	f104 0115 	add.w	r1, r4, #21
 8004c74:	428f      	cmp	r7, r1
 8004c76:	bf38      	it	cc
 8004c78:	2204      	movcc	r2, #4
 8004c7a:	9201      	str	r2, [sp, #4]
 8004c7c:	9a02      	ldr	r2, [sp, #8]
 8004c7e:	9303      	str	r3, [sp, #12]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d80c      	bhi.n	8004c9e <__multiply+0x9e>
 8004c84:	2e00      	cmp	r6, #0
 8004c86:	dd03      	ble.n	8004c90 <__multiply+0x90>
 8004c88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d05a      	beq.n	8004d46 <__multiply+0x146>
 8004c90:	6106      	str	r6, [r0, #16]
 8004c92:	b005      	add	sp, #20
 8004c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c98:	f843 2b04 	str.w	r2, [r3], #4
 8004c9c:	e7d8      	b.n	8004c50 <__multiply+0x50>
 8004c9e:	f8b3 a000 	ldrh.w	sl, [r3]
 8004ca2:	f1ba 0f00 	cmp.w	sl, #0
 8004ca6:	d024      	beq.n	8004cf2 <__multiply+0xf2>
 8004ca8:	f104 0e14 	add.w	lr, r4, #20
 8004cac:	46a9      	mov	r9, r5
 8004cae:	f04f 0c00 	mov.w	ip, #0
 8004cb2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004cb6:	f8d9 1000 	ldr.w	r1, [r9]
 8004cba:	fa1f fb82 	uxth.w	fp, r2
 8004cbe:	b289      	uxth	r1, r1
 8004cc0:	fb0a 110b 	mla	r1, sl, fp, r1
 8004cc4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004cc8:	f8d9 2000 	ldr.w	r2, [r9]
 8004ccc:	4461      	add	r1, ip
 8004cce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004cd2:	fb0a c20b 	mla	r2, sl, fp, ip
 8004cd6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004cda:	b289      	uxth	r1, r1
 8004cdc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004ce0:	4577      	cmp	r7, lr
 8004ce2:	f849 1b04 	str.w	r1, [r9], #4
 8004ce6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004cea:	d8e2      	bhi.n	8004cb2 <__multiply+0xb2>
 8004cec:	9a01      	ldr	r2, [sp, #4]
 8004cee:	f845 c002 	str.w	ip, [r5, r2]
 8004cf2:	9a03      	ldr	r2, [sp, #12]
 8004cf4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	f1b9 0f00 	cmp.w	r9, #0
 8004cfe:	d020      	beq.n	8004d42 <__multiply+0x142>
 8004d00:	6829      	ldr	r1, [r5, #0]
 8004d02:	f104 0c14 	add.w	ip, r4, #20
 8004d06:	46ae      	mov	lr, r5
 8004d08:	f04f 0a00 	mov.w	sl, #0
 8004d0c:	f8bc b000 	ldrh.w	fp, [ip]
 8004d10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004d14:	fb09 220b 	mla	r2, r9, fp, r2
 8004d18:	4492      	add	sl, r2
 8004d1a:	b289      	uxth	r1, r1
 8004d1c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004d20:	f84e 1b04 	str.w	r1, [lr], #4
 8004d24:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004d28:	f8be 1000 	ldrh.w	r1, [lr]
 8004d2c:	0c12      	lsrs	r2, r2, #16
 8004d2e:	fb09 1102 	mla	r1, r9, r2, r1
 8004d32:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004d36:	4567      	cmp	r7, ip
 8004d38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004d3c:	d8e6      	bhi.n	8004d0c <__multiply+0x10c>
 8004d3e:	9a01      	ldr	r2, [sp, #4]
 8004d40:	50a9      	str	r1, [r5, r2]
 8004d42:	3504      	adds	r5, #4
 8004d44:	e79a      	b.n	8004c7c <__multiply+0x7c>
 8004d46:	3e01      	subs	r6, #1
 8004d48:	e79c      	b.n	8004c84 <__multiply+0x84>
 8004d4a:	bf00      	nop
 8004d4c:	08005fd7 	.word	0x08005fd7
 8004d50:	08006048 	.word	0x08006048

08004d54 <__pow5mult>:
 8004d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d58:	4615      	mov	r5, r2
 8004d5a:	f012 0203 	ands.w	r2, r2, #3
 8004d5e:	4606      	mov	r6, r0
 8004d60:	460f      	mov	r7, r1
 8004d62:	d007      	beq.n	8004d74 <__pow5mult+0x20>
 8004d64:	4c25      	ldr	r4, [pc, #148]	; (8004dfc <__pow5mult+0xa8>)
 8004d66:	3a01      	subs	r2, #1
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004d6e:	f7ff fe9b 	bl	8004aa8 <__multadd>
 8004d72:	4607      	mov	r7, r0
 8004d74:	10ad      	asrs	r5, r5, #2
 8004d76:	d03d      	beq.n	8004df4 <__pow5mult+0xa0>
 8004d78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004d7a:	b97c      	cbnz	r4, 8004d9c <__pow5mult+0x48>
 8004d7c:	2010      	movs	r0, #16
 8004d7e:	f7ff fe29 	bl	80049d4 <malloc>
 8004d82:	4602      	mov	r2, r0
 8004d84:	6270      	str	r0, [r6, #36]	; 0x24
 8004d86:	b928      	cbnz	r0, 8004d94 <__pow5mult+0x40>
 8004d88:	4b1d      	ldr	r3, [pc, #116]	; (8004e00 <__pow5mult+0xac>)
 8004d8a:	481e      	ldr	r0, [pc, #120]	; (8004e04 <__pow5mult+0xb0>)
 8004d8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004d90:	f000 fc52 	bl	8005638 <__assert_func>
 8004d94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004d98:	6004      	str	r4, [r0, #0]
 8004d9a:	60c4      	str	r4, [r0, #12]
 8004d9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004da0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004da4:	b94c      	cbnz	r4, 8004dba <__pow5mult+0x66>
 8004da6:	f240 2171 	movw	r1, #625	; 0x271
 8004daa:	4630      	mov	r0, r6
 8004dac:	f7ff ff12 	bl	8004bd4 <__i2b>
 8004db0:	2300      	movs	r3, #0
 8004db2:	f8c8 0008 	str.w	r0, [r8, #8]
 8004db6:	4604      	mov	r4, r0
 8004db8:	6003      	str	r3, [r0, #0]
 8004dba:	f04f 0900 	mov.w	r9, #0
 8004dbe:	07eb      	lsls	r3, r5, #31
 8004dc0:	d50a      	bpl.n	8004dd8 <__pow5mult+0x84>
 8004dc2:	4639      	mov	r1, r7
 8004dc4:	4622      	mov	r2, r4
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	f7ff ff1a 	bl	8004c00 <__multiply>
 8004dcc:	4639      	mov	r1, r7
 8004dce:	4680      	mov	r8, r0
 8004dd0:	4630      	mov	r0, r6
 8004dd2:	f7ff fe47 	bl	8004a64 <_Bfree>
 8004dd6:	4647      	mov	r7, r8
 8004dd8:	106d      	asrs	r5, r5, #1
 8004dda:	d00b      	beq.n	8004df4 <__pow5mult+0xa0>
 8004ddc:	6820      	ldr	r0, [r4, #0]
 8004dde:	b938      	cbnz	r0, 8004df0 <__pow5mult+0x9c>
 8004de0:	4622      	mov	r2, r4
 8004de2:	4621      	mov	r1, r4
 8004de4:	4630      	mov	r0, r6
 8004de6:	f7ff ff0b 	bl	8004c00 <__multiply>
 8004dea:	6020      	str	r0, [r4, #0]
 8004dec:	f8c0 9000 	str.w	r9, [r0]
 8004df0:	4604      	mov	r4, r0
 8004df2:	e7e4      	b.n	8004dbe <__pow5mult+0x6a>
 8004df4:	4638      	mov	r0, r7
 8004df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dfa:	bf00      	nop
 8004dfc:	08006198 	.word	0x08006198
 8004e00:	08005f65 	.word	0x08005f65
 8004e04:	08006048 	.word	0x08006048

08004e08 <__lshift>:
 8004e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e0c:	460c      	mov	r4, r1
 8004e0e:	6849      	ldr	r1, [r1, #4]
 8004e10:	6923      	ldr	r3, [r4, #16]
 8004e12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004e16:	68a3      	ldr	r3, [r4, #8]
 8004e18:	4607      	mov	r7, r0
 8004e1a:	4691      	mov	r9, r2
 8004e1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004e20:	f108 0601 	add.w	r6, r8, #1
 8004e24:	42b3      	cmp	r3, r6
 8004e26:	db0b      	blt.n	8004e40 <__lshift+0x38>
 8004e28:	4638      	mov	r0, r7
 8004e2a:	f7ff fddb 	bl	80049e4 <_Balloc>
 8004e2e:	4605      	mov	r5, r0
 8004e30:	b948      	cbnz	r0, 8004e46 <__lshift+0x3e>
 8004e32:	4602      	mov	r2, r0
 8004e34:	4b2a      	ldr	r3, [pc, #168]	; (8004ee0 <__lshift+0xd8>)
 8004e36:	482b      	ldr	r0, [pc, #172]	; (8004ee4 <__lshift+0xdc>)
 8004e38:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004e3c:	f000 fbfc 	bl	8005638 <__assert_func>
 8004e40:	3101      	adds	r1, #1
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	e7ee      	b.n	8004e24 <__lshift+0x1c>
 8004e46:	2300      	movs	r3, #0
 8004e48:	f100 0114 	add.w	r1, r0, #20
 8004e4c:	f100 0210 	add.w	r2, r0, #16
 8004e50:	4618      	mov	r0, r3
 8004e52:	4553      	cmp	r3, sl
 8004e54:	db37      	blt.n	8004ec6 <__lshift+0xbe>
 8004e56:	6920      	ldr	r0, [r4, #16]
 8004e58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004e5c:	f104 0314 	add.w	r3, r4, #20
 8004e60:	f019 091f 	ands.w	r9, r9, #31
 8004e64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004e68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004e6c:	d02f      	beq.n	8004ece <__lshift+0xc6>
 8004e6e:	f1c9 0e20 	rsb	lr, r9, #32
 8004e72:	468a      	mov	sl, r1
 8004e74:	f04f 0c00 	mov.w	ip, #0
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	fa02 f209 	lsl.w	r2, r2, r9
 8004e7e:	ea42 020c 	orr.w	r2, r2, ip
 8004e82:	f84a 2b04 	str.w	r2, [sl], #4
 8004e86:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e8a:	4298      	cmp	r0, r3
 8004e8c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004e90:	d8f2      	bhi.n	8004e78 <__lshift+0x70>
 8004e92:	1b03      	subs	r3, r0, r4
 8004e94:	3b15      	subs	r3, #21
 8004e96:	f023 0303 	bic.w	r3, r3, #3
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	f104 0215 	add.w	r2, r4, #21
 8004ea0:	4290      	cmp	r0, r2
 8004ea2:	bf38      	it	cc
 8004ea4:	2304      	movcc	r3, #4
 8004ea6:	f841 c003 	str.w	ip, [r1, r3]
 8004eaa:	f1bc 0f00 	cmp.w	ip, #0
 8004eae:	d001      	beq.n	8004eb4 <__lshift+0xac>
 8004eb0:	f108 0602 	add.w	r6, r8, #2
 8004eb4:	3e01      	subs	r6, #1
 8004eb6:	4638      	mov	r0, r7
 8004eb8:	612e      	str	r6, [r5, #16]
 8004eba:	4621      	mov	r1, r4
 8004ebc:	f7ff fdd2 	bl	8004a64 <_Bfree>
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec6:	f842 0f04 	str.w	r0, [r2, #4]!
 8004eca:	3301      	adds	r3, #1
 8004ecc:	e7c1      	b.n	8004e52 <__lshift+0x4a>
 8004ece:	3904      	subs	r1, #4
 8004ed0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ed4:	f841 2f04 	str.w	r2, [r1, #4]!
 8004ed8:	4298      	cmp	r0, r3
 8004eda:	d8f9      	bhi.n	8004ed0 <__lshift+0xc8>
 8004edc:	e7ea      	b.n	8004eb4 <__lshift+0xac>
 8004ede:	bf00      	nop
 8004ee0:	08005fd7 	.word	0x08005fd7
 8004ee4:	08006048 	.word	0x08006048

08004ee8 <__mcmp>:
 8004ee8:	b530      	push	{r4, r5, lr}
 8004eea:	6902      	ldr	r2, [r0, #16]
 8004eec:	690c      	ldr	r4, [r1, #16]
 8004eee:	1b12      	subs	r2, r2, r4
 8004ef0:	d10e      	bne.n	8004f10 <__mcmp+0x28>
 8004ef2:	f100 0314 	add.w	r3, r0, #20
 8004ef6:	3114      	adds	r1, #20
 8004ef8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004efc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004f00:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004f04:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004f08:	42a5      	cmp	r5, r4
 8004f0a:	d003      	beq.n	8004f14 <__mcmp+0x2c>
 8004f0c:	d305      	bcc.n	8004f1a <__mcmp+0x32>
 8004f0e:	2201      	movs	r2, #1
 8004f10:	4610      	mov	r0, r2
 8004f12:	bd30      	pop	{r4, r5, pc}
 8004f14:	4283      	cmp	r3, r0
 8004f16:	d3f3      	bcc.n	8004f00 <__mcmp+0x18>
 8004f18:	e7fa      	b.n	8004f10 <__mcmp+0x28>
 8004f1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f1e:	e7f7      	b.n	8004f10 <__mcmp+0x28>

08004f20 <__mdiff>:
 8004f20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f24:	460c      	mov	r4, r1
 8004f26:	4606      	mov	r6, r0
 8004f28:	4611      	mov	r1, r2
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	4690      	mov	r8, r2
 8004f2e:	f7ff ffdb 	bl	8004ee8 <__mcmp>
 8004f32:	1e05      	subs	r5, r0, #0
 8004f34:	d110      	bne.n	8004f58 <__mdiff+0x38>
 8004f36:	4629      	mov	r1, r5
 8004f38:	4630      	mov	r0, r6
 8004f3a:	f7ff fd53 	bl	80049e4 <_Balloc>
 8004f3e:	b930      	cbnz	r0, 8004f4e <__mdiff+0x2e>
 8004f40:	4b3a      	ldr	r3, [pc, #232]	; (800502c <__mdiff+0x10c>)
 8004f42:	4602      	mov	r2, r0
 8004f44:	f240 2132 	movw	r1, #562	; 0x232
 8004f48:	4839      	ldr	r0, [pc, #228]	; (8005030 <__mdiff+0x110>)
 8004f4a:	f000 fb75 	bl	8005638 <__assert_func>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004f54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f58:	bfa4      	itt	ge
 8004f5a:	4643      	movge	r3, r8
 8004f5c:	46a0      	movge	r8, r4
 8004f5e:	4630      	mov	r0, r6
 8004f60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004f64:	bfa6      	itte	ge
 8004f66:	461c      	movge	r4, r3
 8004f68:	2500      	movge	r5, #0
 8004f6a:	2501      	movlt	r5, #1
 8004f6c:	f7ff fd3a 	bl	80049e4 <_Balloc>
 8004f70:	b920      	cbnz	r0, 8004f7c <__mdiff+0x5c>
 8004f72:	4b2e      	ldr	r3, [pc, #184]	; (800502c <__mdiff+0x10c>)
 8004f74:	4602      	mov	r2, r0
 8004f76:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004f7a:	e7e5      	b.n	8004f48 <__mdiff+0x28>
 8004f7c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004f80:	6926      	ldr	r6, [r4, #16]
 8004f82:	60c5      	str	r5, [r0, #12]
 8004f84:	f104 0914 	add.w	r9, r4, #20
 8004f88:	f108 0514 	add.w	r5, r8, #20
 8004f8c:	f100 0e14 	add.w	lr, r0, #20
 8004f90:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004f94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004f98:	f108 0210 	add.w	r2, r8, #16
 8004f9c:	46f2      	mov	sl, lr
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	f859 3b04 	ldr.w	r3, [r9], #4
 8004fa4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004fa8:	fa1f f883 	uxth.w	r8, r3
 8004fac:	fa11 f18b 	uxtah	r1, r1, fp
 8004fb0:	0c1b      	lsrs	r3, r3, #16
 8004fb2:	eba1 0808 	sub.w	r8, r1, r8
 8004fb6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004fba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004fbe:	fa1f f888 	uxth.w	r8, r8
 8004fc2:	1419      	asrs	r1, r3, #16
 8004fc4:	454e      	cmp	r6, r9
 8004fc6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004fca:	f84a 3b04 	str.w	r3, [sl], #4
 8004fce:	d8e7      	bhi.n	8004fa0 <__mdiff+0x80>
 8004fd0:	1b33      	subs	r3, r6, r4
 8004fd2:	3b15      	subs	r3, #21
 8004fd4:	f023 0303 	bic.w	r3, r3, #3
 8004fd8:	3304      	adds	r3, #4
 8004fda:	3415      	adds	r4, #21
 8004fdc:	42a6      	cmp	r6, r4
 8004fde:	bf38      	it	cc
 8004fe0:	2304      	movcc	r3, #4
 8004fe2:	441d      	add	r5, r3
 8004fe4:	4473      	add	r3, lr
 8004fe6:	469e      	mov	lr, r3
 8004fe8:	462e      	mov	r6, r5
 8004fea:	4566      	cmp	r6, ip
 8004fec:	d30e      	bcc.n	800500c <__mdiff+0xec>
 8004fee:	f10c 0203 	add.w	r2, ip, #3
 8004ff2:	1b52      	subs	r2, r2, r5
 8004ff4:	f022 0203 	bic.w	r2, r2, #3
 8004ff8:	3d03      	subs	r5, #3
 8004ffa:	45ac      	cmp	ip, r5
 8004ffc:	bf38      	it	cc
 8004ffe:	2200      	movcc	r2, #0
 8005000:	441a      	add	r2, r3
 8005002:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005006:	b17b      	cbz	r3, 8005028 <__mdiff+0x108>
 8005008:	6107      	str	r7, [r0, #16]
 800500a:	e7a3      	b.n	8004f54 <__mdiff+0x34>
 800500c:	f856 8b04 	ldr.w	r8, [r6], #4
 8005010:	fa11 f288 	uxtah	r2, r1, r8
 8005014:	1414      	asrs	r4, r2, #16
 8005016:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800501a:	b292      	uxth	r2, r2
 800501c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005020:	f84e 2b04 	str.w	r2, [lr], #4
 8005024:	1421      	asrs	r1, r4, #16
 8005026:	e7e0      	b.n	8004fea <__mdiff+0xca>
 8005028:	3f01      	subs	r7, #1
 800502a:	e7ea      	b.n	8005002 <__mdiff+0xe2>
 800502c:	08005fd7 	.word	0x08005fd7
 8005030:	08006048 	.word	0x08006048

08005034 <__d2b>:
 8005034:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005038:	4689      	mov	r9, r1
 800503a:	2101      	movs	r1, #1
 800503c:	ec57 6b10 	vmov	r6, r7, d0
 8005040:	4690      	mov	r8, r2
 8005042:	f7ff fccf 	bl	80049e4 <_Balloc>
 8005046:	4604      	mov	r4, r0
 8005048:	b930      	cbnz	r0, 8005058 <__d2b+0x24>
 800504a:	4602      	mov	r2, r0
 800504c:	4b25      	ldr	r3, [pc, #148]	; (80050e4 <__d2b+0xb0>)
 800504e:	4826      	ldr	r0, [pc, #152]	; (80050e8 <__d2b+0xb4>)
 8005050:	f240 310a 	movw	r1, #778	; 0x30a
 8005054:	f000 faf0 	bl	8005638 <__assert_func>
 8005058:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800505c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005060:	bb35      	cbnz	r5, 80050b0 <__d2b+0x7c>
 8005062:	2e00      	cmp	r6, #0
 8005064:	9301      	str	r3, [sp, #4]
 8005066:	d028      	beq.n	80050ba <__d2b+0x86>
 8005068:	4668      	mov	r0, sp
 800506a:	9600      	str	r6, [sp, #0]
 800506c:	f7ff fd82 	bl	8004b74 <__lo0bits>
 8005070:	9900      	ldr	r1, [sp, #0]
 8005072:	b300      	cbz	r0, 80050b6 <__d2b+0x82>
 8005074:	9a01      	ldr	r2, [sp, #4]
 8005076:	f1c0 0320 	rsb	r3, r0, #32
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	430b      	orrs	r3, r1
 8005080:	40c2      	lsrs	r2, r0
 8005082:	6163      	str	r3, [r4, #20]
 8005084:	9201      	str	r2, [sp, #4]
 8005086:	9b01      	ldr	r3, [sp, #4]
 8005088:	61a3      	str	r3, [r4, #24]
 800508a:	2b00      	cmp	r3, #0
 800508c:	bf14      	ite	ne
 800508e:	2202      	movne	r2, #2
 8005090:	2201      	moveq	r2, #1
 8005092:	6122      	str	r2, [r4, #16]
 8005094:	b1d5      	cbz	r5, 80050cc <__d2b+0x98>
 8005096:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800509a:	4405      	add	r5, r0
 800509c:	f8c9 5000 	str.w	r5, [r9]
 80050a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80050a4:	f8c8 0000 	str.w	r0, [r8]
 80050a8:	4620      	mov	r0, r4
 80050aa:	b003      	add	sp, #12
 80050ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050b4:	e7d5      	b.n	8005062 <__d2b+0x2e>
 80050b6:	6161      	str	r1, [r4, #20]
 80050b8:	e7e5      	b.n	8005086 <__d2b+0x52>
 80050ba:	a801      	add	r0, sp, #4
 80050bc:	f7ff fd5a 	bl	8004b74 <__lo0bits>
 80050c0:	9b01      	ldr	r3, [sp, #4]
 80050c2:	6163      	str	r3, [r4, #20]
 80050c4:	2201      	movs	r2, #1
 80050c6:	6122      	str	r2, [r4, #16]
 80050c8:	3020      	adds	r0, #32
 80050ca:	e7e3      	b.n	8005094 <__d2b+0x60>
 80050cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80050d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80050d4:	f8c9 0000 	str.w	r0, [r9]
 80050d8:	6918      	ldr	r0, [r3, #16]
 80050da:	f7ff fd2b 	bl	8004b34 <__hi0bits>
 80050de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80050e2:	e7df      	b.n	80050a4 <__d2b+0x70>
 80050e4:	08005fd7 	.word	0x08005fd7
 80050e8:	08006048 	.word	0x08006048

080050ec <_calloc_r>:
 80050ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050ee:	fba1 2402 	umull	r2, r4, r1, r2
 80050f2:	b94c      	cbnz	r4, 8005108 <_calloc_r+0x1c>
 80050f4:	4611      	mov	r1, r2
 80050f6:	9201      	str	r2, [sp, #4]
 80050f8:	f000 f87a 	bl	80051f0 <_malloc_r>
 80050fc:	9a01      	ldr	r2, [sp, #4]
 80050fe:	4605      	mov	r5, r0
 8005100:	b930      	cbnz	r0, 8005110 <_calloc_r+0x24>
 8005102:	4628      	mov	r0, r5
 8005104:	b003      	add	sp, #12
 8005106:	bd30      	pop	{r4, r5, pc}
 8005108:	220c      	movs	r2, #12
 800510a:	6002      	str	r2, [r0, #0]
 800510c:	2500      	movs	r5, #0
 800510e:	e7f8      	b.n	8005102 <_calloc_r+0x16>
 8005110:	4621      	mov	r1, r4
 8005112:	f7fd fe5f 	bl	8002dd4 <memset>
 8005116:	e7f4      	b.n	8005102 <_calloc_r+0x16>

08005118 <_free_r>:
 8005118:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800511a:	2900      	cmp	r1, #0
 800511c:	d044      	beq.n	80051a8 <_free_r+0x90>
 800511e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005122:	9001      	str	r0, [sp, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	f1a1 0404 	sub.w	r4, r1, #4
 800512a:	bfb8      	it	lt
 800512c:	18e4      	addlt	r4, r4, r3
 800512e:	f000 fb23 	bl	8005778 <__malloc_lock>
 8005132:	4a1e      	ldr	r2, [pc, #120]	; (80051ac <_free_r+0x94>)
 8005134:	9801      	ldr	r0, [sp, #4]
 8005136:	6813      	ldr	r3, [r2, #0]
 8005138:	b933      	cbnz	r3, 8005148 <_free_r+0x30>
 800513a:	6063      	str	r3, [r4, #4]
 800513c:	6014      	str	r4, [r2, #0]
 800513e:	b003      	add	sp, #12
 8005140:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005144:	f000 bb1e 	b.w	8005784 <__malloc_unlock>
 8005148:	42a3      	cmp	r3, r4
 800514a:	d908      	bls.n	800515e <_free_r+0x46>
 800514c:	6825      	ldr	r5, [r4, #0]
 800514e:	1961      	adds	r1, r4, r5
 8005150:	428b      	cmp	r3, r1
 8005152:	bf01      	itttt	eq
 8005154:	6819      	ldreq	r1, [r3, #0]
 8005156:	685b      	ldreq	r3, [r3, #4]
 8005158:	1949      	addeq	r1, r1, r5
 800515a:	6021      	streq	r1, [r4, #0]
 800515c:	e7ed      	b.n	800513a <_free_r+0x22>
 800515e:	461a      	mov	r2, r3
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	b10b      	cbz	r3, 8005168 <_free_r+0x50>
 8005164:	42a3      	cmp	r3, r4
 8005166:	d9fa      	bls.n	800515e <_free_r+0x46>
 8005168:	6811      	ldr	r1, [r2, #0]
 800516a:	1855      	adds	r5, r2, r1
 800516c:	42a5      	cmp	r5, r4
 800516e:	d10b      	bne.n	8005188 <_free_r+0x70>
 8005170:	6824      	ldr	r4, [r4, #0]
 8005172:	4421      	add	r1, r4
 8005174:	1854      	adds	r4, r2, r1
 8005176:	42a3      	cmp	r3, r4
 8005178:	6011      	str	r1, [r2, #0]
 800517a:	d1e0      	bne.n	800513e <_free_r+0x26>
 800517c:	681c      	ldr	r4, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	6053      	str	r3, [r2, #4]
 8005182:	4421      	add	r1, r4
 8005184:	6011      	str	r1, [r2, #0]
 8005186:	e7da      	b.n	800513e <_free_r+0x26>
 8005188:	d902      	bls.n	8005190 <_free_r+0x78>
 800518a:	230c      	movs	r3, #12
 800518c:	6003      	str	r3, [r0, #0]
 800518e:	e7d6      	b.n	800513e <_free_r+0x26>
 8005190:	6825      	ldr	r5, [r4, #0]
 8005192:	1961      	adds	r1, r4, r5
 8005194:	428b      	cmp	r3, r1
 8005196:	bf04      	itt	eq
 8005198:	6819      	ldreq	r1, [r3, #0]
 800519a:	685b      	ldreq	r3, [r3, #4]
 800519c:	6063      	str	r3, [r4, #4]
 800519e:	bf04      	itt	eq
 80051a0:	1949      	addeq	r1, r1, r5
 80051a2:	6021      	streq	r1, [r4, #0]
 80051a4:	6054      	str	r4, [r2, #4]
 80051a6:	e7ca      	b.n	800513e <_free_r+0x26>
 80051a8:	b003      	add	sp, #12
 80051aa:	bd30      	pop	{r4, r5, pc}
 80051ac:	20000540 	.word	0x20000540

080051b0 <sbrk_aligned>:
 80051b0:	b570      	push	{r4, r5, r6, lr}
 80051b2:	4e0e      	ldr	r6, [pc, #56]	; (80051ec <sbrk_aligned+0x3c>)
 80051b4:	460c      	mov	r4, r1
 80051b6:	6831      	ldr	r1, [r6, #0]
 80051b8:	4605      	mov	r5, r0
 80051ba:	b911      	cbnz	r1, 80051c2 <sbrk_aligned+0x12>
 80051bc:	f000 f9e8 	bl	8005590 <_sbrk_r>
 80051c0:	6030      	str	r0, [r6, #0]
 80051c2:	4621      	mov	r1, r4
 80051c4:	4628      	mov	r0, r5
 80051c6:	f000 f9e3 	bl	8005590 <_sbrk_r>
 80051ca:	1c43      	adds	r3, r0, #1
 80051cc:	d00a      	beq.n	80051e4 <sbrk_aligned+0x34>
 80051ce:	1cc4      	adds	r4, r0, #3
 80051d0:	f024 0403 	bic.w	r4, r4, #3
 80051d4:	42a0      	cmp	r0, r4
 80051d6:	d007      	beq.n	80051e8 <sbrk_aligned+0x38>
 80051d8:	1a21      	subs	r1, r4, r0
 80051da:	4628      	mov	r0, r5
 80051dc:	f000 f9d8 	bl	8005590 <_sbrk_r>
 80051e0:	3001      	adds	r0, #1
 80051e2:	d101      	bne.n	80051e8 <sbrk_aligned+0x38>
 80051e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80051e8:	4620      	mov	r0, r4
 80051ea:	bd70      	pop	{r4, r5, r6, pc}
 80051ec:	20000544 	.word	0x20000544

080051f0 <_malloc_r>:
 80051f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051f4:	1ccd      	adds	r5, r1, #3
 80051f6:	f025 0503 	bic.w	r5, r5, #3
 80051fa:	3508      	adds	r5, #8
 80051fc:	2d0c      	cmp	r5, #12
 80051fe:	bf38      	it	cc
 8005200:	250c      	movcc	r5, #12
 8005202:	2d00      	cmp	r5, #0
 8005204:	4607      	mov	r7, r0
 8005206:	db01      	blt.n	800520c <_malloc_r+0x1c>
 8005208:	42a9      	cmp	r1, r5
 800520a:	d905      	bls.n	8005218 <_malloc_r+0x28>
 800520c:	230c      	movs	r3, #12
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	2600      	movs	r6, #0
 8005212:	4630      	mov	r0, r6
 8005214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005218:	4e2e      	ldr	r6, [pc, #184]	; (80052d4 <_malloc_r+0xe4>)
 800521a:	f000 faad 	bl	8005778 <__malloc_lock>
 800521e:	6833      	ldr	r3, [r6, #0]
 8005220:	461c      	mov	r4, r3
 8005222:	bb34      	cbnz	r4, 8005272 <_malloc_r+0x82>
 8005224:	4629      	mov	r1, r5
 8005226:	4638      	mov	r0, r7
 8005228:	f7ff ffc2 	bl	80051b0 <sbrk_aligned>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	4604      	mov	r4, r0
 8005230:	d14d      	bne.n	80052ce <_malloc_r+0xde>
 8005232:	6834      	ldr	r4, [r6, #0]
 8005234:	4626      	mov	r6, r4
 8005236:	2e00      	cmp	r6, #0
 8005238:	d140      	bne.n	80052bc <_malloc_r+0xcc>
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	4631      	mov	r1, r6
 800523e:	4638      	mov	r0, r7
 8005240:	eb04 0803 	add.w	r8, r4, r3
 8005244:	f000 f9a4 	bl	8005590 <_sbrk_r>
 8005248:	4580      	cmp	r8, r0
 800524a:	d13a      	bne.n	80052c2 <_malloc_r+0xd2>
 800524c:	6821      	ldr	r1, [r4, #0]
 800524e:	3503      	adds	r5, #3
 8005250:	1a6d      	subs	r5, r5, r1
 8005252:	f025 0503 	bic.w	r5, r5, #3
 8005256:	3508      	adds	r5, #8
 8005258:	2d0c      	cmp	r5, #12
 800525a:	bf38      	it	cc
 800525c:	250c      	movcc	r5, #12
 800525e:	4629      	mov	r1, r5
 8005260:	4638      	mov	r0, r7
 8005262:	f7ff ffa5 	bl	80051b0 <sbrk_aligned>
 8005266:	3001      	adds	r0, #1
 8005268:	d02b      	beq.n	80052c2 <_malloc_r+0xd2>
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	442b      	add	r3, r5
 800526e:	6023      	str	r3, [r4, #0]
 8005270:	e00e      	b.n	8005290 <_malloc_r+0xa0>
 8005272:	6822      	ldr	r2, [r4, #0]
 8005274:	1b52      	subs	r2, r2, r5
 8005276:	d41e      	bmi.n	80052b6 <_malloc_r+0xc6>
 8005278:	2a0b      	cmp	r2, #11
 800527a:	d916      	bls.n	80052aa <_malloc_r+0xba>
 800527c:	1961      	adds	r1, r4, r5
 800527e:	42a3      	cmp	r3, r4
 8005280:	6025      	str	r5, [r4, #0]
 8005282:	bf18      	it	ne
 8005284:	6059      	strne	r1, [r3, #4]
 8005286:	6863      	ldr	r3, [r4, #4]
 8005288:	bf08      	it	eq
 800528a:	6031      	streq	r1, [r6, #0]
 800528c:	5162      	str	r2, [r4, r5]
 800528e:	604b      	str	r3, [r1, #4]
 8005290:	4638      	mov	r0, r7
 8005292:	f104 060b 	add.w	r6, r4, #11
 8005296:	f000 fa75 	bl	8005784 <__malloc_unlock>
 800529a:	f026 0607 	bic.w	r6, r6, #7
 800529e:	1d23      	adds	r3, r4, #4
 80052a0:	1af2      	subs	r2, r6, r3
 80052a2:	d0b6      	beq.n	8005212 <_malloc_r+0x22>
 80052a4:	1b9b      	subs	r3, r3, r6
 80052a6:	50a3      	str	r3, [r4, r2]
 80052a8:	e7b3      	b.n	8005212 <_malloc_r+0x22>
 80052aa:	6862      	ldr	r2, [r4, #4]
 80052ac:	42a3      	cmp	r3, r4
 80052ae:	bf0c      	ite	eq
 80052b0:	6032      	streq	r2, [r6, #0]
 80052b2:	605a      	strne	r2, [r3, #4]
 80052b4:	e7ec      	b.n	8005290 <_malloc_r+0xa0>
 80052b6:	4623      	mov	r3, r4
 80052b8:	6864      	ldr	r4, [r4, #4]
 80052ba:	e7b2      	b.n	8005222 <_malloc_r+0x32>
 80052bc:	4634      	mov	r4, r6
 80052be:	6876      	ldr	r6, [r6, #4]
 80052c0:	e7b9      	b.n	8005236 <_malloc_r+0x46>
 80052c2:	230c      	movs	r3, #12
 80052c4:	603b      	str	r3, [r7, #0]
 80052c6:	4638      	mov	r0, r7
 80052c8:	f000 fa5c 	bl	8005784 <__malloc_unlock>
 80052cc:	e7a1      	b.n	8005212 <_malloc_r+0x22>
 80052ce:	6025      	str	r5, [r4, #0]
 80052d0:	e7de      	b.n	8005290 <_malloc_r+0xa0>
 80052d2:	bf00      	nop
 80052d4:	20000540 	.word	0x20000540

080052d8 <__ssputs_r>:
 80052d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052dc:	688e      	ldr	r6, [r1, #8]
 80052de:	429e      	cmp	r6, r3
 80052e0:	4682      	mov	sl, r0
 80052e2:	460c      	mov	r4, r1
 80052e4:	4690      	mov	r8, r2
 80052e6:	461f      	mov	r7, r3
 80052e8:	d838      	bhi.n	800535c <__ssputs_r+0x84>
 80052ea:	898a      	ldrh	r2, [r1, #12]
 80052ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052f0:	d032      	beq.n	8005358 <__ssputs_r+0x80>
 80052f2:	6825      	ldr	r5, [r4, #0]
 80052f4:	6909      	ldr	r1, [r1, #16]
 80052f6:	eba5 0901 	sub.w	r9, r5, r1
 80052fa:	6965      	ldr	r5, [r4, #20]
 80052fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005300:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005304:	3301      	adds	r3, #1
 8005306:	444b      	add	r3, r9
 8005308:	106d      	asrs	r5, r5, #1
 800530a:	429d      	cmp	r5, r3
 800530c:	bf38      	it	cc
 800530e:	461d      	movcc	r5, r3
 8005310:	0553      	lsls	r3, r2, #21
 8005312:	d531      	bpl.n	8005378 <__ssputs_r+0xa0>
 8005314:	4629      	mov	r1, r5
 8005316:	f7ff ff6b 	bl	80051f0 <_malloc_r>
 800531a:	4606      	mov	r6, r0
 800531c:	b950      	cbnz	r0, 8005334 <__ssputs_r+0x5c>
 800531e:	230c      	movs	r3, #12
 8005320:	f8ca 3000 	str.w	r3, [sl]
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800532a:	81a3      	strh	r3, [r4, #12]
 800532c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005334:	6921      	ldr	r1, [r4, #16]
 8005336:	464a      	mov	r2, r9
 8005338:	f7fd fd3e 	bl	8002db8 <memcpy>
 800533c:	89a3      	ldrh	r3, [r4, #12]
 800533e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005346:	81a3      	strh	r3, [r4, #12]
 8005348:	6126      	str	r6, [r4, #16]
 800534a:	6165      	str	r5, [r4, #20]
 800534c:	444e      	add	r6, r9
 800534e:	eba5 0509 	sub.w	r5, r5, r9
 8005352:	6026      	str	r6, [r4, #0]
 8005354:	60a5      	str	r5, [r4, #8]
 8005356:	463e      	mov	r6, r7
 8005358:	42be      	cmp	r6, r7
 800535a:	d900      	bls.n	800535e <__ssputs_r+0x86>
 800535c:	463e      	mov	r6, r7
 800535e:	6820      	ldr	r0, [r4, #0]
 8005360:	4632      	mov	r2, r6
 8005362:	4641      	mov	r1, r8
 8005364:	f000 f9ee 	bl	8005744 <memmove>
 8005368:	68a3      	ldr	r3, [r4, #8]
 800536a:	1b9b      	subs	r3, r3, r6
 800536c:	60a3      	str	r3, [r4, #8]
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	4433      	add	r3, r6
 8005372:	6023      	str	r3, [r4, #0]
 8005374:	2000      	movs	r0, #0
 8005376:	e7db      	b.n	8005330 <__ssputs_r+0x58>
 8005378:	462a      	mov	r2, r5
 800537a:	f000 fa09 	bl	8005790 <_realloc_r>
 800537e:	4606      	mov	r6, r0
 8005380:	2800      	cmp	r0, #0
 8005382:	d1e1      	bne.n	8005348 <__ssputs_r+0x70>
 8005384:	6921      	ldr	r1, [r4, #16]
 8005386:	4650      	mov	r0, sl
 8005388:	f7ff fec6 	bl	8005118 <_free_r>
 800538c:	e7c7      	b.n	800531e <__ssputs_r+0x46>
	...

08005390 <_svfiprintf_r>:
 8005390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005394:	4698      	mov	r8, r3
 8005396:	898b      	ldrh	r3, [r1, #12]
 8005398:	061b      	lsls	r3, r3, #24
 800539a:	b09d      	sub	sp, #116	; 0x74
 800539c:	4607      	mov	r7, r0
 800539e:	460d      	mov	r5, r1
 80053a0:	4614      	mov	r4, r2
 80053a2:	d50e      	bpl.n	80053c2 <_svfiprintf_r+0x32>
 80053a4:	690b      	ldr	r3, [r1, #16]
 80053a6:	b963      	cbnz	r3, 80053c2 <_svfiprintf_r+0x32>
 80053a8:	2140      	movs	r1, #64	; 0x40
 80053aa:	f7ff ff21 	bl	80051f0 <_malloc_r>
 80053ae:	6028      	str	r0, [r5, #0]
 80053b0:	6128      	str	r0, [r5, #16]
 80053b2:	b920      	cbnz	r0, 80053be <_svfiprintf_r+0x2e>
 80053b4:	230c      	movs	r3, #12
 80053b6:	603b      	str	r3, [r7, #0]
 80053b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053bc:	e0d1      	b.n	8005562 <_svfiprintf_r+0x1d2>
 80053be:	2340      	movs	r3, #64	; 0x40
 80053c0:	616b      	str	r3, [r5, #20]
 80053c2:	2300      	movs	r3, #0
 80053c4:	9309      	str	r3, [sp, #36]	; 0x24
 80053c6:	2320      	movs	r3, #32
 80053c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80053d0:	2330      	movs	r3, #48	; 0x30
 80053d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800557c <_svfiprintf_r+0x1ec>
 80053d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053da:	f04f 0901 	mov.w	r9, #1
 80053de:	4623      	mov	r3, r4
 80053e0:	469a      	mov	sl, r3
 80053e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053e6:	b10a      	cbz	r2, 80053ec <_svfiprintf_r+0x5c>
 80053e8:	2a25      	cmp	r2, #37	; 0x25
 80053ea:	d1f9      	bne.n	80053e0 <_svfiprintf_r+0x50>
 80053ec:	ebba 0b04 	subs.w	fp, sl, r4
 80053f0:	d00b      	beq.n	800540a <_svfiprintf_r+0x7a>
 80053f2:	465b      	mov	r3, fp
 80053f4:	4622      	mov	r2, r4
 80053f6:	4629      	mov	r1, r5
 80053f8:	4638      	mov	r0, r7
 80053fa:	f7ff ff6d 	bl	80052d8 <__ssputs_r>
 80053fe:	3001      	adds	r0, #1
 8005400:	f000 80aa 	beq.w	8005558 <_svfiprintf_r+0x1c8>
 8005404:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005406:	445a      	add	r2, fp
 8005408:	9209      	str	r2, [sp, #36]	; 0x24
 800540a:	f89a 3000 	ldrb.w	r3, [sl]
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 80a2 	beq.w	8005558 <_svfiprintf_r+0x1c8>
 8005414:	2300      	movs	r3, #0
 8005416:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800541a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800541e:	f10a 0a01 	add.w	sl, sl, #1
 8005422:	9304      	str	r3, [sp, #16]
 8005424:	9307      	str	r3, [sp, #28]
 8005426:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800542a:	931a      	str	r3, [sp, #104]	; 0x68
 800542c:	4654      	mov	r4, sl
 800542e:	2205      	movs	r2, #5
 8005430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005434:	4851      	ldr	r0, [pc, #324]	; (800557c <_svfiprintf_r+0x1ec>)
 8005436:	f7fa fed3 	bl	80001e0 <memchr>
 800543a:	9a04      	ldr	r2, [sp, #16]
 800543c:	b9d8      	cbnz	r0, 8005476 <_svfiprintf_r+0xe6>
 800543e:	06d0      	lsls	r0, r2, #27
 8005440:	bf44      	itt	mi
 8005442:	2320      	movmi	r3, #32
 8005444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005448:	0711      	lsls	r1, r2, #28
 800544a:	bf44      	itt	mi
 800544c:	232b      	movmi	r3, #43	; 0x2b
 800544e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005452:	f89a 3000 	ldrb.w	r3, [sl]
 8005456:	2b2a      	cmp	r3, #42	; 0x2a
 8005458:	d015      	beq.n	8005486 <_svfiprintf_r+0xf6>
 800545a:	9a07      	ldr	r2, [sp, #28]
 800545c:	4654      	mov	r4, sl
 800545e:	2000      	movs	r0, #0
 8005460:	f04f 0c0a 	mov.w	ip, #10
 8005464:	4621      	mov	r1, r4
 8005466:	f811 3b01 	ldrb.w	r3, [r1], #1
 800546a:	3b30      	subs	r3, #48	; 0x30
 800546c:	2b09      	cmp	r3, #9
 800546e:	d94e      	bls.n	800550e <_svfiprintf_r+0x17e>
 8005470:	b1b0      	cbz	r0, 80054a0 <_svfiprintf_r+0x110>
 8005472:	9207      	str	r2, [sp, #28]
 8005474:	e014      	b.n	80054a0 <_svfiprintf_r+0x110>
 8005476:	eba0 0308 	sub.w	r3, r0, r8
 800547a:	fa09 f303 	lsl.w	r3, r9, r3
 800547e:	4313      	orrs	r3, r2
 8005480:	9304      	str	r3, [sp, #16]
 8005482:	46a2      	mov	sl, r4
 8005484:	e7d2      	b.n	800542c <_svfiprintf_r+0x9c>
 8005486:	9b03      	ldr	r3, [sp, #12]
 8005488:	1d19      	adds	r1, r3, #4
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	9103      	str	r1, [sp, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	bfbb      	ittet	lt
 8005492:	425b      	neglt	r3, r3
 8005494:	f042 0202 	orrlt.w	r2, r2, #2
 8005498:	9307      	strge	r3, [sp, #28]
 800549a:	9307      	strlt	r3, [sp, #28]
 800549c:	bfb8      	it	lt
 800549e:	9204      	strlt	r2, [sp, #16]
 80054a0:	7823      	ldrb	r3, [r4, #0]
 80054a2:	2b2e      	cmp	r3, #46	; 0x2e
 80054a4:	d10c      	bne.n	80054c0 <_svfiprintf_r+0x130>
 80054a6:	7863      	ldrb	r3, [r4, #1]
 80054a8:	2b2a      	cmp	r3, #42	; 0x2a
 80054aa:	d135      	bne.n	8005518 <_svfiprintf_r+0x188>
 80054ac:	9b03      	ldr	r3, [sp, #12]
 80054ae:	1d1a      	adds	r2, r3, #4
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	9203      	str	r2, [sp, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	bfb8      	it	lt
 80054b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80054bc:	3402      	adds	r4, #2
 80054be:	9305      	str	r3, [sp, #20]
 80054c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800558c <_svfiprintf_r+0x1fc>
 80054c4:	7821      	ldrb	r1, [r4, #0]
 80054c6:	2203      	movs	r2, #3
 80054c8:	4650      	mov	r0, sl
 80054ca:	f7fa fe89 	bl	80001e0 <memchr>
 80054ce:	b140      	cbz	r0, 80054e2 <_svfiprintf_r+0x152>
 80054d0:	2340      	movs	r3, #64	; 0x40
 80054d2:	eba0 000a 	sub.w	r0, r0, sl
 80054d6:	fa03 f000 	lsl.w	r0, r3, r0
 80054da:	9b04      	ldr	r3, [sp, #16]
 80054dc:	4303      	orrs	r3, r0
 80054de:	3401      	adds	r4, #1
 80054e0:	9304      	str	r3, [sp, #16]
 80054e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054e6:	4826      	ldr	r0, [pc, #152]	; (8005580 <_svfiprintf_r+0x1f0>)
 80054e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054ec:	2206      	movs	r2, #6
 80054ee:	f7fa fe77 	bl	80001e0 <memchr>
 80054f2:	2800      	cmp	r0, #0
 80054f4:	d038      	beq.n	8005568 <_svfiprintf_r+0x1d8>
 80054f6:	4b23      	ldr	r3, [pc, #140]	; (8005584 <_svfiprintf_r+0x1f4>)
 80054f8:	bb1b      	cbnz	r3, 8005542 <_svfiprintf_r+0x1b2>
 80054fa:	9b03      	ldr	r3, [sp, #12]
 80054fc:	3307      	adds	r3, #7
 80054fe:	f023 0307 	bic.w	r3, r3, #7
 8005502:	3308      	adds	r3, #8
 8005504:	9303      	str	r3, [sp, #12]
 8005506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005508:	4433      	add	r3, r6
 800550a:	9309      	str	r3, [sp, #36]	; 0x24
 800550c:	e767      	b.n	80053de <_svfiprintf_r+0x4e>
 800550e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005512:	460c      	mov	r4, r1
 8005514:	2001      	movs	r0, #1
 8005516:	e7a5      	b.n	8005464 <_svfiprintf_r+0xd4>
 8005518:	2300      	movs	r3, #0
 800551a:	3401      	adds	r4, #1
 800551c:	9305      	str	r3, [sp, #20]
 800551e:	4619      	mov	r1, r3
 8005520:	f04f 0c0a 	mov.w	ip, #10
 8005524:	4620      	mov	r0, r4
 8005526:	f810 2b01 	ldrb.w	r2, [r0], #1
 800552a:	3a30      	subs	r2, #48	; 0x30
 800552c:	2a09      	cmp	r2, #9
 800552e:	d903      	bls.n	8005538 <_svfiprintf_r+0x1a8>
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0c5      	beq.n	80054c0 <_svfiprintf_r+0x130>
 8005534:	9105      	str	r1, [sp, #20]
 8005536:	e7c3      	b.n	80054c0 <_svfiprintf_r+0x130>
 8005538:	fb0c 2101 	mla	r1, ip, r1, r2
 800553c:	4604      	mov	r4, r0
 800553e:	2301      	movs	r3, #1
 8005540:	e7f0      	b.n	8005524 <_svfiprintf_r+0x194>
 8005542:	ab03      	add	r3, sp, #12
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	462a      	mov	r2, r5
 8005548:	4b0f      	ldr	r3, [pc, #60]	; (8005588 <_svfiprintf_r+0x1f8>)
 800554a:	a904      	add	r1, sp, #16
 800554c:	4638      	mov	r0, r7
 800554e:	f7fd fce9 	bl	8002f24 <_printf_float>
 8005552:	1c42      	adds	r2, r0, #1
 8005554:	4606      	mov	r6, r0
 8005556:	d1d6      	bne.n	8005506 <_svfiprintf_r+0x176>
 8005558:	89ab      	ldrh	r3, [r5, #12]
 800555a:	065b      	lsls	r3, r3, #25
 800555c:	f53f af2c 	bmi.w	80053b8 <_svfiprintf_r+0x28>
 8005560:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005562:	b01d      	add	sp, #116	; 0x74
 8005564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005568:	ab03      	add	r3, sp, #12
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	462a      	mov	r2, r5
 800556e:	4b06      	ldr	r3, [pc, #24]	; (8005588 <_svfiprintf_r+0x1f8>)
 8005570:	a904      	add	r1, sp, #16
 8005572:	4638      	mov	r0, r7
 8005574:	f7fd ff7a 	bl	800346c <_printf_i>
 8005578:	e7eb      	b.n	8005552 <_svfiprintf_r+0x1c2>
 800557a:	bf00      	nop
 800557c:	080061a4 	.word	0x080061a4
 8005580:	080061ae 	.word	0x080061ae
 8005584:	08002f25 	.word	0x08002f25
 8005588:	080052d9 	.word	0x080052d9
 800558c:	080061aa 	.word	0x080061aa

08005590 <_sbrk_r>:
 8005590:	b538      	push	{r3, r4, r5, lr}
 8005592:	4d06      	ldr	r5, [pc, #24]	; (80055ac <_sbrk_r+0x1c>)
 8005594:	2300      	movs	r3, #0
 8005596:	4604      	mov	r4, r0
 8005598:	4608      	mov	r0, r1
 800559a:	602b      	str	r3, [r5, #0]
 800559c:	f7fd faf8 	bl	8002b90 <_sbrk>
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	d102      	bne.n	80055aa <_sbrk_r+0x1a>
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	b103      	cbz	r3, 80055aa <_sbrk_r+0x1a>
 80055a8:	6023      	str	r3, [r4, #0]
 80055aa:	bd38      	pop	{r3, r4, r5, pc}
 80055ac:	20000548 	.word	0x20000548

080055b0 <__sread>:
 80055b0:	b510      	push	{r4, lr}
 80055b2:	460c      	mov	r4, r1
 80055b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b8:	f000 fa72 	bl	8005aa0 <_read_r>
 80055bc:	2800      	cmp	r0, #0
 80055be:	bfab      	itete	ge
 80055c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055c2:	89a3      	ldrhlt	r3, [r4, #12]
 80055c4:	181b      	addge	r3, r3, r0
 80055c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055ca:	bfac      	ite	ge
 80055cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80055ce:	81a3      	strhlt	r3, [r4, #12]
 80055d0:	bd10      	pop	{r4, pc}

080055d2 <__swrite>:
 80055d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055d6:	461f      	mov	r7, r3
 80055d8:	898b      	ldrh	r3, [r1, #12]
 80055da:	05db      	lsls	r3, r3, #23
 80055dc:	4605      	mov	r5, r0
 80055de:	460c      	mov	r4, r1
 80055e0:	4616      	mov	r6, r2
 80055e2:	d505      	bpl.n	80055f0 <__swrite+0x1e>
 80055e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e8:	2302      	movs	r3, #2
 80055ea:	2200      	movs	r2, #0
 80055ec:	f000 f886 	bl	80056fc <_lseek_r>
 80055f0:	89a3      	ldrh	r3, [r4, #12]
 80055f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055fa:	81a3      	strh	r3, [r4, #12]
 80055fc:	4632      	mov	r2, r6
 80055fe:	463b      	mov	r3, r7
 8005600:	4628      	mov	r0, r5
 8005602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005606:	f7fc bab1 	b.w	8001b6c <_write_r>

0800560a <__sseek>:
 800560a:	b510      	push	{r4, lr}
 800560c:	460c      	mov	r4, r1
 800560e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005612:	f000 f873 	bl	80056fc <_lseek_r>
 8005616:	1c43      	adds	r3, r0, #1
 8005618:	89a3      	ldrh	r3, [r4, #12]
 800561a:	bf15      	itete	ne
 800561c:	6560      	strne	r0, [r4, #84]	; 0x54
 800561e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005622:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005626:	81a3      	strheq	r3, [r4, #12]
 8005628:	bf18      	it	ne
 800562a:	81a3      	strhne	r3, [r4, #12]
 800562c:	bd10      	pop	{r4, pc}

0800562e <__sclose>:
 800562e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005632:	f000 b81f 	b.w	8005674 <_close_r>
	...

08005638 <__assert_func>:
 8005638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800563a:	4614      	mov	r4, r2
 800563c:	461a      	mov	r2, r3
 800563e:	4b09      	ldr	r3, [pc, #36]	; (8005664 <__assert_func+0x2c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4605      	mov	r5, r0
 8005644:	68d8      	ldr	r0, [r3, #12]
 8005646:	b14c      	cbz	r4, 800565c <__assert_func+0x24>
 8005648:	4b07      	ldr	r3, [pc, #28]	; (8005668 <__assert_func+0x30>)
 800564a:	9100      	str	r1, [sp, #0]
 800564c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005650:	4906      	ldr	r1, [pc, #24]	; (800566c <__assert_func+0x34>)
 8005652:	462b      	mov	r3, r5
 8005654:	f000 f81e 	bl	8005694 <fiprintf>
 8005658:	f000 fb02 	bl	8005c60 <abort>
 800565c:	4b04      	ldr	r3, [pc, #16]	; (8005670 <__assert_func+0x38>)
 800565e:	461c      	mov	r4, r3
 8005660:	e7f3      	b.n	800564a <__assert_func+0x12>
 8005662:	bf00      	nop
 8005664:	2000002c 	.word	0x2000002c
 8005668:	080061b5 	.word	0x080061b5
 800566c:	080061c2 	.word	0x080061c2
 8005670:	080061f0 	.word	0x080061f0

08005674 <_close_r>:
 8005674:	b538      	push	{r3, r4, r5, lr}
 8005676:	4d06      	ldr	r5, [pc, #24]	; (8005690 <_close_r+0x1c>)
 8005678:	2300      	movs	r3, #0
 800567a:	4604      	mov	r4, r0
 800567c:	4608      	mov	r0, r1
 800567e:	602b      	str	r3, [r5, #0]
 8005680:	f7fd fa51 	bl	8002b26 <_close>
 8005684:	1c43      	adds	r3, r0, #1
 8005686:	d102      	bne.n	800568e <_close_r+0x1a>
 8005688:	682b      	ldr	r3, [r5, #0]
 800568a:	b103      	cbz	r3, 800568e <_close_r+0x1a>
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	bd38      	pop	{r3, r4, r5, pc}
 8005690:	20000548 	.word	0x20000548

08005694 <fiprintf>:
 8005694:	b40e      	push	{r1, r2, r3}
 8005696:	b503      	push	{r0, r1, lr}
 8005698:	4601      	mov	r1, r0
 800569a:	ab03      	add	r3, sp, #12
 800569c:	4805      	ldr	r0, [pc, #20]	; (80056b4 <fiprintf+0x20>)
 800569e:	f853 2b04 	ldr.w	r2, [r3], #4
 80056a2:	6800      	ldr	r0, [r0, #0]
 80056a4:	9301      	str	r3, [sp, #4]
 80056a6:	f000 f8cb 	bl	8005840 <_vfiprintf_r>
 80056aa:	b002      	add	sp, #8
 80056ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80056b0:	b003      	add	sp, #12
 80056b2:	4770      	bx	lr
 80056b4:	2000002c 	.word	0x2000002c

080056b8 <_fstat_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	4d07      	ldr	r5, [pc, #28]	; (80056d8 <_fstat_r+0x20>)
 80056bc:	2300      	movs	r3, #0
 80056be:	4604      	mov	r4, r0
 80056c0:	4608      	mov	r0, r1
 80056c2:	4611      	mov	r1, r2
 80056c4:	602b      	str	r3, [r5, #0]
 80056c6:	f7fd fa3a 	bl	8002b3e <_fstat>
 80056ca:	1c43      	adds	r3, r0, #1
 80056cc:	d102      	bne.n	80056d4 <_fstat_r+0x1c>
 80056ce:	682b      	ldr	r3, [r5, #0]
 80056d0:	b103      	cbz	r3, 80056d4 <_fstat_r+0x1c>
 80056d2:	6023      	str	r3, [r4, #0]
 80056d4:	bd38      	pop	{r3, r4, r5, pc}
 80056d6:	bf00      	nop
 80056d8:	20000548 	.word	0x20000548

080056dc <_isatty_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	4d06      	ldr	r5, [pc, #24]	; (80056f8 <_isatty_r+0x1c>)
 80056e0:	2300      	movs	r3, #0
 80056e2:	4604      	mov	r4, r0
 80056e4:	4608      	mov	r0, r1
 80056e6:	602b      	str	r3, [r5, #0]
 80056e8:	f7fd fa39 	bl	8002b5e <_isatty>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	d102      	bne.n	80056f6 <_isatty_r+0x1a>
 80056f0:	682b      	ldr	r3, [r5, #0]
 80056f2:	b103      	cbz	r3, 80056f6 <_isatty_r+0x1a>
 80056f4:	6023      	str	r3, [r4, #0]
 80056f6:	bd38      	pop	{r3, r4, r5, pc}
 80056f8:	20000548 	.word	0x20000548

080056fc <_lseek_r>:
 80056fc:	b538      	push	{r3, r4, r5, lr}
 80056fe:	4d07      	ldr	r5, [pc, #28]	; (800571c <_lseek_r+0x20>)
 8005700:	4604      	mov	r4, r0
 8005702:	4608      	mov	r0, r1
 8005704:	4611      	mov	r1, r2
 8005706:	2200      	movs	r2, #0
 8005708:	602a      	str	r2, [r5, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	f7fd fa32 	bl	8002b74 <_lseek>
 8005710:	1c43      	adds	r3, r0, #1
 8005712:	d102      	bne.n	800571a <_lseek_r+0x1e>
 8005714:	682b      	ldr	r3, [r5, #0]
 8005716:	b103      	cbz	r3, 800571a <_lseek_r+0x1e>
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	bd38      	pop	{r3, r4, r5, pc}
 800571c:	20000548 	.word	0x20000548

08005720 <__ascii_mbtowc>:
 8005720:	b082      	sub	sp, #8
 8005722:	b901      	cbnz	r1, 8005726 <__ascii_mbtowc+0x6>
 8005724:	a901      	add	r1, sp, #4
 8005726:	b142      	cbz	r2, 800573a <__ascii_mbtowc+0x1a>
 8005728:	b14b      	cbz	r3, 800573e <__ascii_mbtowc+0x1e>
 800572a:	7813      	ldrb	r3, [r2, #0]
 800572c:	600b      	str	r3, [r1, #0]
 800572e:	7812      	ldrb	r2, [r2, #0]
 8005730:	1e10      	subs	r0, r2, #0
 8005732:	bf18      	it	ne
 8005734:	2001      	movne	r0, #1
 8005736:	b002      	add	sp, #8
 8005738:	4770      	bx	lr
 800573a:	4610      	mov	r0, r2
 800573c:	e7fb      	b.n	8005736 <__ascii_mbtowc+0x16>
 800573e:	f06f 0001 	mvn.w	r0, #1
 8005742:	e7f8      	b.n	8005736 <__ascii_mbtowc+0x16>

08005744 <memmove>:
 8005744:	4288      	cmp	r0, r1
 8005746:	b510      	push	{r4, lr}
 8005748:	eb01 0402 	add.w	r4, r1, r2
 800574c:	d902      	bls.n	8005754 <memmove+0x10>
 800574e:	4284      	cmp	r4, r0
 8005750:	4623      	mov	r3, r4
 8005752:	d807      	bhi.n	8005764 <memmove+0x20>
 8005754:	1e43      	subs	r3, r0, #1
 8005756:	42a1      	cmp	r1, r4
 8005758:	d008      	beq.n	800576c <memmove+0x28>
 800575a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800575e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005762:	e7f8      	b.n	8005756 <memmove+0x12>
 8005764:	4402      	add	r2, r0
 8005766:	4601      	mov	r1, r0
 8005768:	428a      	cmp	r2, r1
 800576a:	d100      	bne.n	800576e <memmove+0x2a>
 800576c:	bd10      	pop	{r4, pc}
 800576e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005772:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005776:	e7f7      	b.n	8005768 <memmove+0x24>

08005778 <__malloc_lock>:
 8005778:	4801      	ldr	r0, [pc, #4]	; (8005780 <__malloc_lock+0x8>)
 800577a:	f7ff b8c4 	b.w	8004906 <__retarget_lock_acquire_recursive>
 800577e:	bf00      	nop
 8005780:	2000053c 	.word	0x2000053c

08005784 <__malloc_unlock>:
 8005784:	4801      	ldr	r0, [pc, #4]	; (800578c <__malloc_unlock+0x8>)
 8005786:	f7ff b8bf 	b.w	8004908 <__retarget_lock_release_recursive>
 800578a:	bf00      	nop
 800578c:	2000053c 	.word	0x2000053c

08005790 <_realloc_r>:
 8005790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005794:	4680      	mov	r8, r0
 8005796:	4614      	mov	r4, r2
 8005798:	460e      	mov	r6, r1
 800579a:	b921      	cbnz	r1, 80057a6 <_realloc_r+0x16>
 800579c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057a0:	4611      	mov	r1, r2
 80057a2:	f7ff bd25 	b.w	80051f0 <_malloc_r>
 80057a6:	b92a      	cbnz	r2, 80057b4 <_realloc_r+0x24>
 80057a8:	f7ff fcb6 	bl	8005118 <_free_r>
 80057ac:	4625      	mov	r5, r4
 80057ae:	4628      	mov	r0, r5
 80057b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057b4:	f000 fa5b 	bl	8005c6e <_malloc_usable_size_r>
 80057b8:	4284      	cmp	r4, r0
 80057ba:	4607      	mov	r7, r0
 80057bc:	d802      	bhi.n	80057c4 <_realloc_r+0x34>
 80057be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80057c2:	d812      	bhi.n	80057ea <_realloc_r+0x5a>
 80057c4:	4621      	mov	r1, r4
 80057c6:	4640      	mov	r0, r8
 80057c8:	f7ff fd12 	bl	80051f0 <_malloc_r>
 80057cc:	4605      	mov	r5, r0
 80057ce:	2800      	cmp	r0, #0
 80057d0:	d0ed      	beq.n	80057ae <_realloc_r+0x1e>
 80057d2:	42bc      	cmp	r4, r7
 80057d4:	4622      	mov	r2, r4
 80057d6:	4631      	mov	r1, r6
 80057d8:	bf28      	it	cs
 80057da:	463a      	movcs	r2, r7
 80057dc:	f7fd faec 	bl	8002db8 <memcpy>
 80057e0:	4631      	mov	r1, r6
 80057e2:	4640      	mov	r0, r8
 80057e4:	f7ff fc98 	bl	8005118 <_free_r>
 80057e8:	e7e1      	b.n	80057ae <_realloc_r+0x1e>
 80057ea:	4635      	mov	r5, r6
 80057ec:	e7df      	b.n	80057ae <_realloc_r+0x1e>

080057ee <__sfputc_r>:
 80057ee:	6893      	ldr	r3, [r2, #8]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	b410      	push	{r4}
 80057f6:	6093      	str	r3, [r2, #8]
 80057f8:	da08      	bge.n	800580c <__sfputc_r+0x1e>
 80057fa:	6994      	ldr	r4, [r2, #24]
 80057fc:	42a3      	cmp	r3, r4
 80057fe:	db01      	blt.n	8005804 <__sfputc_r+0x16>
 8005800:	290a      	cmp	r1, #10
 8005802:	d103      	bne.n	800580c <__sfputc_r+0x1e>
 8005804:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005808:	f000 b95c 	b.w	8005ac4 <__swbuf_r>
 800580c:	6813      	ldr	r3, [r2, #0]
 800580e:	1c58      	adds	r0, r3, #1
 8005810:	6010      	str	r0, [r2, #0]
 8005812:	7019      	strb	r1, [r3, #0]
 8005814:	4608      	mov	r0, r1
 8005816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800581a:	4770      	bx	lr

0800581c <__sfputs_r>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	4606      	mov	r6, r0
 8005820:	460f      	mov	r7, r1
 8005822:	4614      	mov	r4, r2
 8005824:	18d5      	adds	r5, r2, r3
 8005826:	42ac      	cmp	r4, r5
 8005828:	d101      	bne.n	800582e <__sfputs_r+0x12>
 800582a:	2000      	movs	r0, #0
 800582c:	e007      	b.n	800583e <__sfputs_r+0x22>
 800582e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005832:	463a      	mov	r2, r7
 8005834:	4630      	mov	r0, r6
 8005836:	f7ff ffda 	bl	80057ee <__sfputc_r>
 800583a:	1c43      	adds	r3, r0, #1
 800583c:	d1f3      	bne.n	8005826 <__sfputs_r+0xa>
 800583e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005840 <_vfiprintf_r>:
 8005840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005844:	460d      	mov	r5, r1
 8005846:	b09d      	sub	sp, #116	; 0x74
 8005848:	4614      	mov	r4, r2
 800584a:	4698      	mov	r8, r3
 800584c:	4606      	mov	r6, r0
 800584e:	b118      	cbz	r0, 8005858 <_vfiprintf_r+0x18>
 8005850:	6983      	ldr	r3, [r0, #24]
 8005852:	b90b      	cbnz	r3, 8005858 <_vfiprintf_r+0x18>
 8005854:	f7fe ffb4 	bl	80047c0 <__sinit>
 8005858:	4b89      	ldr	r3, [pc, #548]	; (8005a80 <_vfiprintf_r+0x240>)
 800585a:	429d      	cmp	r5, r3
 800585c:	d11b      	bne.n	8005896 <_vfiprintf_r+0x56>
 800585e:	6875      	ldr	r5, [r6, #4]
 8005860:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005862:	07d9      	lsls	r1, r3, #31
 8005864:	d405      	bmi.n	8005872 <_vfiprintf_r+0x32>
 8005866:	89ab      	ldrh	r3, [r5, #12]
 8005868:	059a      	lsls	r2, r3, #22
 800586a:	d402      	bmi.n	8005872 <_vfiprintf_r+0x32>
 800586c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800586e:	f7ff f84a 	bl	8004906 <__retarget_lock_acquire_recursive>
 8005872:	89ab      	ldrh	r3, [r5, #12]
 8005874:	071b      	lsls	r3, r3, #28
 8005876:	d501      	bpl.n	800587c <_vfiprintf_r+0x3c>
 8005878:	692b      	ldr	r3, [r5, #16]
 800587a:	b9eb      	cbnz	r3, 80058b8 <_vfiprintf_r+0x78>
 800587c:	4629      	mov	r1, r5
 800587e:	4630      	mov	r0, r6
 8005880:	f000 f980 	bl	8005b84 <__swsetup_r>
 8005884:	b1c0      	cbz	r0, 80058b8 <_vfiprintf_r+0x78>
 8005886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005888:	07dc      	lsls	r4, r3, #31
 800588a:	d50e      	bpl.n	80058aa <_vfiprintf_r+0x6a>
 800588c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005890:	b01d      	add	sp, #116	; 0x74
 8005892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005896:	4b7b      	ldr	r3, [pc, #492]	; (8005a84 <_vfiprintf_r+0x244>)
 8005898:	429d      	cmp	r5, r3
 800589a:	d101      	bne.n	80058a0 <_vfiprintf_r+0x60>
 800589c:	68b5      	ldr	r5, [r6, #8]
 800589e:	e7df      	b.n	8005860 <_vfiprintf_r+0x20>
 80058a0:	4b79      	ldr	r3, [pc, #484]	; (8005a88 <_vfiprintf_r+0x248>)
 80058a2:	429d      	cmp	r5, r3
 80058a4:	bf08      	it	eq
 80058a6:	68f5      	ldreq	r5, [r6, #12]
 80058a8:	e7da      	b.n	8005860 <_vfiprintf_r+0x20>
 80058aa:	89ab      	ldrh	r3, [r5, #12]
 80058ac:	0598      	lsls	r0, r3, #22
 80058ae:	d4ed      	bmi.n	800588c <_vfiprintf_r+0x4c>
 80058b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058b2:	f7ff f829 	bl	8004908 <__retarget_lock_release_recursive>
 80058b6:	e7e9      	b.n	800588c <_vfiprintf_r+0x4c>
 80058b8:	2300      	movs	r3, #0
 80058ba:	9309      	str	r3, [sp, #36]	; 0x24
 80058bc:	2320      	movs	r3, #32
 80058be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80058c6:	2330      	movs	r3, #48	; 0x30
 80058c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005a8c <_vfiprintf_r+0x24c>
 80058cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058d0:	f04f 0901 	mov.w	r9, #1
 80058d4:	4623      	mov	r3, r4
 80058d6:	469a      	mov	sl, r3
 80058d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058dc:	b10a      	cbz	r2, 80058e2 <_vfiprintf_r+0xa2>
 80058de:	2a25      	cmp	r2, #37	; 0x25
 80058e0:	d1f9      	bne.n	80058d6 <_vfiprintf_r+0x96>
 80058e2:	ebba 0b04 	subs.w	fp, sl, r4
 80058e6:	d00b      	beq.n	8005900 <_vfiprintf_r+0xc0>
 80058e8:	465b      	mov	r3, fp
 80058ea:	4622      	mov	r2, r4
 80058ec:	4629      	mov	r1, r5
 80058ee:	4630      	mov	r0, r6
 80058f0:	f7ff ff94 	bl	800581c <__sfputs_r>
 80058f4:	3001      	adds	r0, #1
 80058f6:	f000 80aa 	beq.w	8005a4e <_vfiprintf_r+0x20e>
 80058fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058fc:	445a      	add	r2, fp
 80058fe:	9209      	str	r2, [sp, #36]	; 0x24
 8005900:	f89a 3000 	ldrb.w	r3, [sl]
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 80a2 	beq.w	8005a4e <_vfiprintf_r+0x20e>
 800590a:	2300      	movs	r3, #0
 800590c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005914:	f10a 0a01 	add.w	sl, sl, #1
 8005918:	9304      	str	r3, [sp, #16]
 800591a:	9307      	str	r3, [sp, #28]
 800591c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005920:	931a      	str	r3, [sp, #104]	; 0x68
 8005922:	4654      	mov	r4, sl
 8005924:	2205      	movs	r2, #5
 8005926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800592a:	4858      	ldr	r0, [pc, #352]	; (8005a8c <_vfiprintf_r+0x24c>)
 800592c:	f7fa fc58 	bl	80001e0 <memchr>
 8005930:	9a04      	ldr	r2, [sp, #16]
 8005932:	b9d8      	cbnz	r0, 800596c <_vfiprintf_r+0x12c>
 8005934:	06d1      	lsls	r1, r2, #27
 8005936:	bf44      	itt	mi
 8005938:	2320      	movmi	r3, #32
 800593a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800593e:	0713      	lsls	r3, r2, #28
 8005940:	bf44      	itt	mi
 8005942:	232b      	movmi	r3, #43	; 0x2b
 8005944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005948:	f89a 3000 	ldrb.w	r3, [sl]
 800594c:	2b2a      	cmp	r3, #42	; 0x2a
 800594e:	d015      	beq.n	800597c <_vfiprintf_r+0x13c>
 8005950:	9a07      	ldr	r2, [sp, #28]
 8005952:	4654      	mov	r4, sl
 8005954:	2000      	movs	r0, #0
 8005956:	f04f 0c0a 	mov.w	ip, #10
 800595a:	4621      	mov	r1, r4
 800595c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005960:	3b30      	subs	r3, #48	; 0x30
 8005962:	2b09      	cmp	r3, #9
 8005964:	d94e      	bls.n	8005a04 <_vfiprintf_r+0x1c4>
 8005966:	b1b0      	cbz	r0, 8005996 <_vfiprintf_r+0x156>
 8005968:	9207      	str	r2, [sp, #28]
 800596a:	e014      	b.n	8005996 <_vfiprintf_r+0x156>
 800596c:	eba0 0308 	sub.w	r3, r0, r8
 8005970:	fa09 f303 	lsl.w	r3, r9, r3
 8005974:	4313      	orrs	r3, r2
 8005976:	9304      	str	r3, [sp, #16]
 8005978:	46a2      	mov	sl, r4
 800597a:	e7d2      	b.n	8005922 <_vfiprintf_r+0xe2>
 800597c:	9b03      	ldr	r3, [sp, #12]
 800597e:	1d19      	adds	r1, r3, #4
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	9103      	str	r1, [sp, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	bfbb      	ittet	lt
 8005988:	425b      	neglt	r3, r3
 800598a:	f042 0202 	orrlt.w	r2, r2, #2
 800598e:	9307      	strge	r3, [sp, #28]
 8005990:	9307      	strlt	r3, [sp, #28]
 8005992:	bfb8      	it	lt
 8005994:	9204      	strlt	r2, [sp, #16]
 8005996:	7823      	ldrb	r3, [r4, #0]
 8005998:	2b2e      	cmp	r3, #46	; 0x2e
 800599a:	d10c      	bne.n	80059b6 <_vfiprintf_r+0x176>
 800599c:	7863      	ldrb	r3, [r4, #1]
 800599e:	2b2a      	cmp	r3, #42	; 0x2a
 80059a0:	d135      	bne.n	8005a0e <_vfiprintf_r+0x1ce>
 80059a2:	9b03      	ldr	r3, [sp, #12]
 80059a4:	1d1a      	adds	r2, r3, #4
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	9203      	str	r2, [sp, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	bfb8      	it	lt
 80059ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80059b2:	3402      	adds	r4, #2
 80059b4:	9305      	str	r3, [sp, #20]
 80059b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005a9c <_vfiprintf_r+0x25c>
 80059ba:	7821      	ldrb	r1, [r4, #0]
 80059bc:	2203      	movs	r2, #3
 80059be:	4650      	mov	r0, sl
 80059c0:	f7fa fc0e 	bl	80001e0 <memchr>
 80059c4:	b140      	cbz	r0, 80059d8 <_vfiprintf_r+0x198>
 80059c6:	2340      	movs	r3, #64	; 0x40
 80059c8:	eba0 000a 	sub.w	r0, r0, sl
 80059cc:	fa03 f000 	lsl.w	r0, r3, r0
 80059d0:	9b04      	ldr	r3, [sp, #16]
 80059d2:	4303      	orrs	r3, r0
 80059d4:	3401      	adds	r4, #1
 80059d6:	9304      	str	r3, [sp, #16]
 80059d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059dc:	482c      	ldr	r0, [pc, #176]	; (8005a90 <_vfiprintf_r+0x250>)
 80059de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059e2:	2206      	movs	r2, #6
 80059e4:	f7fa fbfc 	bl	80001e0 <memchr>
 80059e8:	2800      	cmp	r0, #0
 80059ea:	d03f      	beq.n	8005a6c <_vfiprintf_r+0x22c>
 80059ec:	4b29      	ldr	r3, [pc, #164]	; (8005a94 <_vfiprintf_r+0x254>)
 80059ee:	bb1b      	cbnz	r3, 8005a38 <_vfiprintf_r+0x1f8>
 80059f0:	9b03      	ldr	r3, [sp, #12]
 80059f2:	3307      	adds	r3, #7
 80059f4:	f023 0307 	bic.w	r3, r3, #7
 80059f8:	3308      	adds	r3, #8
 80059fa:	9303      	str	r3, [sp, #12]
 80059fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059fe:	443b      	add	r3, r7
 8005a00:	9309      	str	r3, [sp, #36]	; 0x24
 8005a02:	e767      	b.n	80058d4 <_vfiprintf_r+0x94>
 8005a04:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a08:	460c      	mov	r4, r1
 8005a0a:	2001      	movs	r0, #1
 8005a0c:	e7a5      	b.n	800595a <_vfiprintf_r+0x11a>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	3401      	adds	r4, #1
 8005a12:	9305      	str	r3, [sp, #20]
 8005a14:	4619      	mov	r1, r3
 8005a16:	f04f 0c0a 	mov.w	ip, #10
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a20:	3a30      	subs	r2, #48	; 0x30
 8005a22:	2a09      	cmp	r2, #9
 8005a24:	d903      	bls.n	8005a2e <_vfiprintf_r+0x1ee>
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0c5      	beq.n	80059b6 <_vfiprintf_r+0x176>
 8005a2a:	9105      	str	r1, [sp, #20]
 8005a2c:	e7c3      	b.n	80059b6 <_vfiprintf_r+0x176>
 8005a2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a32:	4604      	mov	r4, r0
 8005a34:	2301      	movs	r3, #1
 8005a36:	e7f0      	b.n	8005a1a <_vfiprintf_r+0x1da>
 8005a38:	ab03      	add	r3, sp, #12
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	462a      	mov	r2, r5
 8005a3e:	4b16      	ldr	r3, [pc, #88]	; (8005a98 <_vfiprintf_r+0x258>)
 8005a40:	a904      	add	r1, sp, #16
 8005a42:	4630      	mov	r0, r6
 8005a44:	f7fd fa6e 	bl	8002f24 <_printf_float>
 8005a48:	4607      	mov	r7, r0
 8005a4a:	1c78      	adds	r0, r7, #1
 8005a4c:	d1d6      	bne.n	80059fc <_vfiprintf_r+0x1bc>
 8005a4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a50:	07d9      	lsls	r1, r3, #31
 8005a52:	d405      	bmi.n	8005a60 <_vfiprintf_r+0x220>
 8005a54:	89ab      	ldrh	r3, [r5, #12]
 8005a56:	059a      	lsls	r2, r3, #22
 8005a58:	d402      	bmi.n	8005a60 <_vfiprintf_r+0x220>
 8005a5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a5c:	f7fe ff54 	bl	8004908 <__retarget_lock_release_recursive>
 8005a60:	89ab      	ldrh	r3, [r5, #12]
 8005a62:	065b      	lsls	r3, r3, #25
 8005a64:	f53f af12 	bmi.w	800588c <_vfiprintf_r+0x4c>
 8005a68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a6a:	e711      	b.n	8005890 <_vfiprintf_r+0x50>
 8005a6c:	ab03      	add	r3, sp, #12
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	462a      	mov	r2, r5
 8005a72:	4b09      	ldr	r3, [pc, #36]	; (8005a98 <_vfiprintf_r+0x258>)
 8005a74:	a904      	add	r1, sp, #16
 8005a76:	4630      	mov	r0, r6
 8005a78:	f7fd fcf8 	bl	800346c <_printf_i>
 8005a7c:	e7e4      	b.n	8005a48 <_vfiprintf_r+0x208>
 8005a7e:	bf00      	nop
 8005a80:	08006008 	.word	0x08006008
 8005a84:	08006028 	.word	0x08006028
 8005a88:	08005fe8 	.word	0x08005fe8
 8005a8c:	080061a4 	.word	0x080061a4
 8005a90:	080061ae 	.word	0x080061ae
 8005a94:	08002f25 	.word	0x08002f25
 8005a98:	0800581d 	.word	0x0800581d
 8005a9c:	080061aa 	.word	0x080061aa

08005aa0 <_read_r>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4d07      	ldr	r5, [pc, #28]	; (8005ac0 <_read_r+0x20>)
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	4608      	mov	r0, r1
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	2200      	movs	r2, #0
 8005aac:	602a      	str	r2, [r5, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f7fd f81c 	bl	8002aec <_read>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d102      	bne.n	8005abe <_read_r+0x1e>
 8005ab8:	682b      	ldr	r3, [r5, #0]
 8005aba:	b103      	cbz	r3, 8005abe <_read_r+0x1e>
 8005abc:	6023      	str	r3, [r4, #0]
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
 8005ac0:	20000548 	.word	0x20000548

08005ac4 <__swbuf_r>:
 8005ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac6:	460e      	mov	r6, r1
 8005ac8:	4614      	mov	r4, r2
 8005aca:	4605      	mov	r5, r0
 8005acc:	b118      	cbz	r0, 8005ad6 <__swbuf_r+0x12>
 8005ace:	6983      	ldr	r3, [r0, #24]
 8005ad0:	b90b      	cbnz	r3, 8005ad6 <__swbuf_r+0x12>
 8005ad2:	f7fe fe75 	bl	80047c0 <__sinit>
 8005ad6:	4b21      	ldr	r3, [pc, #132]	; (8005b5c <__swbuf_r+0x98>)
 8005ad8:	429c      	cmp	r4, r3
 8005ada:	d12b      	bne.n	8005b34 <__swbuf_r+0x70>
 8005adc:	686c      	ldr	r4, [r5, #4]
 8005ade:	69a3      	ldr	r3, [r4, #24]
 8005ae0:	60a3      	str	r3, [r4, #8]
 8005ae2:	89a3      	ldrh	r3, [r4, #12]
 8005ae4:	071a      	lsls	r2, r3, #28
 8005ae6:	d52f      	bpl.n	8005b48 <__swbuf_r+0x84>
 8005ae8:	6923      	ldr	r3, [r4, #16]
 8005aea:	b36b      	cbz	r3, 8005b48 <__swbuf_r+0x84>
 8005aec:	6923      	ldr	r3, [r4, #16]
 8005aee:	6820      	ldr	r0, [r4, #0]
 8005af0:	1ac0      	subs	r0, r0, r3
 8005af2:	6963      	ldr	r3, [r4, #20]
 8005af4:	b2f6      	uxtb	r6, r6
 8005af6:	4283      	cmp	r3, r0
 8005af8:	4637      	mov	r7, r6
 8005afa:	dc04      	bgt.n	8005b06 <__swbuf_r+0x42>
 8005afc:	4621      	mov	r1, r4
 8005afe:	4628      	mov	r0, r5
 8005b00:	f7fe fdca 	bl	8004698 <_fflush_r>
 8005b04:	bb30      	cbnz	r0, 8005b54 <__swbuf_r+0x90>
 8005b06:	68a3      	ldr	r3, [r4, #8]
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	60a3      	str	r3, [r4, #8]
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	6022      	str	r2, [r4, #0]
 8005b12:	701e      	strb	r6, [r3, #0]
 8005b14:	6963      	ldr	r3, [r4, #20]
 8005b16:	3001      	adds	r0, #1
 8005b18:	4283      	cmp	r3, r0
 8005b1a:	d004      	beq.n	8005b26 <__swbuf_r+0x62>
 8005b1c:	89a3      	ldrh	r3, [r4, #12]
 8005b1e:	07db      	lsls	r3, r3, #31
 8005b20:	d506      	bpl.n	8005b30 <__swbuf_r+0x6c>
 8005b22:	2e0a      	cmp	r6, #10
 8005b24:	d104      	bne.n	8005b30 <__swbuf_r+0x6c>
 8005b26:	4621      	mov	r1, r4
 8005b28:	4628      	mov	r0, r5
 8005b2a:	f7fe fdb5 	bl	8004698 <_fflush_r>
 8005b2e:	b988      	cbnz	r0, 8005b54 <__swbuf_r+0x90>
 8005b30:	4638      	mov	r0, r7
 8005b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b34:	4b0a      	ldr	r3, [pc, #40]	; (8005b60 <__swbuf_r+0x9c>)
 8005b36:	429c      	cmp	r4, r3
 8005b38:	d101      	bne.n	8005b3e <__swbuf_r+0x7a>
 8005b3a:	68ac      	ldr	r4, [r5, #8]
 8005b3c:	e7cf      	b.n	8005ade <__swbuf_r+0x1a>
 8005b3e:	4b09      	ldr	r3, [pc, #36]	; (8005b64 <__swbuf_r+0xa0>)
 8005b40:	429c      	cmp	r4, r3
 8005b42:	bf08      	it	eq
 8005b44:	68ec      	ldreq	r4, [r5, #12]
 8005b46:	e7ca      	b.n	8005ade <__swbuf_r+0x1a>
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f000 f81a 	bl	8005b84 <__swsetup_r>
 8005b50:	2800      	cmp	r0, #0
 8005b52:	d0cb      	beq.n	8005aec <__swbuf_r+0x28>
 8005b54:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005b58:	e7ea      	b.n	8005b30 <__swbuf_r+0x6c>
 8005b5a:	bf00      	nop
 8005b5c:	08006008 	.word	0x08006008
 8005b60:	08006028 	.word	0x08006028
 8005b64:	08005fe8 	.word	0x08005fe8

08005b68 <__ascii_wctomb>:
 8005b68:	b149      	cbz	r1, 8005b7e <__ascii_wctomb+0x16>
 8005b6a:	2aff      	cmp	r2, #255	; 0xff
 8005b6c:	bf85      	ittet	hi
 8005b6e:	238a      	movhi	r3, #138	; 0x8a
 8005b70:	6003      	strhi	r3, [r0, #0]
 8005b72:	700a      	strbls	r2, [r1, #0]
 8005b74:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005b78:	bf98      	it	ls
 8005b7a:	2001      	movls	r0, #1
 8005b7c:	4770      	bx	lr
 8005b7e:	4608      	mov	r0, r1
 8005b80:	4770      	bx	lr
	...

08005b84 <__swsetup_r>:
 8005b84:	4b32      	ldr	r3, [pc, #200]	; (8005c50 <__swsetup_r+0xcc>)
 8005b86:	b570      	push	{r4, r5, r6, lr}
 8005b88:	681d      	ldr	r5, [r3, #0]
 8005b8a:	4606      	mov	r6, r0
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	b125      	cbz	r5, 8005b9a <__swsetup_r+0x16>
 8005b90:	69ab      	ldr	r3, [r5, #24]
 8005b92:	b913      	cbnz	r3, 8005b9a <__swsetup_r+0x16>
 8005b94:	4628      	mov	r0, r5
 8005b96:	f7fe fe13 	bl	80047c0 <__sinit>
 8005b9a:	4b2e      	ldr	r3, [pc, #184]	; (8005c54 <__swsetup_r+0xd0>)
 8005b9c:	429c      	cmp	r4, r3
 8005b9e:	d10f      	bne.n	8005bc0 <__swsetup_r+0x3c>
 8005ba0:	686c      	ldr	r4, [r5, #4]
 8005ba2:	89a3      	ldrh	r3, [r4, #12]
 8005ba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ba8:	0719      	lsls	r1, r3, #28
 8005baa:	d42c      	bmi.n	8005c06 <__swsetup_r+0x82>
 8005bac:	06dd      	lsls	r5, r3, #27
 8005bae:	d411      	bmi.n	8005bd4 <__swsetup_r+0x50>
 8005bb0:	2309      	movs	r3, #9
 8005bb2:	6033      	str	r3, [r6, #0]
 8005bb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005bb8:	81a3      	strh	r3, [r4, #12]
 8005bba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bbe:	e03e      	b.n	8005c3e <__swsetup_r+0xba>
 8005bc0:	4b25      	ldr	r3, [pc, #148]	; (8005c58 <__swsetup_r+0xd4>)
 8005bc2:	429c      	cmp	r4, r3
 8005bc4:	d101      	bne.n	8005bca <__swsetup_r+0x46>
 8005bc6:	68ac      	ldr	r4, [r5, #8]
 8005bc8:	e7eb      	b.n	8005ba2 <__swsetup_r+0x1e>
 8005bca:	4b24      	ldr	r3, [pc, #144]	; (8005c5c <__swsetup_r+0xd8>)
 8005bcc:	429c      	cmp	r4, r3
 8005bce:	bf08      	it	eq
 8005bd0:	68ec      	ldreq	r4, [r5, #12]
 8005bd2:	e7e6      	b.n	8005ba2 <__swsetup_r+0x1e>
 8005bd4:	0758      	lsls	r0, r3, #29
 8005bd6:	d512      	bpl.n	8005bfe <__swsetup_r+0x7a>
 8005bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bda:	b141      	cbz	r1, 8005bee <__swsetup_r+0x6a>
 8005bdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005be0:	4299      	cmp	r1, r3
 8005be2:	d002      	beq.n	8005bea <__swsetup_r+0x66>
 8005be4:	4630      	mov	r0, r6
 8005be6:	f7ff fa97 	bl	8005118 <_free_r>
 8005bea:	2300      	movs	r3, #0
 8005bec:	6363      	str	r3, [r4, #52]	; 0x34
 8005bee:	89a3      	ldrh	r3, [r4, #12]
 8005bf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bf4:	81a3      	strh	r3, [r4, #12]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	6063      	str	r3, [r4, #4]
 8005bfa:	6923      	ldr	r3, [r4, #16]
 8005bfc:	6023      	str	r3, [r4, #0]
 8005bfe:	89a3      	ldrh	r3, [r4, #12]
 8005c00:	f043 0308 	orr.w	r3, r3, #8
 8005c04:	81a3      	strh	r3, [r4, #12]
 8005c06:	6923      	ldr	r3, [r4, #16]
 8005c08:	b94b      	cbnz	r3, 8005c1e <__swsetup_r+0x9a>
 8005c0a:	89a3      	ldrh	r3, [r4, #12]
 8005c0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c14:	d003      	beq.n	8005c1e <__swsetup_r+0x9a>
 8005c16:	4621      	mov	r1, r4
 8005c18:	4630      	mov	r0, r6
 8005c1a:	f7fe fe9b 	bl	8004954 <__smakebuf_r>
 8005c1e:	89a0      	ldrh	r0, [r4, #12]
 8005c20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c24:	f010 0301 	ands.w	r3, r0, #1
 8005c28:	d00a      	beq.n	8005c40 <__swsetup_r+0xbc>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60a3      	str	r3, [r4, #8]
 8005c2e:	6963      	ldr	r3, [r4, #20]
 8005c30:	425b      	negs	r3, r3
 8005c32:	61a3      	str	r3, [r4, #24]
 8005c34:	6923      	ldr	r3, [r4, #16]
 8005c36:	b943      	cbnz	r3, 8005c4a <__swsetup_r+0xc6>
 8005c38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c3c:	d1ba      	bne.n	8005bb4 <__swsetup_r+0x30>
 8005c3e:	bd70      	pop	{r4, r5, r6, pc}
 8005c40:	0781      	lsls	r1, r0, #30
 8005c42:	bf58      	it	pl
 8005c44:	6963      	ldrpl	r3, [r4, #20]
 8005c46:	60a3      	str	r3, [r4, #8]
 8005c48:	e7f4      	b.n	8005c34 <__swsetup_r+0xb0>
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	e7f7      	b.n	8005c3e <__swsetup_r+0xba>
 8005c4e:	bf00      	nop
 8005c50:	2000002c 	.word	0x2000002c
 8005c54:	08006008 	.word	0x08006008
 8005c58:	08006028 	.word	0x08006028
 8005c5c:	08005fe8 	.word	0x08005fe8

08005c60 <abort>:
 8005c60:	b508      	push	{r3, lr}
 8005c62:	2006      	movs	r0, #6
 8005c64:	f000 f834 	bl	8005cd0 <raise>
 8005c68:	2001      	movs	r0, #1
 8005c6a:	f7fc ff35 	bl	8002ad8 <_exit>

08005c6e <_malloc_usable_size_r>:
 8005c6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c72:	1f18      	subs	r0, r3, #4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	bfbc      	itt	lt
 8005c78:	580b      	ldrlt	r3, [r1, r0]
 8005c7a:	18c0      	addlt	r0, r0, r3
 8005c7c:	4770      	bx	lr

08005c7e <_raise_r>:
 8005c7e:	291f      	cmp	r1, #31
 8005c80:	b538      	push	{r3, r4, r5, lr}
 8005c82:	4604      	mov	r4, r0
 8005c84:	460d      	mov	r5, r1
 8005c86:	d904      	bls.n	8005c92 <_raise_r+0x14>
 8005c88:	2316      	movs	r3, #22
 8005c8a:	6003      	str	r3, [r0, #0]
 8005c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c90:	bd38      	pop	{r3, r4, r5, pc}
 8005c92:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005c94:	b112      	cbz	r2, 8005c9c <_raise_r+0x1e>
 8005c96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c9a:	b94b      	cbnz	r3, 8005cb0 <_raise_r+0x32>
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	f000 f831 	bl	8005d04 <_getpid_r>
 8005ca2:	462a      	mov	r2, r5
 8005ca4:	4601      	mov	r1, r0
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cac:	f000 b818 	b.w	8005ce0 <_kill_r>
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d00a      	beq.n	8005cca <_raise_r+0x4c>
 8005cb4:	1c59      	adds	r1, r3, #1
 8005cb6:	d103      	bne.n	8005cc0 <_raise_r+0x42>
 8005cb8:	2316      	movs	r3, #22
 8005cba:	6003      	str	r3, [r0, #0]
 8005cbc:	2001      	movs	r0, #1
 8005cbe:	e7e7      	b.n	8005c90 <_raise_r+0x12>
 8005cc0:	2400      	movs	r4, #0
 8005cc2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	4798      	blx	r3
 8005cca:	2000      	movs	r0, #0
 8005ccc:	e7e0      	b.n	8005c90 <_raise_r+0x12>
	...

08005cd0 <raise>:
 8005cd0:	4b02      	ldr	r3, [pc, #8]	; (8005cdc <raise+0xc>)
 8005cd2:	4601      	mov	r1, r0
 8005cd4:	6818      	ldr	r0, [r3, #0]
 8005cd6:	f7ff bfd2 	b.w	8005c7e <_raise_r>
 8005cda:	bf00      	nop
 8005cdc:	2000002c 	.word	0x2000002c

08005ce0 <_kill_r>:
 8005ce0:	b538      	push	{r3, r4, r5, lr}
 8005ce2:	4d07      	ldr	r5, [pc, #28]	; (8005d00 <_kill_r+0x20>)
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	4608      	mov	r0, r1
 8005cea:	4611      	mov	r1, r2
 8005cec:	602b      	str	r3, [r5, #0]
 8005cee:	f7fc fee3 	bl	8002ab8 <_kill>
 8005cf2:	1c43      	adds	r3, r0, #1
 8005cf4:	d102      	bne.n	8005cfc <_kill_r+0x1c>
 8005cf6:	682b      	ldr	r3, [r5, #0]
 8005cf8:	b103      	cbz	r3, 8005cfc <_kill_r+0x1c>
 8005cfa:	6023      	str	r3, [r4, #0]
 8005cfc:	bd38      	pop	{r3, r4, r5, pc}
 8005cfe:	bf00      	nop
 8005d00:	20000548 	.word	0x20000548

08005d04 <_getpid_r>:
 8005d04:	f7fc bed0 	b.w	8002aa8 <_getpid>

08005d08 <_init>:
 8005d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0a:	bf00      	nop
 8005d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0e:	bc08      	pop	{r3}
 8005d10:	469e      	mov	lr, r3
 8005d12:	4770      	bx	lr

08005d14 <_fini>:
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	bf00      	nop
 8005d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1a:	bc08      	pop	{r3}
 8005d1c:	469e      	mov	lr, r3
 8005d1e:	4770      	bx	lr
