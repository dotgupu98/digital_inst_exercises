
exercise_3.4-stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08004b90  08004b90  00014b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f6c  08004f6c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  08004f6c  08004f6c  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f6c  08004f6c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f6c  08004f6c  00014f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f70  08004f70  00014f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08004f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  200001fc  08005170  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08005170  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007601  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000124a  00000000  00000000  0002782d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  00028a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000878  00000000  00000000  00029398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004166  00000000  00000000  00029c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006da5  00000000  00000000  0002dd76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b172  00000000  00000000  00034b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008fc8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003934  00000000  00000000  0008fce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b74 	.word	0x08004b74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	08004b74 	.word	0x08004b74

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8000ba8:	b480      	push	{r7}
 8000baa:	b087      	sub	sp, #28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	e07c      	b.n	8000cbe <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000bd8:	68fa      	ldr	r2, [r7, #12]
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d16b      	bne.n	8000cb8 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	791b      	ldrb	r3, [r3, #4]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d003      	beq.n	8000bf0 <GPIO_Init+0x48>
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	791b      	ldrb	r3, [r3, #4]
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d134      	bne.n	8000c5a <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	689a      	ldr	r2, [r3, #8]
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	2103      	movs	r1, #3
 8000bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	401a      	ands	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	689a      	ldr	r2, [r3, #8]
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	795b      	ldrb	r3, [r3, #5]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	fa01 f303 	lsl.w	r3, r1, r3
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	889b      	ldrh	r3, [r3, #4]
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	4619      	mov	r1, r3
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	408b      	lsls	r3, r1
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	4013      	ands	r3, r2
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	889b      	ldrh	r3, [r3, #4]
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	799b      	ldrb	r3, [r3, #6]
 8000c46:	4619      	mov	r1, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	2103      	movs	r1, #3
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	791b      	ldrb	r3, [r3, #4]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	431a      	orrs	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	68da      	ldr	r2, [r3, #12]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	2103      	movs	r1, #3
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68da      	ldr	r2, [r3, #12]
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	79db      	ldrb	r3, [r3, #7]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	f67f af7f 	bls.w	8000bc4 <GPIO_Init+0x1c>
    }
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	bf00      	nop
 8000cca:	371c      	adds	r7, #28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ce2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2202      	movs	r2, #2
 8000cee:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	71da      	strb	r2, [r3, #7]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	807b      	strh	r3, [r7, #2]
 8000d14:	4613      	mov	r3, r2
 8000d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8000d18:	787b      	ldrb	r3, [r7, #1]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d1e:	887a      	ldrh	r2, [r7, #2]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000d24:	e002      	b.n	8000d2c <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin ;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	887a      	ldrh	r2, [r7, #2]
 8000d2a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	230f      	movs	r3, #15
 8000d4a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	78db      	ldrb	r3, [r3, #3]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d03a      	beq.n	8000dca <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000d54:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <NVIC_Init+0xc0>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	0a1b      	lsrs	r3, r3, #8
 8000d5c:	f003 0307 	and.w	r3, r3, #7
 8000d60:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	f1c3 0304 	rsb	r3, r3, #4
 8000d68:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d72:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	785b      	ldrb	r3, [r3, #1]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	789b      	ldrb	r3, [r3, #2]
 8000d86:	461a      	mov	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	011b      	lsls	r3, r3, #4
 8000d96:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000d98:	4a18      	ldr	r2, [pc, #96]	; (8000dfc <NVIC_Init+0xc4>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	6979      	ldr	r1, [r7, #20]
 8000da0:	b2c9      	uxtb	r1, r1
 8000da2:	4413      	add	r3, r2
 8000da4:	460a      	mov	r2, r1
 8000da6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000db2:	4912      	ldr	r1, [pc, #72]	; (8000dfc <NVIC_Init+0xc4>)
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	7812      	ldrb	r2, [r2, #0]
 8000db8:	0952      	lsrs	r2, r2, #5
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000dc4:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000dc8:	e00f      	b.n	8000dea <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000dd2:	490a      	ldr	r1, [pc, #40]	; (8000dfc <NVIC_Init+0xc4>)
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	7812      	ldrb	r2, [r2, #0]
 8000dd8:	0952      	lsrs	r2, r2, #5
 8000dda:	b2d2      	uxtb	r2, r2
 8000ddc:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000dde:	2201      	movs	r2, #1
 8000de0:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000de2:	f100 0320 	add.w	r3, r0, #32
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dea:	bf00      	nop
 8000dec:	371c      	adds	r7, #28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b08b      	sub	sp, #44	; 0x2c
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	2300      	movs	r3, #0
 8000e26:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000e28:	4b8b      	ldr	r3, [pc, #556]	; (8001058 <RCC_GetClocksFreq+0x258>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 030c 	and.w	r3, r3, #12
 8000e30:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000e32:	6a3b      	ldr	r3, [r7, #32]
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d011      	beq.n	8000e5c <RCC_GetClocksFreq+0x5c>
 8000e38:	6a3b      	ldr	r3, [r7, #32]
 8000e3a:	2b08      	cmp	r3, #8
 8000e3c:	d837      	bhi.n	8000eae <RCC_GetClocksFreq+0xae>
 8000e3e:	6a3b      	ldr	r3, [r7, #32]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <RCC_GetClocksFreq+0x4c>
 8000e44:	6a3b      	ldr	r3, [r7, #32]
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	d004      	beq.n	8000e54 <RCC_GetClocksFreq+0x54>
 8000e4a:	e030      	b.n	8000eae <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a83      	ldr	r2, [pc, #524]	; (800105c <RCC_GetClocksFreq+0x25c>)
 8000e50:	601a      	str	r2, [r3, #0]
      break;
 8000e52:	e030      	b.n	8000eb6 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a81      	ldr	r2, [pc, #516]	; (800105c <RCC_GetClocksFreq+0x25c>)
 8000e58:	601a      	str	r2, [r3, #0]
      break;
 8000e5a:	e02c      	b.n	8000eb6 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000e5c:	4b7e      	ldr	r3, [pc, #504]	; (8001058 <RCC_GetClocksFreq+0x258>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000e64:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000e66:	4b7c      	ldr	r3, [pc, #496]	; (8001058 <RCC_GetClocksFreq+0x258>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6e:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	0c9b      	lsrs	r3, r3, #18
 8000e74:	3302      	adds	r3, #2
 8000e76:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d105      	bne.n	8000e8a <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	4a77      	ldr	r2, [pc, #476]	; (8001060 <RCC_GetClocksFreq+0x260>)
 8000e82:	fb02 f303 	mul.w	r3, r2, r3
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
 8000e88:	e00d      	b.n	8000ea6 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000e8a:	4b73      	ldr	r3, [pc, #460]	; (8001058 <RCC_GetClocksFreq+0x258>)
 8000e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3301      	adds	r3, #1
 8000e94:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000e96:	4a71      	ldr	r2, [pc, #452]	; (800105c <RCC_GetClocksFreq+0x25c>)
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fb02 f303 	mul.w	r3, r2, r3
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eaa:	601a      	str	r2, [r3, #0]
      break;
 8000eac:	e003      	b.n	8000eb6 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a6a      	ldr	r2, [pc, #424]	; (800105c <RCC_GetClocksFreq+0x25c>)
 8000eb2:	601a      	str	r2, [r3, #0]
      break;
 8000eb4:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000eb6:	4b68      	ldr	r3, [pc, #416]	; (8001058 <RCC_GetClocksFreq+0x258>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ebe:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000ec0:	6a3b      	ldr	r3, [r7, #32]
 8000ec2:	091b      	lsrs	r3, r3, #4
 8000ec4:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000ec6:	4a67      	ldr	r2, [pc, #412]	; (8001064 <RCC_GetClocksFreq+0x264>)
 8000ec8:	6a3b      	ldr	r3, [r7, #32]
 8000eca:	4413      	add	r3, r2
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	40da      	lsrs	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000ede:	4b5e      	ldr	r3, [pc, #376]	; (8001058 <RCC_GetClocksFreq+0x258>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000ee6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000ee8:	6a3b      	ldr	r3, [r7, #32]
 8000eea:	0a1b      	lsrs	r3, r3, #8
 8000eec:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000eee:	4a5d      	ldr	r2, [pc, #372]	; (8001064 <RCC_GetClocksFreq+0x264>)
 8000ef0:	6a3b      	ldr	r3, [r7, #32]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	40da      	lsrs	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000f06:	4b54      	ldr	r3, [pc, #336]	; (8001058 <RCC_GetClocksFreq+0x258>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000f0e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000f10:	6a3b      	ldr	r3, [r7, #32]
 8000f12:	0adb      	lsrs	r3, r3, #11
 8000f14:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000f16:	4a53      	ldr	r2, [pc, #332]	; (8001064 <RCC_GetClocksFreq+0x264>)
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	40da      	lsrs	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000f2e:	4b4a      	ldr	r3, [pc, #296]	; (8001058 <RCC_GetClocksFreq+0x258>)
 8000f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f32:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000f36:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000f38:	6a3b      	ldr	r3, [r7, #32]
 8000f3a:	091b      	lsrs	r3, r3, #4
 8000f3c:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000f3e:	4a4a      	ldr	r2, [pc, #296]	; (8001068 <RCC_GetClocksFreq+0x268>)
 8000f40:	6a3b      	ldr	r3, [r7, #32]
 8000f42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	f003 0310 	and.w	r3, r3, #16
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d006      	beq.n	8000f62 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	e003      	b.n	8000f6a <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000f6a:	4b3b      	ldr	r3, [pc, #236]	; (8001058 <RCC_GetClocksFreq+0x258>)
 8000f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6e:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8000f72:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000f74:	6a3b      	ldr	r3, [r7, #32]
 8000f76:	0a5b      	lsrs	r3, r3, #9
 8000f78:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000f7a:	4a3b      	ldr	r2, [pc, #236]	; (8001068 <RCC_GetClocksFreq+0x268>)
 8000f7c:	6a3b      	ldr	r3, [r7, #32]
 8000f7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	f003 0310 	and.w	r3, r3, #16
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d006      	beq.n	8000f9e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	615a      	str	r2, [r3, #20]
 8000f9c:	e003      	b.n	8000fa6 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000fa6:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <RCC_GetClocksFreq+0x258>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	2b10      	cmp	r3, #16
 8000fb0:	d003      	beq.n	8000fba <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a29      	ldr	r2, [pc, #164]	; (800105c <RCC_GetClocksFreq+0x25c>)
 8000fb6:	619a      	str	r2, [r3, #24]
 8000fb8:	e003      	b.n	8000fc2 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000fc2:	4b25      	ldr	r3, [pc, #148]	; (8001058 <RCC_GetClocksFreq+0x258>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0320 	and.w	r3, r3, #32
 8000fca:	2b20      	cmp	r3, #32
 8000fcc:	d003      	beq.n	8000fd6 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a22      	ldr	r2, [pc, #136]	; (800105c <RCC_GetClocksFreq+0x25c>)
 8000fd2:	61da      	str	r2, [r3, #28]
 8000fd4:	e003      	b.n	8000fde <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000fde:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <RCC_GetClocksFreq+0x258>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fea:	d10d      	bne.n	8001008 <RCC_GetClocksFreq+0x208>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d108      	bne.n	8001008 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d104      	bne.n	8001008 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	005a      	lsls	r2, r3, #1
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	621a      	str	r2, [r3, #32]
 8001006:	e003      	b.n	8001010 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <RCC_GetClocksFreq+0x258>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800101c:	d10d      	bne.n	800103a <RCC_GetClocksFreq+0x23a>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001024:	429a      	cmp	r2, r3
 8001026:	d108      	bne.n	800103a <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	429a      	cmp	r2, r3
 800102e:	d104      	bne.n	800103a <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	005a      	lsls	r2, r3, #1
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	625a      	str	r2, [r3, #36]	; 0x24
 8001038:	e003      	b.n	8001042 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68da      	ldr	r2, [r3, #12]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <RCC_GetClocksFreq+0x258>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d10e      	bne.n	800106c <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	629a      	str	r2, [r3, #40]	; 0x28
 8001056:	e028      	b.n	80010aa <RCC_GetClocksFreq+0x2aa>
 8001058:	40021000 	.word	0x40021000
 800105c:	007a1200 	.word	0x007a1200
 8001060:	003d0900 	.word	0x003d0900
 8001064:	20000000 	.word	0x20000000
 8001068:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 800106c:	4b6c      	ldr	r3, [pc, #432]	; (8001220 <RCC_GetClocksFreq+0x420>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b01      	cmp	r3, #1
 8001076:	d104      	bne.n	8001082 <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
 8001080:	e013      	b.n	80010aa <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8001082:	4b67      	ldr	r3, [pc, #412]	; (8001220 <RCC_GetClocksFreq+0x420>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d104      	bne.n	8001098 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001094:	629a      	str	r2, [r3, #40]	; 0x28
 8001096:	e008      	b.n	80010aa <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8001098:	4b61      	ldr	r3, [pc, #388]	; (8001220 <RCC_GetClocksFreq+0x420>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d102      	bne.n	80010aa <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a5f      	ldr	r2, [pc, #380]	; (8001224 <RCC_GetClocksFreq+0x424>)
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 80010aa:	4b5d      	ldr	r3, [pc, #372]	; (8001220 <RCC_GetClocksFreq+0x420>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d104      	bne.n	80010c0 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80010be:	e021      	b.n	8001104 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 80010c0:	4b57      	ldr	r3, [pc, #348]	; (8001220 <RCC_GetClocksFreq+0x420>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010cc:	d104      	bne.n	80010d8 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80010d6:	e015      	b.n	8001104 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80010d8:	4b51      	ldr	r3, [pc, #324]	; (8001220 <RCC_GetClocksFreq+0x420>)
 80010da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80010e4:	d104      	bne.n	80010f0 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80010ee:	e009      	b.n	8001104 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 80010f0:	4b4b      	ldr	r3, [pc, #300]	; (8001220 <RCC_GetClocksFreq+0x420>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80010fc:	d102      	bne.n	8001104 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a48      	ldr	r2, [pc, #288]	; (8001224 <RCC_GetClocksFreq+0x424>)
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8001104:	4b46      	ldr	r3, [pc, #280]	; (8001220 <RCC_GetClocksFreq+0x420>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001108:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d104      	bne.n	800111a <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	631a      	str	r2, [r3, #48]	; 0x30
 8001118:	e021      	b.n	800115e <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800111a:	4b41      	ldr	r3, [pc, #260]	; (8001220 <RCC_GetClocksFreq+0x420>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001122:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001126:	d104      	bne.n	8001132 <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	631a      	str	r2, [r3, #48]	; 0x30
 8001130:	e015      	b.n	800115e <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8001132:	4b3b      	ldr	r3, [pc, #236]	; (8001220 <RCC_GetClocksFreq+0x420>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800113a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800113e:	d104      	bne.n	800114a <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001146:	631a      	str	r2, [r3, #48]	; 0x30
 8001148:	e009      	b.n	800115e <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 800114a:	4b35      	ldr	r3, [pc, #212]	; (8001220 <RCC_GetClocksFreq+0x420>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001152:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001156:	d102      	bne.n	800115e <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a32      	ldr	r2, [pc, #200]	; (8001224 <RCC_GetClocksFreq+0x424>)
 800115c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 800115e:	4b30      	ldr	r3, [pc, #192]	; (8001220 <RCC_GetClocksFreq+0x420>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d104      	bne.n	8001174 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	635a      	str	r2, [r3, #52]	; 0x34
 8001172:	e021      	b.n	80011b8 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8001174:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <RCC_GetClocksFreq+0x420>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800117c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001180:	d104      	bne.n	800118c <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	635a      	str	r2, [r3, #52]	; 0x34
 800118a:	e015      	b.n	80011b8 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 800118c:	4b24      	ldr	r3, [pc, #144]	; (8001220 <RCC_GetClocksFreq+0x420>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001194:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001198:	d104      	bne.n	80011a4 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011a0:	635a      	str	r2, [r3, #52]	; 0x34
 80011a2:	e009      	b.n	80011b8 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <RCC_GetClocksFreq+0x420>)
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80011ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80011b0:	d102      	bne.n	80011b8 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <RCC_GetClocksFreq+0x424>)
 80011b6:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <RCC_GetClocksFreq+0x420>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011bc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d104      	bne.n	80011ce <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 80011cc:	e021      	b.n	8001212 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <RCC_GetClocksFreq+0x420>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80011d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011da:	d104      	bne.n	80011e6 <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80011e4:	e015      	b.n	8001212 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <RCC_GetClocksFreq+0x420>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80011ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80011f2:	d104      	bne.n	80011fe <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011fa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80011fc:	e009      	b.n	8001212 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <RCC_GetClocksFreq+0x420>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001206:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800120a:	d102      	bne.n	8001212 <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a05      	ldr	r2, [pc, #20]	; (8001224 <RCC_GetClocksFreq+0x424>)
 8001210:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001212:	bf00      	nop
 8001214:	372c      	adds	r7, #44	; 0x2c
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000
 8001224:	007a1200 	.word	0x007a1200

08001228 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d006      	beq.n	8001248 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <RCC_AHBPeriphClockCmd+0x3c>)
 800123c:	695a      	ldr	r2, [r3, #20]
 800123e:	4909      	ldr	r1, [pc, #36]	; (8001264 <RCC_AHBPeriphClockCmd+0x3c>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4313      	orrs	r3, r2
 8001244:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001246:	e006      	b.n	8001256 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <RCC_AHBPeriphClockCmd+0x3c>)
 800124a:	695a      	ldr	r2, [r3, #20]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	43db      	mvns	r3, r3
 8001250:	4904      	ldr	r1, [pc, #16]	; (8001264 <RCC_AHBPeriphClockCmd+0x3c>)
 8001252:	4013      	ands	r3, r2
 8001254:	614b      	str	r3, [r1, #20]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000

08001268 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d006      	beq.n	8001288 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <RCC_APB1PeriphClockCmd+0x3c>)
 800127c:	69da      	ldr	r2, [r3, #28]
 800127e:	4909      	ldr	r1, [pc, #36]	; (80012a4 <RCC_APB1PeriphClockCmd+0x3c>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4313      	orrs	r3, r2
 8001284:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001286:	e006      	b.n	8001296 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <RCC_APB1PeriphClockCmd+0x3c>)
 800128a:	69da      	ldr	r2, [r3, #28]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	43db      	mvns	r3, r3
 8001290:	4904      	ldr	r1, [pc, #16]	; (80012a4 <RCC_APB1PeriphClockCmd+0x3c>)
 8001292:	4013      	ands	r3, r2
 8001294:	61cb      	str	r3, [r1, #28]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000

080012a8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d008      	beq.n	80012cc <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80012ca:	e007      	b.n	80012dc <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	f023 0301 	bic.w	r3, r3, #1
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	801a      	strh	r2, [r3, #0]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
 80012f4:	4613      	mov	r3, r2
 80012f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80012f8:	787b      	ldrb	r3, [r7, #1]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d006      	beq.n	800130c <TIM_ITConfig+0x24>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68da      	ldr	r2, [r3, #12]
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	60da      	str	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 800130a:	e007      	b.n	800131c <TIM_ITConfig+0x34>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	887a      	ldrh	r2, [r7, #2]
 8001312:	43d2      	mvns	r2, r2
 8001314:	b292      	uxth	r2, r2
 8001316:	401a      	ands	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	60da      	str	r2, [r3, #12]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8001338:	2300      	movs	r3, #0
 800133a:	81bb      	strh	r3, [r7, #12]
 800133c:	2300      	movs	r3, #0
 800133e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	b29a      	uxth	r2, r3
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	4013      	ands	r3, r2
 800134a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	b29a      	uxth	r2, r3
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	4013      	ands	r3, r2
 8001356:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001358:	89bb      	ldrh	r3, [r7, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d005      	beq.n	800136a <TIM_GetITStatus+0x42>
 800135e:	897b      	ldrh	r3, [r7, #10]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001364:	2301      	movs	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	e001      	b.n	800136e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800136e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001388:	887b      	ldrh	r3, [r7, #2]
 800138a:	43db      	mvns	r3, r3
 800138c:	b29b      	uxth	r3, r3
 800138e:	461a      	mov	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	611a      	str	r2, [r3, #16]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80013ac:	887b      	ldrh	r3, [r7, #2]
 80013ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	4613      	mov	r3, r2
 80013d0:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	0a1b      	lsrs	r3, r3, #8
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80013f6:	2201      	movs	r2, #1
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d103      	bne.n	800140e <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3304      	adds	r3, #4
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	e005      	b.n	800141a <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	2b03      	cmp	r3, #3
 8001412:	d102      	bne.n	800141a <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	3308      	adds	r3, #8
 8001418:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d006      	beq.n	800142e <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	6819      	ldr	r1, [r3, #0]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	430a      	orrs	r2, r1
 800142a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800142c:	e006      	b.n	800143c <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	6819      	ldr	r1, [r3, #0]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	43da      	mvns	r2, r3
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	400a      	ands	r2, r1
 800143a:	601a      	str	r2, [r3, #0]
}
 800143c:	bf00      	nop
 800143e:	3724      	adds	r7, #36	; 0x24
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69da      	ldr	r2, [r3, #28]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	4013      	ands	r3, r2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d002      	beq.n	8001468 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8001462:	2301      	movs	r3, #1
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e001      	b.n	800146c <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8001468:	2300      	movs	r3, #0
 800146a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800146c:	7bfb      	ldrb	r3, [r7, #15]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 800147a:	b480      	push	{r7}
 800147c:	b087      	sub	sp, #28
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001490:	2300      	movs	r3, #0
 8001492:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	b29b      	uxth	r3, r3
 800149c:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80014a4:	2201      	movs	r2, #1
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d105      	bne.n	80014c0 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	4013      	ands	r3, r2
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	e00d      	b.n	80014dc <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d105      	bne.n	80014d2 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	4013      	ands	r3, r2
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	e004      	b.n	80014dc <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	4013      	ands	r3, r2
 80014da:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	0c1b      	lsrs	r3, r3, #16
 80014e0:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80014e2:	2201      	movs	r2, #1
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	4013      	ands	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <USART_GetITStatus+0x8e>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d002      	beq.n	8001508 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8001502:	2301      	movs	r3, #1
 8001504:	74fb      	strb	r3, [r7, #19]
 8001506:	e001      	b.n	800150c <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800150c:	7cfb      	ldrb	r3, [r7, #19]
}
 800150e:	4618      	mov	r0, r3
 8001510:	371c      	adds	r7, #28
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 031f 	and.w	r3, r3, #31
 800152c:	2201      	movs	r2, #1
 800152e:	fa02 f103 	lsl.w	r1, r2, r3
 8001532:	4a06      	ldr	r2, [pc, #24]	; (800154c <NVIC_EnableIRQ+0x30>)
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	095b      	lsrs	r3, r3, #5
 800153a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000e100 	.word	0xe000e100

08001550 <uart_get_char>:
volatile uint8_t UART_BUFFER[UART_BUFFER_LENGTH] = {0};
volatile uint8_t UART_END_IDX = 0;
volatile uint8_t UART_START_IDX = 0;
volatile uint8_t UART_COUNT = 0;

uint8_t uart_get_char(){
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	71fb      	strb	r3, [r7, #7]
    if (UART_COUNT > 0) {
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <uart_get_char+0x48>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d011      	beq.n	8001588 <uart_get_char+0x38>
        val = UART_BUFFER[UART_START_IDX++];
 8001564:	4b0d      	ldr	r3, [pc, #52]	; (800159c <uart_get_char+0x4c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	b2d1      	uxtb	r1, r2
 800156e:	4a0b      	ldr	r2, [pc, #44]	; (800159c <uart_get_char+0x4c>)
 8001570:	7011      	strb	r1, [r2, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <uart_get_char+0x50>)
 8001576:	5c9b      	ldrb	r3, [r3, r2]
 8001578:	71fb      	strb	r3, [r7, #7]
        UART_COUNT--;
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <uart_get_char+0x48>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	3b01      	subs	r3, #1
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <uart_get_char+0x48>)
 8001586:	701a      	strb	r2, [r3, #0]
    }
    return val;
 8001588:	79fb      	ldrb	r3, [r7, #7]
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	2000031a 	.word	0x2000031a
 800159c:	20000319 	.word	0x20000319
 80015a0:	20000218 	.word	0x20000218

080015a4 <uart_put_char>:

void uart_put_char(uint8_t c) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	4619      	mov	r1, r3
 80015b4:	4807      	ldr	r0, [pc, #28]	; (80015d4 <uart_put_char+0x30>)
 80015b6:	f7ff fef3 	bl	80013a0 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 80015ba:	bf00      	nop
 80015bc:	2180      	movs	r1, #128	; 0x80
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <uart_put_char+0x30>)
 80015c0:	f7ff ff42 	bl	8001448 <USART_GetFlagStatus>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f8      	beq.n	80015bc <uart_put_char+0x18>
}
 80015ca:	bf00      	nop
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40004400 	.word	0x40004400

080015d8 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	e012      	b.n	8001612 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b0a      	cmp	r3, #10
 80015f6:	d102      	bne.n	80015fe <_write_r+0x26>
            uart_put_char('\r');
 80015f8:	200d      	movs	r0, #13
 80015fa:	f7ff ffd3 	bl	80015a4 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	4413      	add	r3, r2
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ffcc 	bl	80015a4 <uart_put_char>
    for (n = 0; n < len; n++) {
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	3301      	adds	r3, #1
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	dbe8      	blt.n	80015ec <_write_r+0x14>
    }

    return len;
 800161a:	683b      	ldr	r3, [r7, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8001628:	4915      	ldr	r1, [pc, #84]	; (8001680 <USART2_IRQHandler+0x5c>)
 800162a:	4816      	ldr	r0, [pc, #88]	; (8001684 <USART2_IRQHandler+0x60>)
 800162c:	f7ff ff25 	bl	800147a <USART_GetITStatus>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d021      	beq.n	800167a <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <USART2_IRQHandler+0x60>)
 8001638:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800163a:	b299      	uxth	r1, r3
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <USART2_IRQHandler+0x64>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	b2d0      	uxtb	r0, r2
 8001646:	4a10      	ldr	r2, [pc, #64]	; (8001688 <USART2_IRQHandler+0x64>)
 8001648:	7010      	strb	r0, [r2, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	b2c9      	uxtb	r1, r1
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <USART2_IRQHandler+0x68>)
 8001650:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <USART2_IRQHandler+0x6c>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2bff      	cmp	r3, #255	; 0xff
 800165a:	d107      	bne.n	800166c <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 800165c:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <USART2_IRQHandler+0x70>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	3301      	adds	r3, #1
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <USART2_IRQHandler+0x70>)
 8001668:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 800166a:	e006      	b.n	800167a <USART2_IRQHandler+0x56>
            UART_COUNT++;
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <USART2_IRQHandler+0x6c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	3301      	adds	r3, #1
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <USART2_IRQHandler+0x6c>)
 8001678:	701a      	strb	r2, [r3, #0]
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	00050105 	.word	0x00050105
 8001684:	40004400 	.word	0x40004400
 8001688:	20000318 	.word	0x20000318
 800168c:	20000218 	.word	0x20000218
 8001690:	2000031a 	.word	0x2000031a
 8001694:	20000319 	.word	0x20000319

08001698 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b094      	sub	sp, #80	; 0x50
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 80016a0:	4b86      	ldr	r3, [pc, #536]	; (80018bc <uart_init+0x224>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f001 f909 	bl	80028c0 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 80016ae:	4b83      	ldr	r3, [pc, #524]	; (80018bc <uart_init+0x224>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f001 f902 	bl	80028c0 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 80016bc:	4b80      	ldr	r3, [pc, #512]	; (80018c0 <uart_init+0x228>)
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	4a7f      	ldr	r2, [pc, #508]	; (80018c0 <uart_init+0x228>)
 80016c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c6:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 80016c8:	4b7d      	ldr	r3, [pc, #500]	; (80018c0 <uart_init+0x228>)
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	4a7c      	ldr	r2, [pc, #496]	; (80018c0 <uart_init+0x228>)
 80016ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d2:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 80016d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016e2:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 80016e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016f2:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 80016f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001702:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001704:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800170e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001712:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8001714:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800171e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001722:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001724:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800172e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001732:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8001734:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001738:	889b      	ldrh	r3, [r3, #4]
 800173a:	b29b      	uxth	r3, r3
 800173c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001740:	f023 030c 	bic.w	r3, r3, #12
 8001744:	b29b      	uxth	r3, r3
 8001746:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001748:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800174c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001750:	8892      	ldrh	r2, [r2, #4]
 8001752:	b292      	uxth	r2, r2
 8001754:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8001756:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001760:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001764:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001766:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001770:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001774:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8001776:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001780:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001784:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001786:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001790:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001794:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8001796:	4b4b      	ldr	r3, [pc, #300]	; (80018c4 <uart_init+0x22c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a4a      	ldr	r2, [pc, #296]	; (80018c4 <uart_init+0x22c>)
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 80017a2:	4b48      	ldr	r3, [pc, #288]	; (80018c4 <uart_init+0x22c>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4a47      	ldr	r2, [pc, #284]	; (80018c4 <uart_init+0x22c>)
 80017a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017ac:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 80017ae:	4b45      	ldr	r3, [pc, #276]	; (80018c4 <uart_init+0x22c>)
 80017b0:	4a44      	ldr	r2, [pc, #272]	; (80018c4 <uart_init+0x22c>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 80017b6:	4b43      	ldr	r3, [pc, #268]	; (80018c4 <uart_init+0x22c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a42      	ldr	r2, [pc, #264]	; (80018c4 <uart_init+0x22c>)
 80017bc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80017c0:	f023 030c 	bic.w	r3, r3, #12
 80017c4:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 80017c6:	4b3f      	ldr	r3, [pc, #252]	; (80018c4 <uart_init+0x22c>)
 80017c8:	4a3e      	ldr	r2, [pc, #248]	; (80018c4 <uart_init+0x22c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 80017ce:	4b3d      	ldr	r3, [pc, #244]	; (80018c4 <uart_init+0x22c>)
 80017d0:	4a3c      	ldr	r2, [pc, #240]	; (80018c4 <uart_init+0x22c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 80017d6:	4b3b      	ldr	r3, [pc, #236]	; (80018c4 <uart_init+0x22c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a3a      	ldr	r2, [pc, #232]	; (80018c4 <uart_init+0x22c>)
 80017dc:	f043 030c 	orr.w	r3, r3, #12
 80017e0:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 80017e2:	4b38      	ldr	r3, [pc, #224]	; (80018c4 <uart_init+0x22c>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	4a37      	ldr	r2, [pc, #220]	; (80018c4 <uart_init+0x22c>)
 80017e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017ec:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 80017ee:	4b35      	ldr	r3, [pc, #212]	; (80018c4 <uart_init+0x22c>)
 80017f0:	4a34      	ldr	r2, [pc, #208]	; (80018c4 <uart_init+0x22c>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017fa:	2300      	movs	r3, #0
 80017fc:	647b      	str	r3, [r7, #68]	; 0x44
 80017fe:	2300      	movs	r3, #0
 8001800:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fafa 	bl	8000e00 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 800180c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180e:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001810:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <uart_init+0x22c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d010      	beq.n	800183e <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 800181c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800181e:	005a      	lsls	r2, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	fbb2 f3f3 	udiv	r3, r2, r3
 8001826:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	fb01 f202 	mul.w	r2, r1, r2
 8001838:	1a9b      	subs	r3, r3, r2
 800183a:	64bb      	str	r3, [r7, #72]	; 0x48
 800183c:	e00d      	b.n	800185a <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 800183e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	fbb2 f3f3 	udiv	r3, r2, r3
 8001846:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8001848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	fb01 f202 	mul.w	r2, r1, r2
 8001856:	1a9b      	subs	r3, r3, r2
 8001858:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	085b      	lsrs	r3, r3, #1
 800185e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001860:	429a      	cmp	r2, r3
 8001862:	d302      	bcc.n	800186a <uart_init+0x1d2>
        divider++;
 8001864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001866:	3301      	adds	r3, #1
 8001868:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <uart_init+0x22c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00b      	beq.n	800188e <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8001876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001878:	085b      	lsrs	r3, r3, #1
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8001880:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001882:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001886:	4013      	ands	r3, r2
 8001888:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800188a:	4313      	orrs	r3, r2
 800188c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 800188e:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <uart_init+0x22c>)
 8001890:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001892:	b292      	uxth	r2, r2
 8001894:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <uart_init+0x22c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <uart_init+0x22c>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80018a2:	2201      	movs	r2, #1
 80018a4:	4908      	ldr	r1, [pc, #32]	; (80018c8 <uart_init+0x230>)
 80018a6:	4807      	ldr	r0, [pc, #28]	; (80018c4 <uart_init+0x22c>)
 80018a8:	f7ff fd8c 	bl	80013c4 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 80018ac:	2026      	movs	r0, #38	; 0x26
 80018ae:	f7ff fe35 	bl	800151c <NVIC_EnableIRQ>
}
 80018b2:	bf00      	nop
 80018b4:	3750      	adds	r7, #80	; 0x50
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000002c 	.word	0x2000002c
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40004400 	.word	0x40004400
 80018c8:	00050105 	.word	0x00050105

080018cc <NVIC_EnableIRQ>:
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	f003 031f 	and.w	r3, r3, #31
 80018dc:	2201      	movs	r2, #1
 80018de:	fa02 f103 	lsl.w	r1, r2, r3
 80018e2:	4a06      	ldr	r2, [pc, #24]	; (80018fc <NVIC_EnableIRQ+0x30>)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	095b      	lsrs	r3, r3, #5
 80018ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e100 	.word	0xe000e100

08001900 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	2b00      	cmp	r3, #0
 8001912:	da0b      	bge.n	800192c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	490c      	ldr	r1, [pc, #48]	; (800194c <NVIC_SetPriority+0x4c>)
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	f003 030f 	and.w	r3, r3, #15
 8001920:	3b04      	subs	r3, #4
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	440b      	add	r3, r1
 8001928:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800192a:	e009      	b.n	8001940 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	4907      	ldr	r1, [pc, #28]	; (8001950 <NVIC_SetPriority+0x50>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	0112      	lsls	r2, r2, #4
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	440b      	add	r3, r1
 800193c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00
 8001950:	e000e100 	.word	0xe000e100

08001954 <initTimer2>:

//uint8_t positions[4] = { 0b0101, 0b1001, 0b1010, 0b0110 };
uint16_t interval=100;
uint8_t current_step=0;

void initTimer2(void){
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
 800195a:	2101      	movs	r1, #1
 800195c:	2001      	movs	r0, #1
 800195e:	f7ff fc83 	bl	8001268 <RCC_APB1PeriphClockCmd>
	NVIC_InitTypeDef NVIC_InitStructure;
	// NVIC for timer
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8001962:	231c      	movs	r3, #28
 8001964:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001966:	2301      	movs	r3, #1
 8001968:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStructure);
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff f9df 	bl	8000d38 <NVIC_Init>
	TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE);
 800197a:	2201      	movs	r2, #1
 800197c:	2101      	movs	r1, #1
 800197e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001982:	f7ff fcb1 	bl	80012e8 <TIM_ITConfig>
	TIM_Cmd(TIM2,ENABLE);
 8001986:	2101      	movs	r1, #1
 8001988:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800198c:	f7ff fc8c 	bl	80012a8 <TIM_Cmd>
	//Settings timer
	RCC->APB1ENR |= RCC_APB1Periph_TIM2; // Enable clock line to timer 2
 8001990:	4b16      	ldr	r3, [pc, #88]	; (80019ec <initTimer2+0x98>)
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	4a15      	ldr	r2, [pc, #84]	; (80019ec <initTimer2+0x98>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	61d3      	str	r3, [r2, #28]
	TIM2->CR1=0xB01;
 800199c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019a0:	f640 3201 	movw	r2, #2817	; 0xb01
 80019a4:	801a      	strh	r2, [r3, #0]
	TIM2->PSC=6399; //change pre-scaler frequency to 10kHz
 80019a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019aa:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80019ae:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->ARR=interval; //count up to 100
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <initTimer2+0x9c>)
 80019b2:	881a      	ldrh	r2, [r3, #0]
 80019b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019b8:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->DIER |= 0x0001; // Enable timer 2 interrupts
 80019ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	60d3      	str	r3, [r2, #12]
    //NVIC settings
	NVIC_SetPriority(TIM2_IRQn, 1); // Set interrupt priority interrupts
 80019ca:	2101      	movs	r1, #1
 80019cc:	201c      	movs	r0, #28
 80019ce:	f7ff ff97 	bl	8001900 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn); // Enable interrupt
 80019d2:	201c      	movs	r0, #28
 80019d4:	f7ff ff7a 	bl	80018cc <NVIC_EnableIRQ>
	TIM_Cmd(TIM2,DISABLE);
 80019d8:	2100      	movs	r1, #0
 80019da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80019de:	f7ff fc63 	bl	80012a8 <TIM_Cmd>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000
 80019f0:	2000002a 	.word	0x2000002a

080019f4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) { //timer interrupt handler
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	if(TIM_GetITStatus(TIM2,TIM_IT_Update) != RESET){ //if interrupt occurs
 80019f8:	2101      	movs	r1, #1
 80019fa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80019fe:	f7ff fc93 	bl	8001328 <TIM_GetITStatus>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d016      	beq.n	8001a36 <TIM2_IRQHandler+0x42>
		stepper_func(current_step);
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <TIM2_IRQHandler+0x48>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 f871 	bl	8001af4 <stepper_func>
		current_step=(current_step+1)%4;
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <TIM2_IRQHandler+0x48>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	3301      	adds	r3, #1
 8001a18:	425a      	negs	r2, r3
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	f002 0203 	and.w	r2, r2, #3
 8001a22:	bf58      	it	pl
 8001a24:	4253      	negpl	r3, r2
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <TIM2_IRQHandler+0x48>)
 8001a2a:	701a      	strb	r2, [r3, #0]
		//printf("%d\n", current_step);
		TIM_ClearITPendingBit(TIM2,TIM_IT_Update); // Clear interrupt bit
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a32:	f7ff fca3 	bl	800137c <TIM_ClearITPendingBit>
	}
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	2000031b 	.word	0x2000031b

08001a40 <initGPIO>:

void initGPIO(void){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
	//RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC,ENABLE); // Enable clock for GPIO Port C
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB,ENABLE); // Enable clock for GPIO Port B
 8001a46:	2101      	movs	r1, #1
 8001a48:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001a4c:	f7ff fbec 	bl	8001228 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE); // Enable clock for GPIO Port A
 8001a50:	2101      	movs	r1, #1
 8001a52:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a56:	f7ff fbe7 	bl	8001228 <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructAll; // Define typedef struct for setting pins

	// Sets PA9 to output
	GPIO_StructInit(&GPIO_InitStructAll); // Initialize GPIO struct
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff f939 	bl	8000cd4 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT; // Set as output
 8001a62:	2301      	movs	r3, #1
 8001a64:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP; // Set as Push-Pull
 8001a66:	2300      	movs	r3, #0
 8001a68:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_5; // Set so the configuration is on pin 9
 8001a6a:	2320      	movs	r3, #32
 8001a6c:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz; // Set speed to 2 MHz
 8001a6e:	2302      	movs	r3, #2
 8001a70:	717b      	strb	r3, [r7, #5]
	// For all options see SPL/inc/stm32f30x_gpio.h
	GPIO_Init(GPIOA, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 8001a72:	463b      	mov	r3, r7
 8001a74:	4619      	mov	r1, r3
 8001a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7a:	f7ff f895 	bl	8000ba8 <GPIO_Init>

	// Sets PA9 to output
	GPIO_StructInit(&GPIO_InitStructAll); // Initialize GPIO struct
 8001a7e:	463b      	mov	r3, r7
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff f927 	bl	8000cd4 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT; // Set as output
 8001a86:	2301      	movs	r3, #1
 8001a88:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP; // Set as Push-Pull
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_6; // Set so the configuration is on pin 9
 8001a8e:	2340      	movs	r3, #64	; 0x40
 8001a90:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz; // Set speed to 2 MHz
 8001a92:	2302      	movs	r3, #2
 8001a94:	717b      	strb	r3, [r7, #5]
	// For all options see SPL/inc/stm32f30x_gpio.h
	GPIO_Init(GPIOA, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 8001a96:	463b      	mov	r3, r7
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a9e:	f7ff f883 	bl	8000ba8 <GPIO_Init>

	// Sets PA9 to output
	GPIO_StructInit(&GPIO_InitStructAll); // Initialize GPIO struct
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff f915 	bl	8000cd4 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT; // Set as output
 8001aaa:	2301      	movs	r3, #1
 8001aac:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP; // Set as Push-Pull
 8001aae:	2300      	movs	r3, #0
 8001ab0:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_7; // Set so the configuration is on pin 9
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz; // Set speed to 2 MHz
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	717b      	strb	r3, [r7, #5]
	// For all options see SPL/inc/stm32f30x_gpio.h
	GPIO_Init(GPIOA, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 8001aba:	463b      	mov	r3, r7
 8001abc:	4619      	mov	r1, r3
 8001abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac2:	f7ff f871 	bl	8000ba8 <GPIO_Init>

	// Sets PA9 to output
	GPIO_StructInit(&GPIO_InitStructAll); // Initialize GPIO struct
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff f903 	bl	8000cd4 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT; // Set as output
 8001ace:	2301      	movs	r3, #1
 8001ad0:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP; // Set as Push-Pull
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_1; // Set so the configuration is on pin 9
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz; // Set speed to 2 MHz
 8001ada:	2302      	movs	r3, #2
 8001adc:	717b      	strb	r3, [r7, #5]
	// For all options see SPL/inc/stm32f30x_gpio.h
	GPIO_Init(GPIOB, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 8001ade:	463b      	mov	r3, r7
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4803      	ldr	r0, [pc, #12]	; (8001af0 <initGPIO+0xb0>)
 8001ae4:	f7ff f860 	bl	8000ba8 <GPIO_Init>
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	48000400 	.word	0x48000400

08001af4 <stepper_func>:

void stepper_func(uint8_t step){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
	switch(step){
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	d86b      	bhi.n	8001bdc <stepper_func+0xe8>
 8001b04:	a201      	add	r2, pc, #4	; (adr r2, 8001b0c <stepper_func+0x18>)
 8001b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0a:	bf00      	nop
 8001b0c:	08001b1d 	.word	0x08001b1d
 8001b10:	08001b4d 	.word	0x08001b4d
 8001b14:	08001b7d 	.word	0x08001b7d
 8001b18:	08001bad 	.word	0x08001bad
		case 0 :
			GPIO_WriteBit(GPIOA , GPIO_Pin_5, 0); //set red led to enabled or disabled
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2120      	movs	r1, #32
 8001b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b24:	f7ff f8f0 	bl	8000d08 <GPIO_WriteBit>
			GPIO_WriteBit(GPIOA , GPIO_Pin_6, 1); //set green led to enabled or disabled
 8001b28:	2201      	movs	r2, #1
 8001b2a:	2140      	movs	r1, #64	; 0x40
 8001b2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b30:	f7ff f8ea 	bl	8000d08 <GPIO_WriteBit>
			GPIO_WriteBit(GPIOA , GPIO_Pin_7, 0); //set blue led to enabled or disabled
 8001b34:	2200      	movs	r2, #0
 8001b36:	2180      	movs	r1, #128	; 0x80
 8001b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3c:	f7ff f8e4 	bl	8000d08 <GPIO_WriteBit>
			GPIO_WriteBit(GPIOB , GPIO_Pin_1, 1); //set red led to enabled or disabled
 8001b40:	2201      	movs	r2, #1
 8001b42:	2102      	movs	r1, #2
 8001b44:	4827      	ldr	r0, [pc, #156]	; (8001be4 <stepper_func+0xf0>)
 8001b46:	f7ff f8df 	bl	8000d08 <GPIO_WriteBit>
		break;
 8001b4a:	e047      	b.n	8001bdc <stepper_func+0xe8>

		case 1 :
			GPIO_WriteBit(GPIOA , GPIO_Pin_5, 1); //set red led to enabled or disabled
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	2120      	movs	r1, #32
 8001b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b54:	f7ff f8d8 	bl	8000d08 <GPIO_WriteBit>
			GPIO_WriteBit(GPIOA , GPIO_Pin_6, 0); //set green led to enabled or disabled
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2140      	movs	r1, #64	; 0x40
 8001b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b60:	f7ff f8d2 	bl	8000d08 <GPIO_WriteBit>
			GPIO_WriteBit(GPIOA , GPIO_Pin_7, 0); //set blue led to enabled or disabled
 8001b64:	2200      	movs	r2, #0
 8001b66:	2180      	movs	r1, #128	; 0x80
 8001b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b6c:	f7ff f8cc 	bl	8000d08 <GPIO_WriteBit>
			GPIO_WriteBit(GPIOB , GPIO_Pin_1, 1); //set red led to enabled or disabled
 8001b70:	2201      	movs	r2, #1
 8001b72:	2102      	movs	r1, #2
 8001b74:	481b      	ldr	r0, [pc, #108]	; (8001be4 <stepper_func+0xf0>)
 8001b76:	f7ff f8c7 	bl	8000d08 <GPIO_WriteBit>
		break;
 8001b7a:	e02f      	b.n	8001bdc <stepper_func+0xe8>

		case 2 :
			GPIO_WriteBit(GPIOA , GPIO_Pin_5, 1); //set red led to enabled or disabled
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	2120      	movs	r1, #32
 8001b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b84:	f7ff f8c0 	bl	8000d08 <GPIO_WriteBit>
			GPIO_WriteBit(GPIOA , GPIO_Pin_6, 0); //set green led to enabled or disabled
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2140      	movs	r1, #64	; 0x40
 8001b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b90:	f7ff f8ba 	bl	8000d08 <GPIO_WriteBit>
			GPIO_WriteBit(GPIOA , GPIO_Pin_7, 1); //set blue led to enabled or disabled
 8001b94:	2201      	movs	r2, #1
 8001b96:	2180      	movs	r1, #128	; 0x80
 8001b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9c:	f7ff f8b4 	bl	8000d08 <GPIO_WriteBit>
			GPIO_WriteBit(GPIOB , GPIO_Pin_1, 0); //set red led to enabled or disabled
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2102      	movs	r1, #2
 8001ba4:	480f      	ldr	r0, [pc, #60]	; (8001be4 <stepper_func+0xf0>)
 8001ba6:	f7ff f8af 	bl	8000d08 <GPIO_WriteBit>
		break;
 8001baa:	e017      	b.n	8001bdc <stepper_func+0xe8>

		case 3 :
			GPIO_WriteBit(GPIOA , GPIO_Pin_5, 0); //set red led to enabled or disabled
 8001bac:	2200      	movs	r2, #0
 8001bae:	2120      	movs	r1, #32
 8001bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb4:	f7ff f8a8 	bl	8000d08 <GPIO_WriteBit>
			GPIO_WriteBit(GPIOA , GPIO_Pin_6, 1); //set green led to enabled or disabled
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2140      	movs	r1, #64	; 0x40
 8001bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc0:	f7ff f8a2 	bl	8000d08 <GPIO_WriteBit>
			GPIO_WriteBit(GPIOA , GPIO_Pin_7, 1); //set blue led to enabled or disabled
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	2180      	movs	r1, #128	; 0x80
 8001bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bcc:	f7ff f89c 	bl	8000d08 <GPIO_WriteBit>
			GPIO_WriteBit(GPIOB , GPIO_Pin_1, 0); //set red led to enabled or disabled
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2102      	movs	r1, #2
 8001bd4:	4803      	ldr	r0, [pc, #12]	; (8001be4 <stepper_func+0xf0>)
 8001bd6:	f7ff f897 	bl	8000d08 <GPIO_WriteBit>
		break;
 8001bda:	bf00      	nop
	}
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	48000400 	.word	0x48000400

08001be8 <main>:

int main(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	uart_init(9600);
 8001bec:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001bf0:	f7ff fd52 	bl	8001698 <uart_init>
	initGPIO();
 8001bf4:	f7ff ff24 	bl	8001a40 <initGPIO>
	initTimer2();
 8001bf8:	f7ff feac 	bl	8001954 <initTimer2>
	TIM_Cmd(TIM2,ENABLE);
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c02:	f7ff fb51 	bl	80012a8 <TIM_Cmd>

	while(1){
		switch(uart_get_char()){
 8001c06:	f7ff fca3 	bl	8001550 <uart_get_char>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b73      	cmp	r3, #115	; 0x73
 8001c0e:	d018      	beq.n	8001c42 <main+0x5a>
 8001c10:	2b77      	cmp	r3, #119	; 0x77
 8001c12:	d1f8      	bne.n	8001c06 <main+0x1e>
		case 'w' : if(interval<=1000){interval+=1;TIM2->ARR=interval;printf("%d\n",interval);};
 8001c14:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <main+0x90>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c1c:	d827      	bhi.n	8001c6e <main+0x86>
 8001c1e:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <main+0x90>)
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	3301      	adds	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <main+0x90>)
 8001c28:	801a      	strh	r2, [r3, #0]
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <main+0x90>)
 8001c2c:	881a      	ldrh	r2, [r3, #0]
 8001c2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c32:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c34:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <main+0x90>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4810      	ldr	r0, [pc, #64]	; (8001c7c <main+0x94>)
 8001c3c:	f000 fe28 	bl	8002890 <iprintf>
		break;
 8001c40:	e015      	b.n	8001c6e <main+0x86>

		case 's' : if(interval>30){interval-=1;TIM2->ARR=interval;printf("%d\n",interval);}
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <main+0x90>)
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	2b1e      	cmp	r3, #30
 8001c48:	d913      	bls.n	8001c72 <main+0x8a>
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <main+0x90>)
 8001c4c:	881b      	ldrh	r3, [r3, #0]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <main+0x90>)
 8001c54:	801a      	strh	r2, [r3, #0]
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <main+0x90>)
 8001c58:	881a      	ldrh	r2, [r3, #0]
 8001c5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <main+0x90>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	4619      	mov	r1, r3
 8001c66:	4805      	ldr	r0, [pc, #20]	; (8001c7c <main+0x94>)
 8001c68:	f000 fe12 	bl	8002890 <iprintf>
		break;
 8001c6c:	e001      	b.n	8001c72 <main+0x8a>
		break;
 8001c6e:	bf00      	nop
 8001c70:	e7c9      	b.n	8001c06 <main+0x1e>
		break;
 8001c72:	bf00      	nop
		switch(uart_get_char()){
 8001c74:	e7c7      	b.n	8001c06 <main+0x1e>
 8001c76:	bf00      	nop
 8001c78:	2000002a 	.word	0x2000002a
 8001c7c:	08004b90 	.word	0x08004b90

08001c80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
	return 1;
 8001c84:	2301      	movs	r3, #1
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <_kill>:

int _kill(int pid, int sig)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c9a:	f000 f94f 	bl	8001f3c <__errno>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2216      	movs	r2, #22
 8001ca2:	601a      	str	r2, [r3, #0]
	return -1;
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_exit>:

void _exit (int status)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ffe7 	bl	8001c90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cc2:	e7fe      	b.n	8001cc2 <_exit+0x12>

08001cc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	e00a      	b.n	8001cec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cd6:	f3af 8000 	nop.w
 8001cda:	4601      	mov	r1, r0
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	60ba      	str	r2, [r7, #8]
 8001ce2:	b2ca      	uxtb	r2, r1
 8001ce4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	dbf0      	blt.n	8001cd6 <_read+0x12>
	}

return len;
 8001cf4:	687b      	ldr	r3, [r7, #4]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_close>:
	}
	return len;
}

int _close(int file)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
	return -1;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d26:	605a      	str	r2, [r3, #4]
	return 0;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <_isatty>:

int _isatty(int file)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d3e:	2301      	movs	r3, #1
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
	return 0;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <_sbrk+0x50>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <_sbrk+0x16>
		heap_end = &end;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <_sbrk+0x50>)
 8001d7a:	4a10      	ldr	r2, [pc, #64]	; (8001dbc <_sbrk+0x54>)
 8001d7c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <_sbrk+0x50>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <_sbrk+0x50>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	466a      	mov	r2, sp
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d907      	bls.n	8001da2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d92:	f000 f8d3 	bl	8001f3c <__errno>
 8001d96:	4603      	mov	r3, r0
 8001d98:	220c      	movs	r2, #12
 8001d9a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001d9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001da0:	e006      	b.n	8001db0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001da2:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <_sbrk+0x50>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a03      	ldr	r2, [pc, #12]	; (8001db8 <_sbrk+0x50>)
 8001dac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001dae:	68fb      	ldr	r3, [r7, #12]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	2000031c 	.word	0x2000031c
 8001dbc:	20000330 	.word	0x20000330

08001dc0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <SystemInit+0x84>)
 8001dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dca:	4a1e      	ldr	r2, [pc, #120]	; (8001e44 <SystemInit+0x84>)
 8001dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <SystemInit+0x88>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1b      	ldr	r2, [pc, #108]	; (8001e48 <SystemInit+0x88>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8001de0:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <SystemInit+0x88>)
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	4918      	ldr	r1, [pc, #96]	; (8001e48 <SystemInit+0x88>)
 8001de6:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <SystemInit+0x8c>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001dec:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <SystemInit+0x88>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a15      	ldr	r2, [pc, #84]	; (8001e48 <SystemInit+0x88>)
 8001df2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <SystemInit+0x88>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a11      	ldr	r2, [pc, #68]	; (8001e48 <SystemInit+0x88>)
 8001e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e06:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <SystemInit+0x88>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <SystemInit+0x88>)
 8001e0e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001e12:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <SystemInit+0x88>)
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <SystemInit+0x88>)
 8001e1a:	f023 030f 	bic.w	r3, r3, #15
 8001e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8001e20:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <SystemInit+0x88>)
 8001e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e24:	4908      	ldr	r1, [pc, #32]	; (8001e48 <SystemInit+0x88>)
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <SystemInit+0x90>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <SystemInit+0x88>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001e32:	f000 f80f 	bl	8001e54 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001e36:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <SystemInit+0x84>)
 8001e38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e3c:	609a      	str	r2, [r3, #8]
#endif  
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	f87fc00c 	.word	0xf87fc00c
 8001e50:	ff00fccc 	.word	0xff00fccc

08001e54 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8001e58:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <SetSysClock+0x8c>)
 8001e5a:	2212      	movs	r2, #18
 8001e5c:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001e5e:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <SetSysClock+0x90>)
 8001e60:	4a20      	ldr	r2, [pc, #128]	; (8001ee4 <SetSysClock+0x90>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001e66:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <SetSysClock+0x90>)
 8001e68:	4a1e      	ldr	r2, [pc, #120]	; (8001ee4 <SetSysClock+0x90>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <SetSysClock+0x90>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <SetSysClock+0x90>)
 8001e74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e78:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <SetSysClock+0x90>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4a19      	ldr	r2, [pc, #100]	; (8001ee4 <SetSysClock+0x90>)
 8001e80:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001e84:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <SetSysClock+0x90>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <SetSysClock+0x90>)
 8001e8c:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8001e90:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <SetSysClock+0x90>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a13      	ldr	r2, [pc, #76]	; (8001ee4 <SetSysClock+0x90>)
 8001e98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e9c:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001e9e:	bf00      	nop
 8001ea0:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <SetSysClock+0x90>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f9      	beq.n	8001ea0 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <SetSysClock+0x90>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	4a0c      	ldr	r2, [pc, #48]	; (8001ee4 <SetSysClock+0x90>)
 8001eb2:	f023 0303 	bic.w	r3, r3, #3
 8001eb6:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <SetSysClock+0x90>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	4a09      	ldr	r2, [pc, #36]	; (8001ee4 <SetSysClock+0x90>)
 8001ebe:	f043 0302 	orr.w	r3, r3, #2
 8001ec2:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001ec4:	bf00      	nop
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <SetSysClock+0x90>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d1f9      	bne.n	8001ec6 <SetSysClock+0x72>
  {
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40022000 	.word	0x40022000
 8001ee4:	40021000 	.word	0x40021000

08001ee8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ee8:	480d      	ldr	r0, [pc, #52]	; (8001f20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001eea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eec:	480d      	ldr	r0, [pc, #52]	; (8001f24 <LoopForever+0x6>)
  ldr r1, =_edata
 8001eee:	490e      	ldr	r1, [pc, #56]	; (8001f28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ef0:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <LoopForever+0xe>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef4:	e002      	b.n	8001efc <LoopCopyDataInit>

08001ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efa:	3304      	adds	r3, #4

08001efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f00:	d3f9      	bcc.n	8001ef6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f02:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f04:	4c0b      	ldr	r4, [pc, #44]	; (8001f34 <LoopForever+0x16>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f08:	e001      	b.n	8001f0e <LoopFillZerobss>

08001f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f0c:	3204      	adds	r2, #4

08001f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f10:	d3fb      	bcc.n	8001f0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001f12:	f7ff ff55 	bl	8001dc0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001f16:	f000 f817 	bl	8001f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f1a:	f7ff fe65 	bl	8001be8 <main>

08001f1e <LoopForever>:

LoopForever:
    b LoopForever
 8001f1e:	e7fe      	b.n	8001f1e <LoopForever>
  ldr   r0, =_estack
 8001f20:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f28:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001f2c:	08004f74 	.word	0x08004f74
  ldr r2, =_sbss
 8001f30:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001f34:	20000330 	.word	0x20000330

08001f38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f38:	e7fe      	b.n	8001f38 <ADC1_2_IRQHandler>
	...

08001f3c <__errno>:
 8001f3c:	4b01      	ldr	r3, [pc, #4]	; (8001f44 <__errno+0x8>)
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	2000002c 	.word	0x2000002c

08001f48 <__libc_init_array>:
 8001f48:	b570      	push	{r4, r5, r6, lr}
 8001f4a:	4d0d      	ldr	r5, [pc, #52]	; (8001f80 <__libc_init_array+0x38>)
 8001f4c:	4c0d      	ldr	r4, [pc, #52]	; (8001f84 <__libc_init_array+0x3c>)
 8001f4e:	1b64      	subs	r4, r4, r5
 8001f50:	10a4      	asrs	r4, r4, #2
 8001f52:	2600      	movs	r6, #0
 8001f54:	42a6      	cmp	r6, r4
 8001f56:	d109      	bne.n	8001f6c <__libc_init_array+0x24>
 8001f58:	4d0b      	ldr	r5, [pc, #44]	; (8001f88 <__libc_init_array+0x40>)
 8001f5a:	4c0c      	ldr	r4, [pc, #48]	; (8001f8c <__libc_init_array+0x44>)
 8001f5c:	f002 fe0a 	bl	8004b74 <_init>
 8001f60:	1b64      	subs	r4, r4, r5
 8001f62:	10a4      	asrs	r4, r4, #2
 8001f64:	2600      	movs	r6, #0
 8001f66:	42a6      	cmp	r6, r4
 8001f68:	d105      	bne.n	8001f76 <__libc_init_array+0x2e>
 8001f6a:	bd70      	pop	{r4, r5, r6, pc}
 8001f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f70:	4798      	blx	r3
 8001f72:	3601      	adds	r6, #1
 8001f74:	e7ee      	b.n	8001f54 <__libc_init_array+0xc>
 8001f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f7a:	4798      	blx	r3
 8001f7c:	3601      	adds	r6, #1
 8001f7e:	e7f2      	b.n	8001f66 <__libc_init_array+0x1e>
 8001f80:	08004f6c 	.word	0x08004f6c
 8001f84:	08004f6c 	.word	0x08004f6c
 8001f88:	08004f6c 	.word	0x08004f6c
 8001f8c:	08004f70 	.word	0x08004f70

08001f90 <memcpy>:
 8001f90:	440a      	add	r2, r1
 8001f92:	4291      	cmp	r1, r2
 8001f94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001f98:	d100      	bne.n	8001f9c <memcpy+0xc>
 8001f9a:	4770      	bx	lr
 8001f9c:	b510      	push	{r4, lr}
 8001f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001fa6:	4291      	cmp	r1, r2
 8001fa8:	d1f9      	bne.n	8001f9e <memcpy+0xe>
 8001faa:	bd10      	pop	{r4, pc}

08001fac <memset>:
 8001fac:	4402      	add	r2, r0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d100      	bne.n	8001fb6 <memset+0xa>
 8001fb4:	4770      	bx	lr
 8001fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8001fba:	e7f9      	b.n	8001fb0 <memset+0x4>

08001fbc <__cvt>:
 8001fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001fc0:	ec55 4b10 	vmov	r4, r5, d0
 8001fc4:	2d00      	cmp	r5, #0
 8001fc6:	460e      	mov	r6, r1
 8001fc8:	4619      	mov	r1, r3
 8001fca:	462b      	mov	r3, r5
 8001fcc:	bfbb      	ittet	lt
 8001fce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8001fd2:	461d      	movlt	r5, r3
 8001fd4:	2300      	movge	r3, #0
 8001fd6:	232d      	movlt	r3, #45	; 0x2d
 8001fd8:	700b      	strb	r3, [r1, #0]
 8001fda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001fdc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8001fe0:	4691      	mov	r9, r2
 8001fe2:	f023 0820 	bic.w	r8, r3, #32
 8001fe6:	bfbc      	itt	lt
 8001fe8:	4622      	movlt	r2, r4
 8001fea:	4614      	movlt	r4, r2
 8001fec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8001ff0:	d005      	beq.n	8001ffe <__cvt+0x42>
 8001ff2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8001ff6:	d100      	bne.n	8001ffa <__cvt+0x3e>
 8001ff8:	3601      	adds	r6, #1
 8001ffa:	2102      	movs	r1, #2
 8001ffc:	e000      	b.n	8002000 <__cvt+0x44>
 8001ffe:	2103      	movs	r1, #3
 8002000:	ab03      	add	r3, sp, #12
 8002002:	9301      	str	r3, [sp, #4]
 8002004:	ab02      	add	r3, sp, #8
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	ec45 4b10 	vmov	d0, r4, r5
 800200c:	4653      	mov	r3, sl
 800200e:	4632      	mov	r2, r6
 8002010:	f000 fdb2 	bl	8002b78 <_dtoa_r>
 8002014:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002018:	4607      	mov	r7, r0
 800201a:	d102      	bne.n	8002022 <__cvt+0x66>
 800201c:	f019 0f01 	tst.w	r9, #1
 8002020:	d022      	beq.n	8002068 <__cvt+0xac>
 8002022:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002026:	eb07 0906 	add.w	r9, r7, r6
 800202a:	d110      	bne.n	800204e <__cvt+0x92>
 800202c:	783b      	ldrb	r3, [r7, #0]
 800202e:	2b30      	cmp	r3, #48	; 0x30
 8002030:	d10a      	bne.n	8002048 <__cvt+0x8c>
 8002032:	2200      	movs	r2, #0
 8002034:	2300      	movs	r3, #0
 8002036:	4620      	mov	r0, r4
 8002038:	4629      	mov	r1, r5
 800203a:	f7fe fd45 	bl	8000ac8 <__aeabi_dcmpeq>
 800203e:	b918      	cbnz	r0, 8002048 <__cvt+0x8c>
 8002040:	f1c6 0601 	rsb	r6, r6, #1
 8002044:	f8ca 6000 	str.w	r6, [sl]
 8002048:	f8da 3000 	ldr.w	r3, [sl]
 800204c:	4499      	add	r9, r3
 800204e:	2200      	movs	r2, #0
 8002050:	2300      	movs	r3, #0
 8002052:	4620      	mov	r0, r4
 8002054:	4629      	mov	r1, r5
 8002056:	f7fe fd37 	bl	8000ac8 <__aeabi_dcmpeq>
 800205a:	b108      	cbz	r0, 8002060 <__cvt+0xa4>
 800205c:	f8cd 900c 	str.w	r9, [sp, #12]
 8002060:	2230      	movs	r2, #48	; 0x30
 8002062:	9b03      	ldr	r3, [sp, #12]
 8002064:	454b      	cmp	r3, r9
 8002066:	d307      	bcc.n	8002078 <__cvt+0xbc>
 8002068:	9b03      	ldr	r3, [sp, #12]
 800206a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800206c:	1bdb      	subs	r3, r3, r7
 800206e:	4638      	mov	r0, r7
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	b004      	add	sp, #16
 8002074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002078:	1c59      	adds	r1, r3, #1
 800207a:	9103      	str	r1, [sp, #12]
 800207c:	701a      	strb	r2, [r3, #0]
 800207e:	e7f0      	b.n	8002062 <__cvt+0xa6>

08002080 <__exponent>:
 8002080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002082:	4603      	mov	r3, r0
 8002084:	2900      	cmp	r1, #0
 8002086:	bfb8      	it	lt
 8002088:	4249      	neglt	r1, r1
 800208a:	f803 2b02 	strb.w	r2, [r3], #2
 800208e:	bfb4      	ite	lt
 8002090:	222d      	movlt	r2, #45	; 0x2d
 8002092:	222b      	movge	r2, #43	; 0x2b
 8002094:	2909      	cmp	r1, #9
 8002096:	7042      	strb	r2, [r0, #1]
 8002098:	dd2a      	ble.n	80020f0 <__exponent+0x70>
 800209a:	f10d 0407 	add.w	r4, sp, #7
 800209e:	46a4      	mov	ip, r4
 80020a0:	270a      	movs	r7, #10
 80020a2:	46a6      	mov	lr, r4
 80020a4:	460a      	mov	r2, r1
 80020a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80020aa:	fb07 1516 	mls	r5, r7, r6, r1
 80020ae:	3530      	adds	r5, #48	; 0x30
 80020b0:	2a63      	cmp	r2, #99	; 0x63
 80020b2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80020b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80020ba:	4631      	mov	r1, r6
 80020bc:	dcf1      	bgt.n	80020a2 <__exponent+0x22>
 80020be:	3130      	adds	r1, #48	; 0x30
 80020c0:	f1ae 0502 	sub.w	r5, lr, #2
 80020c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80020c8:	1c44      	adds	r4, r0, #1
 80020ca:	4629      	mov	r1, r5
 80020cc:	4561      	cmp	r1, ip
 80020ce:	d30a      	bcc.n	80020e6 <__exponent+0x66>
 80020d0:	f10d 0209 	add.w	r2, sp, #9
 80020d4:	eba2 020e 	sub.w	r2, r2, lr
 80020d8:	4565      	cmp	r5, ip
 80020da:	bf88      	it	hi
 80020dc:	2200      	movhi	r2, #0
 80020de:	4413      	add	r3, r2
 80020e0:	1a18      	subs	r0, r3, r0
 80020e2:	b003      	add	sp, #12
 80020e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80020ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80020ee:	e7ed      	b.n	80020cc <__exponent+0x4c>
 80020f0:	2330      	movs	r3, #48	; 0x30
 80020f2:	3130      	adds	r1, #48	; 0x30
 80020f4:	7083      	strb	r3, [r0, #2]
 80020f6:	70c1      	strb	r1, [r0, #3]
 80020f8:	1d03      	adds	r3, r0, #4
 80020fa:	e7f1      	b.n	80020e0 <__exponent+0x60>

080020fc <_printf_float>:
 80020fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002100:	ed2d 8b02 	vpush	{d8}
 8002104:	b08d      	sub	sp, #52	; 0x34
 8002106:	460c      	mov	r4, r1
 8002108:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800210c:	4616      	mov	r6, r2
 800210e:	461f      	mov	r7, r3
 8002110:	4605      	mov	r5, r0
 8002112:	f001 fcd7 	bl	8003ac4 <_localeconv_r>
 8002116:	f8d0 a000 	ldr.w	sl, [r0]
 800211a:	4650      	mov	r0, sl
 800211c:	f7fe f858 	bl	80001d0 <strlen>
 8002120:	2300      	movs	r3, #0
 8002122:	930a      	str	r3, [sp, #40]	; 0x28
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	9305      	str	r3, [sp, #20]
 8002128:	f8d8 3000 	ldr.w	r3, [r8]
 800212c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002130:	3307      	adds	r3, #7
 8002132:	f023 0307 	bic.w	r3, r3, #7
 8002136:	f103 0208 	add.w	r2, r3, #8
 800213a:	f8c8 2000 	str.w	r2, [r8]
 800213e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002142:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002146:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800214a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800214e:	9307      	str	r3, [sp, #28]
 8002150:	f8cd 8018 	str.w	r8, [sp, #24]
 8002154:	ee08 0a10 	vmov	s16, r0
 8002158:	4b9f      	ldr	r3, [pc, #636]	; (80023d8 <_printf_float+0x2dc>)
 800215a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800215e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002162:	f7fe fce3 	bl	8000b2c <__aeabi_dcmpun>
 8002166:	bb88      	cbnz	r0, 80021cc <_printf_float+0xd0>
 8002168:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800216c:	4b9a      	ldr	r3, [pc, #616]	; (80023d8 <_printf_float+0x2dc>)
 800216e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002172:	f7fe fcbd 	bl	8000af0 <__aeabi_dcmple>
 8002176:	bb48      	cbnz	r0, 80021cc <_printf_float+0xd0>
 8002178:	2200      	movs	r2, #0
 800217a:	2300      	movs	r3, #0
 800217c:	4640      	mov	r0, r8
 800217e:	4649      	mov	r1, r9
 8002180:	f7fe fcac 	bl	8000adc <__aeabi_dcmplt>
 8002184:	b110      	cbz	r0, 800218c <_printf_float+0x90>
 8002186:	232d      	movs	r3, #45	; 0x2d
 8002188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800218c:	4b93      	ldr	r3, [pc, #588]	; (80023dc <_printf_float+0x2e0>)
 800218e:	4894      	ldr	r0, [pc, #592]	; (80023e0 <_printf_float+0x2e4>)
 8002190:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002194:	bf94      	ite	ls
 8002196:	4698      	movls	r8, r3
 8002198:	4680      	movhi	r8, r0
 800219a:	2303      	movs	r3, #3
 800219c:	6123      	str	r3, [r4, #16]
 800219e:	9b05      	ldr	r3, [sp, #20]
 80021a0:	f023 0204 	bic.w	r2, r3, #4
 80021a4:	6022      	str	r2, [r4, #0]
 80021a6:	f04f 0900 	mov.w	r9, #0
 80021aa:	9700      	str	r7, [sp, #0]
 80021ac:	4633      	mov	r3, r6
 80021ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80021b0:	4621      	mov	r1, r4
 80021b2:	4628      	mov	r0, r5
 80021b4:	f000 f9d8 	bl	8002568 <_printf_common>
 80021b8:	3001      	adds	r0, #1
 80021ba:	f040 8090 	bne.w	80022de <_printf_float+0x1e2>
 80021be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021c2:	b00d      	add	sp, #52	; 0x34
 80021c4:	ecbd 8b02 	vpop	{d8}
 80021c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021cc:	4642      	mov	r2, r8
 80021ce:	464b      	mov	r3, r9
 80021d0:	4640      	mov	r0, r8
 80021d2:	4649      	mov	r1, r9
 80021d4:	f7fe fcaa 	bl	8000b2c <__aeabi_dcmpun>
 80021d8:	b140      	cbz	r0, 80021ec <_printf_float+0xf0>
 80021da:	464b      	mov	r3, r9
 80021dc:	2b00      	cmp	r3, #0
 80021de:	bfbc      	itt	lt
 80021e0:	232d      	movlt	r3, #45	; 0x2d
 80021e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80021e6:	487f      	ldr	r0, [pc, #508]	; (80023e4 <_printf_float+0x2e8>)
 80021e8:	4b7f      	ldr	r3, [pc, #508]	; (80023e8 <_printf_float+0x2ec>)
 80021ea:	e7d1      	b.n	8002190 <_printf_float+0x94>
 80021ec:	6863      	ldr	r3, [r4, #4]
 80021ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80021f2:	9206      	str	r2, [sp, #24]
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	d13f      	bne.n	8002278 <_printf_float+0x17c>
 80021f8:	2306      	movs	r3, #6
 80021fa:	6063      	str	r3, [r4, #4]
 80021fc:	9b05      	ldr	r3, [sp, #20]
 80021fe:	6861      	ldr	r1, [r4, #4]
 8002200:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002204:	2300      	movs	r3, #0
 8002206:	9303      	str	r3, [sp, #12]
 8002208:	ab0a      	add	r3, sp, #40	; 0x28
 800220a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800220e:	ab09      	add	r3, sp, #36	; 0x24
 8002210:	ec49 8b10 	vmov	d0, r8, r9
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	6022      	str	r2, [r4, #0]
 8002218:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800221c:	4628      	mov	r0, r5
 800221e:	f7ff fecd 	bl	8001fbc <__cvt>
 8002222:	9b06      	ldr	r3, [sp, #24]
 8002224:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002226:	2b47      	cmp	r3, #71	; 0x47
 8002228:	4680      	mov	r8, r0
 800222a:	d108      	bne.n	800223e <_printf_float+0x142>
 800222c:	1cc8      	adds	r0, r1, #3
 800222e:	db02      	blt.n	8002236 <_printf_float+0x13a>
 8002230:	6863      	ldr	r3, [r4, #4]
 8002232:	4299      	cmp	r1, r3
 8002234:	dd41      	ble.n	80022ba <_printf_float+0x1be>
 8002236:	f1ab 0b02 	sub.w	fp, fp, #2
 800223a:	fa5f fb8b 	uxtb.w	fp, fp
 800223e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002242:	d820      	bhi.n	8002286 <_printf_float+0x18a>
 8002244:	3901      	subs	r1, #1
 8002246:	465a      	mov	r2, fp
 8002248:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800224c:	9109      	str	r1, [sp, #36]	; 0x24
 800224e:	f7ff ff17 	bl	8002080 <__exponent>
 8002252:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002254:	1813      	adds	r3, r2, r0
 8002256:	2a01      	cmp	r2, #1
 8002258:	4681      	mov	r9, r0
 800225a:	6123      	str	r3, [r4, #16]
 800225c:	dc02      	bgt.n	8002264 <_printf_float+0x168>
 800225e:	6822      	ldr	r2, [r4, #0]
 8002260:	07d2      	lsls	r2, r2, #31
 8002262:	d501      	bpl.n	8002268 <_printf_float+0x16c>
 8002264:	3301      	adds	r3, #1
 8002266:	6123      	str	r3, [r4, #16]
 8002268:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800226c:	2b00      	cmp	r3, #0
 800226e:	d09c      	beq.n	80021aa <_printf_float+0xae>
 8002270:	232d      	movs	r3, #45	; 0x2d
 8002272:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002276:	e798      	b.n	80021aa <_printf_float+0xae>
 8002278:	9a06      	ldr	r2, [sp, #24]
 800227a:	2a47      	cmp	r2, #71	; 0x47
 800227c:	d1be      	bne.n	80021fc <_printf_float+0x100>
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1bc      	bne.n	80021fc <_printf_float+0x100>
 8002282:	2301      	movs	r3, #1
 8002284:	e7b9      	b.n	80021fa <_printf_float+0xfe>
 8002286:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800228a:	d118      	bne.n	80022be <_printf_float+0x1c2>
 800228c:	2900      	cmp	r1, #0
 800228e:	6863      	ldr	r3, [r4, #4]
 8002290:	dd0b      	ble.n	80022aa <_printf_float+0x1ae>
 8002292:	6121      	str	r1, [r4, #16]
 8002294:	b913      	cbnz	r3, 800229c <_printf_float+0x1a0>
 8002296:	6822      	ldr	r2, [r4, #0]
 8002298:	07d0      	lsls	r0, r2, #31
 800229a:	d502      	bpl.n	80022a2 <_printf_float+0x1a6>
 800229c:	3301      	adds	r3, #1
 800229e:	440b      	add	r3, r1
 80022a0:	6123      	str	r3, [r4, #16]
 80022a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80022a4:	f04f 0900 	mov.w	r9, #0
 80022a8:	e7de      	b.n	8002268 <_printf_float+0x16c>
 80022aa:	b913      	cbnz	r3, 80022b2 <_printf_float+0x1b6>
 80022ac:	6822      	ldr	r2, [r4, #0]
 80022ae:	07d2      	lsls	r2, r2, #31
 80022b0:	d501      	bpl.n	80022b6 <_printf_float+0x1ba>
 80022b2:	3302      	adds	r3, #2
 80022b4:	e7f4      	b.n	80022a0 <_printf_float+0x1a4>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e7f2      	b.n	80022a0 <_printf_float+0x1a4>
 80022ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80022be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80022c0:	4299      	cmp	r1, r3
 80022c2:	db05      	blt.n	80022d0 <_printf_float+0x1d4>
 80022c4:	6823      	ldr	r3, [r4, #0]
 80022c6:	6121      	str	r1, [r4, #16]
 80022c8:	07d8      	lsls	r0, r3, #31
 80022ca:	d5ea      	bpl.n	80022a2 <_printf_float+0x1a6>
 80022cc:	1c4b      	adds	r3, r1, #1
 80022ce:	e7e7      	b.n	80022a0 <_printf_float+0x1a4>
 80022d0:	2900      	cmp	r1, #0
 80022d2:	bfd4      	ite	le
 80022d4:	f1c1 0202 	rsble	r2, r1, #2
 80022d8:	2201      	movgt	r2, #1
 80022da:	4413      	add	r3, r2
 80022dc:	e7e0      	b.n	80022a0 <_printf_float+0x1a4>
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	055a      	lsls	r2, r3, #21
 80022e2:	d407      	bmi.n	80022f4 <_printf_float+0x1f8>
 80022e4:	6923      	ldr	r3, [r4, #16]
 80022e6:	4642      	mov	r2, r8
 80022e8:	4631      	mov	r1, r6
 80022ea:	4628      	mov	r0, r5
 80022ec:	47b8      	blx	r7
 80022ee:	3001      	adds	r0, #1
 80022f0:	d12c      	bne.n	800234c <_printf_float+0x250>
 80022f2:	e764      	b.n	80021be <_printf_float+0xc2>
 80022f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80022f8:	f240 80e0 	bls.w	80024bc <_printf_float+0x3c0>
 80022fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002300:	2200      	movs	r2, #0
 8002302:	2300      	movs	r3, #0
 8002304:	f7fe fbe0 	bl	8000ac8 <__aeabi_dcmpeq>
 8002308:	2800      	cmp	r0, #0
 800230a:	d034      	beq.n	8002376 <_printf_float+0x27a>
 800230c:	4a37      	ldr	r2, [pc, #220]	; (80023ec <_printf_float+0x2f0>)
 800230e:	2301      	movs	r3, #1
 8002310:	4631      	mov	r1, r6
 8002312:	4628      	mov	r0, r5
 8002314:	47b8      	blx	r7
 8002316:	3001      	adds	r0, #1
 8002318:	f43f af51 	beq.w	80021be <_printf_float+0xc2>
 800231c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002320:	429a      	cmp	r2, r3
 8002322:	db02      	blt.n	800232a <_printf_float+0x22e>
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	07d8      	lsls	r0, r3, #31
 8002328:	d510      	bpl.n	800234c <_printf_float+0x250>
 800232a:	ee18 3a10 	vmov	r3, s16
 800232e:	4652      	mov	r2, sl
 8002330:	4631      	mov	r1, r6
 8002332:	4628      	mov	r0, r5
 8002334:	47b8      	blx	r7
 8002336:	3001      	adds	r0, #1
 8002338:	f43f af41 	beq.w	80021be <_printf_float+0xc2>
 800233c:	f04f 0800 	mov.w	r8, #0
 8002340:	f104 091a 	add.w	r9, r4, #26
 8002344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002346:	3b01      	subs	r3, #1
 8002348:	4543      	cmp	r3, r8
 800234a:	dc09      	bgt.n	8002360 <_printf_float+0x264>
 800234c:	6823      	ldr	r3, [r4, #0]
 800234e:	079b      	lsls	r3, r3, #30
 8002350:	f100 8105 	bmi.w	800255e <_printf_float+0x462>
 8002354:	68e0      	ldr	r0, [r4, #12]
 8002356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002358:	4298      	cmp	r0, r3
 800235a:	bfb8      	it	lt
 800235c:	4618      	movlt	r0, r3
 800235e:	e730      	b.n	80021c2 <_printf_float+0xc6>
 8002360:	2301      	movs	r3, #1
 8002362:	464a      	mov	r2, r9
 8002364:	4631      	mov	r1, r6
 8002366:	4628      	mov	r0, r5
 8002368:	47b8      	blx	r7
 800236a:	3001      	adds	r0, #1
 800236c:	f43f af27 	beq.w	80021be <_printf_float+0xc2>
 8002370:	f108 0801 	add.w	r8, r8, #1
 8002374:	e7e6      	b.n	8002344 <_printf_float+0x248>
 8002376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002378:	2b00      	cmp	r3, #0
 800237a:	dc39      	bgt.n	80023f0 <_printf_float+0x2f4>
 800237c:	4a1b      	ldr	r2, [pc, #108]	; (80023ec <_printf_float+0x2f0>)
 800237e:	2301      	movs	r3, #1
 8002380:	4631      	mov	r1, r6
 8002382:	4628      	mov	r0, r5
 8002384:	47b8      	blx	r7
 8002386:	3001      	adds	r0, #1
 8002388:	f43f af19 	beq.w	80021be <_printf_float+0xc2>
 800238c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002390:	4313      	orrs	r3, r2
 8002392:	d102      	bne.n	800239a <_printf_float+0x29e>
 8002394:	6823      	ldr	r3, [r4, #0]
 8002396:	07d9      	lsls	r1, r3, #31
 8002398:	d5d8      	bpl.n	800234c <_printf_float+0x250>
 800239a:	ee18 3a10 	vmov	r3, s16
 800239e:	4652      	mov	r2, sl
 80023a0:	4631      	mov	r1, r6
 80023a2:	4628      	mov	r0, r5
 80023a4:	47b8      	blx	r7
 80023a6:	3001      	adds	r0, #1
 80023a8:	f43f af09 	beq.w	80021be <_printf_float+0xc2>
 80023ac:	f04f 0900 	mov.w	r9, #0
 80023b0:	f104 0a1a 	add.w	sl, r4, #26
 80023b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023b6:	425b      	negs	r3, r3
 80023b8:	454b      	cmp	r3, r9
 80023ba:	dc01      	bgt.n	80023c0 <_printf_float+0x2c4>
 80023bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80023be:	e792      	b.n	80022e6 <_printf_float+0x1ea>
 80023c0:	2301      	movs	r3, #1
 80023c2:	4652      	mov	r2, sl
 80023c4:	4631      	mov	r1, r6
 80023c6:	4628      	mov	r0, r5
 80023c8:	47b8      	blx	r7
 80023ca:	3001      	adds	r0, #1
 80023cc:	f43f aef7 	beq.w	80021be <_printf_float+0xc2>
 80023d0:	f109 0901 	add.w	r9, r9, #1
 80023d4:	e7ee      	b.n	80023b4 <_printf_float+0x2b8>
 80023d6:	bf00      	nop
 80023d8:	7fefffff 	.word	0x7fefffff
 80023dc:	08004b98 	.word	0x08004b98
 80023e0:	08004b9c 	.word	0x08004b9c
 80023e4:	08004ba4 	.word	0x08004ba4
 80023e8:	08004ba0 	.word	0x08004ba0
 80023ec:	08004ba8 	.word	0x08004ba8
 80023f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80023f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023f4:	429a      	cmp	r2, r3
 80023f6:	bfa8      	it	ge
 80023f8:	461a      	movge	r2, r3
 80023fa:	2a00      	cmp	r2, #0
 80023fc:	4691      	mov	r9, r2
 80023fe:	dc37      	bgt.n	8002470 <_printf_float+0x374>
 8002400:	f04f 0b00 	mov.w	fp, #0
 8002404:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002408:	f104 021a 	add.w	r2, r4, #26
 800240c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800240e:	9305      	str	r3, [sp, #20]
 8002410:	eba3 0309 	sub.w	r3, r3, r9
 8002414:	455b      	cmp	r3, fp
 8002416:	dc33      	bgt.n	8002480 <_printf_float+0x384>
 8002418:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800241c:	429a      	cmp	r2, r3
 800241e:	db3b      	blt.n	8002498 <_printf_float+0x39c>
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	07da      	lsls	r2, r3, #31
 8002424:	d438      	bmi.n	8002498 <_printf_float+0x39c>
 8002426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002428:	9a05      	ldr	r2, [sp, #20]
 800242a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800242c:	1a9a      	subs	r2, r3, r2
 800242e:	eba3 0901 	sub.w	r9, r3, r1
 8002432:	4591      	cmp	r9, r2
 8002434:	bfa8      	it	ge
 8002436:	4691      	movge	r9, r2
 8002438:	f1b9 0f00 	cmp.w	r9, #0
 800243c:	dc35      	bgt.n	80024aa <_printf_float+0x3ae>
 800243e:	f04f 0800 	mov.w	r8, #0
 8002442:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002446:	f104 0a1a 	add.w	sl, r4, #26
 800244a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	eba3 0309 	sub.w	r3, r3, r9
 8002454:	4543      	cmp	r3, r8
 8002456:	f77f af79 	ble.w	800234c <_printf_float+0x250>
 800245a:	2301      	movs	r3, #1
 800245c:	4652      	mov	r2, sl
 800245e:	4631      	mov	r1, r6
 8002460:	4628      	mov	r0, r5
 8002462:	47b8      	blx	r7
 8002464:	3001      	adds	r0, #1
 8002466:	f43f aeaa 	beq.w	80021be <_printf_float+0xc2>
 800246a:	f108 0801 	add.w	r8, r8, #1
 800246e:	e7ec      	b.n	800244a <_printf_float+0x34e>
 8002470:	4613      	mov	r3, r2
 8002472:	4631      	mov	r1, r6
 8002474:	4642      	mov	r2, r8
 8002476:	4628      	mov	r0, r5
 8002478:	47b8      	blx	r7
 800247a:	3001      	adds	r0, #1
 800247c:	d1c0      	bne.n	8002400 <_printf_float+0x304>
 800247e:	e69e      	b.n	80021be <_printf_float+0xc2>
 8002480:	2301      	movs	r3, #1
 8002482:	4631      	mov	r1, r6
 8002484:	4628      	mov	r0, r5
 8002486:	9205      	str	r2, [sp, #20]
 8002488:	47b8      	blx	r7
 800248a:	3001      	adds	r0, #1
 800248c:	f43f ae97 	beq.w	80021be <_printf_float+0xc2>
 8002490:	9a05      	ldr	r2, [sp, #20]
 8002492:	f10b 0b01 	add.w	fp, fp, #1
 8002496:	e7b9      	b.n	800240c <_printf_float+0x310>
 8002498:	ee18 3a10 	vmov	r3, s16
 800249c:	4652      	mov	r2, sl
 800249e:	4631      	mov	r1, r6
 80024a0:	4628      	mov	r0, r5
 80024a2:	47b8      	blx	r7
 80024a4:	3001      	adds	r0, #1
 80024a6:	d1be      	bne.n	8002426 <_printf_float+0x32a>
 80024a8:	e689      	b.n	80021be <_printf_float+0xc2>
 80024aa:	9a05      	ldr	r2, [sp, #20]
 80024ac:	464b      	mov	r3, r9
 80024ae:	4442      	add	r2, r8
 80024b0:	4631      	mov	r1, r6
 80024b2:	4628      	mov	r0, r5
 80024b4:	47b8      	blx	r7
 80024b6:	3001      	adds	r0, #1
 80024b8:	d1c1      	bne.n	800243e <_printf_float+0x342>
 80024ba:	e680      	b.n	80021be <_printf_float+0xc2>
 80024bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80024be:	2a01      	cmp	r2, #1
 80024c0:	dc01      	bgt.n	80024c6 <_printf_float+0x3ca>
 80024c2:	07db      	lsls	r3, r3, #31
 80024c4:	d538      	bpl.n	8002538 <_printf_float+0x43c>
 80024c6:	2301      	movs	r3, #1
 80024c8:	4642      	mov	r2, r8
 80024ca:	4631      	mov	r1, r6
 80024cc:	4628      	mov	r0, r5
 80024ce:	47b8      	blx	r7
 80024d0:	3001      	adds	r0, #1
 80024d2:	f43f ae74 	beq.w	80021be <_printf_float+0xc2>
 80024d6:	ee18 3a10 	vmov	r3, s16
 80024da:	4652      	mov	r2, sl
 80024dc:	4631      	mov	r1, r6
 80024de:	4628      	mov	r0, r5
 80024e0:	47b8      	blx	r7
 80024e2:	3001      	adds	r0, #1
 80024e4:	f43f ae6b 	beq.w	80021be <_printf_float+0xc2>
 80024e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80024ec:	2200      	movs	r2, #0
 80024ee:	2300      	movs	r3, #0
 80024f0:	f7fe faea 	bl	8000ac8 <__aeabi_dcmpeq>
 80024f4:	b9d8      	cbnz	r0, 800252e <_printf_float+0x432>
 80024f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024f8:	f108 0201 	add.w	r2, r8, #1
 80024fc:	3b01      	subs	r3, #1
 80024fe:	4631      	mov	r1, r6
 8002500:	4628      	mov	r0, r5
 8002502:	47b8      	blx	r7
 8002504:	3001      	adds	r0, #1
 8002506:	d10e      	bne.n	8002526 <_printf_float+0x42a>
 8002508:	e659      	b.n	80021be <_printf_float+0xc2>
 800250a:	2301      	movs	r3, #1
 800250c:	4652      	mov	r2, sl
 800250e:	4631      	mov	r1, r6
 8002510:	4628      	mov	r0, r5
 8002512:	47b8      	blx	r7
 8002514:	3001      	adds	r0, #1
 8002516:	f43f ae52 	beq.w	80021be <_printf_float+0xc2>
 800251a:	f108 0801 	add.w	r8, r8, #1
 800251e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002520:	3b01      	subs	r3, #1
 8002522:	4543      	cmp	r3, r8
 8002524:	dcf1      	bgt.n	800250a <_printf_float+0x40e>
 8002526:	464b      	mov	r3, r9
 8002528:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800252c:	e6dc      	b.n	80022e8 <_printf_float+0x1ec>
 800252e:	f04f 0800 	mov.w	r8, #0
 8002532:	f104 0a1a 	add.w	sl, r4, #26
 8002536:	e7f2      	b.n	800251e <_printf_float+0x422>
 8002538:	2301      	movs	r3, #1
 800253a:	4642      	mov	r2, r8
 800253c:	e7df      	b.n	80024fe <_printf_float+0x402>
 800253e:	2301      	movs	r3, #1
 8002540:	464a      	mov	r2, r9
 8002542:	4631      	mov	r1, r6
 8002544:	4628      	mov	r0, r5
 8002546:	47b8      	blx	r7
 8002548:	3001      	adds	r0, #1
 800254a:	f43f ae38 	beq.w	80021be <_printf_float+0xc2>
 800254e:	f108 0801 	add.w	r8, r8, #1
 8002552:	68e3      	ldr	r3, [r4, #12]
 8002554:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002556:	1a5b      	subs	r3, r3, r1
 8002558:	4543      	cmp	r3, r8
 800255a:	dcf0      	bgt.n	800253e <_printf_float+0x442>
 800255c:	e6fa      	b.n	8002354 <_printf_float+0x258>
 800255e:	f04f 0800 	mov.w	r8, #0
 8002562:	f104 0919 	add.w	r9, r4, #25
 8002566:	e7f4      	b.n	8002552 <_printf_float+0x456>

08002568 <_printf_common>:
 8002568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800256c:	4616      	mov	r6, r2
 800256e:	4699      	mov	r9, r3
 8002570:	688a      	ldr	r2, [r1, #8]
 8002572:	690b      	ldr	r3, [r1, #16]
 8002574:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002578:	4293      	cmp	r3, r2
 800257a:	bfb8      	it	lt
 800257c:	4613      	movlt	r3, r2
 800257e:	6033      	str	r3, [r6, #0]
 8002580:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002584:	4607      	mov	r7, r0
 8002586:	460c      	mov	r4, r1
 8002588:	b10a      	cbz	r2, 800258e <_printf_common+0x26>
 800258a:	3301      	adds	r3, #1
 800258c:	6033      	str	r3, [r6, #0]
 800258e:	6823      	ldr	r3, [r4, #0]
 8002590:	0699      	lsls	r1, r3, #26
 8002592:	bf42      	ittt	mi
 8002594:	6833      	ldrmi	r3, [r6, #0]
 8002596:	3302      	addmi	r3, #2
 8002598:	6033      	strmi	r3, [r6, #0]
 800259a:	6825      	ldr	r5, [r4, #0]
 800259c:	f015 0506 	ands.w	r5, r5, #6
 80025a0:	d106      	bne.n	80025b0 <_printf_common+0x48>
 80025a2:	f104 0a19 	add.w	sl, r4, #25
 80025a6:	68e3      	ldr	r3, [r4, #12]
 80025a8:	6832      	ldr	r2, [r6, #0]
 80025aa:	1a9b      	subs	r3, r3, r2
 80025ac:	42ab      	cmp	r3, r5
 80025ae:	dc26      	bgt.n	80025fe <_printf_common+0x96>
 80025b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80025b4:	1e13      	subs	r3, r2, #0
 80025b6:	6822      	ldr	r2, [r4, #0]
 80025b8:	bf18      	it	ne
 80025ba:	2301      	movne	r3, #1
 80025bc:	0692      	lsls	r2, r2, #26
 80025be:	d42b      	bmi.n	8002618 <_printf_common+0xb0>
 80025c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025c4:	4649      	mov	r1, r9
 80025c6:	4638      	mov	r0, r7
 80025c8:	47c0      	blx	r8
 80025ca:	3001      	adds	r0, #1
 80025cc:	d01e      	beq.n	800260c <_printf_common+0xa4>
 80025ce:	6823      	ldr	r3, [r4, #0]
 80025d0:	68e5      	ldr	r5, [r4, #12]
 80025d2:	6832      	ldr	r2, [r6, #0]
 80025d4:	f003 0306 	and.w	r3, r3, #6
 80025d8:	2b04      	cmp	r3, #4
 80025da:	bf08      	it	eq
 80025dc:	1aad      	subeq	r5, r5, r2
 80025de:	68a3      	ldr	r3, [r4, #8]
 80025e0:	6922      	ldr	r2, [r4, #16]
 80025e2:	bf0c      	ite	eq
 80025e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025e8:	2500      	movne	r5, #0
 80025ea:	4293      	cmp	r3, r2
 80025ec:	bfc4      	itt	gt
 80025ee:	1a9b      	subgt	r3, r3, r2
 80025f0:	18ed      	addgt	r5, r5, r3
 80025f2:	2600      	movs	r6, #0
 80025f4:	341a      	adds	r4, #26
 80025f6:	42b5      	cmp	r5, r6
 80025f8:	d11a      	bne.n	8002630 <_printf_common+0xc8>
 80025fa:	2000      	movs	r0, #0
 80025fc:	e008      	b.n	8002610 <_printf_common+0xa8>
 80025fe:	2301      	movs	r3, #1
 8002600:	4652      	mov	r2, sl
 8002602:	4649      	mov	r1, r9
 8002604:	4638      	mov	r0, r7
 8002606:	47c0      	blx	r8
 8002608:	3001      	adds	r0, #1
 800260a:	d103      	bne.n	8002614 <_printf_common+0xac>
 800260c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002614:	3501      	adds	r5, #1
 8002616:	e7c6      	b.n	80025a6 <_printf_common+0x3e>
 8002618:	18e1      	adds	r1, r4, r3
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	2030      	movs	r0, #48	; 0x30
 800261e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002622:	4422      	add	r2, r4
 8002624:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002628:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800262c:	3302      	adds	r3, #2
 800262e:	e7c7      	b.n	80025c0 <_printf_common+0x58>
 8002630:	2301      	movs	r3, #1
 8002632:	4622      	mov	r2, r4
 8002634:	4649      	mov	r1, r9
 8002636:	4638      	mov	r0, r7
 8002638:	47c0      	blx	r8
 800263a:	3001      	adds	r0, #1
 800263c:	d0e6      	beq.n	800260c <_printf_common+0xa4>
 800263e:	3601      	adds	r6, #1
 8002640:	e7d9      	b.n	80025f6 <_printf_common+0x8e>
	...

08002644 <_printf_i>:
 8002644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002648:	7e0f      	ldrb	r7, [r1, #24]
 800264a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800264c:	2f78      	cmp	r7, #120	; 0x78
 800264e:	4691      	mov	r9, r2
 8002650:	4680      	mov	r8, r0
 8002652:	460c      	mov	r4, r1
 8002654:	469a      	mov	sl, r3
 8002656:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800265a:	d807      	bhi.n	800266c <_printf_i+0x28>
 800265c:	2f62      	cmp	r7, #98	; 0x62
 800265e:	d80a      	bhi.n	8002676 <_printf_i+0x32>
 8002660:	2f00      	cmp	r7, #0
 8002662:	f000 80d8 	beq.w	8002816 <_printf_i+0x1d2>
 8002666:	2f58      	cmp	r7, #88	; 0x58
 8002668:	f000 80a3 	beq.w	80027b2 <_printf_i+0x16e>
 800266c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002670:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002674:	e03a      	b.n	80026ec <_printf_i+0xa8>
 8002676:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800267a:	2b15      	cmp	r3, #21
 800267c:	d8f6      	bhi.n	800266c <_printf_i+0x28>
 800267e:	a101      	add	r1, pc, #4	; (adr r1, 8002684 <_printf_i+0x40>)
 8002680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002684:	080026dd 	.word	0x080026dd
 8002688:	080026f1 	.word	0x080026f1
 800268c:	0800266d 	.word	0x0800266d
 8002690:	0800266d 	.word	0x0800266d
 8002694:	0800266d 	.word	0x0800266d
 8002698:	0800266d 	.word	0x0800266d
 800269c:	080026f1 	.word	0x080026f1
 80026a0:	0800266d 	.word	0x0800266d
 80026a4:	0800266d 	.word	0x0800266d
 80026a8:	0800266d 	.word	0x0800266d
 80026ac:	0800266d 	.word	0x0800266d
 80026b0:	080027fd 	.word	0x080027fd
 80026b4:	08002721 	.word	0x08002721
 80026b8:	080027df 	.word	0x080027df
 80026bc:	0800266d 	.word	0x0800266d
 80026c0:	0800266d 	.word	0x0800266d
 80026c4:	0800281f 	.word	0x0800281f
 80026c8:	0800266d 	.word	0x0800266d
 80026cc:	08002721 	.word	0x08002721
 80026d0:	0800266d 	.word	0x0800266d
 80026d4:	0800266d 	.word	0x0800266d
 80026d8:	080027e7 	.word	0x080027e7
 80026dc:	682b      	ldr	r3, [r5, #0]
 80026de:	1d1a      	adds	r2, r3, #4
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	602a      	str	r2, [r5, #0]
 80026e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0a3      	b.n	8002838 <_printf_i+0x1f4>
 80026f0:	6820      	ldr	r0, [r4, #0]
 80026f2:	6829      	ldr	r1, [r5, #0]
 80026f4:	0606      	lsls	r6, r0, #24
 80026f6:	f101 0304 	add.w	r3, r1, #4
 80026fa:	d50a      	bpl.n	8002712 <_printf_i+0xce>
 80026fc:	680e      	ldr	r6, [r1, #0]
 80026fe:	602b      	str	r3, [r5, #0]
 8002700:	2e00      	cmp	r6, #0
 8002702:	da03      	bge.n	800270c <_printf_i+0xc8>
 8002704:	232d      	movs	r3, #45	; 0x2d
 8002706:	4276      	negs	r6, r6
 8002708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800270c:	485e      	ldr	r0, [pc, #376]	; (8002888 <_printf_i+0x244>)
 800270e:	230a      	movs	r3, #10
 8002710:	e019      	b.n	8002746 <_printf_i+0x102>
 8002712:	680e      	ldr	r6, [r1, #0]
 8002714:	602b      	str	r3, [r5, #0]
 8002716:	f010 0f40 	tst.w	r0, #64	; 0x40
 800271a:	bf18      	it	ne
 800271c:	b236      	sxthne	r6, r6
 800271e:	e7ef      	b.n	8002700 <_printf_i+0xbc>
 8002720:	682b      	ldr	r3, [r5, #0]
 8002722:	6820      	ldr	r0, [r4, #0]
 8002724:	1d19      	adds	r1, r3, #4
 8002726:	6029      	str	r1, [r5, #0]
 8002728:	0601      	lsls	r1, r0, #24
 800272a:	d501      	bpl.n	8002730 <_printf_i+0xec>
 800272c:	681e      	ldr	r6, [r3, #0]
 800272e:	e002      	b.n	8002736 <_printf_i+0xf2>
 8002730:	0646      	lsls	r6, r0, #25
 8002732:	d5fb      	bpl.n	800272c <_printf_i+0xe8>
 8002734:	881e      	ldrh	r6, [r3, #0]
 8002736:	4854      	ldr	r0, [pc, #336]	; (8002888 <_printf_i+0x244>)
 8002738:	2f6f      	cmp	r7, #111	; 0x6f
 800273a:	bf0c      	ite	eq
 800273c:	2308      	moveq	r3, #8
 800273e:	230a      	movne	r3, #10
 8002740:	2100      	movs	r1, #0
 8002742:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002746:	6865      	ldr	r5, [r4, #4]
 8002748:	60a5      	str	r5, [r4, #8]
 800274a:	2d00      	cmp	r5, #0
 800274c:	bfa2      	ittt	ge
 800274e:	6821      	ldrge	r1, [r4, #0]
 8002750:	f021 0104 	bicge.w	r1, r1, #4
 8002754:	6021      	strge	r1, [r4, #0]
 8002756:	b90e      	cbnz	r6, 800275c <_printf_i+0x118>
 8002758:	2d00      	cmp	r5, #0
 800275a:	d04d      	beq.n	80027f8 <_printf_i+0x1b4>
 800275c:	4615      	mov	r5, r2
 800275e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002762:	fb03 6711 	mls	r7, r3, r1, r6
 8002766:	5dc7      	ldrb	r7, [r0, r7]
 8002768:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800276c:	4637      	mov	r7, r6
 800276e:	42bb      	cmp	r3, r7
 8002770:	460e      	mov	r6, r1
 8002772:	d9f4      	bls.n	800275e <_printf_i+0x11a>
 8002774:	2b08      	cmp	r3, #8
 8002776:	d10b      	bne.n	8002790 <_printf_i+0x14c>
 8002778:	6823      	ldr	r3, [r4, #0]
 800277a:	07de      	lsls	r6, r3, #31
 800277c:	d508      	bpl.n	8002790 <_printf_i+0x14c>
 800277e:	6923      	ldr	r3, [r4, #16]
 8002780:	6861      	ldr	r1, [r4, #4]
 8002782:	4299      	cmp	r1, r3
 8002784:	bfde      	ittt	le
 8002786:	2330      	movle	r3, #48	; 0x30
 8002788:	f805 3c01 	strble.w	r3, [r5, #-1]
 800278c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002790:	1b52      	subs	r2, r2, r5
 8002792:	6122      	str	r2, [r4, #16]
 8002794:	f8cd a000 	str.w	sl, [sp]
 8002798:	464b      	mov	r3, r9
 800279a:	aa03      	add	r2, sp, #12
 800279c:	4621      	mov	r1, r4
 800279e:	4640      	mov	r0, r8
 80027a0:	f7ff fee2 	bl	8002568 <_printf_common>
 80027a4:	3001      	adds	r0, #1
 80027a6:	d14c      	bne.n	8002842 <_printf_i+0x1fe>
 80027a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027ac:	b004      	add	sp, #16
 80027ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027b2:	4835      	ldr	r0, [pc, #212]	; (8002888 <_printf_i+0x244>)
 80027b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80027b8:	6829      	ldr	r1, [r5, #0]
 80027ba:	6823      	ldr	r3, [r4, #0]
 80027bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80027c0:	6029      	str	r1, [r5, #0]
 80027c2:	061d      	lsls	r5, r3, #24
 80027c4:	d514      	bpl.n	80027f0 <_printf_i+0x1ac>
 80027c6:	07df      	lsls	r7, r3, #31
 80027c8:	bf44      	itt	mi
 80027ca:	f043 0320 	orrmi.w	r3, r3, #32
 80027ce:	6023      	strmi	r3, [r4, #0]
 80027d0:	b91e      	cbnz	r6, 80027da <_printf_i+0x196>
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	f023 0320 	bic.w	r3, r3, #32
 80027d8:	6023      	str	r3, [r4, #0]
 80027da:	2310      	movs	r3, #16
 80027dc:	e7b0      	b.n	8002740 <_printf_i+0xfc>
 80027de:	6823      	ldr	r3, [r4, #0]
 80027e0:	f043 0320 	orr.w	r3, r3, #32
 80027e4:	6023      	str	r3, [r4, #0]
 80027e6:	2378      	movs	r3, #120	; 0x78
 80027e8:	4828      	ldr	r0, [pc, #160]	; (800288c <_printf_i+0x248>)
 80027ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80027ee:	e7e3      	b.n	80027b8 <_printf_i+0x174>
 80027f0:	0659      	lsls	r1, r3, #25
 80027f2:	bf48      	it	mi
 80027f4:	b2b6      	uxthmi	r6, r6
 80027f6:	e7e6      	b.n	80027c6 <_printf_i+0x182>
 80027f8:	4615      	mov	r5, r2
 80027fa:	e7bb      	b.n	8002774 <_printf_i+0x130>
 80027fc:	682b      	ldr	r3, [r5, #0]
 80027fe:	6826      	ldr	r6, [r4, #0]
 8002800:	6961      	ldr	r1, [r4, #20]
 8002802:	1d18      	adds	r0, r3, #4
 8002804:	6028      	str	r0, [r5, #0]
 8002806:	0635      	lsls	r5, r6, #24
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	d501      	bpl.n	8002810 <_printf_i+0x1cc>
 800280c:	6019      	str	r1, [r3, #0]
 800280e:	e002      	b.n	8002816 <_printf_i+0x1d2>
 8002810:	0670      	lsls	r0, r6, #25
 8002812:	d5fb      	bpl.n	800280c <_printf_i+0x1c8>
 8002814:	8019      	strh	r1, [r3, #0]
 8002816:	2300      	movs	r3, #0
 8002818:	6123      	str	r3, [r4, #16]
 800281a:	4615      	mov	r5, r2
 800281c:	e7ba      	b.n	8002794 <_printf_i+0x150>
 800281e:	682b      	ldr	r3, [r5, #0]
 8002820:	1d1a      	adds	r2, r3, #4
 8002822:	602a      	str	r2, [r5, #0]
 8002824:	681d      	ldr	r5, [r3, #0]
 8002826:	6862      	ldr	r2, [r4, #4]
 8002828:	2100      	movs	r1, #0
 800282a:	4628      	mov	r0, r5
 800282c:	f7fd fcd8 	bl	80001e0 <memchr>
 8002830:	b108      	cbz	r0, 8002836 <_printf_i+0x1f2>
 8002832:	1b40      	subs	r0, r0, r5
 8002834:	6060      	str	r0, [r4, #4]
 8002836:	6863      	ldr	r3, [r4, #4]
 8002838:	6123      	str	r3, [r4, #16]
 800283a:	2300      	movs	r3, #0
 800283c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002840:	e7a8      	b.n	8002794 <_printf_i+0x150>
 8002842:	6923      	ldr	r3, [r4, #16]
 8002844:	462a      	mov	r2, r5
 8002846:	4649      	mov	r1, r9
 8002848:	4640      	mov	r0, r8
 800284a:	47d0      	blx	sl
 800284c:	3001      	adds	r0, #1
 800284e:	d0ab      	beq.n	80027a8 <_printf_i+0x164>
 8002850:	6823      	ldr	r3, [r4, #0]
 8002852:	079b      	lsls	r3, r3, #30
 8002854:	d413      	bmi.n	800287e <_printf_i+0x23a>
 8002856:	68e0      	ldr	r0, [r4, #12]
 8002858:	9b03      	ldr	r3, [sp, #12]
 800285a:	4298      	cmp	r0, r3
 800285c:	bfb8      	it	lt
 800285e:	4618      	movlt	r0, r3
 8002860:	e7a4      	b.n	80027ac <_printf_i+0x168>
 8002862:	2301      	movs	r3, #1
 8002864:	4632      	mov	r2, r6
 8002866:	4649      	mov	r1, r9
 8002868:	4640      	mov	r0, r8
 800286a:	47d0      	blx	sl
 800286c:	3001      	adds	r0, #1
 800286e:	d09b      	beq.n	80027a8 <_printf_i+0x164>
 8002870:	3501      	adds	r5, #1
 8002872:	68e3      	ldr	r3, [r4, #12]
 8002874:	9903      	ldr	r1, [sp, #12]
 8002876:	1a5b      	subs	r3, r3, r1
 8002878:	42ab      	cmp	r3, r5
 800287a:	dcf2      	bgt.n	8002862 <_printf_i+0x21e>
 800287c:	e7eb      	b.n	8002856 <_printf_i+0x212>
 800287e:	2500      	movs	r5, #0
 8002880:	f104 0619 	add.w	r6, r4, #25
 8002884:	e7f5      	b.n	8002872 <_printf_i+0x22e>
 8002886:	bf00      	nop
 8002888:	08004baa 	.word	0x08004baa
 800288c:	08004bbb 	.word	0x08004bbb

08002890 <iprintf>:
 8002890:	b40f      	push	{r0, r1, r2, r3}
 8002892:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <iprintf+0x2c>)
 8002894:	b513      	push	{r0, r1, r4, lr}
 8002896:	681c      	ldr	r4, [r3, #0]
 8002898:	b124      	cbz	r4, 80028a4 <iprintf+0x14>
 800289a:	69a3      	ldr	r3, [r4, #24]
 800289c:	b913      	cbnz	r3, 80028a4 <iprintf+0x14>
 800289e:	4620      	mov	r0, r4
 80028a0:	f001 f872 	bl	8003988 <__sinit>
 80028a4:	ab05      	add	r3, sp, #20
 80028a6:	9a04      	ldr	r2, [sp, #16]
 80028a8:	68a1      	ldr	r1, [r4, #8]
 80028aa:	9301      	str	r3, [sp, #4]
 80028ac:	4620      	mov	r0, r4
 80028ae:	f001 fe21 	bl	80044f4 <_vfiprintf_r>
 80028b2:	b002      	add	sp, #8
 80028b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028b8:	b004      	add	sp, #16
 80028ba:	4770      	bx	lr
 80028bc:	2000002c 	.word	0x2000002c

080028c0 <setbuf>:
 80028c0:	2900      	cmp	r1, #0
 80028c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028c6:	bf0c      	ite	eq
 80028c8:	2202      	moveq	r2, #2
 80028ca:	2200      	movne	r2, #0
 80028cc:	f000 b800 	b.w	80028d0 <setvbuf>

080028d0 <setvbuf>:
 80028d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80028d4:	461d      	mov	r5, r3
 80028d6:	4b5d      	ldr	r3, [pc, #372]	; (8002a4c <setvbuf+0x17c>)
 80028d8:	681f      	ldr	r7, [r3, #0]
 80028da:	4604      	mov	r4, r0
 80028dc:	460e      	mov	r6, r1
 80028de:	4690      	mov	r8, r2
 80028e0:	b127      	cbz	r7, 80028ec <setvbuf+0x1c>
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	b913      	cbnz	r3, 80028ec <setvbuf+0x1c>
 80028e6:	4638      	mov	r0, r7
 80028e8:	f001 f84e 	bl	8003988 <__sinit>
 80028ec:	4b58      	ldr	r3, [pc, #352]	; (8002a50 <setvbuf+0x180>)
 80028ee:	429c      	cmp	r4, r3
 80028f0:	d167      	bne.n	80029c2 <setvbuf+0xf2>
 80028f2:	687c      	ldr	r4, [r7, #4]
 80028f4:	f1b8 0f02 	cmp.w	r8, #2
 80028f8:	d006      	beq.n	8002908 <setvbuf+0x38>
 80028fa:	f1b8 0f01 	cmp.w	r8, #1
 80028fe:	f200 809f 	bhi.w	8002a40 <setvbuf+0x170>
 8002902:	2d00      	cmp	r5, #0
 8002904:	f2c0 809c 	blt.w	8002a40 <setvbuf+0x170>
 8002908:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800290a:	07db      	lsls	r3, r3, #31
 800290c:	d405      	bmi.n	800291a <setvbuf+0x4a>
 800290e:	89a3      	ldrh	r3, [r4, #12]
 8002910:	0598      	lsls	r0, r3, #22
 8002912:	d402      	bmi.n	800291a <setvbuf+0x4a>
 8002914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002916:	f001 f8da 	bl	8003ace <__retarget_lock_acquire_recursive>
 800291a:	4621      	mov	r1, r4
 800291c:	4638      	mov	r0, r7
 800291e:	f000 ff9f 	bl	8003860 <_fflush_r>
 8002922:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002924:	b141      	cbz	r1, 8002938 <setvbuf+0x68>
 8002926:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800292a:	4299      	cmp	r1, r3
 800292c:	d002      	beq.n	8002934 <setvbuf+0x64>
 800292e:	4638      	mov	r0, r7
 8002930:	f001 fcd6 	bl	80042e0 <_free_r>
 8002934:	2300      	movs	r3, #0
 8002936:	6363      	str	r3, [r4, #52]	; 0x34
 8002938:	2300      	movs	r3, #0
 800293a:	61a3      	str	r3, [r4, #24]
 800293c:	6063      	str	r3, [r4, #4]
 800293e:	89a3      	ldrh	r3, [r4, #12]
 8002940:	0619      	lsls	r1, r3, #24
 8002942:	d503      	bpl.n	800294c <setvbuf+0x7c>
 8002944:	6921      	ldr	r1, [r4, #16]
 8002946:	4638      	mov	r0, r7
 8002948:	f001 fcca 	bl	80042e0 <_free_r>
 800294c:	89a3      	ldrh	r3, [r4, #12]
 800294e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002952:	f023 0303 	bic.w	r3, r3, #3
 8002956:	f1b8 0f02 	cmp.w	r8, #2
 800295a:	81a3      	strh	r3, [r4, #12]
 800295c:	d06c      	beq.n	8002a38 <setvbuf+0x168>
 800295e:	ab01      	add	r3, sp, #4
 8002960:	466a      	mov	r2, sp
 8002962:	4621      	mov	r1, r4
 8002964:	4638      	mov	r0, r7
 8002966:	f001 f8b4 	bl	8003ad2 <__swhatbuf_r>
 800296a:	89a3      	ldrh	r3, [r4, #12]
 800296c:	4318      	orrs	r0, r3
 800296e:	81a0      	strh	r0, [r4, #12]
 8002970:	2d00      	cmp	r5, #0
 8002972:	d130      	bne.n	80029d6 <setvbuf+0x106>
 8002974:	9d00      	ldr	r5, [sp, #0]
 8002976:	4628      	mov	r0, r5
 8002978:	f001 f910 	bl	8003b9c <malloc>
 800297c:	4606      	mov	r6, r0
 800297e:	2800      	cmp	r0, #0
 8002980:	d155      	bne.n	8002a2e <setvbuf+0x15e>
 8002982:	f8dd 9000 	ldr.w	r9, [sp]
 8002986:	45a9      	cmp	r9, r5
 8002988:	d14a      	bne.n	8002a20 <setvbuf+0x150>
 800298a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800298e:	2200      	movs	r2, #0
 8002990:	60a2      	str	r2, [r4, #8]
 8002992:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002996:	6022      	str	r2, [r4, #0]
 8002998:	6122      	str	r2, [r4, #16]
 800299a:	2201      	movs	r2, #1
 800299c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029a0:	6162      	str	r2, [r4, #20]
 80029a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80029a4:	f043 0302 	orr.w	r3, r3, #2
 80029a8:	07d2      	lsls	r2, r2, #31
 80029aa:	81a3      	strh	r3, [r4, #12]
 80029ac:	d405      	bmi.n	80029ba <setvbuf+0xea>
 80029ae:	f413 7f00 	tst.w	r3, #512	; 0x200
 80029b2:	d102      	bne.n	80029ba <setvbuf+0xea>
 80029b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029b6:	f001 f88b 	bl	8003ad0 <__retarget_lock_release_recursive>
 80029ba:	4628      	mov	r0, r5
 80029bc:	b003      	add	sp, #12
 80029be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029c2:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <setvbuf+0x184>)
 80029c4:	429c      	cmp	r4, r3
 80029c6:	d101      	bne.n	80029cc <setvbuf+0xfc>
 80029c8:	68bc      	ldr	r4, [r7, #8]
 80029ca:	e793      	b.n	80028f4 <setvbuf+0x24>
 80029cc:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <setvbuf+0x188>)
 80029ce:	429c      	cmp	r4, r3
 80029d0:	bf08      	it	eq
 80029d2:	68fc      	ldreq	r4, [r7, #12]
 80029d4:	e78e      	b.n	80028f4 <setvbuf+0x24>
 80029d6:	2e00      	cmp	r6, #0
 80029d8:	d0cd      	beq.n	8002976 <setvbuf+0xa6>
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	b913      	cbnz	r3, 80029e4 <setvbuf+0x114>
 80029de:	4638      	mov	r0, r7
 80029e0:	f000 ffd2 	bl	8003988 <__sinit>
 80029e4:	f1b8 0f01 	cmp.w	r8, #1
 80029e8:	bf08      	it	eq
 80029ea:	89a3      	ldrheq	r3, [r4, #12]
 80029ec:	6026      	str	r6, [r4, #0]
 80029ee:	bf04      	itt	eq
 80029f0:	f043 0301 	orreq.w	r3, r3, #1
 80029f4:	81a3      	strheq	r3, [r4, #12]
 80029f6:	89a2      	ldrh	r2, [r4, #12]
 80029f8:	f012 0308 	ands.w	r3, r2, #8
 80029fc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002a00:	d01c      	beq.n	8002a3c <setvbuf+0x16c>
 8002a02:	07d3      	lsls	r3, r2, #31
 8002a04:	bf41      	itttt	mi
 8002a06:	2300      	movmi	r3, #0
 8002a08:	426d      	negmi	r5, r5
 8002a0a:	60a3      	strmi	r3, [r4, #8]
 8002a0c:	61a5      	strmi	r5, [r4, #24]
 8002a0e:	bf58      	it	pl
 8002a10:	60a5      	strpl	r5, [r4, #8]
 8002a12:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002a14:	f015 0501 	ands.w	r5, r5, #1
 8002a18:	d115      	bne.n	8002a46 <setvbuf+0x176>
 8002a1a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002a1e:	e7c8      	b.n	80029b2 <setvbuf+0xe2>
 8002a20:	4648      	mov	r0, r9
 8002a22:	f001 f8bb 	bl	8003b9c <malloc>
 8002a26:	4606      	mov	r6, r0
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	d0ae      	beq.n	800298a <setvbuf+0xba>
 8002a2c:	464d      	mov	r5, r9
 8002a2e:	89a3      	ldrh	r3, [r4, #12]
 8002a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a34:	81a3      	strh	r3, [r4, #12]
 8002a36:	e7d0      	b.n	80029da <setvbuf+0x10a>
 8002a38:	2500      	movs	r5, #0
 8002a3a:	e7a8      	b.n	800298e <setvbuf+0xbe>
 8002a3c:	60a3      	str	r3, [r4, #8]
 8002a3e:	e7e8      	b.n	8002a12 <setvbuf+0x142>
 8002a40:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002a44:	e7b9      	b.n	80029ba <setvbuf+0xea>
 8002a46:	2500      	movs	r5, #0
 8002a48:	e7b7      	b.n	80029ba <setvbuf+0xea>
 8002a4a:	bf00      	nop
 8002a4c:	2000002c 	.word	0x2000002c
 8002a50:	08004c7c 	.word	0x08004c7c
 8002a54:	08004c9c 	.word	0x08004c9c
 8002a58:	08004c5c 	.word	0x08004c5c

08002a5c <quorem>:
 8002a5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a60:	6903      	ldr	r3, [r0, #16]
 8002a62:	690c      	ldr	r4, [r1, #16]
 8002a64:	42a3      	cmp	r3, r4
 8002a66:	4607      	mov	r7, r0
 8002a68:	f2c0 8081 	blt.w	8002b6e <quorem+0x112>
 8002a6c:	3c01      	subs	r4, #1
 8002a6e:	f101 0814 	add.w	r8, r1, #20
 8002a72:	f100 0514 	add.w	r5, r0, #20
 8002a76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002a80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002a84:	3301      	adds	r3, #1
 8002a86:	429a      	cmp	r2, r3
 8002a88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002a8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002a90:	fbb2 f6f3 	udiv	r6, r2, r3
 8002a94:	d331      	bcc.n	8002afa <quorem+0x9e>
 8002a96:	f04f 0e00 	mov.w	lr, #0
 8002a9a:	4640      	mov	r0, r8
 8002a9c:	46ac      	mov	ip, r5
 8002a9e:	46f2      	mov	sl, lr
 8002aa0:	f850 2b04 	ldr.w	r2, [r0], #4
 8002aa4:	b293      	uxth	r3, r2
 8002aa6:	fb06 e303 	mla	r3, r6, r3, lr
 8002aaa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	ebaa 0303 	sub.w	r3, sl, r3
 8002ab4:	f8dc a000 	ldr.w	sl, [ip]
 8002ab8:	0c12      	lsrs	r2, r2, #16
 8002aba:	fa13 f38a 	uxtah	r3, r3, sl
 8002abe:	fb06 e202 	mla	r2, r6, r2, lr
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	9b00      	ldr	r3, [sp, #0]
 8002ac6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002aca:	b292      	uxth	r2, r2
 8002acc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002ad0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002ad4:	f8bd 3000 	ldrh.w	r3, [sp]
 8002ad8:	4581      	cmp	r9, r0
 8002ada:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ade:	f84c 3b04 	str.w	r3, [ip], #4
 8002ae2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002ae6:	d2db      	bcs.n	8002aa0 <quorem+0x44>
 8002ae8:	f855 300b 	ldr.w	r3, [r5, fp]
 8002aec:	b92b      	cbnz	r3, 8002afa <quorem+0x9e>
 8002aee:	9b01      	ldr	r3, [sp, #4]
 8002af0:	3b04      	subs	r3, #4
 8002af2:	429d      	cmp	r5, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	d32e      	bcc.n	8002b56 <quorem+0xfa>
 8002af8:	613c      	str	r4, [r7, #16]
 8002afa:	4638      	mov	r0, r7
 8002afc:	f001 fad8 	bl	80040b0 <__mcmp>
 8002b00:	2800      	cmp	r0, #0
 8002b02:	db24      	blt.n	8002b4e <quorem+0xf2>
 8002b04:	3601      	adds	r6, #1
 8002b06:	4628      	mov	r0, r5
 8002b08:	f04f 0c00 	mov.w	ip, #0
 8002b0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8002b10:	f8d0 e000 	ldr.w	lr, [r0]
 8002b14:	b293      	uxth	r3, r2
 8002b16:	ebac 0303 	sub.w	r3, ip, r3
 8002b1a:	0c12      	lsrs	r2, r2, #16
 8002b1c:	fa13 f38e 	uxtah	r3, r3, lr
 8002b20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002b24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b2e:	45c1      	cmp	r9, r8
 8002b30:	f840 3b04 	str.w	r3, [r0], #4
 8002b34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002b38:	d2e8      	bcs.n	8002b0c <quorem+0xb0>
 8002b3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002b3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002b42:	b922      	cbnz	r2, 8002b4e <quorem+0xf2>
 8002b44:	3b04      	subs	r3, #4
 8002b46:	429d      	cmp	r5, r3
 8002b48:	461a      	mov	r2, r3
 8002b4a:	d30a      	bcc.n	8002b62 <quorem+0x106>
 8002b4c:	613c      	str	r4, [r7, #16]
 8002b4e:	4630      	mov	r0, r6
 8002b50:	b003      	add	sp, #12
 8002b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	3b04      	subs	r3, #4
 8002b5a:	2a00      	cmp	r2, #0
 8002b5c:	d1cc      	bne.n	8002af8 <quorem+0x9c>
 8002b5e:	3c01      	subs	r4, #1
 8002b60:	e7c7      	b.n	8002af2 <quorem+0x96>
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	3b04      	subs	r3, #4
 8002b66:	2a00      	cmp	r2, #0
 8002b68:	d1f0      	bne.n	8002b4c <quorem+0xf0>
 8002b6a:	3c01      	subs	r4, #1
 8002b6c:	e7eb      	b.n	8002b46 <quorem+0xea>
 8002b6e:	2000      	movs	r0, #0
 8002b70:	e7ee      	b.n	8002b50 <quorem+0xf4>
 8002b72:	0000      	movs	r0, r0
 8002b74:	0000      	movs	r0, r0
	...

08002b78 <_dtoa_r>:
 8002b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b7c:	ed2d 8b04 	vpush	{d8-d9}
 8002b80:	ec57 6b10 	vmov	r6, r7, d0
 8002b84:	b093      	sub	sp, #76	; 0x4c
 8002b86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002b88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8002b8c:	9106      	str	r1, [sp, #24]
 8002b8e:	ee10 aa10 	vmov	sl, s0
 8002b92:	4604      	mov	r4, r0
 8002b94:	9209      	str	r2, [sp, #36]	; 0x24
 8002b96:	930c      	str	r3, [sp, #48]	; 0x30
 8002b98:	46bb      	mov	fp, r7
 8002b9a:	b975      	cbnz	r5, 8002bba <_dtoa_r+0x42>
 8002b9c:	2010      	movs	r0, #16
 8002b9e:	f000 fffd 	bl	8003b9c <malloc>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	6260      	str	r0, [r4, #36]	; 0x24
 8002ba6:	b920      	cbnz	r0, 8002bb2 <_dtoa_r+0x3a>
 8002ba8:	4ba7      	ldr	r3, [pc, #668]	; (8002e48 <_dtoa_r+0x2d0>)
 8002baa:	21ea      	movs	r1, #234	; 0xea
 8002bac:	48a7      	ldr	r0, [pc, #668]	; (8002e4c <_dtoa_r+0x2d4>)
 8002bae:	f001 fee5 	bl	800497c <__assert_func>
 8002bb2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002bb6:	6005      	str	r5, [r0, #0]
 8002bb8:	60c5      	str	r5, [r0, #12]
 8002bba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bbc:	6819      	ldr	r1, [r3, #0]
 8002bbe:	b151      	cbz	r1, 8002bd6 <_dtoa_r+0x5e>
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	604a      	str	r2, [r1, #4]
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	4093      	lsls	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
 8002bca:	4620      	mov	r0, r4
 8002bcc:	f001 f82e 	bl	8003c2c <_Bfree>
 8002bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	1e3b      	subs	r3, r7, #0
 8002bd8:	bfaa      	itet	ge
 8002bda:	2300      	movge	r3, #0
 8002bdc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8002be0:	f8c8 3000 	strge.w	r3, [r8]
 8002be4:	4b9a      	ldr	r3, [pc, #616]	; (8002e50 <_dtoa_r+0x2d8>)
 8002be6:	bfbc      	itt	lt
 8002be8:	2201      	movlt	r2, #1
 8002bea:	f8c8 2000 	strlt.w	r2, [r8]
 8002bee:	ea33 030b 	bics.w	r3, r3, fp
 8002bf2:	d11b      	bne.n	8002c2c <_dtoa_r+0xb4>
 8002bf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002bf6:	f242 730f 	movw	r3, #9999	; 0x270f
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8002c00:	4333      	orrs	r3, r6
 8002c02:	f000 8592 	beq.w	800372a <_dtoa_r+0xbb2>
 8002c06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002c08:	b963      	cbnz	r3, 8002c24 <_dtoa_r+0xac>
 8002c0a:	4b92      	ldr	r3, [pc, #584]	; (8002e54 <_dtoa_r+0x2dc>)
 8002c0c:	e022      	b.n	8002c54 <_dtoa_r+0xdc>
 8002c0e:	4b92      	ldr	r3, [pc, #584]	; (8002e58 <_dtoa_r+0x2e0>)
 8002c10:	9301      	str	r3, [sp, #4]
 8002c12:	3308      	adds	r3, #8
 8002c14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	9801      	ldr	r0, [sp, #4]
 8002c1a:	b013      	add	sp, #76	; 0x4c
 8002c1c:	ecbd 8b04 	vpop	{d8-d9}
 8002c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c24:	4b8b      	ldr	r3, [pc, #556]	; (8002e54 <_dtoa_r+0x2dc>)
 8002c26:	9301      	str	r3, [sp, #4]
 8002c28:	3303      	adds	r3, #3
 8002c2a:	e7f3      	b.n	8002c14 <_dtoa_r+0x9c>
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2300      	movs	r3, #0
 8002c30:	4650      	mov	r0, sl
 8002c32:	4659      	mov	r1, fp
 8002c34:	f7fd ff48 	bl	8000ac8 <__aeabi_dcmpeq>
 8002c38:	ec4b ab19 	vmov	d9, sl, fp
 8002c3c:	4680      	mov	r8, r0
 8002c3e:	b158      	cbz	r0, 8002c58 <_dtoa_r+0xe0>
 8002c40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002c42:	2301      	movs	r3, #1
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 856b 	beq.w	8003724 <_dtoa_r+0xbac>
 8002c4e:	4883      	ldr	r0, [pc, #524]	; (8002e5c <_dtoa_r+0x2e4>)
 8002c50:	6018      	str	r0, [r3, #0]
 8002c52:	1e43      	subs	r3, r0, #1
 8002c54:	9301      	str	r3, [sp, #4]
 8002c56:	e7df      	b.n	8002c18 <_dtoa_r+0xa0>
 8002c58:	ec4b ab10 	vmov	d0, sl, fp
 8002c5c:	aa10      	add	r2, sp, #64	; 0x40
 8002c5e:	a911      	add	r1, sp, #68	; 0x44
 8002c60:	4620      	mov	r0, r4
 8002c62:	f001 facb 	bl	80041fc <__d2b>
 8002c66:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8002c6a:	ee08 0a10 	vmov	s16, r0
 8002c6e:	2d00      	cmp	r5, #0
 8002c70:	f000 8084 	beq.w	8002d7c <_dtoa_r+0x204>
 8002c74:	ee19 3a90 	vmov	r3, s19
 8002c78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c7c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8002c80:	4656      	mov	r6, sl
 8002c82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8002c86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002c8a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8002c8e:	4b74      	ldr	r3, [pc, #464]	; (8002e60 <_dtoa_r+0x2e8>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	4630      	mov	r0, r6
 8002c94:	4639      	mov	r1, r7
 8002c96:	f7fd faf7 	bl	8000288 <__aeabi_dsub>
 8002c9a:	a365      	add	r3, pc, #404	; (adr r3, 8002e30 <_dtoa_r+0x2b8>)
 8002c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca0:	f7fd fcaa 	bl	80005f8 <__aeabi_dmul>
 8002ca4:	a364      	add	r3, pc, #400	; (adr r3, 8002e38 <_dtoa_r+0x2c0>)
 8002ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002caa:	f7fd faef 	bl	800028c <__adddf3>
 8002cae:	4606      	mov	r6, r0
 8002cb0:	4628      	mov	r0, r5
 8002cb2:	460f      	mov	r7, r1
 8002cb4:	f7fd fc36 	bl	8000524 <__aeabi_i2d>
 8002cb8:	a361      	add	r3, pc, #388	; (adr r3, 8002e40 <_dtoa_r+0x2c8>)
 8002cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbe:	f7fd fc9b 	bl	80005f8 <__aeabi_dmul>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4630      	mov	r0, r6
 8002cc8:	4639      	mov	r1, r7
 8002cca:	f7fd fadf 	bl	800028c <__adddf3>
 8002cce:	4606      	mov	r6, r0
 8002cd0:	460f      	mov	r7, r1
 8002cd2:	f7fd ff41 	bl	8000b58 <__aeabi_d2iz>
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	9000      	str	r0, [sp, #0]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	4630      	mov	r0, r6
 8002cde:	4639      	mov	r1, r7
 8002ce0:	f7fd fefc 	bl	8000adc <__aeabi_dcmplt>
 8002ce4:	b150      	cbz	r0, 8002cfc <_dtoa_r+0x184>
 8002ce6:	9800      	ldr	r0, [sp, #0]
 8002ce8:	f7fd fc1c 	bl	8000524 <__aeabi_i2d>
 8002cec:	4632      	mov	r2, r6
 8002cee:	463b      	mov	r3, r7
 8002cf0:	f7fd feea 	bl	8000ac8 <__aeabi_dcmpeq>
 8002cf4:	b910      	cbnz	r0, 8002cfc <_dtoa_r+0x184>
 8002cf6:	9b00      	ldr	r3, [sp, #0]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	9b00      	ldr	r3, [sp, #0]
 8002cfe:	2b16      	cmp	r3, #22
 8002d00:	d85a      	bhi.n	8002db8 <_dtoa_r+0x240>
 8002d02:	9a00      	ldr	r2, [sp, #0]
 8002d04:	4b57      	ldr	r3, [pc, #348]	; (8002e64 <_dtoa_r+0x2ec>)
 8002d06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0e:	ec51 0b19 	vmov	r0, r1, d9
 8002d12:	f7fd fee3 	bl	8000adc <__aeabi_dcmplt>
 8002d16:	2800      	cmp	r0, #0
 8002d18:	d050      	beq.n	8002dbc <_dtoa_r+0x244>
 8002d1a:	9b00      	ldr	r3, [sp, #0]
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	2300      	movs	r3, #0
 8002d22:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002d26:	1b5d      	subs	r5, r3, r5
 8002d28:	1e6b      	subs	r3, r5, #1
 8002d2a:	9305      	str	r3, [sp, #20]
 8002d2c:	bf45      	ittet	mi
 8002d2e:	f1c5 0301 	rsbmi	r3, r5, #1
 8002d32:	9304      	strmi	r3, [sp, #16]
 8002d34:	2300      	movpl	r3, #0
 8002d36:	2300      	movmi	r3, #0
 8002d38:	bf4c      	ite	mi
 8002d3a:	9305      	strmi	r3, [sp, #20]
 8002d3c:	9304      	strpl	r3, [sp, #16]
 8002d3e:	9b00      	ldr	r3, [sp, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	db3d      	blt.n	8002dc0 <_dtoa_r+0x248>
 8002d44:	9b05      	ldr	r3, [sp, #20]
 8002d46:	9a00      	ldr	r2, [sp, #0]
 8002d48:	920a      	str	r2, [sp, #40]	; 0x28
 8002d4a:	4413      	add	r3, r2
 8002d4c:	9305      	str	r3, [sp, #20]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	9307      	str	r3, [sp, #28]
 8002d52:	9b06      	ldr	r3, [sp, #24]
 8002d54:	2b09      	cmp	r3, #9
 8002d56:	f200 8089 	bhi.w	8002e6c <_dtoa_r+0x2f4>
 8002d5a:	2b05      	cmp	r3, #5
 8002d5c:	bfc4      	itt	gt
 8002d5e:	3b04      	subgt	r3, #4
 8002d60:	9306      	strgt	r3, [sp, #24]
 8002d62:	9b06      	ldr	r3, [sp, #24]
 8002d64:	f1a3 0302 	sub.w	r3, r3, #2
 8002d68:	bfcc      	ite	gt
 8002d6a:	2500      	movgt	r5, #0
 8002d6c:	2501      	movle	r5, #1
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	f200 8087 	bhi.w	8002e82 <_dtoa_r+0x30a>
 8002d74:	e8df f003 	tbb	[pc, r3]
 8002d78:	59383a2d 	.word	0x59383a2d
 8002d7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8002d80:	441d      	add	r5, r3
 8002d82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8002d86:	2b20      	cmp	r3, #32
 8002d88:	bfc1      	itttt	gt
 8002d8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002d8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8002d92:	fa0b f303 	lslgt.w	r3, fp, r3
 8002d96:	fa26 f000 	lsrgt.w	r0, r6, r0
 8002d9a:	bfda      	itte	le
 8002d9c:	f1c3 0320 	rsble	r3, r3, #32
 8002da0:	fa06 f003 	lslle.w	r0, r6, r3
 8002da4:	4318      	orrgt	r0, r3
 8002da6:	f7fd fbad 	bl	8000504 <__aeabi_ui2d>
 8002daa:	2301      	movs	r3, #1
 8002dac:	4606      	mov	r6, r0
 8002dae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8002db2:	3d01      	subs	r5, #1
 8002db4:	930e      	str	r3, [sp, #56]	; 0x38
 8002db6:	e76a      	b.n	8002c8e <_dtoa_r+0x116>
 8002db8:	2301      	movs	r3, #1
 8002dba:	e7b2      	b.n	8002d22 <_dtoa_r+0x1aa>
 8002dbc:	900b      	str	r0, [sp, #44]	; 0x2c
 8002dbe:	e7b1      	b.n	8002d24 <_dtoa_r+0x1ac>
 8002dc0:	9b04      	ldr	r3, [sp, #16]
 8002dc2:	9a00      	ldr	r2, [sp, #0]
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	9304      	str	r3, [sp, #16]
 8002dc8:	4253      	negs	r3, r2
 8002dca:	9307      	str	r3, [sp, #28]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	930a      	str	r3, [sp, #40]	; 0x28
 8002dd0:	e7bf      	b.n	8002d52 <_dtoa_r+0x1da>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	9308      	str	r3, [sp, #32]
 8002dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	dc55      	bgt.n	8002e88 <_dtoa_r+0x310>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002de2:	461a      	mov	r2, r3
 8002de4:	9209      	str	r2, [sp, #36]	; 0x24
 8002de6:	e00c      	b.n	8002e02 <_dtoa_r+0x28a>
 8002de8:	2301      	movs	r3, #1
 8002dea:	e7f3      	b.n	8002dd4 <_dtoa_r+0x25c>
 8002dec:	2300      	movs	r3, #0
 8002dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002df0:	9308      	str	r3, [sp, #32]
 8002df2:	9b00      	ldr	r3, [sp, #0]
 8002df4:	4413      	add	r3, r2
 8002df6:	9302      	str	r3, [sp, #8]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	9303      	str	r3, [sp, #12]
 8002dfe:	bfb8      	it	lt
 8002e00:	2301      	movlt	r3, #1
 8002e02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002e04:	2200      	movs	r2, #0
 8002e06:	6042      	str	r2, [r0, #4]
 8002e08:	2204      	movs	r2, #4
 8002e0a:	f102 0614 	add.w	r6, r2, #20
 8002e0e:	429e      	cmp	r6, r3
 8002e10:	6841      	ldr	r1, [r0, #4]
 8002e12:	d93d      	bls.n	8002e90 <_dtoa_r+0x318>
 8002e14:	4620      	mov	r0, r4
 8002e16:	f000 fec9 	bl	8003bac <_Balloc>
 8002e1a:	9001      	str	r0, [sp, #4]
 8002e1c:	2800      	cmp	r0, #0
 8002e1e:	d13b      	bne.n	8002e98 <_dtoa_r+0x320>
 8002e20:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <_dtoa_r+0x2f0>)
 8002e22:	4602      	mov	r2, r0
 8002e24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002e28:	e6c0      	b.n	8002bac <_dtoa_r+0x34>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e7df      	b.n	8002dee <_dtoa_r+0x276>
 8002e2e:	bf00      	nop
 8002e30:	636f4361 	.word	0x636f4361
 8002e34:	3fd287a7 	.word	0x3fd287a7
 8002e38:	8b60c8b3 	.word	0x8b60c8b3
 8002e3c:	3fc68a28 	.word	0x3fc68a28
 8002e40:	509f79fb 	.word	0x509f79fb
 8002e44:	3fd34413 	.word	0x3fd34413
 8002e48:	08004bd9 	.word	0x08004bd9
 8002e4c:	08004bf0 	.word	0x08004bf0
 8002e50:	7ff00000 	.word	0x7ff00000
 8002e54:	08004bd5 	.word	0x08004bd5
 8002e58:	08004bcc 	.word	0x08004bcc
 8002e5c:	08004ba9 	.word	0x08004ba9
 8002e60:	3ff80000 	.word	0x3ff80000
 8002e64:	08004d40 	.word	0x08004d40
 8002e68:	08004c4b 	.word	0x08004c4b
 8002e6c:	2501      	movs	r5, #1
 8002e6e:	2300      	movs	r3, #0
 8002e70:	9306      	str	r3, [sp, #24]
 8002e72:	9508      	str	r5, [sp, #32]
 8002e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2312      	movs	r3, #18
 8002e80:	e7b0      	b.n	8002de4 <_dtoa_r+0x26c>
 8002e82:	2301      	movs	r3, #1
 8002e84:	9308      	str	r3, [sp, #32]
 8002e86:	e7f5      	b.n	8002e74 <_dtoa_r+0x2fc>
 8002e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002e8e:	e7b8      	b.n	8002e02 <_dtoa_r+0x28a>
 8002e90:	3101      	adds	r1, #1
 8002e92:	6041      	str	r1, [r0, #4]
 8002e94:	0052      	lsls	r2, r2, #1
 8002e96:	e7b8      	b.n	8002e0a <_dtoa_r+0x292>
 8002e98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e9a:	9a01      	ldr	r2, [sp, #4]
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	9b03      	ldr	r3, [sp, #12]
 8002ea0:	2b0e      	cmp	r3, #14
 8002ea2:	f200 809d 	bhi.w	8002fe0 <_dtoa_r+0x468>
 8002ea6:	2d00      	cmp	r5, #0
 8002ea8:	f000 809a 	beq.w	8002fe0 <_dtoa_r+0x468>
 8002eac:	9b00      	ldr	r3, [sp, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	dd32      	ble.n	8002f18 <_dtoa_r+0x3a0>
 8002eb2:	4ab7      	ldr	r2, [pc, #732]	; (8003190 <_dtoa_r+0x618>)
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002ebc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002ec0:	9b00      	ldr	r3, [sp, #0]
 8002ec2:	05d8      	lsls	r0, r3, #23
 8002ec4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8002ec8:	d516      	bpl.n	8002ef8 <_dtoa_r+0x380>
 8002eca:	4bb2      	ldr	r3, [pc, #712]	; (8003194 <_dtoa_r+0x61c>)
 8002ecc:	ec51 0b19 	vmov	r0, r1, d9
 8002ed0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002ed4:	f7fd fcba 	bl	800084c <__aeabi_ddiv>
 8002ed8:	f007 070f 	and.w	r7, r7, #15
 8002edc:	4682      	mov	sl, r0
 8002ede:	468b      	mov	fp, r1
 8002ee0:	2503      	movs	r5, #3
 8002ee2:	4eac      	ldr	r6, [pc, #688]	; (8003194 <_dtoa_r+0x61c>)
 8002ee4:	b957      	cbnz	r7, 8002efc <_dtoa_r+0x384>
 8002ee6:	4642      	mov	r2, r8
 8002ee8:	464b      	mov	r3, r9
 8002eea:	4650      	mov	r0, sl
 8002eec:	4659      	mov	r1, fp
 8002eee:	f7fd fcad 	bl	800084c <__aeabi_ddiv>
 8002ef2:	4682      	mov	sl, r0
 8002ef4:	468b      	mov	fp, r1
 8002ef6:	e028      	b.n	8002f4a <_dtoa_r+0x3d2>
 8002ef8:	2502      	movs	r5, #2
 8002efa:	e7f2      	b.n	8002ee2 <_dtoa_r+0x36a>
 8002efc:	07f9      	lsls	r1, r7, #31
 8002efe:	d508      	bpl.n	8002f12 <_dtoa_r+0x39a>
 8002f00:	4640      	mov	r0, r8
 8002f02:	4649      	mov	r1, r9
 8002f04:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002f08:	f7fd fb76 	bl	80005f8 <__aeabi_dmul>
 8002f0c:	3501      	adds	r5, #1
 8002f0e:	4680      	mov	r8, r0
 8002f10:	4689      	mov	r9, r1
 8002f12:	107f      	asrs	r7, r7, #1
 8002f14:	3608      	adds	r6, #8
 8002f16:	e7e5      	b.n	8002ee4 <_dtoa_r+0x36c>
 8002f18:	f000 809b 	beq.w	8003052 <_dtoa_r+0x4da>
 8002f1c:	9b00      	ldr	r3, [sp, #0]
 8002f1e:	4f9d      	ldr	r7, [pc, #628]	; (8003194 <_dtoa_r+0x61c>)
 8002f20:	425e      	negs	r6, r3
 8002f22:	4b9b      	ldr	r3, [pc, #620]	; (8003190 <_dtoa_r+0x618>)
 8002f24:	f006 020f 	and.w	r2, r6, #15
 8002f28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f30:	ec51 0b19 	vmov	r0, r1, d9
 8002f34:	f7fd fb60 	bl	80005f8 <__aeabi_dmul>
 8002f38:	1136      	asrs	r6, r6, #4
 8002f3a:	4682      	mov	sl, r0
 8002f3c:	468b      	mov	fp, r1
 8002f3e:	2300      	movs	r3, #0
 8002f40:	2502      	movs	r5, #2
 8002f42:	2e00      	cmp	r6, #0
 8002f44:	d17a      	bne.n	800303c <_dtoa_r+0x4c4>
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1d3      	bne.n	8002ef2 <_dtoa_r+0x37a>
 8002f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 8082 	beq.w	8003056 <_dtoa_r+0x4de>
 8002f52:	4b91      	ldr	r3, [pc, #580]	; (8003198 <_dtoa_r+0x620>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	4650      	mov	r0, sl
 8002f58:	4659      	mov	r1, fp
 8002f5a:	f7fd fdbf 	bl	8000adc <__aeabi_dcmplt>
 8002f5e:	2800      	cmp	r0, #0
 8002f60:	d079      	beq.n	8003056 <_dtoa_r+0x4de>
 8002f62:	9b03      	ldr	r3, [sp, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d076      	beq.n	8003056 <_dtoa_r+0x4de>
 8002f68:	9b02      	ldr	r3, [sp, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	dd36      	ble.n	8002fdc <_dtoa_r+0x464>
 8002f6e:	9b00      	ldr	r3, [sp, #0]
 8002f70:	4650      	mov	r0, sl
 8002f72:	4659      	mov	r1, fp
 8002f74:	1e5f      	subs	r7, r3, #1
 8002f76:	2200      	movs	r2, #0
 8002f78:	4b88      	ldr	r3, [pc, #544]	; (800319c <_dtoa_r+0x624>)
 8002f7a:	f7fd fb3d 	bl	80005f8 <__aeabi_dmul>
 8002f7e:	9e02      	ldr	r6, [sp, #8]
 8002f80:	4682      	mov	sl, r0
 8002f82:	468b      	mov	fp, r1
 8002f84:	3501      	adds	r5, #1
 8002f86:	4628      	mov	r0, r5
 8002f88:	f7fd facc 	bl	8000524 <__aeabi_i2d>
 8002f8c:	4652      	mov	r2, sl
 8002f8e:	465b      	mov	r3, fp
 8002f90:	f7fd fb32 	bl	80005f8 <__aeabi_dmul>
 8002f94:	4b82      	ldr	r3, [pc, #520]	; (80031a0 <_dtoa_r+0x628>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	f7fd f978 	bl	800028c <__adddf3>
 8002f9c:	46d0      	mov	r8, sl
 8002f9e:	46d9      	mov	r9, fp
 8002fa0:	4682      	mov	sl, r0
 8002fa2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8002fa6:	2e00      	cmp	r6, #0
 8002fa8:	d158      	bne.n	800305c <_dtoa_r+0x4e4>
 8002faa:	4b7e      	ldr	r3, [pc, #504]	; (80031a4 <_dtoa_r+0x62c>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	4640      	mov	r0, r8
 8002fb0:	4649      	mov	r1, r9
 8002fb2:	f7fd f969 	bl	8000288 <__aeabi_dsub>
 8002fb6:	4652      	mov	r2, sl
 8002fb8:	465b      	mov	r3, fp
 8002fba:	4680      	mov	r8, r0
 8002fbc:	4689      	mov	r9, r1
 8002fbe:	f7fd fdab 	bl	8000b18 <__aeabi_dcmpgt>
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	f040 8295 	bne.w	80034f2 <_dtoa_r+0x97a>
 8002fc8:	4652      	mov	r2, sl
 8002fca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8002fce:	4640      	mov	r0, r8
 8002fd0:	4649      	mov	r1, r9
 8002fd2:	f7fd fd83 	bl	8000adc <__aeabi_dcmplt>
 8002fd6:	2800      	cmp	r0, #0
 8002fd8:	f040 8289 	bne.w	80034ee <_dtoa_r+0x976>
 8002fdc:	ec5b ab19 	vmov	sl, fp, d9
 8002fe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f2c0 8148 	blt.w	8003278 <_dtoa_r+0x700>
 8002fe8:	9a00      	ldr	r2, [sp, #0]
 8002fea:	2a0e      	cmp	r2, #14
 8002fec:	f300 8144 	bgt.w	8003278 <_dtoa_r+0x700>
 8002ff0:	4b67      	ldr	r3, [pc, #412]	; (8003190 <_dtoa_r+0x618>)
 8002ff2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ff6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f280 80d5 	bge.w	80031ac <_dtoa_r+0x634>
 8003002:	9b03      	ldr	r3, [sp, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	f300 80d1 	bgt.w	80031ac <_dtoa_r+0x634>
 800300a:	f040 826f 	bne.w	80034ec <_dtoa_r+0x974>
 800300e:	4b65      	ldr	r3, [pc, #404]	; (80031a4 <_dtoa_r+0x62c>)
 8003010:	2200      	movs	r2, #0
 8003012:	4640      	mov	r0, r8
 8003014:	4649      	mov	r1, r9
 8003016:	f7fd faef 	bl	80005f8 <__aeabi_dmul>
 800301a:	4652      	mov	r2, sl
 800301c:	465b      	mov	r3, fp
 800301e:	f7fd fd71 	bl	8000b04 <__aeabi_dcmpge>
 8003022:	9e03      	ldr	r6, [sp, #12]
 8003024:	4637      	mov	r7, r6
 8003026:	2800      	cmp	r0, #0
 8003028:	f040 8245 	bne.w	80034b6 <_dtoa_r+0x93e>
 800302c:	9d01      	ldr	r5, [sp, #4]
 800302e:	2331      	movs	r3, #49	; 0x31
 8003030:	f805 3b01 	strb.w	r3, [r5], #1
 8003034:	9b00      	ldr	r3, [sp, #0]
 8003036:	3301      	adds	r3, #1
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	e240      	b.n	80034be <_dtoa_r+0x946>
 800303c:	07f2      	lsls	r2, r6, #31
 800303e:	d505      	bpl.n	800304c <_dtoa_r+0x4d4>
 8003040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003044:	f7fd fad8 	bl	80005f8 <__aeabi_dmul>
 8003048:	3501      	adds	r5, #1
 800304a:	2301      	movs	r3, #1
 800304c:	1076      	asrs	r6, r6, #1
 800304e:	3708      	adds	r7, #8
 8003050:	e777      	b.n	8002f42 <_dtoa_r+0x3ca>
 8003052:	2502      	movs	r5, #2
 8003054:	e779      	b.n	8002f4a <_dtoa_r+0x3d2>
 8003056:	9f00      	ldr	r7, [sp, #0]
 8003058:	9e03      	ldr	r6, [sp, #12]
 800305a:	e794      	b.n	8002f86 <_dtoa_r+0x40e>
 800305c:	9901      	ldr	r1, [sp, #4]
 800305e:	4b4c      	ldr	r3, [pc, #304]	; (8003190 <_dtoa_r+0x618>)
 8003060:	4431      	add	r1, r6
 8003062:	910d      	str	r1, [sp, #52]	; 0x34
 8003064:	9908      	ldr	r1, [sp, #32]
 8003066:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800306a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800306e:	2900      	cmp	r1, #0
 8003070:	d043      	beq.n	80030fa <_dtoa_r+0x582>
 8003072:	494d      	ldr	r1, [pc, #308]	; (80031a8 <_dtoa_r+0x630>)
 8003074:	2000      	movs	r0, #0
 8003076:	f7fd fbe9 	bl	800084c <__aeabi_ddiv>
 800307a:	4652      	mov	r2, sl
 800307c:	465b      	mov	r3, fp
 800307e:	f7fd f903 	bl	8000288 <__aeabi_dsub>
 8003082:	9d01      	ldr	r5, [sp, #4]
 8003084:	4682      	mov	sl, r0
 8003086:	468b      	mov	fp, r1
 8003088:	4649      	mov	r1, r9
 800308a:	4640      	mov	r0, r8
 800308c:	f7fd fd64 	bl	8000b58 <__aeabi_d2iz>
 8003090:	4606      	mov	r6, r0
 8003092:	f7fd fa47 	bl	8000524 <__aeabi_i2d>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4640      	mov	r0, r8
 800309c:	4649      	mov	r1, r9
 800309e:	f7fd f8f3 	bl	8000288 <__aeabi_dsub>
 80030a2:	3630      	adds	r6, #48	; 0x30
 80030a4:	f805 6b01 	strb.w	r6, [r5], #1
 80030a8:	4652      	mov	r2, sl
 80030aa:	465b      	mov	r3, fp
 80030ac:	4680      	mov	r8, r0
 80030ae:	4689      	mov	r9, r1
 80030b0:	f7fd fd14 	bl	8000adc <__aeabi_dcmplt>
 80030b4:	2800      	cmp	r0, #0
 80030b6:	d163      	bne.n	8003180 <_dtoa_r+0x608>
 80030b8:	4642      	mov	r2, r8
 80030ba:	464b      	mov	r3, r9
 80030bc:	4936      	ldr	r1, [pc, #216]	; (8003198 <_dtoa_r+0x620>)
 80030be:	2000      	movs	r0, #0
 80030c0:	f7fd f8e2 	bl	8000288 <__aeabi_dsub>
 80030c4:	4652      	mov	r2, sl
 80030c6:	465b      	mov	r3, fp
 80030c8:	f7fd fd08 	bl	8000adc <__aeabi_dcmplt>
 80030cc:	2800      	cmp	r0, #0
 80030ce:	f040 80b5 	bne.w	800323c <_dtoa_r+0x6c4>
 80030d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030d4:	429d      	cmp	r5, r3
 80030d6:	d081      	beq.n	8002fdc <_dtoa_r+0x464>
 80030d8:	4b30      	ldr	r3, [pc, #192]	; (800319c <_dtoa_r+0x624>)
 80030da:	2200      	movs	r2, #0
 80030dc:	4650      	mov	r0, sl
 80030de:	4659      	mov	r1, fp
 80030e0:	f7fd fa8a 	bl	80005f8 <__aeabi_dmul>
 80030e4:	4b2d      	ldr	r3, [pc, #180]	; (800319c <_dtoa_r+0x624>)
 80030e6:	4682      	mov	sl, r0
 80030e8:	468b      	mov	fp, r1
 80030ea:	4640      	mov	r0, r8
 80030ec:	4649      	mov	r1, r9
 80030ee:	2200      	movs	r2, #0
 80030f0:	f7fd fa82 	bl	80005f8 <__aeabi_dmul>
 80030f4:	4680      	mov	r8, r0
 80030f6:	4689      	mov	r9, r1
 80030f8:	e7c6      	b.n	8003088 <_dtoa_r+0x510>
 80030fa:	4650      	mov	r0, sl
 80030fc:	4659      	mov	r1, fp
 80030fe:	f7fd fa7b 	bl	80005f8 <__aeabi_dmul>
 8003102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003104:	9d01      	ldr	r5, [sp, #4]
 8003106:	930f      	str	r3, [sp, #60]	; 0x3c
 8003108:	4682      	mov	sl, r0
 800310a:	468b      	mov	fp, r1
 800310c:	4649      	mov	r1, r9
 800310e:	4640      	mov	r0, r8
 8003110:	f7fd fd22 	bl	8000b58 <__aeabi_d2iz>
 8003114:	4606      	mov	r6, r0
 8003116:	f7fd fa05 	bl	8000524 <__aeabi_i2d>
 800311a:	3630      	adds	r6, #48	; 0x30
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4640      	mov	r0, r8
 8003122:	4649      	mov	r1, r9
 8003124:	f7fd f8b0 	bl	8000288 <__aeabi_dsub>
 8003128:	f805 6b01 	strb.w	r6, [r5], #1
 800312c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800312e:	429d      	cmp	r5, r3
 8003130:	4680      	mov	r8, r0
 8003132:	4689      	mov	r9, r1
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	d124      	bne.n	8003184 <_dtoa_r+0x60c>
 800313a:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <_dtoa_r+0x630>)
 800313c:	4650      	mov	r0, sl
 800313e:	4659      	mov	r1, fp
 8003140:	f7fd f8a4 	bl	800028c <__adddf3>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4640      	mov	r0, r8
 800314a:	4649      	mov	r1, r9
 800314c:	f7fd fce4 	bl	8000b18 <__aeabi_dcmpgt>
 8003150:	2800      	cmp	r0, #0
 8003152:	d173      	bne.n	800323c <_dtoa_r+0x6c4>
 8003154:	4652      	mov	r2, sl
 8003156:	465b      	mov	r3, fp
 8003158:	4913      	ldr	r1, [pc, #76]	; (80031a8 <_dtoa_r+0x630>)
 800315a:	2000      	movs	r0, #0
 800315c:	f7fd f894 	bl	8000288 <__aeabi_dsub>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4640      	mov	r0, r8
 8003166:	4649      	mov	r1, r9
 8003168:	f7fd fcb8 	bl	8000adc <__aeabi_dcmplt>
 800316c:	2800      	cmp	r0, #0
 800316e:	f43f af35 	beq.w	8002fdc <_dtoa_r+0x464>
 8003172:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003174:	1e6b      	subs	r3, r5, #1
 8003176:	930f      	str	r3, [sp, #60]	; 0x3c
 8003178:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800317c:	2b30      	cmp	r3, #48	; 0x30
 800317e:	d0f8      	beq.n	8003172 <_dtoa_r+0x5fa>
 8003180:	9700      	str	r7, [sp, #0]
 8003182:	e049      	b.n	8003218 <_dtoa_r+0x6a0>
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <_dtoa_r+0x624>)
 8003186:	f7fd fa37 	bl	80005f8 <__aeabi_dmul>
 800318a:	4680      	mov	r8, r0
 800318c:	4689      	mov	r9, r1
 800318e:	e7bd      	b.n	800310c <_dtoa_r+0x594>
 8003190:	08004d40 	.word	0x08004d40
 8003194:	08004d18 	.word	0x08004d18
 8003198:	3ff00000 	.word	0x3ff00000
 800319c:	40240000 	.word	0x40240000
 80031a0:	401c0000 	.word	0x401c0000
 80031a4:	40140000 	.word	0x40140000
 80031a8:	3fe00000 	.word	0x3fe00000
 80031ac:	9d01      	ldr	r5, [sp, #4]
 80031ae:	4656      	mov	r6, sl
 80031b0:	465f      	mov	r7, fp
 80031b2:	4642      	mov	r2, r8
 80031b4:	464b      	mov	r3, r9
 80031b6:	4630      	mov	r0, r6
 80031b8:	4639      	mov	r1, r7
 80031ba:	f7fd fb47 	bl	800084c <__aeabi_ddiv>
 80031be:	f7fd fccb 	bl	8000b58 <__aeabi_d2iz>
 80031c2:	4682      	mov	sl, r0
 80031c4:	f7fd f9ae 	bl	8000524 <__aeabi_i2d>
 80031c8:	4642      	mov	r2, r8
 80031ca:	464b      	mov	r3, r9
 80031cc:	f7fd fa14 	bl	80005f8 <__aeabi_dmul>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4630      	mov	r0, r6
 80031d6:	4639      	mov	r1, r7
 80031d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80031dc:	f7fd f854 	bl	8000288 <__aeabi_dsub>
 80031e0:	f805 6b01 	strb.w	r6, [r5], #1
 80031e4:	9e01      	ldr	r6, [sp, #4]
 80031e6:	9f03      	ldr	r7, [sp, #12]
 80031e8:	1bae      	subs	r6, r5, r6
 80031ea:	42b7      	cmp	r7, r6
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	d135      	bne.n	800325e <_dtoa_r+0x6e6>
 80031f2:	f7fd f84b 	bl	800028c <__adddf3>
 80031f6:	4642      	mov	r2, r8
 80031f8:	464b      	mov	r3, r9
 80031fa:	4606      	mov	r6, r0
 80031fc:	460f      	mov	r7, r1
 80031fe:	f7fd fc8b 	bl	8000b18 <__aeabi_dcmpgt>
 8003202:	b9d0      	cbnz	r0, 800323a <_dtoa_r+0x6c2>
 8003204:	4642      	mov	r2, r8
 8003206:	464b      	mov	r3, r9
 8003208:	4630      	mov	r0, r6
 800320a:	4639      	mov	r1, r7
 800320c:	f7fd fc5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8003210:	b110      	cbz	r0, 8003218 <_dtoa_r+0x6a0>
 8003212:	f01a 0f01 	tst.w	sl, #1
 8003216:	d110      	bne.n	800323a <_dtoa_r+0x6c2>
 8003218:	4620      	mov	r0, r4
 800321a:	ee18 1a10 	vmov	r1, s16
 800321e:	f000 fd05 	bl	8003c2c <_Bfree>
 8003222:	2300      	movs	r3, #0
 8003224:	9800      	ldr	r0, [sp, #0]
 8003226:	702b      	strb	r3, [r5, #0]
 8003228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800322a:	3001      	adds	r0, #1
 800322c:	6018      	str	r0, [r3, #0]
 800322e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003230:	2b00      	cmp	r3, #0
 8003232:	f43f acf1 	beq.w	8002c18 <_dtoa_r+0xa0>
 8003236:	601d      	str	r5, [r3, #0]
 8003238:	e4ee      	b.n	8002c18 <_dtoa_r+0xa0>
 800323a:	9f00      	ldr	r7, [sp, #0]
 800323c:	462b      	mov	r3, r5
 800323e:	461d      	mov	r5, r3
 8003240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003244:	2a39      	cmp	r2, #57	; 0x39
 8003246:	d106      	bne.n	8003256 <_dtoa_r+0x6de>
 8003248:	9a01      	ldr	r2, [sp, #4]
 800324a:	429a      	cmp	r2, r3
 800324c:	d1f7      	bne.n	800323e <_dtoa_r+0x6c6>
 800324e:	9901      	ldr	r1, [sp, #4]
 8003250:	2230      	movs	r2, #48	; 0x30
 8003252:	3701      	adds	r7, #1
 8003254:	700a      	strb	r2, [r1, #0]
 8003256:	781a      	ldrb	r2, [r3, #0]
 8003258:	3201      	adds	r2, #1
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	e790      	b.n	8003180 <_dtoa_r+0x608>
 800325e:	4ba6      	ldr	r3, [pc, #664]	; (80034f8 <_dtoa_r+0x980>)
 8003260:	2200      	movs	r2, #0
 8003262:	f7fd f9c9 	bl	80005f8 <__aeabi_dmul>
 8003266:	2200      	movs	r2, #0
 8003268:	2300      	movs	r3, #0
 800326a:	4606      	mov	r6, r0
 800326c:	460f      	mov	r7, r1
 800326e:	f7fd fc2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003272:	2800      	cmp	r0, #0
 8003274:	d09d      	beq.n	80031b2 <_dtoa_r+0x63a>
 8003276:	e7cf      	b.n	8003218 <_dtoa_r+0x6a0>
 8003278:	9a08      	ldr	r2, [sp, #32]
 800327a:	2a00      	cmp	r2, #0
 800327c:	f000 80d7 	beq.w	800342e <_dtoa_r+0x8b6>
 8003280:	9a06      	ldr	r2, [sp, #24]
 8003282:	2a01      	cmp	r2, #1
 8003284:	f300 80ba 	bgt.w	80033fc <_dtoa_r+0x884>
 8003288:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800328a:	2a00      	cmp	r2, #0
 800328c:	f000 80b2 	beq.w	80033f4 <_dtoa_r+0x87c>
 8003290:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003294:	9e07      	ldr	r6, [sp, #28]
 8003296:	9d04      	ldr	r5, [sp, #16]
 8003298:	9a04      	ldr	r2, [sp, #16]
 800329a:	441a      	add	r2, r3
 800329c:	9204      	str	r2, [sp, #16]
 800329e:	9a05      	ldr	r2, [sp, #20]
 80032a0:	2101      	movs	r1, #1
 80032a2:	441a      	add	r2, r3
 80032a4:	4620      	mov	r0, r4
 80032a6:	9205      	str	r2, [sp, #20]
 80032a8:	f000 fd78 	bl	8003d9c <__i2b>
 80032ac:	4607      	mov	r7, r0
 80032ae:	2d00      	cmp	r5, #0
 80032b0:	dd0c      	ble.n	80032cc <_dtoa_r+0x754>
 80032b2:	9b05      	ldr	r3, [sp, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	dd09      	ble.n	80032cc <_dtoa_r+0x754>
 80032b8:	42ab      	cmp	r3, r5
 80032ba:	9a04      	ldr	r2, [sp, #16]
 80032bc:	bfa8      	it	ge
 80032be:	462b      	movge	r3, r5
 80032c0:	1ad2      	subs	r2, r2, r3
 80032c2:	9204      	str	r2, [sp, #16]
 80032c4:	9a05      	ldr	r2, [sp, #20]
 80032c6:	1aed      	subs	r5, r5, r3
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	9305      	str	r3, [sp, #20]
 80032cc:	9b07      	ldr	r3, [sp, #28]
 80032ce:	b31b      	cbz	r3, 8003318 <_dtoa_r+0x7a0>
 80032d0:	9b08      	ldr	r3, [sp, #32]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80af 	beq.w	8003436 <_dtoa_r+0x8be>
 80032d8:	2e00      	cmp	r6, #0
 80032da:	dd13      	ble.n	8003304 <_dtoa_r+0x78c>
 80032dc:	4639      	mov	r1, r7
 80032de:	4632      	mov	r2, r6
 80032e0:	4620      	mov	r0, r4
 80032e2:	f000 fe1b 	bl	8003f1c <__pow5mult>
 80032e6:	ee18 2a10 	vmov	r2, s16
 80032ea:	4601      	mov	r1, r0
 80032ec:	4607      	mov	r7, r0
 80032ee:	4620      	mov	r0, r4
 80032f0:	f000 fd6a 	bl	8003dc8 <__multiply>
 80032f4:	ee18 1a10 	vmov	r1, s16
 80032f8:	4680      	mov	r8, r0
 80032fa:	4620      	mov	r0, r4
 80032fc:	f000 fc96 	bl	8003c2c <_Bfree>
 8003300:	ee08 8a10 	vmov	s16, r8
 8003304:	9b07      	ldr	r3, [sp, #28]
 8003306:	1b9a      	subs	r2, r3, r6
 8003308:	d006      	beq.n	8003318 <_dtoa_r+0x7a0>
 800330a:	ee18 1a10 	vmov	r1, s16
 800330e:	4620      	mov	r0, r4
 8003310:	f000 fe04 	bl	8003f1c <__pow5mult>
 8003314:	ee08 0a10 	vmov	s16, r0
 8003318:	2101      	movs	r1, #1
 800331a:	4620      	mov	r0, r4
 800331c:	f000 fd3e 	bl	8003d9c <__i2b>
 8003320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003322:	2b00      	cmp	r3, #0
 8003324:	4606      	mov	r6, r0
 8003326:	f340 8088 	ble.w	800343a <_dtoa_r+0x8c2>
 800332a:	461a      	mov	r2, r3
 800332c:	4601      	mov	r1, r0
 800332e:	4620      	mov	r0, r4
 8003330:	f000 fdf4 	bl	8003f1c <__pow5mult>
 8003334:	9b06      	ldr	r3, [sp, #24]
 8003336:	2b01      	cmp	r3, #1
 8003338:	4606      	mov	r6, r0
 800333a:	f340 8081 	ble.w	8003440 <_dtoa_r+0x8c8>
 800333e:	f04f 0800 	mov.w	r8, #0
 8003342:	6933      	ldr	r3, [r6, #16]
 8003344:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003348:	6918      	ldr	r0, [r3, #16]
 800334a:	f000 fcd7 	bl	8003cfc <__hi0bits>
 800334e:	f1c0 0020 	rsb	r0, r0, #32
 8003352:	9b05      	ldr	r3, [sp, #20]
 8003354:	4418      	add	r0, r3
 8003356:	f010 001f 	ands.w	r0, r0, #31
 800335a:	f000 8092 	beq.w	8003482 <_dtoa_r+0x90a>
 800335e:	f1c0 0320 	rsb	r3, r0, #32
 8003362:	2b04      	cmp	r3, #4
 8003364:	f340 808a 	ble.w	800347c <_dtoa_r+0x904>
 8003368:	f1c0 001c 	rsb	r0, r0, #28
 800336c:	9b04      	ldr	r3, [sp, #16]
 800336e:	4403      	add	r3, r0
 8003370:	9304      	str	r3, [sp, #16]
 8003372:	9b05      	ldr	r3, [sp, #20]
 8003374:	4403      	add	r3, r0
 8003376:	4405      	add	r5, r0
 8003378:	9305      	str	r3, [sp, #20]
 800337a:	9b04      	ldr	r3, [sp, #16]
 800337c:	2b00      	cmp	r3, #0
 800337e:	dd07      	ble.n	8003390 <_dtoa_r+0x818>
 8003380:	ee18 1a10 	vmov	r1, s16
 8003384:	461a      	mov	r2, r3
 8003386:	4620      	mov	r0, r4
 8003388:	f000 fe22 	bl	8003fd0 <__lshift>
 800338c:	ee08 0a10 	vmov	s16, r0
 8003390:	9b05      	ldr	r3, [sp, #20]
 8003392:	2b00      	cmp	r3, #0
 8003394:	dd05      	ble.n	80033a2 <_dtoa_r+0x82a>
 8003396:	4631      	mov	r1, r6
 8003398:	461a      	mov	r2, r3
 800339a:	4620      	mov	r0, r4
 800339c:	f000 fe18 	bl	8003fd0 <__lshift>
 80033a0:	4606      	mov	r6, r0
 80033a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d06e      	beq.n	8003486 <_dtoa_r+0x90e>
 80033a8:	ee18 0a10 	vmov	r0, s16
 80033ac:	4631      	mov	r1, r6
 80033ae:	f000 fe7f 	bl	80040b0 <__mcmp>
 80033b2:	2800      	cmp	r0, #0
 80033b4:	da67      	bge.n	8003486 <_dtoa_r+0x90e>
 80033b6:	9b00      	ldr	r3, [sp, #0]
 80033b8:	3b01      	subs	r3, #1
 80033ba:	ee18 1a10 	vmov	r1, s16
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	220a      	movs	r2, #10
 80033c2:	2300      	movs	r3, #0
 80033c4:	4620      	mov	r0, r4
 80033c6:	f000 fc53 	bl	8003c70 <__multadd>
 80033ca:	9b08      	ldr	r3, [sp, #32]
 80033cc:	ee08 0a10 	vmov	s16, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 81b1 	beq.w	8003738 <_dtoa_r+0xbc0>
 80033d6:	2300      	movs	r3, #0
 80033d8:	4639      	mov	r1, r7
 80033da:	220a      	movs	r2, #10
 80033dc:	4620      	mov	r0, r4
 80033de:	f000 fc47 	bl	8003c70 <__multadd>
 80033e2:	9b02      	ldr	r3, [sp, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	4607      	mov	r7, r0
 80033e8:	f300 808e 	bgt.w	8003508 <_dtoa_r+0x990>
 80033ec:	9b06      	ldr	r3, [sp, #24]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	dc51      	bgt.n	8003496 <_dtoa_r+0x91e>
 80033f2:	e089      	b.n	8003508 <_dtoa_r+0x990>
 80033f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80033f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80033fa:	e74b      	b.n	8003294 <_dtoa_r+0x71c>
 80033fc:	9b03      	ldr	r3, [sp, #12]
 80033fe:	1e5e      	subs	r6, r3, #1
 8003400:	9b07      	ldr	r3, [sp, #28]
 8003402:	42b3      	cmp	r3, r6
 8003404:	bfbf      	itttt	lt
 8003406:	9b07      	ldrlt	r3, [sp, #28]
 8003408:	9607      	strlt	r6, [sp, #28]
 800340a:	1af2      	sublt	r2, r6, r3
 800340c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800340e:	bfb6      	itet	lt
 8003410:	189b      	addlt	r3, r3, r2
 8003412:	1b9e      	subge	r6, r3, r6
 8003414:	930a      	strlt	r3, [sp, #40]	; 0x28
 8003416:	9b03      	ldr	r3, [sp, #12]
 8003418:	bfb8      	it	lt
 800341a:	2600      	movlt	r6, #0
 800341c:	2b00      	cmp	r3, #0
 800341e:	bfb7      	itett	lt
 8003420:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8003424:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8003428:	1a9d      	sublt	r5, r3, r2
 800342a:	2300      	movlt	r3, #0
 800342c:	e734      	b.n	8003298 <_dtoa_r+0x720>
 800342e:	9e07      	ldr	r6, [sp, #28]
 8003430:	9d04      	ldr	r5, [sp, #16]
 8003432:	9f08      	ldr	r7, [sp, #32]
 8003434:	e73b      	b.n	80032ae <_dtoa_r+0x736>
 8003436:	9a07      	ldr	r2, [sp, #28]
 8003438:	e767      	b.n	800330a <_dtoa_r+0x792>
 800343a:	9b06      	ldr	r3, [sp, #24]
 800343c:	2b01      	cmp	r3, #1
 800343e:	dc18      	bgt.n	8003472 <_dtoa_r+0x8fa>
 8003440:	f1ba 0f00 	cmp.w	sl, #0
 8003444:	d115      	bne.n	8003472 <_dtoa_r+0x8fa>
 8003446:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800344a:	b993      	cbnz	r3, 8003472 <_dtoa_r+0x8fa>
 800344c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003450:	0d1b      	lsrs	r3, r3, #20
 8003452:	051b      	lsls	r3, r3, #20
 8003454:	b183      	cbz	r3, 8003478 <_dtoa_r+0x900>
 8003456:	9b04      	ldr	r3, [sp, #16]
 8003458:	3301      	adds	r3, #1
 800345a:	9304      	str	r3, [sp, #16]
 800345c:	9b05      	ldr	r3, [sp, #20]
 800345e:	3301      	adds	r3, #1
 8003460:	9305      	str	r3, [sp, #20]
 8003462:	f04f 0801 	mov.w	r8, #1
 8003466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003468:	2b00      	cmp	r3, #0
 800346a:	f47f af6a 	bne.w	8003342 <_dtoa_r+0x7ca>
 800346e:	2001      	movs	r0, #1
 8003470:	e76f      	b.n	8003352 <_dtoa_r+0x7da>
 8003472:	f04f 0800 	mov.w	r8, #0
 8003476:	e7f6      	b.n	8003466 <_dtoa_r+0x8ee>
 8003478:	4698      	mov	r8, r3
 800347a:	e7f4      	b.n	8003466 <_dtoa_r+0x8ee>
 800347c:	f43f af7d 	beq.w	800337a <_dtoa_r+0x802>
 8003480:	4618      	mov	r0, r3
 8003482:	301c      	adds	r0, #28
 8003484:	e772      	b.n	800336c <_dtoa_r+0x7f4>
 8003486:	9b03      	ldr	r3, [sp, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	dc37      	bgt.n	80034fc <_dtoa_r+0x984>
 800348c:	9b06      	ldr	r3, [sp, #24]
 800348e:	2b02      	cmp	r3, #2
 8003490:	dd34      	ble.n	80034fc <_dtoa_r+0x984>
 8003492:	9b03      	ldr	r3, [sp, #12]
 8003494:	9302      	str	r3, [sp, #8]
 8003496:	9b02      	ldr	r3, [sp, #8]
 8003498:	b96b      	cbnz	r3, 80034b6 <_dtoa_r+0x93e>
 800349a:	4631      	mov	r1, r6
 800349c:	2205      	movs	r2, #5
 800349e:	4620      	mov	r0, r4
 80034a0:	f000 fbe6 	bl	8003c70 <__multadd>
 80034a4:	4601      	mov	r1, r0
 80034a6:	4606      	mov	r6, r0
 80034a8:	ee18 0a10 	vmov	r0, s16
 80034ac:	f000 fe00 	bl	80040b0 <__mcmp>
 80034b0:	2800      	cmp	r0, #0
 80034b2:	f73f adbb 	bgt.w	800302c <_dtoa_r+0x4b4>
 80034b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034b8:	9d01      	ldr	r5, [sp, #4]
 80034ba:	43db      	mvns	r3, r3
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	f04f 0800 	mov.w	r8, #0
 80034c2:	4631      	mov	r1, r6
 80034c4:	4620      	mov	r0, r4
 80034c6:	f000 fbb1 	bl	8003c2c <_Bfree>
 80034ca:	2f00      	cmp	r7, #0
 80034cc:	f43f aea4 	beq.w	8003218 <_dtoa_r+0x6a0>
 80034d0:	f1b8 0f00 	cmp.w	r8, #0
 80034d4:	d005      	beq.n	80034e2 <_dtoa_r+0x96a>
 80034d6:	45b8      	cmp	r8, r7
 80034d8:	d003      	beq.n	80034e2 <_dtoa_r+0x96a>
 80034da:	4641      	mov	r1, r8
 80034dc:	4620      	mov	r0, r4
 80034de:	f000 fba5 	bl	8003c2c <_Bfree>
 80034e2:	4639      	mov	r1, r7
 80034e4:	4620      	mov	r0, r4
 80034e6:	f000 fba1 	bl	8003c2c <_Bfree>
 80034ea:	e695      	b.n	8003218 <_dtoa_r+0x6a0>
 80034ec:	2600      	movs	r6, #0
 80034ee:	4637      	mov	r7, r6
 80034f0:	e7e1      	b.n	80034b6 <_dtoa_r+0x93e>
 80034f2:	9700      	str	r7, [sp, #0]
 80034f4:	4637      	mov	r7, r6
 80034f6:	e599      	b.n	800302c <_dtoa_r+0x4b4>
 80034f8:	40240000 	.word	0x40240000
 80034fc:	9b08      	ldr	r3, [sp, #32]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 80ca 	beq.w	8003698 <_dtoa_r+0xb20>
 8003504:	9b03      	ldr	r3, [sp, #12]
 8003506:	9302      	str	r3, [sp, #8]
 8003508:	2d00      	cmp	r5, #0
 800350a:	dd05      	ble.n	8003518 <_dtoa_r+0x9a0>
 800350c:	4639      	mov	r1, r7
 800350e:	462a      	mov	r2, r5
 8003510:	4620      	mov	r0, r4
 8003512:	f000 fd5d 	bl	8003fd0 <__lshift>
 8003516:	4607      	mov	r7, r0
 8003518:	f1b8 0f00 	cmp.w	r8, #0
 800351c:	d05b      	beq.n	80035d6 <_dtoa_r+0xa5e>
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4620      	mov	r0, r4
 8003522:	f000 fb43 	bl	8003bac <_Balloc>
 8003526:	4605      	mov	r5, r0
 8003528:	b928      	cbnz	r0, 8003536 <_dtoa_r+0x9be>
 800352a:	4b87      	ldr	r3, [pc, #540]	; (8003748 <_dtoa_r+0xbd0>)
 800352c:	4602      	mov	r2, r0
 800352e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003532:	f7ff bb3b 	b.w	8002bac <_dtoa_r+0x34>
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	3202      	adds	r2, #2
 800353a:	0092      	lsls	r2, r2, #2
 800353c:	f107 010c 	add.w	r1, r7, #12
 8003540:	300c      	adds	r0, #12
 8003542:	f7fe fd25 	bl	8001f90 <memcpy>
 8003546:	2201      	movs	r2, #1
 8003548:	4629      	mov	r1, r5
 800354a:	4620      	mov	r0, r4
 800354c:	f000 fd40 	bl	8003fd0 <__lshift>
 8003550:	9b01      	ldr	r3, [sp, #4]
 8003552:	f103 0901 	add.w	r9, r3, #1
 8003556:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800355a:	4413      	add	r3, r2
 800355c:	9305      	str	r3, [sp, #20]
 800355e:	f00a 0301 	and.w	r3, sl, #1
 8003562:	46b8      	mov	r8, r7
 8003564:	9304      	str	r3, [sp, #16]
 8003566:	4607      	mov	r7, r0
 8003568:	4631      	mov	r1, r6
 800356a:	ee18 0a10 	vmov	r0, s16
 800356e:	f7ff fa75 	bl	8002a5c <quorem>
 8003572:	4641      	mov	r1, r8
 8003574:	9002      	str	r0, [sp, #8]
 8003576:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800357a:	ee18 0a10 	vmov	r0, s16
 800357e:	f000 fd97 	bl	80040b0 <__mcmp>
 8003582:	463a      	mov	r2, r7
 8003584:	9003      	str	r0, [sp, #12]
 8003586:	4631      	mov	r1, r6
 8003588:	4620      	mov	r0, r4
 800358a:	f000 fdad 	bl	80040e8 <__mdiff>
 800358e:	68c2      	ldr	r2, [r0, #12]
 8003590:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8003594:	4605      	mov	r5, r0
 8003596:	bb02      	cbnz	r2, 80035da <_dtoa_r+0xa62>
 8003598:	4601      	mov	r1, r0
 800359a:	ee18 0a10 	vmov	r0, s16
 800359e:	f000 fd87 	bl	80040b0 <__mcmp>
 80035a2:	4602      	mov	r2, r0
 80035a4:	4629      	mov	r1, r5
 80035a6:	4620      	mov	r0, r4
 80035a8:	9207      	str	r2, [sp, #28]
 80035aa:	f000 fb3f 	bl	8003c2c <_Bfree>
 80035ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80035b2:	ea43 0102 	orr.w	r1, r3, r2
 80035b6:	9b04      	ldr	r3, [sp, #16]
 80035b8:	430b      	orrs	r3, r1
 80035ba:	464d      	mov	r5, r9
 80035bc:	d10f      	bne.n	80035de <_dtoa_r+0xa66>
 80035be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80035c2:	d02a      	beq.n	800361a <_dtoa_r+0xaa2>
 80035c4:	9b03      	ldr	r3, [sp, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	dd02      	ble.n	80035d0 <_dtoa_r+0xa58>
 80035ca:	9b02      	ldr	r3, [sp, #8]
 80035cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80035d0:	f88b a000 	strb.w	sl, [fp]
 80035d4:	e775      	b.n	80034c2 <_dtoa_r+0x94a>
 80035d6:	4638      	mov	r0, r7
 80035d8:	e7ba      	b.n	8003550 <_dtoa_r+0x9d8>
 80035da:	2201      	movs	r2, #1
 80035dc:	e7e2      	b.n	80035a4 <_dtoa_r+0xa2c>
 80035de:	9b03      	ldr	r3, [sp, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	db04      	blt.n	80035ee <_dtoa_r+0xa76>
 80035e4:	9906      	ldr	r1, [sp, #24]
 80035e6:	430b      	orrs	r3, r1
 80035e8:	9904      	ldr	r1, [sp, #16]
 80035ea:	430b      	orrs	r3, r1
 80035ec:	d122      	bne.n	8003634 <_dtoa_r+0xabc>
 80035ee:	2a00      	cmp	r2, #0
 80035f0:	ddee      	ble.n	80035d0 <_dtoa_r+0xa58>
 80035f2:	ee18 1a10 	vmov	r1, s16
 80035f6:	2201      	movs	r2, #1
 80035f8:	4620      	mov	r0, r4
 80035fa:	f000 fce9 	bl	8003fd0 <__lshift>
 80035fe:	4631      	mov	r1, r6
 8003600:	ee08 0a10 	vmov	s16, r0
 8003604:	f000 fd54 	bl	80040b0 <__mcmp>
 8003608:	2800      	cmp	r0, #0
 800360a:	dc03      	bgt.n	8003614 <_dtoa_r+0xa9c>
 800360c:	d1e0      	bne.n	80035d0 <_dtoa_r+0xa58>
 800360e:	f01a 0f01 	tst.w	sl, #1
 8003612:	d0dd      	beq.n	80035d0 <_dtoa_r+0xa58>
 8003614:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003618:	d1d7      	bne.n	80035ca <_dtoa_r+0xa52>
 800361a:	2339      	movs	r3, #57	; 0x39
 800361c:	f88b 3000 	strb.w	r3, [fp]
 8003620:	462b      	mov	r3, r5
 8003622:	461d      	mov	r5, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800362a:	2a39      	cmp	r2, #57	; 0x39
 800362c:	d071      	beq.n	8003712 <_dtoa_r+0xb9a>
 800362e:	3201      	adds	r2, #1
 8003630:	701a      	strb	r2, [r3, #0]
 8003632:	e746      	b.n	80034c2 <_dtoa_r+0x94a>
 8003634:	2a00      	cmp	r2, #0
 8003636:	dd07      	ble.n	8003648 <_dtoa_r+0xad0>
 8003638:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800363c:	d0ed      	beq.n	800361a <_dtoa_r+0xaa2>
 800363e:	f10a 0301 	add.w	r3, sl, #1
 8003642:	f88b 3000 	strb.w	r3, [fp]
 8003646:	e73c      	b.n	80034c2 <_dtoa_r+0x94a>
 8003648:	9b05      	ldr	r3, [sp, #20]
 800364a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800364e:	4599      	cmp	r9, r3
 8003650:	d047      	beq.n	80036e2 <_dtoa_r+0xb6a>
 8003652:	ee18 1a10 	vmov	r1, s16
 8003656:	2300      	movs	r3, #0
 8003658:	220a      	movs	r2, #10
 800365a:	4620      	mov	r0, r4
 800365c:	f000 fb08 	bl	8003c70 <__multadd>
 8003660:	45b8      	cmp	r8, r7
 8003662:	ee08 0a10 	vmov	s16, r0
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	f04f 020a 	mov.w	r2, #10
 800366e:	4641      	mov	r1, r8
 8003670:	4620      	mov	r0, r4
 8003672:	d106      	bne.n	8003682 <_dtoa_r+0xb0a>
 8003674:	f000 fafc 	bl	8003c70 <__multadd>
 8003678:	4680      	mov	r8, r0
 800367a:	4607      	mov	r7, r0
 800367c:	f109 0901 	add.w	r9, r9, #1
 8003680:	e772      	b.n	8003568 <_dtoa_r+0x9f0>
 8003682:	f000 faf5 	bl	8003c70 <__multadd>
 8003686:	4639      	mov	r1, r7
 8003688:	4680      	mov	r8, r0
 800368a:	2300      	movs	r3, #0
 800368c:	220a      	movs	r2, #10
 800368e:	4620      	mov	r0, r4
 8003690:	f000 faee 	bl	8003c70 <__multadd>
 8003694:	4607      	mov	r7, r0
 8003696:	e7f1      	b.n	800367c <_dtoa_r+0xb04>
 8003698:	9b03      	ldr	r3, [sp, #12]
 800369a:	9302      	str	r3, [sp, #8]
 800369c:	9d01      	ldr	r5, [sp, #4]
 800369e:	ee18 0a10 	vmov	r0, s16
 80036a2:	4631      	mov	r1, r6
 80036a4:	f7ff f9da 	bl	8002a5c <quorem>
 80036a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80036ac:	9b01      	ldr	r3, [sp, #4]
 80036ae:	f805 ab01 	strb.w	sl, [r5], #1
 80036b2:	1aea      	subs	r2, r5, r3
 80036b4:	9b02      	ldr	r3, [sp, #8]
 80036b6:	4293      	cmp	r3, r2
 80036b8:	dd09      	ble.n	80036ce <_dtoa_r+0xb56>
 80036ba:	ee18 1a10 	vmov	r1, s16
 80036be:	2300      	movs	r3, #0
 80036c0:	220a      	movs	r2, #10
 80036c2:	4620      	mov	r0, r4
 80036c4:	f000 fad4 	bl	8003c70 <__multadd>
 80036c8:	ee08 0a10 	vmov	s16, r0
 80036cc:	e7e7      	b.n	800369e <_dtoa_r+0xb26>
 80036ce:	9b02      	ldr	r3, [sp, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bfc8      	it	gt
 80036d4:	461d      	movgt	r5, r3
 80036d6:	9b01      	ldr	r3, [sp, #4]
 80036d8:	bfd8      	it	le
 80036da:	2501      	movle	r5, #1
 80036dc:	441d      	add	r5, r3
 80036de:	f04f 0800 	mov.w	r8, #0
 80036e2:	ee18 1a10 	vmov	r1, s16
 80036e6:	2201      	movs	r2, #1
 80036e8:	4620      	mov	r0, r4
 80036ea:	f000 fc71 	bl	8003fd0 <__lshift>
 80036ee:	4631      	mov	r1, r6
 80036f0:	ee08 0a10 	vmov	s16, r0
 80036f4:	f000 fcdc 	bl	80040b0 <__mcmp>
 80036f8:	2800      	cmp	r0, #0
 80036fa:	dc91      	bgt.n	8003620 <_dtoa_r+0xaa8>
 80036fc:	d102      	bne.n	8003704 <_dtoa_r+0xb8c>
 80036fe:	f01a 0f01 	tst.w	sl, #1
 8003702:	d18d      	bne.n	8003620 <_dtoa_r+0xaa8>
 8003704:	462b      	mov	r3, r5
 8003706:	461d      	mov	r5, r3
 8003708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800370c:	2a30      	cmp	r2, #48	; 0x30
 800370e:	d0fa      	beq.n	8003706 <_dtoa_r+0xb8e>
 8003710:	e6d7      	b.n	80034c2 <_dtoa_r+0x94a>
 8003712:	9a01      	ldr	r2, [sp, #4]
 8003714:	429a      	cmp	r2, r3
 8003716:	d184      	bne.n	8003622 <_dtoa_r+0xaaa>
 8003718:	9b00      	ldr	r3, [sp, #0]
 800371a:	3301      	adds	r3, #1
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	2331      	movs	r3, #49	; 0x31
 8003720:	7013      	strb	r3, [r2, #0]
 8003722:	e6ce      	b.n	80034c2 <_dtoa_r+0x94a>
 8003724:	4b09      	ldr	r3, [pc, #36]	; (800374c <_dtoa_r+0xbd4>)
 8003726:	f7ff ba95 	b.w	8002c54 <_dtoa_r+0xdc>
 800372a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800372c:	2b00      	cmp	r3, #0
 800372e:	f47f aa6e 	bne.w	8002c0e <_dtoa_r+0x96>
 8003732:	4b07      	ldr	r3, [pc, #28]	; (8003750 <_dtoa_r+0xbd8>)
 8003734:	f7ff ba8e 	b.w	8002c54 <_dtoa_r+0xdc>
 8003738:	9b02      	ldr	r3, [sp, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	dcae      	bgt.n	800369c <_dtoa_r+0xb24>
 800373e:	9b06      	ldr	r3, [sp, #24]
 8003740:	2b02      	cmp	r3, #2
 8003742:	f73f aea8 	bgt.w	8003496 <_dtoa_r+0x91e>
 8003746:	e7a9      	b.n	800369c <_dtoa_r+0xb24>
 8003748:	08004c4b 	.word	0x08004c4b
 800374c:	08004ba8 	.word	0x08004ba8
 8003750:	08004bcc 	.word	0x08004bcc

08003754 <__sflush_r>:
 8003754:	898a      	ldrh	r2, [r1, #12]
 8003756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800375a:	4605      	mov	r5, r0
 800375c:	0710      	lsls	r0, r2, #28
 800375e:	460c      	mov	r4, r1
 8003760:	d458      	bmi.n	8003814 <__sflush_r+0xc0>
 8003762:	684b      	ldr	r3, [r1, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	dc05      	bgt.n	8003774 <__sflush_r+0x20>
 8003768:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800376a:	2b00      	cmp	r3, #0
 800376c:	dc02      	bgt.n	8003774 <__sflush_r+0x20>
 800376e:	2000      	movs	r0, #0
 8003770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003774:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003776:	2e00      	cmp	r6, #0
 8003778:	d0f9      	beq.n	800376e <__sflush_r+0x1a>
 800377a:	2300      	movs	r3, #0
 800377c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003780:	682f      	ldr	r7, [r5, #0]
 8003782:	602b      	str	r3, [r5, #0]
 8003784:	d032      	beq.n	80037ec <__sflush_r+0x98>
 8003786:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003788:	89a3      	ldrh	r3, [r4, #12]
 800378a:	075a      	lsls	r2, r3, #29
 800378c:	d505      	bpl.n	800379a <__sflush_r+0x46>
 800378e:	6863      	ldr	r3, [r4, #4]
 8003790:	1ac0      	subs	r0, r0, r3
 8003792:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003794:	b10b      	cbz	r3, 800379a <__sflush_r+0x46>
 8003796:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003798:	1ac0      	subs	r0, r0, r3
 800379a:	2300      	movs	r3, #0
 800379c:	4602      	mov	r2, r0
 800379e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037a0:	6a21      	ldr	r1, [r4, #32]
 80037a2:	4628      	mov	r0, r5
 80037a4:	47b0      	blx	r6
 80037a6:	1c43      	adds	r3, r0, #1
 80037a8:	89a3      	ldrh	r3, [r4, #12]
 80037aa:	d106      	bne.n	80037ba <__sflush_r+0x66>
 80037ac:	6829      	ldr	r1, [r5, #0]
 80037ae:	291d      	cmp	r1, #29
 80037b0:	d82c      	bhi.n	800380c <__sflush_r+0xb8>
 80037b2:	4a2a      	ldr	r2, [pc, #168]	; (800385c <__sflush_r+0x108>)
 80037b4:	40ca      	lsrs	r2, r1
 80037b6:	07d6      	lsls	r6, r2, #31
 80037b8:	d528      	bpl.n	800380c <__sflush_r+0xb8>
 80037ba:	2200      	movs	r2, #0
 80037bc:	6062      	str	r2, [r4, #4]
 80037be:	04d9      	lsls	r1, r3, #19
 80037c0:	6922      	ldr	r2, [r4, #16]
 80037c2:	6022      	str	r2, [r4, #0]
 80037c4:	d504      	bpl.n	80037d0 <__sflush_r+0x7c>
 80037c6:	1c42      	adds	r2, r0, #1
 80037c8:	d101      	bne.n	80037ce <__sflush_r+0x7a>
 80037ca:	682b      	ldr	r3, [r5, #0]
 80037cc:	b903      	cbnz	r3, 80037d0 <__sflush_r+0x7c>
 80037ce:	6560      	str	r0, [r4, #84]	; 0x54
 80037d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037d2:	602f      	str	r7, [r5, #0]
 80037d4:	2900      	cmp	r1, #0
 80037d6:	d0ca      	beq.n	800376e <__sflush_r+0x1a>
 80037d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037dc:	4299      	cmp	r1, r3
 80037de:	d002      	beq.n	80037e6 <__sflush_r+0x92>
 80037e0:	4628      	mov	r0, r5
 80037e2:	f000 fd7d 	bl	80042e0 <_free_r>
 80037e6:	2000      	movs	r0, #0
 80037e8:	6360      	str	r0, [r4, #52]	; 0x34
 80037ea:	e7c1      	b.n	8003770 <__sflush_r+0x1c>
 80037ec:	6a21      	ldr	r1, [r4, #32]
 80037ee:	2301      	movs	r3, #1
 80037f0:	4628      	mov	r0, r5
 80037f2:	47b0      	blx	r6
 80037f4:	1c41      	adds	r1, r0, #1
 80037f6:	d1c7      	bne.n	8003788 <__sflush_r+0x34>
 80037f8:	682b      	ldr	r3, [r5, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0c4      	beq.n	8003788 <__sflush_r+0x34>
 80037fe:	2b1d      	cmp	r3, #29
 8003800:	d001      	beq.n	8003806 <__sflush_r+0xb2>
 8003802:	2b16      	cmp	r3, #22
 8003804:	d101      	bne.n	800380a <__sflush_r+0xb6>
 8003806:	602f      	str	r7, [r5, #0]
 8003808:	e7b1      	b.n	800376e <__sflush_r+0x1a>
 800380a:	89a3      	ldrh	r3, [r4, #12]
 800380c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003810:	81a3      	strh	r3, [r4, #12]
 8003812:	e7ad      	b.n	8003770 <__sflush_r+0x1c>
 8003814:	690f      	ldr	r7, [r1, #16]
 8003816:	2f00      	cmp	r7, #0
 8003818:	d0a9      	beq.n	800376e <__sflush_r+0x1a>
 800381a:	0793      	lsls	r3, r2, #30
 800381c:	680e      	ldr	r6, [r1, #0]
 800381e:	bf08      	it	eq
 8003820:	694b      	ldreq	r3, [r1, #20]
 8003822:	600f      	str	r7, [r1, #0]
 8003824:	bf18      	it	ne
 8003826:	2300      	movne	r3, #0
 8003828:	eba6 0807 	sub.w	r8, r6, r7
 800382c:	608b      	str	r3, [r1, #8]
 800382e:	f1b8 0f00 	cmp.w	r8, #0
 8003832:	dd9c      	ble.n	800376e <__sflush_r+0x1a>
 8003834:	6a21      	ldr	r1, [r4, #32]
 8003836:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003838:	4643      	mov	r3, r8
 800383a:	463a      	mov	r2, r7
 800383c:	4628      	mov	r0, r5
 800383e:	47b0      	blx	r6
 8003840:	2800      	cmp	r0, #0
 8003842:	dc06      	bgt.n	8003852 <__sflush_r+0xfe>
 8003844:	89a3      	ldrh	r3, [r4, #12]
 8003846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800384a:	81a3      	strh	r3, [r4, #12]
 800384c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003850:	e78e      	b.n	8003770 <__sflush_r+0x1c>
 8003852:	4407      	add	r7, r0
 8003854:	eba8 0800 	sub.w	r8, r8, r0
 8003858:	e7e9      	b.n	800382e <__sflush_r+0xda>
 800385a:	bf00      	nop
 800385c:	20400001 	.word	0x20400001

08003860 <_fflush_r>:
 8003860:	b538      	push	{r3, r4, r5, lr}
 8003862:	690b      	ldr	r3, [r1, #16]
 8003864:	4605      	mov	r5, r0
 8003866:	460c      	mov	r4, r1
 8003868:	b913      	cbnz	r3, 8003870 <_fflush_r+0x10>
 800386a:	2500      	movs	r5, #0
 800386c:	4628      	mov	r0, r5
 800386e:	bd38      	pop	{r3, r4, r5, pc}
 8003870:	b118      	cbz	r0, 800387a <_fflush_r+0x1a>
 8003872:	6983      	ldr	r3, [r0, #24]
 8003874:	b90b      	cbnz	r3, 800387a <_fflush_r+0x1a>
 8003876:	f000 f887 	bl	8003988 <__sinit>
 800387a:	4b14      	ldr	r3, [pc, #80]	; (80038cc <_fflush_r+0x6c>)
 800387c:	429c      	cmp	r4, r3
 800387e:	d11b      	bne.n	80038b8 <_fflush_r+0x58>
 8003880:	686c      	ldr	r4, [r5, #4]
 8003882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0ef      	beq.n	800386a <_fflush_r+0xa>
 800388a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800388c:	07d0      	lsls	r0, r2, #31
 800388e:	d404      	bmi.n	800389a <_fflush_r+0x3a>
 8003890:	0599      	lsls	r1, r3, #22
 8003892:	d402      	bmi.n	800389a <_fflush_r+0x3a>
 8003894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003896:	f000 f91a 	bl	8003ace <__retarget_lock_acquire_recursive>
 800389a:	4628      	mov	r0, r5
 800389c:	4621      	mov	r1, r4
 800389e:	f7ff ff59 	bl	8003754 <__sflush_r>
 80038a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038a4:	07da      	lsls	r2, r3, #31
 80038a6:	4605      	mov	r5, r0
 80038a8:	d4e0      	bmi.n	800386c <_fflush_r+0xc>
 80038aa:	89a3      	ldrh	r3, [r4, #12]
 80038ac:	059b      	lsls	r3, r3, #22
 80038ae:	d4dd      	bmi.n	800386c <_fflush_r+0xc>
 80038b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038b2:	f000 f90d 	bl	8003ad0 <__retarget_lock_release_recursive>
 80038b6:	e7d9      	b.n	800386c <_fflush_r+0xc>
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <_fflush_r+0x70>)
 80038ba:	429c      	cmp	r4, r3
 80038bc:	d101      	bne.n	80038c2 <_fflush_r+0x62>
 80038be:	68ac      	ldr	r4, [r5, #8]
 80038c0:	e7df      	b.n	8003882 <_fflush_r+0x22>
 80038c2:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <_fflush_r+0x74>)
 80038c4:	429c      	cmp	r4, r3
 80038c6:	bf08      	it	eq
 80038c8:	68ec      	ldreq	r4, [r5, #12]
 80038ca:	e7da      	b.n	8003882 <_fflush_r+0x22>
 80038cc:	08004c7c 	.word	0x08004c7c
 80038d0:	08004c9c 	.word	0x08004c9c
 80038d4:	08004c5c 	.word	0x08004c5c

080038d8 <std>:
 80038d8:	2300      	movs	r3, #0
 80038da:	b510      	push	{r4, lr}
 80038dc:	4604      	mov	r4, r0
 80038de:	e9c0 3300 	strd	r3, r3, [r0]
 80038e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038e6:	6083      	str	r3, [r0, #8]
 80038e8:	8181      	strh	r1, [r0, #12]
 80038ea:	6643      	str	r3, [r0, #100]	; 0x64
 80038ec:	81c2      	strh	r2, [r0, #14]
 80038ee:	6183      	str	r3, [r0, #24]
 80038f0:	4619      	mov	r1, r3
 80038f2:	2208      	movs	r2, #8
 80038f4:	305c      	adds	r0, #92	; 0x5c
 80038f6:	f7fe fb59 	bl	8001fac <memset>
 80038fa:	4b05      	ldr	r3, [pc, #20]	; (8003910 <std+0x38>)
 80038fc:	6263      	str	r3, [r4, #36]	; 0x24
 80038fe:	4b05      	ldr	r3, [pc, #20]	; (8003914 <std+0x3c>)
 8003900:	62a3      	str	r3, [r4, #40]	; 0x28
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <std+0x40>)
 8003904:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003906:	4b05      	ldr	r3, [pc, #20]	; (800391c <std+0x44>)
 8003908:	6224      	str	r4, [r4, #32]
 800390a:	6323      	str	r3, [r4, #48]	; 0x30
 800390c:	bd10      	pop	{r4, pc}
 800390e:	bf00      	nop
 8003910:	08004775 	.word	0x08004775
 8003914:	08004797 	.word	0x08004797
 8003918:	080047cf 	.word	0x080047cf
 800391c:	080047f3 	.word	0x080047f3

08003920 <_cleanup_r>:
 8003920:	4901      	ldr	r1, [pc, #4]	; (8003928 <_cleanup_r+0x8>)
 8003922:	f000 b8af 	b.w	8003a84 <_fwalk_reent>
 8003926:	bf00      	nop
 8003928:	08003861 	.word	0x08003861

0800392c <__sfmoreglue>:
 800392c:	b570      	push	{r4, r5, r6, lr}
 800392e:	2268      	movs	r2, #104	; 0x68
 8003930:	1e4d      	subs	r5, r1, #1
 8003932:	4355      	muls	r5, r2
 8003934:	460e      	mov	r6, r1
 8003936:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800393a:	f000 fd3d 	bl	80043b8 <_malloc_r>
 800393e:	4604      	mov	r4, r0
 8003940:	b140      	cbz	r0, 8003954 <__sfmoreglue+0x28>
 8003942:	2100      	movs	r1, #0
 8003944:	e9c0 1600 	strd	r1, r6, [r0]
 8003948:	300c      	adds	r0, #12
 800394a:	60a0      	str	r0, [r4, #8]
 800394c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003950:	f7fe fb2c 	bl	8001fac <memset>
 8003954:	4620      	mov	r0, r4
 8003956:	bd70      	pop	{r4, r5, r6, pc}

08003958 <__sfp_lock_acquire>:
 8003958:	4801      	ldr	r0, [pc, #4]	; (8003960 <__sfp_lock_acquire+0x8>)
 800395a:	f000 b8b8 	b.w	8003ace <__retarget_lock_acquire_recursive>
 800395e:	bf00      	nop
 8003960:	20000321 	.word	0x20000321

08003964 <__sfp_lock_release>:
 8003964:	4801      	ldr	r0, [pc, #4]	; (800396c <__sfp_lock_release+0x8>)
 8003966:	f000 b8b3 	b.w	8003ad0 <__retarget_lock_release_recursive>
 800396a:	bf00      	nop
 800396c:	20000321 	.word	0x20000321

08003970 <__sinit_lock_acquire>:
 8003970:	4801      	ldr	r0, [pc, #4]	; (8003978 <__sinit_lock_acquire+0x8>)
 8003972:	f000 b8ac 	b.w	8003ace <__retarget_lock_acquire_recursive>
 8003976:	bf00      	nop
 8003978:	20000322 	.word	0x20000322

0800397c <__sinit_lock_release>:
 800397c:	4801      	ldr	r0, [pc, #4]	; (8003984 <__sinit_lock_release+0x8>)
 800397e:	f000 b8a7 	b.w	8003ad0 <__retarget_lock_release_recursive>
 8003982:	bf00      	nop
 8003984:	20000322 	.word	0x20000322

08003988 <__sinit>:
 8003988:	b510      	push	{r4, lr}
 800398a:	4604      	mov	r4, r0
 800398c:	f7ff fff0 	bl	8003970 <__sinit_lock_acquire>
 8003990:	69a3      	ldr	r3, [r4, #24]
 8003992:	b11b      	cbz	r3, 800399c <__sinit+0x14>
 8003994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003998:	f7ff bff0 	b.w	800397c <__sinit_lock_release>
 800399c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80039a0:	6523      	str	r3, [r4, #80]	; 0x50
 80039a2:	4b13      	ldr	r3, [pc, #76]	; (80039f0 <__sinit+0x68>)
 80039a4:	4a13      	ldr	r2, [pc, #76]	; (80039f4 <__sinit+0x6c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80039aa:	42a3      	cmp	r3, r4
 80039ac:	bf04      	itt	eq
 80039ae:	2301      	moveq	r3, #1
 80039b0:	61a3      	streq	r3, [r4, #24]
 80039b2:	4620      	mov	r0, r4
 80039b4:	f000 f820 	bl	80039f8 <__sfp>
 80039b8:	6060      	str	r0, [r4, #4]
 80039ba:	4620      	mov	r0, r4
 80039bc:	f000 f81c 	bl	80039f8 <__sfp>
 80039c0:	60a0      	str	r0, [r4, #8]
 80039c2:	4620      	mov	r0, r4
 80039c4:	f000 f818 	bl	80039f8 <__sfp>
 80039c8:	2200      	movs	r2, #0
 80039ca:	60e0      	str	r0, [r4, #12]
 80039cc:	2104      	movs	r1, #4
 80039ce:	6860      	ldr	r0, [r4, #4]
 80039d0:	f7ff ff82 	bl	80038d8 <std>
 80039d4:	68a0      	ldr	r0, [r4, #8]
 80039d6:	2201      	movs	r2, #1
 80039d8:	2109      	movs	r1, #9
 80039da:	f7ff ff7d 	bl	80038d8 <std>
 80039de:	68e0      	ldr	r0, [r4, #12]
 80039e0:	2202      	movs	r2, #2
 80039e2:	2112      	movs	r1, #18
 80039e4:	f7ff ff78 	bl	80038d8 <std>
 80039e8:	2301      	movs	r3, #1
 80039ea:	61a3      	str	r3, [r4, #24]
 80039ec:	e7d2      	b.n	8003994 <__sinit+0xc>
 80039ee:	bf00      	nop
 80039f0:	08004b94 	.word	0x08004b94
 80039f4:	08003921 	.word	0x08003921

080039f8 <__sfp>:
 80039f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fa:	4607      	mov	r7, r0
 80039fc:	f7ff ffac 	bl	8003958 <__sfp_lock_acquire>
 8003a00:	4b1e      	ldr	r3, [pc, #120]	; (8003a7c <__sfp+0x84>)
 8003a02:	681e      	ldr	r6, [r3, #0]
 8003a04:	69b3      	ldr	r3, [r6, #24]
 8003a06:	b913      	cbnz	r3, 8003a0e <__sfp+0x16>
 8003a08:	4630      	mov	r0, r6
 8003a0a:	f7ff ffbd 	bl	8003988 <__sinit>
 8003a0e:	3648      	adds	r6, #72	; 0x48
 8003a10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a14:	3b01      	subs	r3, #1
 8003a16:	d503      	bpl.n	8003a20 <__sfp+0x28>
 8003a18:	6833      	ldr	r3, [r6, #0]
 8003a1a:	b30b      	cbz	r3, 8003a60 <__sfp+0x68>
 8003a1c:	6836      	ldr	r6, [r6, #0]
 8003a1e:	e7f7      	b.n	8003a10 <__sfp+0x18>
 8003a20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a24:	b9d5      	cbnz	r5, 8003a5c <__sfp+0x64>
 8003a26:	4b16      	ldr	r3, [pc, #88]	; (8003a80 <__sfp+0x88>)
 8003a28:	60e3      	str	r3, [r4, #12]
 8003a2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a2e:	6665      	str	r5, [r4, #100]	; 0x64
 8003a30:	f000 f84c 	bl	8003acc <__retarget_lock_init_recursive>
 8003a34:	f7ff ff96 	bl	8003964 <__sfp_lock_release>
 8003a38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a40:	6025      	str	r5, [r4, #0]
 8003a42:	61a5      	str	r5, [r4, #24]
 8003a44:	2208      	movs	r2, #8
 8003a46:	4629      	mov	r1, r5
 8003a48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a4c:	f7fe faae 	bl	8001fac <memset>
 8003a50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a58:	4620      	mov	r0, r4
 8003a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a5c:	3468      	adds	r4, #104	; 0x68
 8003a5e:	e7d9      	b.n	8003a14 <__sfp+0x1c>
 8003a60:	2104      	movs	r1, #4
 8003a62:	4638      	mov	r0, r7
 8003a64:	f7ff ff62 	bl	800392c <__sfmoreglue>
 8003a68:	4604      	mov	r4, r0
 8003a6a:	6030      	str	r0, [r6, #0]
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	d1d5      	bne.n	8003a1c <__sfp+0x24>
 8003a70:	f7ff ff78 	bl	8003964 <__sfp_lock_release>
 8003a74:	230c      	movs	r3, #12
 8003a76:	603b      	str	r3, [r7, #0]
 8003a78:	e7ee      	b.n	8003a58 <__sfp+0x60>
 8003a7a:	bf00      	nop
 8003a7c:	08004b94 	.word	0x08004b94
 8003a80:	ffff0001 	.word	0xffff0001

08003a84 <_fwalk_reent>:
 8003a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a88:	4606      	mov	r6, r0
 8003a8a:	4688      	mov	r8, r1
 8003a8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a90:	2700      	movs	r7, #0
 8003a92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a96:	f1b9 0901 	subs.w	r9, r9, #1
 8003a9a:	d505      	bpl.n	8003aa8 <_fwalk_reent+0x24>
 8003a9c:	6824      	ldr	r4, [r4, #0]
 8003a9e:	2c00      	cmp	r4, #0
 8003aa0:	d1f7      	bne.n	8003a92 <_fwalk_reent+0xe>
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aa8:	89ab      	ldrh	r3, [r5, #12]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d907      	bls.n	8003abe <_fwalk_reent+0x3a>
 8003aae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	d003      	beq.n	8003abe <_fwalk_reent+0x3a>
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	4630      	mov	r0, r6
 8003aba:	47c0      	blx	r8
 8003abc:	4307      	orrs	r7, r0
 8003abe:	3568      	adds	r5, #104	; 0x68
 8003ac0:	e7e9      	b.n	8003a96 <_fwalk_reent+0x12>
	...

08003ac4 <_localeconv_r>:
 8003ac4:	4800      	ldr	r0, [pc, #0]	; (8003ac8 <_localeconv_r+0x4>)
 8003ac6:	4770      	bx	lr
 8003ac8:	20000180 	.word	0x20000180

08003acc <__retarget_lock_init_recursive>:
 8003acc:	4770      	bx	lr

08003ace <__retarget_lock_acquire_recursive>:
 8003ace:	4770      	bx	lr

08003ad0 <__retarget_lock_release_recursive>:
 8003ad0:	4770      	bx	lr

08003ad2 <__swhatbuf_r>:
 8003ad2:	b570      	push	{r4, r5, r6, lr}
 8003ad4:	460e      	mov	r6, r1
 8003ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ada:	2900      	cmp	r1, #0
 8003adc:	b096      	sub	sp, #88	; 0x58
 8003ade:	4614      	mov	r4, r2
 8003ae0:	461d      	mov	r5, r3
 8003ae2:	da08      	bge.n	8003af6 <__swhatbuf_r+0x24>
 8003ae4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	602a      	str	r2, [r5, #0]
 8003aec:	061a      	lsls	r2, r3, #24
 8003aee:	d410      	bmi.n	8003b12 <__swhatbuf_r+0x40>
 8003af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af4:	e00e      	b.n	8003b14 <__swhatbuf_r+0x42>
 8003af6:	466a      	mov	r2, sp
 8003af8:	f000 ff80 	bl	80049fc <_fstat_r>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	dbf1      	blt.n	8003ae4 <__swhatbuf_r+0x12>
 8003b00:	9a01      	ldr	r2, [sp, #4]
 8003b02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b0a:	425a      	negs	r2, r3
 8003b0c:	415a      	adcs	r2, r3
 8003b0e:	602a      	str	r2, [r5, #0]
 8003b10:	e7ee      	b.n	8003af0 <__swhatbuf_r+0x1e>
 8003b12:	2340      	movs	r3, #64	; 0x40
 8003b14:	2000      	movs	r0, #0
 8003b16:	6023      	str	r3, [r4, #0]
 8003b18:	b016      	add	sp, #88	; 0x58
 8003b1a:	bd70      	pop	{r4, r5, r6, pc}

08003b1c <__smakebuf_r>:
 8003b1c:	898b      	ldrh	r3, [r1, #12]
 8003b1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b20:	079d      	lsls	r5, r3, #30
 8003b22:	4606      	mov	r6, r0
 8003b24:	460c      	mov	r4, r1
 8003b26:	d507      	bpl.n	8003b38 <__smakebuf_r+0x1c>
 8003b28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b2c:	6023      	str	r3, [r4, #0]
 8003b2e:	6123      	str	r3, [r4, #16]
 8003b30:	2301      	movs	r3, #1
 8003b32:	6163      	str	r3, [r4, #20]
 8003b34:	b002      	add	sp, #8
 8003b36:	bd70      	pop	{r4, r5, r6, pc}
 8003b38:	ab01      	add	r3, sp, #4
 8003b3a:	466a      	mov	r2, sp
 8003b3c:	f7ff ffc9 	bl	8003ad2 <__swhatbuf_r>
 8003b40:	9900      	ldr	r1, [sp, #0]
 8003b42:	4605      	mov	r5, r0
 8003b44:	4630      	mov	r0, r6
 8003b46:	f000 fc37 	bl	80043b8 <_malloc_r>
 8003b4a:	b948      	cbnz	r0, 8003b60 <__smakebuf_r+0x44>
 8003b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b50:	059a      	lsls	r2, r3, #22
 8003b52:	d4ef      	bmi.n	8003b34 <__smakebuf_r+0x18>
 8003b54:	f023 0303 	bic.w	r3, r3, #3
 8003b58:	f043 0302 	orr.w	r3, r3, #2
 8003b5c:	81a3      	strh	r3, [r4, #12]
 8003b5e:	e7e3      	b.n	8003b28 <__smakebuf_r+0xc>
 8003b60:	4b0d      	ldr	r3, [pc, #52]	; (8003b98 <__smakebuf_r+0x7c>)
 8003b62:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b64:	89a3      	ldrh	r3, [r4, #12]
 8003b66:	6020      	str	r0, [r4, #0]
 8003b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b6c:	81a3      	strh	r3, [r4, #12]
 8003b6e:	9b00      	ldr	r3, [sp, #0]
 8003b70:	6163      	str	r3, [r4, #20]
 8003b72:	9b01      	ldr	r3, [sp, #4]
 8003b74:	6120      	str	r0, [r4, #16]
 8003b76:	b15b      	cbz	r3, 8003b90 <__smakebuf_r+0x74>
 8003b78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b7c:	4630      	mov	r0, r6
 8003b7e:	f000 ff4f 	bl	8004a20 <_isatty_r>
 8003b82:	b128      	cbz	r0, 8003b90 <__smakebuf_r+0x74>
 8003b84:	89a3      	ldrh	r3, [r4, #12]
 8003b86:	f023 0303 	bic.w	r3, r3, #3
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	81a3      	strh	r3, [r4, #12]
 8003b90:	89a0      	ldrh	r0, [r4, #12]
 8003b92:	4305      	orrs	r5, r0
 8003b94:	81a5      	strh	r5, [r4, #12]
 8003b96:	e7cd      	b.n	8003b34 <__smakebuf_r+0x18>
 8003b98:	08003921 	.word	0x08003921

08003b9c <malloc>:
 8003b9c:	4b02      	ldr	r3, [pc, #8]	; (8003ba8 <malloc+0xc>)
 8003b9e:	4601      	mov	r1, r0
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	f000 bc09 	b.w	80043b8 <_malloc_r>
 8003ba6:	bf00      	nop
 8003ba8:	2000002c 	.word	0x2000002c

08003bac <_Balloc>:
 8003bac:	b570      	push	{r4, r5, r6, lr}
 8003bae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003bb0:	4604      	mov	r4, r0
 8003bb2:	460d      	mov	r5, r1
 8003bb4:	b976      	cbnz	r6, 8003bd4 <_Balloc+0x28>
 8003bb6:	2010      	movs	r0, #16
 8003bb8:	f7ff fff0 	bl	8003b9c <malloc>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	6260      	str	r0, [r4, #36]	; 0x24
 8003bc0:	b920      	cbnz	r0, 8003bcc <_Balloc+0x20>
 8003bc2:	4b18      	ldr	r3, [pc, #96]	; (8003c24 <_Balloc+0x78>)
 8003bc4:	4818      	ldr	r0, [pc, #96]	; (8003c28 <_Balloc+0x7c>)
 8003bc6:	2166      	movs	r1, #102	; 0x66
 8003bc8:	f000 fed8 	bl	800497c <__assert_func>
 8003bcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003bd0:	6006      	str	r6, [r0, #0]
 8003bd2:	60c6      	str	r6, [r0, #12]
 8003bd4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003bd6:	68f3      	ldr	r3, [r6, #12]
 8003bd8:	b183      	cbz	r3, 8003bfc <_Balloc+0x50>
 8003bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003be2:	b9b8      	cbnz	r0, 8003c14 <_Balloc+0x68>
 8003be4:	2101      	movs	r1, #1
 8003be6:	fa01 f605 	lsl.w	r6, r1, r5
 8003bea:	1d72      	adds	r2, r6, #5
 8003bec:	0092      	lsls	r2, r2, #2
 8003bee:	4620      	mov	r0, r4
 8003bf0:	f000 fb60 	bl	80042b4 <_calloc_r>
 8003bf4:	b160      	cbz	r0, 8003c10 <_Balloc+0x64>
 8003bf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003bfa:	e00e      	b.n	8003c1a <_Balloc+0x6e>
 8003bfc:	2221      	movs	r2, #33	; 0x21
 8003bfe:	2104      	movs	r1, #4
 8003c00:	4620      	mov	r0, r4
 8003c02:	f000 fb57 	bl	80042b4 <_calloc_r>
 8003c06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c08:	60f0      	str	r0, [r6, #12]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e4      	bne.n	8003bda <_Balloc+0x2e>
 8003c10:	2000      	movs	r0, #0
 8003c12:	bd70      	pop	{r4, r5, r6, pc}
 8003c14:	6802      	ldr	r2, [r0, #0]
 8003c16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003c20:	e7f7      	b.n	8003c12 <_Balloc+0x66>
 8003c22:	bf00      	nop
 8003c24:	08004bd9 	.word	0x08004bd9
 8003c28:	08004cbc 	.word	0x08004cbc

08003c2c <_Bfree>:
 8003c2c:	b570      	push	{r4, r5, r6, lr}
 8003c2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003c30:	4605      	mov	r5, r0
 8003c32:	460c      	mov	r4, r1
 8003c34:	b976      	cbnz	r6, 8003c54 <_Bfree+0x28>
 8003c36:	2010      	movs	r0, #16
 8003c38:	f7ff ffb0 	bl	8003b9c <malloc>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	6268      	str	r0, [r5, #36]	; 0x24
 8003c40:	b920      	cbnz	r0, 8003c4c <_Bfree+0x20>
 8003c42:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <_Bfree+0x3c>)
 8003c44:	4809      	ldr	r0, [pc, #36]	; (8003c6c <_Bfree+0x40>)
 8003c46:	218a      	movs	r1, #138	; 0x8a
 8003c48:	f000 fe98 	bl	800497c <__assert_func>
 8003c4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003c50:	6006      	str	r6, [r0, #0]
 8003c52:	60c6      	str	r6, [r0, #12]
 8003c54:	b13c      	cbz	r4, 8003c66 <_Bfree+0x3a>
 8003c56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003c58:	6862      	ldr	r2, [r4, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c60:	6021      	str	r1, [r4, #0]
 8003c62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003c66:	bd70      	pop	{r4, r5, r6, pc}
 8003c68:	08004bd9 	.word	0x08004bd9
 8003c6c:	08004cbc 	.word	0x08004cbc

08003c70 <__multadd>:
 8003c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c74:	690d      	ldr	r5, [r1, #16]
 8003c76:	4607      	mov	r7, r0
 8003c78:	460c      	mov	r4, r1
 8003c7a:	461e      	mov	r6, r3
 8003c7c:	f101 0c14 	add.w	ip, r1, #20
 8003c80:	2000      	movs	r0, #0
 8003c82:	f8dc 3000 	ldr.w	r3, [ip]
 8003c86:	b299      	uxth	r1, r3
 8003c88:	fb02 6101 	mla	r1, r2, r1, r6
 8003c8c:	0c1e      	lsrs	r6, r3, #16
 8003c8e:	0c0b      	lsrs	r3, r1, #16
 8003c90:	fb02 3306 	mla	r3, r2, r6, r3
 8003c94:	b289      	uxth	r1, r1
 8003c96:	3001      	adds	r0, #1
 8003c98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003c9c:	4285      	cmp	r5, r0
 8003c9e:	f84c 1b04 	str.w	r1, [ip], #4
 8003ca2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003ca6:	dcec      	bgt.n	8003c82 <__multadd+0x12>
 8003ca8:	b30e      	cbz	r6, 8003cee <__multadd+0x7e>
 8003caa:	68a3      	ldr	r3, [r4, #8]
 8003cac:	42ab      	cmp	r3, r5
 8003cae:	dc19      	bgt.n	8003ce4 <__multadd+0x74>
 8003cb0:	6861      	ldr	r1, [r4, #4]
 8003cb2:	4638      	mov	r0, r7
 8003cb4:	3101      	adds	r1, #1
 8003cb6:	f7ff ff79 	bl	8003bac <_Balloc>
 8003cba:	4680      	mov	r8, r0
 8003cbc:	b928      	cbnz	r0, 8003cca <__multadd+0x5a>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <__multadd+0x84>)
 8003cc2:	480d      	ldr	r0, [pc, #52]	; (8003cf8 <__multadd+0x88>)
 8003cc4:	21b5      	movs	r1, #181	; 0xb5
 8003cc6:	f000 fe59 	bl	800497c <__assert_func>
 8003cca:	6922      	ldr	r2, [r4, #16]
 8003ccc:	3202      	adds	r2, #2
 8003cce:	f104 010c 	add.w	r1, r4, #12
 8003cd2:	0092      	lsls	r2, r2, #2
 8003cd4:	300c      	adds	r0, #12
 8003cd6:	f7fe f95b 	bl	8001f90 <memcpy>
 8003cda:	4621      	mov	r1, r4
 8003cdc:	4638      	mov	r0, r7
 8003cde:	f7ff ffa5 	bl	8003c2c <_Bfree>
 8003ce2:	4644      	mov	r4, r8
 8003ce4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003ce8:	3501      	adds	r5, #1
 8003cea:	615e      	str	r6, [r3, #20]
 8003cec:	6125      	str	r5, [r4, #16]
 8003cee:	4620      	mov	r0, r4
 8003cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cf4:	08004c4b 	.word	0x08004c4b
 8003cf8:	08004cbc 	.word	0x08004cbc

08003cfc <__hi0bits>:
 8003cfc:	0c03      	lsrs	r3, r0, #16
 8003cfe:	041b      	lsls	r3, r3, #16
 8003d00:	b9d3      	cbnz	r3, 8003d38 <__hi0bits+0x3c>
 8003d02:	0400      	lsls	r0, r0, #16
 8003d04:	2310      	movs	r3, #16
 8003d06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003d0a:	bf04      	itt	eq
 8003d0c:	0200      	lsleq	r0, r0, #8
 8003d0e:	3308      	addeq	r3, #8
 8003d10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003d14:	bf04      	itt	eq
 8003d16:	0100      	lsleq	r0, r0, #4
 8003d18:	3304      	addeq	r3, #4
 8003d1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8003d1e:	bf04      	itt	eq
 8003d20:	0080      	lsleq	r0, r0, #2
 8003d22:	3302      	addeq	r3, #2
 8003d24:	2800      	cmp	r0, #0
 8003d26:	db05      	blt.n	8003d34 <__hi0bits+0x38>
 8003d28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003d2c:	f103 0301 	add.w	r3, r3, #1
 8003d30:	bf08      	it	eq
 8003d32:	2320      	moveq	r3, #32
 8003d34:	4618      	mov	r0, r3
 8003d36:	4770      	bx	lr
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e7e4      	b.n	8003d06 <__hi0bits+0xa>

08003d3c <__lo0bits>:
 8003d3c:	6803      	ldr	r3, [r0, #0]
 8003d3e:	f013 0207 	ands.w	r2, r3, #7
 8003d42:	4601      	mov	r1, r0
 8003d44:	d00b      	beq.n	8003d5e <__lo0bits+0x22>
 8003d46:	07da      	lsls	r2, r3, #31
 8003d48:	d423      	bmi.n	8003d92 <__lo0bits+0x56>
 8003d4a:	0798      	lsls	r0, r3, #30
 8003d4c:	bf49      	itett	mi
 8003d4e:	085b      	lsrmi	r3, r3, #1
 8003d50:	089b      	lsrpl	r3, r3, #2
 8003d52:	2001      	movmi	r0, #1
 8003d54:	600b      	strmi	r3, [r1, #0]
 8003d56:	bf5c      	itt	pl
 8003d58:	600b      	strpl	r3, [r1, #0]
 8003d5a:	2002      	movpl	r0, #2
 8003d5c:	4770      	bx	lr
 8003d5e:	b298      	uxth	r0, r3
 8003d60:	b9a8      	cbnz	r0, 8003d8e <__lo0bits+0x52>
 8003d62:	0c1b      	lsrs	r3, r3, #16
 8003d64:	2010      	movs	r0, #16
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	b90a      	cbnz	r2, 8003d6e <__lo0bits+0x32>
 8003d6a:	3008      	adds	r0, #8
 8003d6c:	0a1b      	lsrs	r3, r3, #8
 8003d6e:	071a      	lsls	r2, r3, #28
 8003d70:	bf04      	itt	eq
 8003d72:	091b      	lsreq	r3, r3, #4
 8003d74:	3004      	addeq	r0, #4
 8003d76:	079a      	lsls	r2, r3, #30
 8003d78:	bf04      	itt	eq
 8003d7a:	089b      	lsreq	r3, r3, #2
 8003d7c:	3002      	addeq	r0, #2
 8003d7e:	07da      	lsls	r2, r3, #31
 8003d80:	d403      	bmi.n	8003d8a <__lo0bits+0x4e>
 8003d82:	085b      	lsrs	r3, r3, #1
 8003d84:	f100 0001 	add.w	r0, r0, #1
 8003d88:	d005      	beq.n	8003d96 <__lo0bits+0x5a>
 8003d8a:	600b      	str	r3, [r1, #0]
 8003d8c:	4770      	bx	lr
 8003d8e:	4610      	mov	r0, r2
 8003d90:	e7e9      	b.n	8003d66 <__lo0bits+0x2a>
 8003d92:	2000      	movs	r0, #0
 8003d94:	4770      	bx	lr
 8003d96:	2020      	movs	r0, #32
 8003d98:	4770      	bx	lr
	...

08003d9c <__i2b>:
 8003d9c:	b510      	push	{r4, lr}
 8003d9e:	460c      	mov	r4, r1
 8003da0:	2101      	movs	r1, #1
 8003da2:	f7ff ff03 	bl	8003bac <_Balloc>
 8003da6:	4602      	mov	r2, r0
 8003da8:	b928      	cbnz	r0, 8003db6 <__i2b+0x1a>
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <__i2b+0x24>)
 8003dac:	4805      	ldr	r0, [pc, #20]	; (8003dc4 <__i2b+0x28>)
 8003dae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003db2:	f000 fde3 	bl	800497c <__assert_func>
 8003db6:	2301      	movs	r3, #1
 8003db8:	6144      	str	r4, [r0, #20]
 8003dba:	6103      	str	r3, [r0, #16]
 8003dbc:	bd10      	pop	{r4, pc}
 8003dbe:	bf00      	nop
 8003dc0:	08004c4b 	.word	0x08004c4b
 8003dc4:	08004cbc 	.word	0x08004cbc

08003dc8 <__multiply>:
 8003dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dcc:	4691      	mov	r9, r2
 8003dce:	690a      	ldr	r2, [r1, #16]
 8003dd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	bfb8      	it	lt
 8003dd8:	460b      	movlt	r3, r1
 8003dda:	460c      	mov	r4, r1
 8003ddc:	bfbc      	itt	lt
 8003dde:	464c      	movlt	r4, r9
 8003de0:	4699      	movlt	r9, r3
 8003de2:	6927      	ldr	r7, [r4, #16]
 8003de4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003de8:	68a3      	ldr	r3, [r4, #8]
 8003dea:	6861      	ldr	r1, [r4, #4]
 8003dec:	eb07 060a 	add.w	r6, r7, sl
 8003df0:	42b3      	cmp	r3, r6
 8003df2:	b085      	sub	sp, #20
 8003df4:	bfb8      	it	lt
 8003df6:	3101      	addlt	r1, #1
 8003df8:	f7ff fed8 	bl	8003bac <_Balloc>
 8003dfc:	b930      	cbnz	r0, 8003e0c <__multiply+0x44>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	4b44      	ldr	r3, [pc, #272]	; (8003f14 <__multiply+0x14c>)
 8003e02:	4845      	ldr	r0, [pc, #276]	; (8003f18 <__multiply+0x150>)
 8003e04:	f240 115d 	movw	r1, #349	; 0x15d
 8003e08:	f000 fdb8 	bl	800497c <__assert_func>
 8003e0c:	f100 0514 	add.w	r5, r0, #20
 8003e10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003e14:	462b      	mov	r3, r5
 8003e16:	2200      	movs	r2, #0
 8003e18:	4543      	cmp	r3, r8
 8003e1a:	d321      	bcc.n	8003e60 <__multiply+0x98>
 8003e1c:	f104 0314 	add.w	r3, r4, #20
 8003e20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003e24:	f109 0314 	add.w	r3, r9, #20
 8003e28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003e2c:	9202      	str	r2, [sp, #8]
 8003e2e:	1b3a      	subs	r2, r7, r4
 8003e30:	3a15      	subs	r2, #21
 8003e32:	f022 0203 	bic.w	r2, r2, #3
 8003e36:	3204      	adds	r2, #4
 8003e38:	f104 0115 	add.w	r1, r4, #21
 8003e3c:	428f      	cmp	r7, r1
 8003e3e:	bf38      	it	cc
 8003e40:	2204      	movcc	r2, #4
 8003e42:	9201      	str	r2, [sp, #4]
 8003e44:	9a02      	ldr	r2, [sp, #8]
 8003e46:	9303      	str	r3, [sp, #12]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d80c      	bhi.n	8003e66 <__multiply+0x9e>
 8003e4c:	2e00      	cmp	r6, #0
 8003e4e:	dd03      	ble.n	8003e58 <__multiply+0x90>
 8003e50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d05a      	beq.n	8003f0e <__multiply+0x146>
 8003e58:	6106      	str	r6, [r0, #16]
 8003e5a:	b005      	add	sp, #20
 8003e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e60:	f843 2b04 	str.w	r2, [r3], #4
 8003e64:	e7d8      	b.n	8003e18 <__multiply+0x50>
 8003e66:	f8b3 a000 	ldrh.w	sl, [r3]
 8003e6a:	f1ba 0f00 	cmp.w	sl, #0
 8003e6e:	d024      	beq.n	8003eba <__multiply+0xf2>
 8003e70:	f104 0e14 	add.w	lr, r4, #20
 8003e74:	46a9      	mov	r9, r5
 8003e76:	f04f 0c00 	mov.w	ip, #0
 8003e7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003e7e:	f8d9 1000 	ldr.w	r1, [r9]
 8003e82:	fa1f fb82 	uxth.w	fp, r2
 8003e86:	b289      	uxth	r1, r1
 8003e88:	fb0a 110b 	mla	r1, sl, fp, r1
 8003e8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8003e90:	f8d9 2000 	ldr.w	r2, [r9]
 8003e94:	4461      	add	r1, ip
 8003e96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003e9a:	fb0a c20b 	mla	r2, sl, fp, ip
 8003e9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003ea2:	b289      	uxth	r1, r1
 8003ea4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003ea8:	4577      	cmp	r7, lr
 8003eaa:	f849 1b04 	str.w	r1, [r9], #4
 8003eae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003eb2:	d8e2      	bhi.n	8003e7a <__multiply+0xb2>
 8003eb4:	9a01      	ldr	r2, [sp, #4]
 8003eb6:	f845 c002 	str.w	ip, [r5, r2]
 8003eba:	9a03      	ldr	r2, [sp, #12]
 8003ebc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	f1b9 0f00 	cmp.w	r9, #0
 8003ec6:	d020      	beq.n	8003f0a <__multiply+0x142>
 8003ec8:	6829      	ldr	r1, [r5, #0]
 8003eca:	f104 0c14 	add.w	ip, r4, #20
 8003ece:	46ae      	mov	lr, r5
 8003ed0:	f04f 0a00 	mov.w	sl, #0
 8003ed4:	f8bc b000 	ldrh.w	fp, [ip]
 8003ed8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8003edc:	fb09 220b 	mla	r2, r9, fp, r2
 8003ee0:	4492      	add	sl, r2
 8003ee2:	b289      	uxth	r1, r1
 8003ee4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8003ee8:	f84e 1b04 	str.w	r1, [lr], #4
 8003eec:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003ef0:	f8be 1000 	ldrh.w	r1, [lr]
 8003ef4:	0c12      	lsrs	r2, r2, #16
 8003ef6:	fb09 1102 	mla	r1, r9, r2, r1
 8003efa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8003efe:	4567      	cmp	r7, ip
 8003f00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003f04:	d8e6      	bhi.n	8003ed4 <__multiply+0x10c>
 8003f06:	9a01      	ldr	r2, [sp, #4]
 8003f08:	50a9      	str	r1, [r5, r2]
 8003f0a:	3504      	adds	r5, #4
 8003f0c:	e79a      	b.n	8003e44 <__multiply+0x7c>
 8003f0e:	3e01      	subs	r6, #1
 8003f10:	e79c      	b.n	8003e4c <__multiply+0x84>
 8003f12:	bf00      	nop
 8003f14:	08004c4b 	.word	0x08004c4b
 8003f18:	08004cbc 	.word	0x08004cbc

08003f1c <__pow5mult>:
 8003f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f20:	4615      	mov	r5, r2
 8003f22:	f012 0203 	ands.w	r2, r2, #3
 8003f26:	4606      	mov	r6, r0
 8003f28:	460f      	mov	r7, r1
 8003f2a:	d007      	beq.n	8003f3c <__pow5mult+0x20>
 8003f2c:	4c25      	ldr	r4, [pc, #148]	; (8003fc4 <__pow5mult+0xa8>)
 8003f2e:	3a01      	subs	r2, #1
 8003f30:	2300      	movs	r3, #0
 8003f32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003f36:	f7ff fe9b 	bl	8003c70 <__multadd>
 8003f3a:	4607      	mov	r7, r0
 8003f3c:	10ad      	asrs	r5, r5, #2
 8003f3e:	d03d      	beq.n	8003fbc <__pow5mult+0xa0>
 8003f40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003f42:	b97c      	cbnz	r4, 8003f64 <__pow5mult+0x48>
 8003f44:	2010      	movs	r0, #16
 8003f46:	f7ff fe29 	bl	8003b9c <malloc>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	6270      	str	r0, [r6, #36]	; 0x24
 8003f4e:	b928      	cbnz	r0, 8003f5c <__pow5mult+0x40>
 8003f50:	4b1d      	ldr	r3, [pc, #116]	; (8003fc8 <__pow5mult+0xac>)
 8003f52:	481e      	ldr	r0, [pc, #120]	; (8003fcc <__pow5mult+0xb0>)
 8003f54:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003f58:	f000 fd10 	bl	800497c <__assert_func>
 8003f5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003f60:	6004      	str	r4, [r0, #0]
 8003f62:	60c4      	str	r4, [r0, #12]
 8003f64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003f68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003f6c:	b94c      	cbnz	r4, 8003f82 <__pow5mult+0x66>
 8003f6e:	f240 2171 	movw	r1, #625	; 0x271
 8003f72:	4630      	mov	r0, r6
 8003f74:	f7ff ff12 	bl	8003d9c <__i2b>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8003f7e:	4604      	mov	r4, r0
 8003f80:	6003      	str	r3, [r0, #0]
 8003f82:	f04f 0900 	mov.w	r9, #0
 8003f86:	07eb      	lsls	r3, r5, #31
 8003f88:	d50a      	bpl.n	8003fa0 <__pow5mult+0x84>
 8003f8a:	4639      	mov	r1, r7
 8003f8c:	4622      	mov	r2, r4
 8003f8e:	4630      	mov	r0, r6
 8003f90:	f7ff ff1a 	bl	8003dc8 <__multiply>
 8003f94:	4639      	mov	r1, r7
 8003f96:	4680      	mov	r8, r0
 8003f98:	4630      	mov	r0, r6
 8003f9a:	f7ff fe47 	bl	8003c2c <_Bfree>
 8003f9e:	4647      	mov	r7, r8
 8003fa0:	106d      	asrs	r5, r5, #1
 8003fa2:	d00b      	beq.n	8003fbc <__pow5mult+0xa0>
 8003fa4:	6820      	ldr	r0, [r4, #0]
 8003fa6:	b938      	cbnz	r0, 8003fb8 <__pow5mult+0x9c>
 8003fa8:	4622      	mov	r2, r4
 8003faa:	4621      	mov	r1, r4
 8003fac:	4630      	mov	r0, r6
 8003fae:	f7ff ff0b 	bl	8003dc8 <__multiply>
 8003fb2:	6020      	str	r0, [r4, #0]
 8003fb4:	f8c0 9000 	str.w	r9, [r0]
 8003fb8:	4604      	mov	r4, r0
 8003fba:	e7e4      	b.n	8003f86 <__pow5mult+0x6a>
 8003fbc:	4638      	mov	r0, r7
 8003fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fc2:	bf00      	nop
 8003fc4:	08004e08 	.word	0x08004e08
 8003fc8:	08004bd9 	.word	0x08004bd9
 8003fcc:	08004cbc 	.word	0x08004cbc

08003fd0 <__lshift>:
 8003fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	6849      	ldr	r1, [r1, #4]
 8003fd8:	6923      	ldr	r3, [r4, #16]
 8003fda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003fde:	68a3      	ldr	r3, [r4, #8]
 8003fe0:	4607      	mov	r7, r0
 8003fe2:	4691      	mov	r9, r2
 8003fe4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003fe8:	f108 0601 	add.w	r6, r8, #1
 8003fec:	42b3      	cmp	r3, r6
 8003fee:	db0b      	blt.n	8004008 <__lshift+0x38>
 8003ff0:	4638      	mov	r0, r7
 8003ff2:	f7ff fddb 	bl	8003bac <_Balloc>
 8003ff6:	4605      	mov	r5, r0
 8003ff8:	b948      	cbnz	r0, 800400e <__lshift+0x3e>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	4b2a      	ldr	r3, [pc, #168]	; (80040a8 <__lshift+0xd8>)
 8003ffe:	482b      	ldr	r0, [pc, #172]	; (80040ac <__lshift+0xdc>)
 8004000:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004004:	f000 fcba 	bl	800497c <__assert_func>
 8004008:	3101      	adds	r1, #1
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	e7ee      	b.n	8003fec <__lshift+0x1c>
 800400e:	2300      	movs	r3, #0
 8004010:	f100 0114 	add.w	r1, r0, #20
 8004014:	f100 0210 	add.w	r2, r0, #16
 8004018:	4618      	mov	r0, r3
 800401a:	4553      	cmp	r3, sl
 800401c:	db37      	blt.n	800408e <__lshift+0xbe>
 800401e:	6920      	ldr	r0, [r4, #16]
 8004020:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004024:	f104 0314 	add.w	r3, r4, #20
 8004028:	f019 091f 	ands.w	r9, r9, #31
 800402c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004030:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004034:	d02f      	beq.n	8004096 <__lshift+0xc6>
 8004036:	f1c9 0e20 	rsb	lr, r9, #32
 800403a:	468a      	mov	sl, r1
 800403c:	f04f 0c00 	mov.w	ip, #0
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	fa02 f209 	lsl.w	r2, r2, r9
 8004046:	ea42 020c 	orr.w	r2, r2, ip
 800404a:	f84a 2b04 	str.w	r2, [sl], #4
 800404e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004052:	4298      	cmp	r0, r3
 8004054:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004058:	d8f2      	bhi.n	8004040 <__lshift+0x70>
 800405a:	1b03      	subs	r3, r0, r4
 800405c:	3b15      	subs	r3, #21
 800405e:	f023 0303 	bic.w	r3, r3, #3
 8004062:	3304      	adds	r3, #4
 8004064:	f104 0215 	add.w	r2, r4, #21
 8004068:	4290      	cmp	r0, r2
 800406a:	bf38      	it	cc
 800406c:	2304      	movcc	r3, #4
 800406e:	f841 c003 	str.w	ip, [r1, r3]
 8004072:	f1bc 0f00 	cmp.w	ip, #0
 8004076:	d001      	beq.n	800407c <__lshift+0xac>
 8004078:	f108 0602 	add.w	r6, r8, #2
 800407c:	3e01      	subs	r6, #1
 800407e:	4638      	mov	r0, r7
 8004080:	612e      	str	r6, [r5, #16]
 8004082:	4621      	mov	r1, r4
 8004084:	f7ff fdd2 	bl	8003c2c <_Bfree>
 8004088:	4628      	mov	r0, r5
 800408a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800408e:	f842 0f04 	str.w	r0, [r2, #4]!
 8004092:	3301      	adds	r3, #1
 8004094:	e7c1      	b.n	800401a <__lshift+0x4a>
 8004096:	3904      	subs	r1, #4
 8004098:	f853 2b04 	ldr.w	r2, [r3], #4
 800409c:	f841 2f04 	str.w	r2, [r1, #4]!
 80040a0:	4298      	cmp	r0, r3
 80040a2:	d8f9      	bhi.n	8004098 <__lshift+0xc8>
 80040a4:	e7ea      	b.n	800407c <__lshift+0xac>
 80040a6:	bf00      	nop
 80040a8:	08004c4b 	.word	0x08004c4b
 80040ac:	08004cbc 	.word	0x08004cbc

080040b0 <__mcmp>:
 80040b0:	b530      	push	{r4, r5, lr}
 80040b2:	6902      	ldr	r2, [r0, #16]
 80040b4:	690c      	ldr	r4, [r1, #16]
 80040b6:	1b12      	subs	r2, r2, r4
 80040b8:	d10e      	bne.n	80040d8 <__mcmp+0x28>
 80040ba:	f100 0314 	add.w	r3, r0, #20
 80040be:	3114      	adds	r1, #20
 80040c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80040c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80040c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80040cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80040d0:	42a5      	cmp	r5, r4
 80040d2:	d003      	beq.n	80040dc <__mcmp+0x2c>
 80040d4:	d305      	bcc.n	80040e2 <__mcmp+0x32>
 80040d6:	2201      	movs	r2, #1
 80040d8:	4610      	mov	r0, r2
 80040da:	bd30      	pop	{r4, r5, pc}
 80040dc:	4283      	cmp	r3, r0
 80040de:	d3f3      	bcc.n	80040c8 <__mcmp+0x18>
 80040e0:	e7fa      	b.n	80040d8 <__mcmp+0x28>
 80040e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040e6:	e7f7      	b.n	80040d8 <__mcmp+0x28>

080040e8 <__mdiff>:
 80040e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ec:	460c      	mov	r4, r1
 80040ee:	4606      	mov	r6, r0
 80040f0:	4611      	mov	r1, r2
 80040f2:	4620      	mov	r0, r4
 80040f4:	4690      	mov	r8, r2
 80040f6:	f7ff ffdb 	bl	80040b0 <__mcmp>
 80040fa:	1e05      	subs	r5, r0, #0
 80040fc:	d110      	bne.n	8004120 <__mdiff+0x38>
 80040fe:	4629      	mov	r1, r5
 8004100:	4630      	mov	r0, r6
 8004102:	f7ff fd53 	bl	8003bac <_Balloc>
 8004106:	b930      	cbnz	r0, 8004116 <__mdiff+0x2e>
 8004108:	4b3a      	ldr	r3, [pc, #232]	; (80041f4 <__mdiff+0x10c>)
 800410a:	4602      	mov	r2, r0
 800410c:	f240 2132 	movw	r1, #562	; 0x232
 8004110:	4839      	ldr	r0, [pc, #228]	; (80041f8 <__mdiff+0x110>)
 8004112:	f000 fc33 	bl	800497c <__assert_func>
 8004116:	2301      	movs	r3, #1
 8004118:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800411c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004120:	bfa4      	itt	ge
 8004122:	4643      	movge	r3, r8
 8004124:	46a0      	movge	r8, r4
 8004126:	4630      	mov	r0, r6
 8004128:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800412c:	bfa6      	itte	ge
 800412e:	461c      	movge	r4, r3
 8004130:	2500      	movge	r5, #0
 8004132:	2501      	movlt	r5, #1
 8004134:	f7ff fd3a 	bl	8003bac <_Balloc>
 8004138:	b920      	cbnz	r0, 8004144 <__mdiff+0x5c>
 800413a:	4b2e      	ldr	r3, [pc, #184]	; (80041f4 <__mdiff+0x10c>)
 800413c:	4602      	mov	r2, r0
 800413e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004142:	e7e5      	b.n	8004110 <__mdiff+0x28>
 8004144:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004148:	6926      	ldr	r6, [r4, #16]
 800414a:	60c5      	str	r5, [r0, #12]
 800414c:	f104 0914 	add.w	r9, r4, #20
 8004150:	f108 0514 	add.w	r5, r8, #20
 8004154:	f100 0e14 	add.w	lr, r0, #20
 8004158:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800415c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004160:	f108 0210 	add.w	r2, r8, #16
 8004164:	46f2      	mov	sl, lr
 8004166:	2100      	movs	r1, #0
 8004168:	f859 3b04 	ldr.w	r3, [r9], #4
 800416c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004170:	fa1f f883 	uxth.w	r8, r3
 8004174:	fa11 f18b 	uxtah	r1, r1, fp
 8004178:	0c1b      	lsrs	r3, r3, #16
 800417a:	eba1 0808 	sub.w	r8, r1, r8
 800417e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004182:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004186:	fa1f f888 	uxth.w	r8, r8
 800418a:	1419      	asrs	r1, r3, #16
 800418c:	454e      	cmp	r6, r9
 800418e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004192:	f84a 3b04 	str.w	r3, [sl], #4
 8004196:	d8e7      	bhi.n	8004168 <__mdiff+0x80>
 8004198:	1b33      	subs	r3, r6, r4
 800419a:	3b15      	subs	r3, #21
 800419c:	f023 0303 	bic.w	r3, r3, #3
 80041a0:	3304      	adds	r3, #4
 80041a2:	3415      	adds	r4, #21
 80041a4:	42a6      	cmp	r6, r4
 80041a6:	bf38      	it	cc
 80041a8:	2304      	movcc	r3, #4
 80041aa:	441d      	add	r5, r3
 80041ac:	4473      	add	r3, lr
 80041ae:	469e      	mov	lr, r3
 80041b0:	462e      	mov	r6, r5
 80041b2:	4566      	cmp	r6, ip
 80041b4:	d30e      	bcc.n	80041d4 <__mdiff+0xec>
 80041b6:	f10c 0203 	add.w	r2, ip, #3
 80041ba:	1b52      	subs	r2, r2, r5
 80041bc:	f022 0203 	bic.w	r2, r2, #3
 80041c0:	3d03      	subs	r5, #3
 80041c2:	45ac      	cmp	ip, r5
 80041c4:	bf38      	it	cc
 80041c6:	2200      	movcc	r2, #0
 80041c8:	441a      	add	r2, r3
 80041ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80041ce:	b17b      	cbz	r3, 80041f0 <__mdiff+0x108>
 80041d0:	6107      	str	r7, [r0, #16]
 80041d2:	e7a3      	b.n	800411c <__mdiff+0x34>
 80041d4:	f856 8b04 	ldr.w	r8, [r6], #4
 80041d8:	fa11 f288 	uxtah	r2, r1, r8
 80041dc:	1414      	asrs	r4, r2, #16
 80041de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80041e2:	b292      	uxth	r2, r2
 80041e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80041e8:	f84e 2b04 	str.w	r2, [lr], #4
 80041ec:	1421      	asrs	r1, r4, #16
 80041ee:	e7e0      	b.n	80041b2 <__mdiff+0xca>
 80041f0:	3f01      	subs	r7, #1
 80041f2:	e7ea      	b.n	80041ca <__mdiff+0xe2>
 80041f4:	08004c4b 	.word	0x08004c4b
 80041f8:	08004cbc 	.word	0x08004cbc

080041fc <__d2b>:
 80041fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004200:	4689      	mov	r9, r1
 8004202:	2101      	movs	r1, #1
 8004204:	ec57 6b10 	vmov	r6, r7, d0
 8004208:	4690      	mov	r8, r2
 800420a:	f7ff fccf 	bl	8003bac <_Balloc>
 800420e:	4604      	mov	r4, r0
 8004210:	b930      	cbnz	r0, 8004220 <__d2b+0x24>
 8004212:	4602      	mov	r2, r0
 8004214:	4b25      	ldr	r3, [pc, #148]	; (80042ac <__d2b+0xb0>)
 8004216:	4826      	ldr	r0, [pc, #152]	; (80042b0 <__d2b+0xb4>)
 8004218:	f240 310a 	movw	r1, #778	; 0x30a
 800421c:	f000 fbae 	bl	800497c <__assert_func>
 8004220:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004224:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004228:	bb35      	cbnz	r5, 8004278 <__d2b+0x7c>
 800422a:	2e00      	cmp	r6, #0
 800422c:	9301      	str	r3, [sp, #4]
 800422e:	d028      	beq.n	8004282 <__d2b+0x86>
 8004230:	4668      	mov	r0, sp
 8004232:	9600      	str	r6, [sp, #0]
 8004234:	f7ff fd82 	bl	8003d3c <__lo0bits>
 8004238:	9900      	ldr	r1, [sp, #0]
 800423a:	b300      	cbz	r0, 800427e <__d2b+0x82>
 800423c:	9a01      	ldr	r2, [sp, #4]
 800423e:	f1c0 0320 	rsb	r3, r0, #32
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	430b      	orrs	r3, r1
 8004248:	40c2      	lsrs	r2, r0
 800424a:	6163      	str	r3, [r4, #20]
 800424c:	9201      	str	r2, [sp, #4]
 800424e:	9b01      	ldr	r3, [sp, #4]
 8004250:	61a3      	str	r3, [r4, #24]
 8004252:	2b00      	cmp	r3, #0
 8004254:	bf14      	ite	ne
 8004256:	2202      	movne	r2, #2
 8004258:	2201      	moveq	r2, #1
 800425a:	6122      	str	r2, [r4, #16]
 800425c:	b1d5      	cbz	r5, 8004294 <__d2b+0x98>
 800425e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004262:	4405      	add	r5, r0
 8004264:	f8c9 5000 	str.w	r5, [r9]
 8004268:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800426c:	f8c8 0000 	str.w	r0, [r8]
 8004270:	4620      	mov	r0, r4
 8004272:	b003      	add	sp, #12
 8004274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004278:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800427c:	e7d5      	b.n	800422a <__d2b+0x2e>
 800427e:	6161      	str	r1, [r4, #20]
 8004280:	e7e5      	b.n	800424e <__d2b+0x52>
 8004282:	a801      	add	r0, sp, #4
 8004284:	f7ff fd5a 	bl	8003d3c <__lo0bits>
 8004288:	9b01      	ldr	r3, [sp, #4]
 800428a:	6163      	str	r3, [r4, #20]
 800428c:	2201      	movs	r2, #1
 800428e:	6122      	str	r2, [r4, #16]
 8004290:	3020      	adds	r0, #32
 8004292:	e7e3      	b.n	800425c <__d2b+0x60>
 8004294:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004298:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800429c:	f8c9 0000 	str.w	r0, [r9]
 80042a0:	6918      	ldr	r0, [r3, #16]
 80042a2:	f7ff fd2b 	bl	8003cfc <__hi0bits>
 80042a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80042aa:	e7df      	b.n	800426c <__d2b+0x70>
 80042ac:	08004c4b 	.word	0x08004c4b
 80042b0:	08004cbc 	.word	0x08004cbc

080042b4 <_calloc_r>:
 80042b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042b6:	fba1 2402 	umull	r2, r4, r1, r2
 80042ba:	b94c      	cbnz	r4, 80042d0 <_calloc_r+0x1c>
 80042bc:	4611      	mov	r1, r2
 80042be:	9201      	str	r2, [sp, #4]
 80042c0:	f000 f87a 	bl	80043b8 <_malloc_r>
 80042c4:	9a01      	ldr	r2, [sp, #4]
 80042c6:	4605      	mov	r5, r0
 80042c8:	b930      	cbnz	r0, 80042d8 <_calloc_r+0x24>
 80042ca:	4628      	mov	r0, r5
 80042cc:	b003      	add	sp, #12
 80042ce:	bd30      	pop	{r4, r5, pc}
 80042d0:	220c      	movs	r2, #12
 80042d2:	6002      	str	r2, [r0, #0]
 80042d4:	2500      	movs	r5, #0
 80042d6:	e7f8      	b.n	80042ca <_calloc_r+0x16>
 80042d8:	4621      	mov	r1, r4
 80042da:	f7fd fe67 	bl	8001fac <memset>
 80042de:	e7f4      	b.n	80042ca <_calloc_r+0x16>

080042e0 <_free_r>:
 80042e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042e2:	2900      	cmp	r1, #0
 80042e4:	d044      	beq.n	8004370 <_free_r+0x90>
 80042e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042ea:	9001      	str	r0, [sp, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f1a1 0404 	sub.w	r4, r1, #4
 80042f2:	bfb8      	it	lt
 80042f4:	18e4      	addlt	r4, r4, r3
 80042f6:	f000 fbc7 	bl	8004a88 <__malloc_lock>
 80042fa:	4a1e      	ldr	r2, [pc, #120]	; (8004374 <_free_r+0x94>)
 80042fc:	9801      	ldr	r0, [sp, #4]
 80042fe:	6813      	ldr	r3, [r2, #0]
 8004300:	b933      	cbnz	r3, 8004310 <_free_r+0x30>
 8004302:	6063      	str	r3, [r4, #4]
 8004304:	6014      	str	r4, [r2, #0]
 8004306:	b003      	add	sp, #12
 8004308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800430c:	f000 bbc2 	b.w	8004a94 <__malloc_unlock>
 8004310:	42a3      	cmp	r3, r4
 8004312:	d908      	bls.n	8004326 <_free_r+0x46>
 8004314:	6825      	ldr	r5, [r4, #0]
 8004316:	1961      	adds	r1, r4, r5
 8004318:	428b      	cmp	r3, r1
 800431a:	bf01      	itttt	eq
 800431c:	6819      	ldreq	r1, [r3, #0]
 800431e:	685b      	ldreq	r3, [r3, #4]
 8004320:	1949      	addeq	r1, r1, r5
 8004322:	6021      	streq	r1, [r4, #0]
 8004324:	e7ed      	b.n	8004302 <_free_r+0x22>
 8004326:	461a      	mov	r2, r3
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	b10b      	cbz	r3, 8004330 <_free_r+0x50>
 800432c:	42a3      	cmp	r3, r4
 800432e:	d9fa      	bls.n	8004326 <_free_r+0x46>
 8004330:	6811      	ldr	r1, [r2, #0]
 8004332:	1855      	adds	r5, r2, r1
 8004334:	42a5      	cmp	r5, r4
 8004336:	d10b      	bne.n	8004350 <_free_r+0x70>
 8004338:	6824      	ldr	r4, [r4, #0]
 800433a:	4421      	add	r1, r4
 800433c:	1854      	adds	r4, r2, r1
 800433e:	42a3      	cmp	r3, r4
 8004340:	6011      	str	r1, [r2, #0]
 8004342:	d1e0      	bne.n	8004306 <_free_r+0x26>
 8004344:	681c      	ldr	r4, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	6053      	str	r3, [r2, #4]
 800434a:	4421      	add	r1, r4
 800434c:	6011      	str	r1, [r2, #0]
 800434e:	e7da      	b.n	8004306 <_free_r+0x26>
 8004350:	d902      	bls.n	8004358 <_free_r+0x78>
 8004352:	230c      	movs	r3, #12
 8004354:	6003      	str	r3, [r0, #0]
 8004356:	e7d6      	b.n	8004306 <_free_r+0x26>
 8004358:	6825      	ldr	r5, [r4, #0]
 800435a:	1961      	adds	r1, r4, r5
 800435c:	428b      	cmp	r3, r1
 800435e:	bf04      	itt	eq
 8004360:	6819      	ldreq	r1, [r3, #0]
 8004362:	685b      	ldreq	r3, [r3, #4]
 8004364:	6063      	str	r3, [r4, #4]
 8004366:	bf04      	itt	eq
 8004368:	1949      	addeq	r1, r1, r5
 800436a:	6021      	streq	r1, [r4, #0]
 800436c:	6054      	str	r4, [r2, #4]
 800436e:	e7ca      	b.n	8004306 <_free_r+0x26>
 8004370:	b003      	add	sp, #12
 8004372:	bd30      	pop	{r4, r5, pc}
 8004374:	20000324 	.word	0x20000324

08004378 <sbrk_aligned>:
 8004378:	b570      	push	{r4, r5, r6, lr}
 800437a:	4e0e      	ldr	r6, [pc, #56]	; (80043b4 <sbrk_aligned+0x3c>)
 800437c:	460c      	mov	r4, r1
 800437e:	6831      	ldr	r1, [r6, #0]
 8004380:	4605      	mov	r5, r0
 8004382:	b911      	cbnz	r1, 800438a <sbrk_aligned+0x12>
 8004384:	f000 f9e6 	bl	8004754 <_sbrk_r>
 8004388:	6030      	str	r0, [r6, #0]
 800438a:	4621      	mov	r1, r4
 800438c:	4628      	mov	r0, r5
 800438e:	f000 f9e1 	bl	8004754 <_sbrk_r>
 8004392:	1c43      	adds	r3, r0, #1
 8004394:	d00a      	beq.n	80043ac <sbrk_aligned+0x34>
 8004396:	1cc4      	adds	r4, r0, #3
 8004398:	f024 0403 	bic.w	r4, r4, #3
 800439c:	42a0      	cmp	r0, r4
 800439e:	d007      	beq.n	80043b0 <sbrk_aligned+0x38>
 80043a0:	1a21      	subs	r1, r4, r0
 80043a2:	4628      	mov	r0, r5
 80043a4:	f000 f9d6 	bl	8004754 <_sbrk_r>
 80043a8:	3001      	adds	r0, #1
 80043aa:	d101      	bne.n	80043b0 <sbrk_aligned+0x38>
 80043ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80043b0:	4620      	mov	r0, r4
 80043b2:	bd70      	pop	{r4, r5, r6, pc}
 80043b4:	20000328 	.word	0x20000328

080043b8 <_malloc_r>:
 80043b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043bc:	1ccd      	adds	r5, r1, #3
 80043be:	f025 0503 	bic.w	r5, r5, #3
 80043c2:	3508      	adds	r5, #8
 80043c4:	2d0c      	cmp	r5, #12
 80043c6:	bf38      	it	cc
 80043c8:	250c      	movcc	r5, #12
 80043ca:	2d00      	cmp	r5, #0
 80043cc:	4607      	mov	r7, r0
 80043ce:	db01      	blt.n	80043d4 <_malloc_r+0x1c>
 80043d0:	42a9      	cmp	r1, r5
 80043d2:	d905      	bls.n	80043e0 <_malloc_r+0x28>
 80043d4:	230c      	movs	r3, #12
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	2600      	movs	r6, #0
 80043da:	4630      	mov	r0, r6
 80043dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043e0:	4e2e      	ldr	r6, [pc, #184]	; (800449c <_malloc_r+0xe4>)
 80043e2:	f000 fb51 	bl	8004a88 <__malloc_lock>
 80043e6:	6833      	ldr	r3, [r6, #0]
 80043e8:	461c      	mov	r4, r3
 80043ea:	bb34      	cbnz	r4, 800443a <_malloc_r+0x82>
 80043ec:	4629      	mov	r1, r5
 80043ee:	4638      	mov	r0, r7
 80043f0:	f7ff ffc2 	bl	8004378 <sbrk_aligned>
 80043f4:	1c43      	adds	r3, r0, #1
 80043f6:	4604      	mov	r4, r0
 80043f8:	d14d      	bne.n	8004496 <_malloc_r+0xde>
 80043fa:	6834      	ldr	r4, [r6, #0]
 80043fc:	4626      	mov	r6, r4
 80043fe:	2e00      	cmp	r6, #0
 8004400:	d140      	bne.n	8004484 <_malloc_r+0xcc>
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	4631      	mov	r1, r6
 8004406:	4638      	mov	r0, r7
 8004408:	eb04 0803 	add.w	r8, r4, r3
 800440c:	f000 f9a2 	bl	8004754 <_sbrk_r>
 8004410:	4580      	cmp	r8, r0
 8004412:	d13a      	bne.n	800448a <_malloc_r+0xd2>
 8004414:	6821      	ldr	r1, [r4, #0]
 8004416:	3503      	adds	r5, #3
 8004418:	1a6d      	subs	r5, r5, r1
 800441a:	f025 0503 	bic.w	r5, r5, #3
 800441e:	3508      	adds	r5, #8
 8004420:	2d0c      	cmp	r5, #12
 8004422:	bf38      	it	cc
 8004424:	250c      	movcc	r5, #12
 8004426:	4629      	mov	r1, r5
 8004428:	4638      	mov	r0, r7
 800442a:	f7ff ffa5 	bl	8004378 <sbrk_aligned>
 800442e:	3001      	adds	r0, #1
 8004430:	d02b      	beq.n	800448a <_malloc_r+0xd2>
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	442b      	add	r3, r5
 8004436:	6023      	str	r3, [r4, #0]
 8004438:	e00e      	b.n	8004458 <_malloc_r+0xa0>
 800443a:	6822      	ldr	r2, [r4, #0]
 800443c:	1b52      	subs	r2, r2, r5
 800443e:	d41e      	bmi.n	800447e <_malloc_r+0xc6>
 8004440:	2a0b      	cmp	r2, #11
 8004442:	d916      	bls.n	8004472 <_malloc_r+0xba>
 8004444:	1961      	adds	r1, r4, r5
 8004446:	42a3      	cmp	r3, r4
 8004448:	6025      	str	r5, [r4, #0]
 800444a:	bf18      	it	ne
 800444c:	6059      	strne	r1, [r3, #4]
 800444e:	6863      	ldr	r3, [r4, #4]
 8004450:	bf08      	it	eq
 8004452:	6031      	streq	r1, [r6, #0]
 8004454:	5162      	str	r2, [r4, r5]
 8004456:	604b      	str	r3, [r1, #4]
 8004458:	4638      	mov	r0, r7
 800445a:	f104 060b 	add.w	r6, r4, #11
 800445e:	f000 fb19 	bl	8004a94 <__malloc_unlock>
 8004462:	f026 0607 	bic.w	r6, r6, #7
 8004466:	1d23      	adds	r3, r4, #4
 8004468:	1af2      	subs	r2, r6, r3
 800446a:	d0b6      	beq.n	80043da <_malloc_r+0x22>
 800446c:	1b9b      	subs	r3, r3, r6
 800446e:	50a3      	str	r3, [r4, r2]
 8004470:	e7b3      	b.n	80043da <_malloc_r+0x22>
 8004472:	6862      	ldr	r2, [r4, #4]
 8004474:	42a3      	cmp	r3, r4
 8004476:	bf0c      	ite	eq
 8004478:	6032      	streq	r2, [r6, #0]
 800447a:	605a      	strne	r2, [r3, #4]
 800447c:	e7ec      	b.n	8004458 <_malloc_r+0xa0>
 800447e:	4623      	mov	r3, r4
 8004480:	6864      	ldr	r4, [r4, #4]
 8004482:	e7b2      	b.n	80043ea <_malloc_r+0x32>
 8004484:	4634      	mov	r4, r6
 8004486:	6876      	ldr	r6, [r6, #4]
 8004488:	e7b9      	b.n	80043fe <_malloc_r+0x46>
 800448a:	230c      	movs	r3, #12
 800448c:	603b      	str	r3, [r7, #0]
 800448e:	4638      	mov	r0, r7
 8004490:	f000 fb00 	bl	8004a94 <__malloc_unlock>
 8004494:	e7a1      	b.n	80043da <_malloc_r+0x22>
 8004496:	6025      	str	r5, [r4, #0]
 8004498:	e7de      	b.n	8004458 <_malloc_r+0xa0>
 800449a:	bf00      	nop
 800449c:	20000324 	.word	0x20000324

080044a0 <__sfputc_r>:
 80044a0:	6893      	ldr	r3, [r2, #8]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	b410      	push	{r4}
 80044a8:	6093      	str	r3, [r2, #8]
 80044aa:	da08      	bge.n	80044be <__sfputc_r+0x1e>
 80044ac:	6994      	ldr	r4, [r2, #24]
 80044ae:	42a3      	cmp	r3, r4
 80044b0:	db01      	blt.n	80044b6 <__sfputc_r+0x16>
 80044b2:	290a      	cmp	r1, #10
 80044b4:	d103      	bne.n	80044be <__sfputc_r+0x1e>
 80044b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044ba:	f000 b99f 	b.w	80047fc <__swbuf_r>
 80044be:	6813      	ldr	r3, [r2, #0]
 80044c0:	1c58      	adds	r0, r3, #1
 80044c2:	6010      	str	r0, [r2, #0]
 80044c4:	7019      	strb	r1, [r3, #0]
 80044c6:	4608      	mov	r0, r1
 80044c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <__sfputs_r>:
 80044ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d0:	4606      	mov	r6, r0
 80044d2:	460f      	mov	r7, r1
 80044d4:	4614      	mov	r4, r2
 80044d6:	18d5      	adds	r5, r2, r3
 80044d8:	42ac      	cmp	r4, r5
 80044da:	d101      	bne.n	80044e0 <__sfputs_r+0x12>
 80044dc:	2000      	movs	r0, #0
 80044de:	e007      	b.n	80044f0 <__sfputs_r+0x22>
 80044e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044e4:	463a      	mov	r2, r7
 80044e6:	4630      	mov	r0, r6
 80044e8:	f7ff ffda 	bl	80044a0 <__sfputc_r>
 80044ec:	1c43      	adds	r3, r0, #1
 80044ee:	d1f3      	bne.n	80044d8 <__sfputs_r+0xa>
 80044f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044f4 <_vfiprintf_r>:
 80044f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f8:	460d      	mov	r5, r1
 80044fa:	b09d      	sub	sp, #116	; 0x74
 80044fc:	4614      	mov	r4, r2
 80044fe:	4698      	mov	r8, r3
 8004500:	4606      	mov	r6, r0
 8004502:	b118      	cbz	r0, 800450c <_vfiprintf_r+0x18>
 8004504:	6983      	ldr	r3, [r0, #24]
 8004506:	b90b      	cbnz	r3, 800450c <_vfiprintf_r+0x18>
 8004508:	f7ff fa3e 	bl	8003988 <__sinit>
 800450c:	4b89      	ldr	r3, [pc, #548]	; (8004734 <_vfiprintf_r+0x240>)
 800450e:	429d      	cmp	r5, r3
 8004510:	d11b      	bne.n	800454a <_vfiprintf_r+0x56>
 8004512:	6875      	ldr	r5, [r6, #4]
 8004514:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004516:	07d9      	lsls	r1, r3, #31
 8004518:	d405      	bmi.n	8004526 <_vfiprintf_r+0x32>
 800451a:	89ab      	ldrh	r3, [r5, #12]
 800451c:	059a      	lsls	r2, r3, #22
 800451e:	d402      	bmi.n	8004526 <_vfiprintf_r+0x32>
 8004520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004522:	f7ff fad4 	bl	8003ace <__retarget_lock_acquire_recursive>
 8004526:	89ab      	ldrh	r3, [r5, #12]
 8004528:	071b      	lsls	r3, r3, #28
 800452a:	d501      	bpl.n	8004530 <_vfiprintf_r+0x3c>
 800452c:	692b      	ldr	r3, [r5, #16]
 800452e:	b9eb      	cbnz	r3, 800456c <_vfiprintf_r+0x78>
 8004530:	4629      	mov	r1, r5
 8004532:	4630      	mov	r0, r6
 8004534:	f000 f9b4 	bl	80048a0 <__swsetup_r>
 8004538:	b1c0      	cbz	r0, 800456c <_vfiprintf_r+0x78>
 800453a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800453c:	07dc      	lsls	r4, r3, #31
 800453e:	d50e      	bpl.n	800455e <_vfiprintf_r+0x6a>
 8004540:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004544:	b01d      	add	sp, #116	; 0x74
 8004546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800454a:	4b7b      	ldr	r3, [pc, #492]	; (8004738 <_vfiprintf_r+0x244>)
 800454c:	429d      	cmp	r5, r3
 800454e:	d101      	bne.n	8004554 <_vfiprintf_r+0x60>
 8004550:	68b5      	ldr	r5, [r6, #8]
 8004552:	e7df      	b.n	8004514 <_vfiprintf_r+0x20>
 8004554:	4b79      	ldr	r3, [pc, #484]	; (800473c <_vfiprintf_r+0x248>)
 8004556:	429d      	cmp	r5, r3
 8004558:	bf08      	it	eq
 800455a:	68f5      	ldreq	r5, [r6, #12]
 800455c:	e7da      	b.n	8004514 <_vfiprintf_r+0x20>
 800455e:	89ab      	ldrh	r3, [r5, #12]
 8004560:	0598      	lsls	r0, r3, #22
 8004562:	d4ed      	bmi.n	8004540 <_vfiprintf_r+0x4c>
 8004564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004566:	f7ff fab3 	bl	8003ad0 <__retarget_lock_release_recursive>
 800456a:	e7e9      	b.n	8004540 <_vfiprintf_r+0x4c>
 800456c:	2300      	movs	r3, #0
 800456e:	9309      	str	r3, [sp, #36]	; 0x24
 8004570:	2320      	movs	r3, #32
 8004572:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004576:	f8cd 800c 	str.w	r8, [sp, #12]
 800457a:	2330      	movs	r3, #48	; 0x30
 800457c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004740 <_vfiprintf_r+0x24c>
 8004580:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004584:	f04f 0901 	mov.w	r9, #1
 8004588:	4623      	mov	r3, r4
 800458a:	469a      	mov	sl, r3
 800458c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004590:	b10a      	cbz	r2, 8004596 <_vfiprintf_r+0xa2>
 8004592:	2a25      	cmp	r2, #37	; 0x25
 8004594:	d1f9      	bne.n	800458a <_vfiprintf_r+0x96>
 8004596:	ebba 0b04 	subs.w	fp, sl, r4
 800459a:	d00b      	beq.n	80045b4 <_vfiprintf_r+0xc0>
 800459c:	465b      	mov	r3, fp
 800459e:	4622      	mov	r2, r4
 80045a0:	4629      	mov	r1, r5
 80045a2:	4630      	mov	r0, r6
 80045a4:	f7ff ff93 	bl	80044ce <__sfputs_r>
 80045a8:	3001      	adds	r0, #1
 80045aa:	f000 80aa 	beq.w	8004702 <_vfiprintf_r+0x20e>
 80045ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045b0:	445a      	add	r2, fp
 80045b2:	9209      	str	r2, [sp, #36]	; 0x24
 80045b4:	f89a 3000 	ldrb.w	r3, [sl]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 80a2 	beq.w	8004702 <_vfiprintf_r+0x20e>
 80045be:	2300      	movs	r3, #0
 80045c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045c8:	f10a 0a01 	add.w	sl, sl, #1
 80045cc:	9304      	str	r3, [sp, #16]
 80045ce:	9307      	str	r3, [sp, #28]
 80045d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045d4:	931a      	str	r3, [sp, #104]	; 0x68
 80045d6:	4654      	mov	r4, sl
 80045d8:	2205      	movs	r2, #5
 80045da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045de:	4858      	ldr	r0, [pc, #352]	; (8004740 <_vfiprintf_r+0x24c>)
 80045e0:	f7fb fdfe 	bl	80001e0 <memchr>
 80045e4:	9a04      	ldr	r2, [sp, #16]
 80045e6:	b9d8      	cbnz	r0, 8004620 <_vfiprintf_r+0x12c>
 80045e8:	06d1      	lsls	r1, r2, #27
 80045ea:	bf44      	itt	mi
 80045ec:	2320      	movmi	r3, #32
 80045ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045f2:	0713      	lsls	r3, r2, #28
 80045f4:	bf44      	itt	mi
 80045f6:	232b      	movmi	r3, #43	; 0x2b
 80045f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045fc:	f89a 3000 	ldrb.w	r3, [sl]
 8004600:	2b2a      	cmp	r3, #42	; 0x2a
 8004602:	d015      	beq.n	8004630 <_vfiprintf_r+0x13c>
 8004604:	9a07      	ldr	r2, [sp, #28]
 8004606:	4654      	mov	r4, sl
 8004608:	2000      	movs	r0, #0
 800460a:	f04f 0c0a 	mov.w	ip, #10
 800460e:	4621      	mov	r1, r4
 8004610:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004614:	3b30      	subs	r3, #48	; 0x30
 8004616:	2b09      	cmp	r3, #9
 8004618:	d94e      	bls.n	80046b8 <_vfiprintf_r+0x1c4>
 800461a:	b1b0      	cbz	r0, 800464a <_vfiprintf_r+0x156>
 800461c:	9207      	str	r2, [sp, #28]
 800461e:	e014      	b.n	800464a <_vfiprintf_r+0x156>
 8004620:	eba0 0308 	sub.w	r3, r0, r8
 8004624:	fa09 f303 	lsl.w	r3, r9, r3
 8004628:	4313      	orrs	r3, r2
 800462a:	9304      	str	r3, [sp, #16]
 800462c:	46a2      	mov	sl, r4
 800462e:	e7d2      	b.n	80045d6 <_vfiprintf_r+0xe2>
 8004630:	9b03      	ldr	r3, [sp, #12]
 8004632:	1d19      	adds	r1, r3, #4
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	9103      	str	r1, [sp, #12]
 8004638:	2b00      	cmp	r3, #0
 800463a:	bfbb      	ittet	lt
 800463c:	425b      	neglt	r3, r3
 800463e:	f042 0202 	orrlt.w	r2, r2, #2
 8004642:	9307      	strge	r3, [sp, #28]
 8004644:	9307      	strlt	r3, [sp, #28]
 8004646:	bfb8      	it	lt
 8004648:	9204      	strlt	r2, [sp, #16]
 800464a:	7823      	ldrb	r3, [r4, #0]
 800464c:	2b2e      	cmp	r3, #46	; 0x2e
 800464e:	d10c      	bne.n	800466a <_vfiprintf_r+0x176>
 8004650:	7863      	ldrb	r3, [r4, #1]
 8004652:	2b2a      	cmp	r3, #42	; 0x2a
 8004654:	d135      	bne.n	80046c2 <_vfiprintf_r+0x1ce>
 8004656:	9b03      	ldr	r3, [sp, #12]
 8004658:	1d1a      	adds	r2, r3, #4
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	9203      	str	r2, [sp, #12]
 800465e:	2b00      	cmp	r3, #0
 8004660:	bfb8      	it	lt
 8004662:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004666:	3402      	adds	r4, #2
 8004668:	9305      	str	r3, [sp, #20]
 800466a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004750 <_vfiprintf_r+0x25c>
 800466e:	7821      	ldrb	r1, [r4, #0]
 8004670:	2203      	movs	r2, #3
 8004672:	4650      	mov	r0, sl
 8004674:	f7fb fdb4 	bl	80001e0 <memchr>
 8004678:	b140      	cbz	r0, 800468c <_vfiprintf_r+0x198>
 800467a:	2340      	movs	r3, #64	; 0x40
 800467c:	eba0 000a 	sub.w	r0, r0, sl
 8004680:	fa03 f000 	lsl.w	r0, r3, r0
 8004684:	9b04      	ldr	r3, [sp, #16]
 8004686:	4303      	orrs	r3, r0
 8004688:	3401      	adds	r4, #1
 800468a:	9304      	str	r3, [sp, #16]
 800468c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004690:	482c      	ldr	r0, [pc, #176]	; (8004744 <_vfiprintf_r+0x250>)
 8004692:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004696:	2206      	movs	r2, #6
 8004698:	f7fb fda2 	bl	80001e0 <memchr>
 800469c:	2800      	cmp	r0, #0
 800469e:	d03f      	beq.n	8004720 <_vfiprintf_r+0x22c>
 80046a0:	4b29      	ldr	r3, [pc, #164]	; (8004748 <_vfiprintf_r+0x254>)
 80046a2:	bb1b      	cbnz	r3, 80046ec <_vfiprintf_r+0x1f8>
 80046a4:	9b03      	ldr	r3, [sp, #12]
 80046a6:	3307      	adds	r3, #7
 80046a8:	f023 0307 	bic.w	r3, r3, #7
 80046ac:	3308      	adds	r3, #8
 80046ae:	9303      	str	r3, [sp, #12]
 80046b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046b2:	443b      	add	r3, r7
 80046b4:	9309      	str	r3, [sp, #36]	; 0x24
 80046b6:	e767      	b.n	8004588 <_vfiprintf_r+0x94>
 80046b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80046bc:	460c      	mov	r4, r1
 80046be:	2001      	movs	r0, #1
 80046c0:	e7a5      	b.n	800460e <_vfiprintf_r+0x11a>
 80046c2:	2300      	movs	r3, #0
 80046c4:	3401      	adds	r4, #1
 80046c6:	9305      	str	r3, [sp, #20]
 80046c8:	4619      	mov	r1, r3
 80046ca:	f04f 0c0a 	mov.w	ip, #10
 80046ce:	4620      	mov	r0, r4
 80046d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046d4:	3a30      	subs	r2, #48	; 0x30
 80046d6:	2a09      	cmp	r2, #9
 80046d8:	d903      	bls.n	80046e2 <_vfiprintf_r+0x1ee>
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0c5      	beq.n	800466a <_vfiprintf_r+0x176>
 80046de:	9105      	str	r1, [sp, #20]
 80046e0:	e7c3      	b.n	800466a <_vfiprintf_r+0x176>
 80046e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80046e6:	4604      	mov	r4, r0
 80046e8:	2301      	movs	r3, #1
 80046ea:	e7f0      	b.n	80046ce <_vfiprintf_r+0x1da>
 80046ec:	ab03      	add	r3, sp, #12
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	462a      	mov	r2, r5
 80046f2:	4b16      	ldr	r3, [pc, #88]	; (800474c <_vfiprintf_r+0x258>)
 80046f4:	a904      	add	r1, sp, #16
 80046f6:	4630      	mov	r0, r6
 80046f8:	f7fd fd00 	bl	80020fc <_printf_float>
 80046fc:	4607      	mov	r7, r0
 80046fe:	1c78      	adds	r0, r7, #1
 8004700:	d1d6      	bne.n	80046b0 <_vfiprintf_r+0x1bc>
 8004702:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004704:	07d9      	lsls	r1, r3, #31
 8004706:	d405      	bmi.n	8004714 <_vfiprintf_r+0x220>
 8004708:	89ab      	ldrh	r3, [r5, #12]
 800470a:	059a      	lsls	r2, r3, #22
 800470c:	d402      	bmi.n	8004714 <_vfiprintf_r+0x220>
 800470e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004710:	f7ff f9de 	bl	8003ad0 <__retarget_lock_release_recursive>
 8004714:	89ab      	ldrh	r3, [r5, #12]
 8004716:	065b      	lsls	r3, r3, #25
 8004718:	f53f af12 	bmi.w	8004540 <_vfiprintf_r+0x4c>
 800471c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800471e:	e711      	b.n	8004544 <_vfiprintf_r+0x50>
 8004720:	ab03      	add	r3, sp, #12
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	462a      	mov	r2, r5
 8004726:	4b09      	ldr	r3, [pc, #36]	; (800474c <_vfiprintf_r+0x258>)
 8004728:	a904      	add	r1, sp, #16
 800472a:	4630      	mov	r0, r6
 800472c:	f7fd ff8a 	bl	8002644 <_printf_i>
 8004730:	e7e4      	b.n	80046fc <_vfiprintf_r+0x208>
 8004732:	bf00      	nop
 8004734:	08004c7c 	.word	0x08004c7c
 8004738:	08004c9c 	.word	0x08004c9c
 800473c:	08004c5c 	.word	0x08004c5c
 8004740:	08004e14 	.word	0x08004e14
 8004744:	08004e1e 	.word	0x08004e1e
 8004748:	080020fd 	.word	0x080020fd
 800474c:	080044cf 	.word	0x080044cf
 8004750:	08004e1a 	.word	0x08004e1a

08004754 <_sbrk_r>:
 8004754:	b538      	push	{r3, r4, r5, lr}
 8004756:	4d06      	ldr	r5, [pc, #24]	; (8004770 <_sbrk_r+0x1c>)
 8004758:	2300      	movs	r3, #0
 800475a:	4604      	mov	r4, r0
 800475c:	4608      	mov	r0, r1
 800475e:	602b      	str	r3, [r5, #0]
 8004760:	f7fd fb02 	bl	8001d68 <_sbrk>
 8004764:	1c43      	adds	r3, r0, #1
 8004766:	d102      	bne.n	800476e <_sbrk_r+0x1a>
 8004768:	682b      	ldr	r3, [r5, #0]
 800476a:	b103      	cbz	r3, 800476e <_sbrk_r+0x1a>
 800476c:	6023      	str	r3, [r4, #0]
 800476e:	bd38      	pop	{r3, r4, r5, pc}
 8004770:	2000032c 	.word	0x2000032c

08004774 <__sread>:
 8004774:	b510      	push	{r4, lr}
 8004776:	460c      	mov	r4, r1
 8004778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800477c:	f000 f990 	bl	8004aa0 <_read_r>
 8004780:	2800      	cmp	r0, #0
 8004782:	bfab      	itete	ge
 8004784:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004786:	89a3      	ldrhlt	r3, [r4, #12]
 8004788:	181b      	addge	r3, r3, r0
 800478a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800478e:	bfac      	ite	ge
 8004790:	6563      	strge	r3, [r4, #84]	; 0x54
 8004792:	81a3      	strhlt	r3, [r4, #12]
 8004794:	bd10      	pop	{r4, pc}

08004796 <__swrite>:
 8004796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800479a:	461f      	mov	r7, r3
 800479c:	898b      	ldrh	r3, [r1, #12]
 800479e:	05db      	lsls	r3, r3, #23
 80047a0:	4605      	mov	r5, r0
 80047a2:	460c      	mov	r4, r1
 80047a4:	4616      	mov	r6, r2
 80047a6:	d505      	bpl.n	80047b4 <__swrite+0x1e>
 80047a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ac:	2302      	movs	r3, #2
 80047ae:	2200      	movs	r2, #0
 80047b0:	f000 f946 	bl	8004a40 <_lseek_r>
 80047b4:	89a3      	ldrh	r3, [r4, #12]
 80047b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047be:	81a3      	strh	r3, [r4, #12]
 80047c0:	4632      	mov	r2, r6
 80047c2:	463b      	mov	r3, r7
 80047c4:	4628      	mov	r0, r5
 80047c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047ca:	f7fc bf05 	b.w	80015d8 <_write_r>

080047ce <__sseek>:
 80047ce:	b510      	push	{r4, lr}
 80047d0:	460c      	mov	r4, r1
 80047d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047d6:	f000 f933 	bl	8004a40 <_lseek_r>
 80047da:	1c43      	adds	r3, r0, #1
 80047dc:	89a3      	ldrh	r3, [r4, #12]
 80047de:	bf15      	itete	ne
 80047e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80047e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80047e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80047ea:	81a3      	strheq	r3, [r4, #12]
 80047ec:	bf18      	it	ne
 80047ee:	81a3      	strhne	r3, [r4, #12]
 80047f0:	bd10      	pop	{r4, pc}

080047f2 <__sclose>:
 80047f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047f6:	f000 b8df 	b.w	80049b8 <_close_r>
	...

080047fc <__swbuf_r>:
 80047fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fe:	460e      	mov	r6, r1
 8004800:	4614      	mov	r4, r2
 8004802:	4605      	mov	r5, r0
 8004804:	b118      	cbz	r0, 800480e <__swbuf_r+0x12>
 8004806:	6983      	ldr	r3, [r0, #24]
 8004808:	b90b      	cbnz	r3, 800480e <__swbuf_r+0x12>
 800480a:	f7ff f8bd 	bl	8003988 <__sinit>
 800480e:	4b21      	ldr	r3, [pc, #132]	; (8004894 <__swbuf_r+0x98>)
 8004810:	429c      	cmp	r4, r3
 8004812:	d12b      	bne.n	800486c <__swbuf_r+0x70>
 8004814:	686c      	ldr	r4, [r5, #4]
 8004816:	69a3      	ldr	r3, [r4, #24]
 8004818:	60a3      	str	r3, [r4, #8]
 800481a:	89a3      	ldrh	r3, [r4, #12]
 800481c:	071a      	lsls	r2, r3, #28
 800481e:	d52f      	bpl.n	8004880 <__swbuf_r+0x84>
 8004820:	6923      	ldr	r3, [r4, #16]
 8004822:	b36b      	cbz	r3, 8004880 <__swbuf_r+0x84>
 8004824:	6923      	ldr	r3, [r4, #16]
 8004826:	6820      	ldr	r0, [r4, #0]
 8004828:	1ac0      	subs	r0, r0, r3
 800482a:	6963      	ldr	r3, [r4, #20]
 800482c:	b2f6      	uxtb	r6, r6
 800482e:	4283      	cmp	r3, r0
 8004830:	4637      	mov	r7, r6
 8004832:	dc04      	bgt.n	800483e <__swbuf_r+0x42>
 8004834:	4621      	mov	r1, r4
 8004836:	4628      	mov	r0, r5
 8004838:	f7ff f812 	bl	8003860 <_fflush_r>
 800483c:	bb30      	cbnz	r0, 800488c <__swbuf_r+0x90>
 800483e:	68a3      	ldr	r3, [r4, #8]
 8004840:	3b01      	subs	r3, #1
 8004842:	60a3      	str	r3, [r4, #8]
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	6022      	str	r2, [r4, #0]
 800484a:	701e      	strb	r6, [r3, #0]
 800484c:	6963      	ldr	r3, [r4, #20]
 800484e:	3001      	adds	r0, #1
 8004850:	4283      	cmp	r3, r0
 8004852:	d004      	beq.n	800485e <__swbuf_r+0x62>
 8004854:	89a3      	ldrh	r3, [r4, #12]
 8004856:	07db      	lsls	r3, r3, #31
 8004858:	d506      	bpl.n	8004868 <__swbuf_r+0x6c>
 800485a:	2e0a      	cmp	r6, #10
 800485c:	d104      	bne.n	8004868 <__swbuf_r+0x6c>
 800485e:	4621      	mov	r1, r4
 8004860:	4628      	mov	r0, r5
 8004862:	f7fe fffd 	bl	8003860 <_fflush_r>
 8004866:	b988      	cbnz	r0, 800488c <__swbuf_r+0x90>
 8004868:	4638      	mov	r0, r7
 800486a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800486c:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <__swbuf_r+0x9c>)
 800486e:	429c      	cmp	r4, r3
 8004870:	d101      	bne.n	8004876 <__swbuf_r+0x7a>
 8004872:	68ac      	ldr	r4, [r5, #8]
 8004874:	e7cf      	b.n	8004816 <__swbuf_r+0x1a>
 8004876:	4b09      	ldr	r3, [pc, #36]	; (800489c <__swbuf_r+0xa0>)
 8004878:	429c      	cmp	r4, r3
 800487a:	bf08      	it	eq
 800487c:	68ec      	ldreq	r4, [r5, #12]
 800487e:	e7ca      	b.n	8004816 <__swbuf_r+0x1a>
 8004880:	4621      	mov	r1, r4
 8004882:	4628      	mov	r0, r5
 8004884:	f000 f80c 	bl	80048a0 <__swsetup_r>
 8004888:	2800      	cmp	r0, #0
 800488a:	d0cb      	beq.n	8004824 <__swbuf_r+0x28>
 800488c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004890:	e7ea      	b.n	8004868 <__swbuf_r+0x6c>
 8004892:	bf00      	nop
 8004894:	08004c7c 	.word	0x08004c7c
 8004898:	08004c9c 	.word	0x08004c9c
 800489c:	08004c5c 	.word	0x08004c5c

080048a0 <__swsetup_r>:
 80048a0:	4b32      	ldr	r3, [pc, #200]	; (800496c <__swsetup_r+0xcc>)
 80048a2:	b570      	push	{r4, r5, r6, lr}
 80048a4:	681d      	ldr	r5, [r3, #0]
 80048a6:	4606      	mov	r6, r0
 80048a8:	460c      	mov	r4, r1
 80048aa:	b125      	cbz	r5, 80048b6 <__swsetup_r+0x16>
 80048ac:	69ab      	ldr	r3, [r5, #24]
 80048ae:	b913      	cbnz	r3, 80048b6 <__swsetup_r+0x16>
 80048b0:	4628      	mov	r0, r5
 80048b2:	f7ff f869 	bl	8003988 <__sinit>
 80048b6:	4b2e      	ldr	r3, [pc, #184]	; (8004970 <__swsetup_r+0xd0>)
 80048b8:	429c      	cmp	r4, r3
 80048ba:	d10f      	bne.n	80048dc <__swsetup_r+0x3c>
 80048bc:	686c      	ldr	r4, [r5, #4]
 80048be:	89a3      	ldrh	r3, [r4, #12]
 80048c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048c4:	0719      	lsls	r1, r3, #28
 80048c6:	d42c      	bmi.n	8004922 <__swsetup_r+0x82>
 80048c8:	06dd      	lsls	r5, r3, #27
 80048ca:	d411      	bmi.n	80048f0 <__swsetup_r+0x50>
 80048cc:	2309      	movs	r3, #9
 80048ce:	6033      	str	r3, [r6, #0]
 80048d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80048d4:	81a3      	strh	r3, [r4, #12]
 80048d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048da:	e03e      	b.n	800495a <__swsetup_r+0xba>
 80048dc:	4b25      	ldr	r3, [pc, #148]	; (8004974 <__swsetup_r+0xd4>)
 80048de:	429c      	cmp	r4, r3
 80048e0:	d101      	bne.n	80048e6 <__swsetup_r+0x46>
 80048e2:	68ac      	ldr	r4, [r5, #8]
 80048e4:	e7eb      	b.n	80048be <__swsetup_r+0x1e>
 80048e6:	4b24      	ldr	r3, [pc, #144]	; (8004978 <__swsetup_r+0xd8>)
 80048e8:	429c      	cmp	r4, r3
 80048ea:	bf08      	it	eq
 80048ec:	68ec      	ldreq	r4, [r5, #12]
 80048ee:	e7e6      	b.n	80048be <__swsetup_r+0x1e>
 80048f0:	0758      	lsls	r0, r3, #29
 80048f2:	d512      	bpl.n	800491a <__swsetup_r+0x7a>
 80048f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048f6:	b141      	cbz	r1, 800490a <__swsetup_r+0x6a>
 80048f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048fc:	4299      	cmp	r1, r3
 80048fe:	d002      	beq.n	8004906 <__swsetup_r+0x66>
 8004900:	4630      	mov	r0, r6
 8004902:	f7ff fced 	bl	80042e0 <_free_r>
 8004906:	2300      	movs	r3, #0
 8004908:	6363      	str	r3, [r4, #52]	; 0x34
 800490a:	89a3      	ldrh	r3, [r4, #12]
 800490c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004910:	81a3      	strh	r3, [r4, #12]
 8004912:	2300      	movs	r3, #0
 8004914:	6063      	str	r3, [r4, #4]
 8004916:	6923      	ldr	r3, [r4, #16]
 8004918:	6023      	str	r3, [r4, #0]
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	f043 0308 	orr.w	r3, r3, #8
 8004920:	81a3      	strh	r3, [r4, #12]
 8004922:	6923      	ldr	r3, [r4, #16]
 8004924:	b94b      	cbnz	r3, 800493a <__swsetup_r+0x9a>
 8004926:	89a3      	ldrh	r3, [r4, #12]
 8004928:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800492c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004930:	d003      	beq.n	800493a <__swsetup_r+0x9a>
 8004932:	4621      	mov	r1, r4
 8004934:	4630      	mov	r0, r6
 8004936:	f7ff f8f1 	bl	8003b1c <__smakebuf_r>
 800493a:	89a0      	ldrh	r0, [r4, #12]
 800493c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004940:	f010 0301 	ands.w	r3, r0, #1
 8004944:	d00a      	beq.n	800495c <__swsetup_r+0xbc>
 8004946:	2300      	movs	r3, #0
 8004948:	60a3      	str	r3, [r4, #8]
 800494a:	6963      	ldr	r3, [r4, #20]
 800494c:	425b      	negs	r3, r3
 800494e:	61a3      	str	r3, [r4, #24]
 8004950:	6923      	ldr	r3, [r4, #16]
 8004952:	b943      	cbnz	r3, 8004966 <__swsetup_r+0xc6>
 8004954:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004958:	d1ba      	bne.n	80048d0 <__swsetup_r+0x30>
 800495a:	bd70      	pop	{r4, r5, r6, pc}
 800495c:	0781      	lsls	r1, r0, #30
 800495e:	bf58      	it	pl
 8004960:	6963      	ldrpl	r3, [r4, #20]
 8004962:	60a3      	str	r3, [r4, #8]
 8004964:	e7f4      	b.n	8004950 <__swsetup_r+0xb0>
 8004966:	2000      	movs	r0, #0
 8004968:	e7f7      	b.n	800495a <__swsetup_r+0xba>
 800496a:	bf00      	nop
 800496c:	2000002c 	.word	0x2000002c
 8004970:	08004c7c 	.word	0x08004c7c
 8004974:	08004c9c 	.word	0x08004c9c
 8004978:	08004c5c 	.word	0x08004c5c

0800497c <__assert_func>:
 800497c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800497e:	4614      	mov	r4, r2
 8004980:	461a      	mov	r2, r3
 8004982:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <__assert_func+0x2c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4605      	mov	r5, r0
 8004988:	68d8      	ldr	r0, [r3, #12]
 800498a:	b14c      	cbz	r4, 80049a0 <__assert_func+0x24>
 800498c:	4b07      	ldr	r3, [pc, #28]	; (80049ac <__assert_func+0x30>)
 800498e:	9100      	str	r1, [sp, #0]
 8004990:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004994:	4906      	ldr	r1, [pc, #24]	; (80049b0 <__assert_func+0x34>)
 8004996:	462b      	mov	r3, r5
 8004998:	f000 f81e 	bl	80049d8 <fiprintf>
 800499c:	f000 f89f 	bl	8004ade <abort>
 80049a0:	4b04      	ldr	r3, [pc, #16]	; (80049b4 <__assert_func+0x38>)
 80049a2:	461c      	mov	r4, r3
 80049a4:	e7f3      	b.n	800498e <__assert_func+0x12>
 80049a6:	bf00      	nop
 80049a8:	2000002c 	.word	0x2000002c
 80049ac:	08004e25 	.word	0x08004e25
 80049b0:	08004e32 	.word	0x08004e32
 80049b4:	08004e60 	.word	0x08004e60

080049b8 <_close_r>:
 80049b8:	b538      	push	{r3, r4, r5, lr}
 80049ba:	4d06      	ldr	r5, [pc, #24]	; (80049d4 <_close_r+0x1c>)
 80049bc:	2300      	movs	r3, #0
 80049be:	4604      	mov	r4, r0
 80049c0:	4608      	mov	r0, r1
 80049c2:	602b      	str	r3, [r5, #0]
 80049c4:	f7fd f99b 	bl	8001cfe <_close>
 80049c8:	1c43      	adds	r3, r0, #1
 80049ca:	d102      	bne.n	80049d2 <_close_r+0x1a>
 80049cc:	682b      	ldr	r3, [r5, #0]
 80049ce:	b103      	cbz	r3, 80049d2 <_close_r+0x1a>
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	bd38      	pop	{r3, r4, r5, pc}
 80049d4:	2000032c 	.word	0x2000032c

080049d8 <fiprintf>:
 80049d8:	b40e      	push	{r1, r2, r3}
 80049da:	b503      	push	{r0, r1, lr}
 80049dc:	4601      	mov	r1, r0
 80049de:	ab03      	add	r3, sp, #12
 80049e0:	4805      	ldr	r0, [pc, #20]	; (80049f8 <fiprintf+0x20>)
 80049e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80049e6:	6800      	ldr	r0, [r0, #0]
 80049e8:	9301      	str	r3, [sp, #4]
 80049ea:	f7ff fd83 	bl	80044f4 <_vfiprintf_r>
 80049ee:	b002      	add	sp, #8
 80049f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80049f4:	b003      	add	sp, #12
 80049f6:	4770      	bx	lr
 80049f8:	2000002c 	.word	0x2000002c

080049fc <_fstat_r>:
 80049fc:	b538      	push	{r3, r4, r5, lr}
 80049fe:	4d07      	ldr	r5, [pc, #28]	; (8004a1c <_fstat_r+0x20>)
 8004a00:	2300      	movs	r3, #0
 8004a02:	4604      	mov	r4, r0
 8004a04:	4608      	mov	r0, r1
 8004a06:	4611      	mov	r1, r2
 8004a08:	602b      	str	r3, [r5, #0]
 8004a0a:	f7fd f984 	bl	8001d16 <_fstat>
 8004a0e:	1c43      	adds	r3, r0, #1
 8004a10:	d102      	bne.n	8004a18 <_fstat_r+0x1c>
 8004a12:	682b      	ldr	r3, [r5, #0]
 8004a14:	b103      	cbz	r3, 8004a18 <_fstat_r+0x1c>
 8004a16:	6023      	str	r3, [r4, #0]
 8004a18:	bd38      	pop	{r3, r4, r5, pc}
 8004a1a:	bf00      	nop
 8004a1c:	2000032c 	.word	0x2000032c

08004a20 <_isatty_r>:
 8004a20:	b538      	push	{r3, r4, r5, lr}
 8004a22:	4d06      	ldr	r5, [pc, #24]	; (8004a3c <_isatty_r+0x1c>)
 8004a24:	2300      	movs	r3, #0
 8004a26:	4604      	mov	r4, r0
 8004a28:	4608      	mov	r0, r1
 8004a2a:	602b      	str	r3, [r5, #0]
 8004a2c:	f7fd f983 	bl	8001d36 <_isatty>
 8004a30:	1c43      	adds	r3, r0, #1
 8004a32:	d102      	bne.n	8004a3a <_isatty_r+0x1a>
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	b103      	cbz	r3, 8004a3a <_isatty_r+0x1a>
 8004a38:	6023      	str	r3, [r4, #0]
 8004a3a:	bd38      	pop	{r3, r4, r5, pc}
 8004a3c:	2000032c 	.word	0x2000032c

08004a40 <_lseek_r>:
 8004a40:	b538      	push	{r3, r4, r5, lr}
 8004a42:	4d07      	ldr	r5, [pc, #28]	; (8004a60 <_lseek_r+0x20>)
 8004a44:	4604      	mov	r4, r0
 8004a46:	4608      	mov	r0, r1
 8004a48:	4611      	mov	r1, r2
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	602a      	str	r2, [r5, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f7fd f97c 	bl	8001d4c <_lseek>
 8004a54:	1c43      	adds	r3, r0, #1
 8004a56:	d102      	bne.n	8004a5e <_lseek_r+0x1e>
 8004a58:	682b      	ldr	r3, [r5, #0]
 8004a5a:	b103      	cbz	r3, 8004a5e <_lseek_r+0x1e>
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	bd38      	pop	{r3, r4, r5, pc}
 8004a60:	2000032c 	.word	0x2000032c

08004a64 <__ascii_mbtowc>:
 8004a64:	b082      	sub	sp, #8
 8004a66:	b901      	cbnz	r1, 8004a6a <__ascii_mbtowc+0x6>
 8004a68:	a901      	add	r1, sp, #4
 8004a6a:	b142      	cbz	r2, 8004a7e <__ascii_mbtowc+0x1a>
 8004a6c:	b14b      	cbz	r3, 8004a82 <__ascii_mbtowc+0x1e>
 8004a6e:	7813      	ldrb	r3, [r2, #0]
 8004a70:	600b      	str	r3, [r1, #0]
 8004a72:	7812      	ldrb	r2, [r2, #0]
 8004a74:	1e10      	subs	r0, r2, #0
 8004a76:	bf18      	it	ne
 8004a78:	2001      	movne	r0, #1
 8004a7a:	b002      	add	sp, #8
 8004a7c:	4770      	bx	lr
 8004a7e:	4610      	mov	r0, r2
 8004a80:	e7fb      	b.n	8004a7a <__ascii_mbtowc+0x16>
 8004a82:	f06f 0001 	mvn.w	r0, #1
 8004a86:	e7f8      	b.n	8004a7a <__ascii_mbtowc+0x16>

08004a88 <__malloc_lock>:
 8004a88:	4801      	ldr	r0, [pc, #4]	; (8004a90 <__malloc_lock+0x8>)
 8004a8a:	f7ff b820 	b.w	8003ace <__retarget_lock_acquire_recursive>
 8004a8e:	bf00      	nop
 8004a90:	20000320 	.word	0x20000320

08004a94 <__malloc_unlock>:
 8004a94:	4801      	ldr	r0, [pc, #4]	; (8004a9c <__malloc_unlock+0x8>)
 8004a96:	f7ff b81b 	b.w	8003ad0 <__retarget_lock_release_recursive>
 8004a9a:	bf00      	nop
 8004a9c:	20000320 	.word	0x20000320

08004aa0 <_read_r>:
 8004aa0:	b538      	push	{r3, r4, r5, lr}
 8004aa2:	4d07      	ldr	r5, [pc, #28]	; (8004ac0 <_read_r+0x20>)
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	4608      	mov	r0, r1
 8004aa8:	4611      	mov	r1, r2
 8004aaa:	2200      	movs	r2, #0
 8004aac:	602a      	str	r2, [r5, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f7fd f908 	bl	8001cc4 <_read>
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	d102      	bne.n	8004abe <_read_r+0x1e>
 8004ab8:	682b      	ldr	r3, [r5, #0]
 8004aba:	b103      	cbz	r3, 8004abe <_read_r+0x1e>
 8004abc:	6023      	str	r3, [r4, #0]
 8004abe:	bd38      	pop	{r3, r4, r5, pc}
 8004ac0:	2000032c 	.word	0x2000032c

08004ac4 <__ascii_wctomb>:
 8004ac4:	b149      	cbz	r1, 8004ada <__ascii_wctomb+0x16>
 8004ac6:	2aff      	cmp	r2, #255	; 0xff
 8004ac8:	bf85      	ittet	hi
 8004aca:	238a      	movhi	r3, #138	; 0x8a
 8004acc:	6003      	strhi	r3, [r0, #0]
 8004ace:	700a      	strbls	r2, [r1, #0]
 8004ad0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8004ad4:	bf98      	it	ls
 8004ad6:	2001      	movls	r0, #1
 8004ad8:	4770      	bx	lr
 8004ada:	4608      	mov	r0, r1
 8004adc:	4770      	bx	lr

08004ade <abort>:
 8004ade:	b508      	push	{r3, lr}
 8004ae0:	2006      	movs	r0, #6
 8004ae2:	f000 f82b 	bl	8004b3c <raise>
 8004ae6:	2001      	movs	r0, #1
 8004ae8:	f7fd f8e2 	bl	8001cb0 <_exit>

08004aec <_raise_r>:
 8004aec:	291f      	cmp	r1, #31
 8004aee:	b538      	push	{r3, r4, r5, lr}
 8004af0:	4604      	mov	r4, r0
 8004af2:	460d      	mov	r5, r1
 8004af4:	d904      	bls.n	8004b00 <_raise_r+0x14>
 8004af6:	2316      	movs	r3, #22
 8004af8:	6003      	str	r3, [r0, #0]
 8004afa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004afe:	bd38      	pop	{r3, r4, r5, pc}
 8004b00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004b02:	b112      	cbz	r2, 8004b0a <_raise_r+0x1e>
 8004b04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004b08:	b94b      	cbnz	r3, 8004b1e <_raise_r+0x32>
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	f000 f830 	bl	8004b70 <_getpid_r>
 8004b10:	462a      	mov	r2, r5
 8004b12:	4601      	mov	r1, r0
 8004b14:	4620      	mov	r0, r4
 8004b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b1a:	f000 b817 	b.w	8004b4c <_kill_r>
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d00a      	beq.n	8004b38 <_raise_r+0x4c>
 8004b22:	1c59      	adds	r1, r3, #1
 8004b24:	d103      	bne.n	8004b2e <_raise_r+0x42>
 8004b26:	2316      	movs	r3, #22
 8004b28:	6003      	str	r3, [r0, #0]
 8004b2a:	2001      	movs	r0, #1
 8004b2c:	e7e7      	b.n	8004afe <_raise_r+0x12>
 8004b2e:	2400      	movs	r4, #0
 8004b30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004b34:	4628      	mov	r0, r5
 8004b36:	4798      	blx	r3
 8004b38:	2000      	movs	r0, #0
 8004b3a:	e7e0      	b.n	8004afe <_raise_r+0x12>

08004b3c <raise>:
 8004b3c:	4b02      	ldr	r3, [pc, #8]	; (8004b48 <raise+0xc>)
 8004b3e:	4601      	mov	r1, r0
 8004b40:	6818      	ldr	r0, [r3, #0]
 8004b42:	f7ff bfd3 	b.w	8004aec <_raise_r>
 8004b46:	bf00      	nop
 8004b48:	2000002c 	.word	0x2000002c

08004b4c <_kill_r>:
 8004b4c:	b538      	push	{r3, r4, r5, lr}
 8004b4e:	4d07      	ldr	r5, [pc, #28]	; (8004b6c <_kill_r+0x20>)
 8004b50:	2300      	movs	r3, #0
 8004b52:	4604      	mov	r4, r0
 8004b54:	4608      	mov	r0, r1
 8004b56:	4611      	mov	r1, r2
 8004b58:	602b      	str	r3, [r5, #0]
 8004b5a:	f7fd f899 	bl	8001c90 <_kill>
 8004b5e:	1c43      	adds	r3, r0, #1
 8004b60:	d102      	bne.n	8004b68 <_kill_r+0x1c>
 8004b62:	682b      	ldr	r3, [r5, #0]
 8004b64:	b103      	cbz	r3, 8004b68 <_kill_r+0x1c>
 8004b66:	6023      	str	r3, [r4, #0]
 8004b68:	bd38      	pop	{r3, r4, r5, pc}
 8004b6a:	bf00      	nop
 8004b6c:	2000032c 	.word	0x2000032c

08004b70 <_getpid_r>:
 8004b70:	f7fd b886 	b.w	8001c80 <_getpid>

08004b74 <_init>:
 8004b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b76:	bf00      	nop
 8004b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7a:	bc08      	pop	{r3}
 8004b7c:	469e      	mov	lr, r3
 8004b7e:	4770      	bx	lr

08004b80 <_fini>:
 8004b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b82:	bf00      	nop
 8004b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b86:	bc08      	pop	{r3}
 8004b88:	469e      	mov	lr, r3
 8004b8a:	4770      	bx	lr
