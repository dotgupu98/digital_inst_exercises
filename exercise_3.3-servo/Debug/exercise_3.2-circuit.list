
exercise_3.2-circuit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006068  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  080061f8  080061f8  000161f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067c4  080067c4  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  080067c4  080067c4  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067c4  080067c4  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067c4  080067c4  000167c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067c8  080067c8  000167c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080067cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  200001fc  080069c8  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  080069c8  00020548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a444  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001834  00000000  00000000  0002a670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  0002bea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  0002cb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001127d  00000000  00000000  0002d758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009525  00000000  00000000  0003e9d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005c1aa  00000000  00000000  00047efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a40a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b10  00000000  00000000  000a40f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080061e0 	.word	0x080061e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	080061e0 	.word	0x080061e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_AUTOINJECMODE(ADC_InitStruct->ADC_AutoInjMode));
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfRegChannel));

  /*---------------------------- ADCx CFGR Configuration -----------------*/
  /* Get the ADCx CFGR value */
  tmpreg1 = ADCx->CFGR;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	60fb      	str	r3, [r7, #12]
  /* Clear SCAN bit */
  tmpreg1 &= CFGR_CLEAR_Mask; 
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <ADC_Init+0x80>)
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
  ADC_InitStruct->ADC_Resolution|                 
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 8000cac:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	689b      	ldr	r3, [r3, #8]
  ADC_InitStruct->ADC_Resolution|                 
 8000cb2:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	68db      	ldr	r3, [r3, #12]
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
 8000cb8:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_DataAlign|                 
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	691b      	ldr	r3, [r3, #16]
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
 8000cbe:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_OverrunMode|        
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	695b      	ldr	r3, [r3, #20]
  ADC_InitStruct->ADC_DataAlign|                 
 8000cc4:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_AutoInjMode;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	699b      	ldr	r3, [r3, #24]
  ADC_InitStruct->ADC_OverrunMode|        
 8000cca:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx CFGR */
  ADCx->CFGR = tmpreg1;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	60da      	str	r2, [r3, #12]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= ~(uint32_t)(ADC_SQR1_L);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f023 030f 	bic.w	r3, r3, #15
 8000ce4:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfRegChannel value */
  tmpreg1 |= (uint32_t) (ADC_InitStruct->ADC_NbrOfRegChannel - 1);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	7f1b      	ldrb	r3, [r3, #28]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	461a      	mov	r2, r3
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1; 
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	631a      	str	r2, [r3, #48]	; 0x30
   
}  
 8000cfa:	bf00      	nop
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	fdffc007 	.word	0xfdffc007

08000d0c <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;                 
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	605a      	str	r2, [r3, #4]
  ADC_InitStruct->ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;         
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  ADC_InitStruct->ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;                 
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  ADC_InitStruct->ADC_OverrunMode = DISABLE;   
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
  ADC_InitStruct->ADC_AutoInjMode = DISABLE;  
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  ADC_InitStruct->ADC_NbrOfRegChannel = 1; 
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2201      	movs	r2, #1
 8000d42:	771a      	strb	r2, [r3, #28]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d5c:	78fb      	ldrb	r3, [r7, #3]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d006      	beq.n	8000d70 <ADC_Cmd+0x20>
  {
    /* Set the ADEN bit */
    ADCx->CR |= ADC_CR_ADEN;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	f043 0201 	orr.w	r2, r3, #1
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral: Set the ADDIS bit */
    ADCx->CR |= ADC_CR_ADDIS;
  }
}
 8000d6e:	e005      	b.n	8000d7c <ADC_Cmd+0x2c>
    ADCx->CR |= ADC_CR_ADDIS;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f043 0202 	orr.w	r2, r3, #2
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADCAL bit */
  ADCx->CR |= ADC_CR_ADCAL;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <ADC_SelectCalibrationMode>:
  *          @arg ADC_CalibrationMode_Single: to select the calibration for single channel
  *          @arg ADC_CalibrationMode_Differential: to select the calibration for differential channel         
  * @retval None
  */
void ADC_SelectCalibrationMode(ADC_TypeDef* ADCx, uint32_t ADC_CalibrationMode)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CALIBRATION_MODE(ADC_CalibrationMode));
  /* Set or Reset the ADCALDIF bit */
  ADCx->CR &= (~ADC_CR_ADCALDIF);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
  ADCx->CR |= ADC_CalibrationMode;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	609a      	str	r2, [r3, #8]

}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b085      	sub	sp, #20
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000dde:	2300      	movs	r3, #0
 8000de0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR & ADC_CR_ADCAL) != (uint32_t)RESET)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	da02      	bge.n	8000df0 <ADC_GetCalibrationStatus+0x1a>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 8000dea:	2301      	movs	r3, #1
 8000dec:	73fb      	strb	r3, [r7, #15]
 8000dee:	e001      	b.n	8000df4 <ADC_GetCalibrationStatus+0x1e>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <ADC_GetDisableCmdStatus>:
  * @brief  Gets the selected ADC disable command Status.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The new state of ADC ADC disable command (SET or RESET).
  */
FlagStatus ADC_GetDisableCmdStatus(ADC_TypeDef* ADCx)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b085      	sub	sp, #20
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of ADDIS bit */
  if ((ADCx->CR & ADC_CR_ADDIS) != (uint32_t)RESET)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d002      	beq.n	8000e20 <ADC_GetDisableCmdStatus+0x1e>
  {
    /* ADDIS bit is set */
    bitstatus = SET;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	73fb      	strb	r3, [r7, #15]
 8000e1e:	e001      	b.n	8000e24 <ADC_GetDisableCmdStatus+0x22>
  }
  else
  {
    /* ADDIS bit is reset */
    bitstatus = RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADDIS bit status */
  return  bitstatus;
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <ADC_VoltageRegulatorCmd>:
  * @param  NewState: new state of the ADCx Voltage Regulator.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VoltageRegulatorCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* set the intermediate state before moving the ADC voltage regulator 
  from enable state to disable state or from disable state to enable state */
  ADCx->CR &= ~(ADC_CR_ADVREGEN);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	609a      	str	r2, [r3, #8]
  
  if (NewState != DISABLE)
 8000e4a:	78fb      	ldrb	r3, [r7, #3]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d006      	beq.n	8000e5e <ADC_VoltageRegulatorCmd+0x2c>
  {
    /* Set the ADVREGEN bit 0 */
    ADCx->CR |= ADC_CR_ADVREGEN_0;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
  else
  {
    /* Set the ADVREGEN bit 1 */
    ADCx->CR |=ADC_CR_ADVREGEN_1;
  }
}
 8000e5c:	e005      	b.n	8000e6a <ADC_VoltageRegulatorCmd+0x38>
    ADCx->CR |=ADC_CR_ADVREGEN_1;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	609a      	str	r2, [r3, #8]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <ADC_VrefintCmd>:
  * @param  NewState: new state of the Vrefint.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VrefintCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e8a:	d003      	beq.n	8000e94 <ADC_VrefintCmd+0x1c>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a15      	ldr	r2, [pc, #84]	; (8000ee4 <ADC_VrefintCmd+0x6c>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d110      	bne.n	8000eb6 <ADC_VrefintCmd+0x3e>
  {
    if (NewState != DISABLE)
 8000e94:	78fb      	ldrb	r3, [r7, #3]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d006      	beq.n	8000ea8 <ADC_VrefintCmd+0x30>
    {
      /* Enable the Vrefint channel*/
      ADC1_2->CCR |= ADC12_CCR_VREFEN;
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <ADC_VrefintCmd+0x70>)
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <ADC_VrefintCmd+0x70>)
 8000ea0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ea4:	6093      	str	r3, [r2, #8]
    if (NewState != DISABLE)
 8000ea6:	e017      	b.n	8000ed8 <ADC_VrefintCmd+0x60>
    }
    else
    {
      /* Disable the Vrefint channel*/
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_VREFEN;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <ADC_VrefintCmd+0x70>)
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <ADC_VrefintCmd+0x70>)
 8000eae:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000eb2:	6093      	str	r3, [r2, #8]
    if (NewState != DISABLE)
 8000eb4:	e010      	b.n	8000ed8 <ADC_VrefintCmd+0x60>
    }
  }
  else
  {
    if (NewState != DISABLE)
 8000eb6:	78fb      	ldrb	r3, [r7, #3]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d006      	beq.n	8000eca <ADC_VrefintCmd+0x52>
    {
      /* Enable the Vrefint channel*/
      ADC3_4->CCR |= ADC34_CCR_VREFEN;
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <ADC_VrefintCmd+0x74>)
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <ADC_VrefintCmd+0x74>)
 8000ec2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ec6:	6093      	str	r3, [r2, #8]
    {
      /* Disable the Vrefint channel*/
      ADC3_4->CCR &= ~(uint32_t)ADC34_CCR_VREFEN;
    }
  }
}
 8000ec8:	e006      	b.n	8000ed8 <ADC_VrefintCmd+0x60>
      ADC3_4->CCR &= ~(uint32_t)ADC34_CCR_VREFEN;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <ADC_VrefintCmd+0x74>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	4a07      	ldr	r2, [pc, #28]	; (8000eec <ADC_VrefintCmd+0x74>)
 8000ed0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000ed4:	6093      	str	r3, [r2, #8]
}
 8000ed6:	e7ff      	b.n	8000ed8 <ADC_VrefintCmd+0x60>
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	50000100 	.word	0x50000100
 8000ee8:	50000300 	.word	0x50000300
 8000eec:	50000700 	.word	0x50000700

08000ef0 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	4608      	mov	r0, r1
 8000efa:	4611      	mov	r1, r2
 8000efc:	461a      	mov	r2, r3
 8000efe:	4603      	mov	r3, r0
 8000f00:	70fb      	strb	r3, [r7, #3]
 8000f02:	460b      	mov	r3, r1
 8000f04:	70bb      	strb	r3, [r7, #2]
 8000f06:	4613      	mov	r3, r2
 8000f08:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 8000f12:	78bb      	ldrb	r3, [r7, #2]
 8000f14:	2b04      	cmp	r3, #4
 8000f16:	d821      	bhi.n	8000f5c <ADC_RegularChannelConfig+0x6c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 8000f1e:	78ba      	ldrb	r2, [r7, #2]
 8000f20:	4613      	mov	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	461a      	mov	r2, r3
 8000f2a:	231f      	movs	r3, #31
 8000f2c:	4093      	lsls	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	4013      	ands	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 8000f3a:	78f9      	ldrb	r1, [r7, #3]
 8000f3c:	78ba      	ldrb	r2, [r7, #2]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	4413      	add	r3, r2
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	631a      	str	r2, [r3, #48]	; 0x30
 8000f5a:	e074      	b.n	8001046 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 8000f5c:	78bb      	ldrb	r3, [r7, #2]
 8000f5e:	2b09      	cmp	r3, #9
 8000f60:	d823      	bhi.n	8000faa <ADC_RegularChannelConfig+0xba>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f66:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 8000f68:	78bb      	ldrb	r3, [r7, #2]
 8000f6a:	1f5a      	subs	r2, r3, #5
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	461a      	mov	r2, r3
 8000f76:	231f      	movs	r3, #31
 8000f78:	4093      	lsls	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	4013      	ands	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 8000f86:	78f9      	ldrb	r1, [r7, #3]
 8000f88:	78bb      	ldrb	r3, [r7, #2]
 8000f8a:	1f5a      	subs	r2, r3, #5
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa01 f303 	lsl.w	r3, r1, r3
 8000f98:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	635a      	str	r2, [r3, #52]	; 0x34
 8000fa8:	e04d      	b.n	8001046 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 8000faa:	78bb      	ldrb	r3, [r7, #2]
 8000fac:	2b0e      	cmp	r3, #14
 8000fae:	d825      	bhi.n	8000ffc <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 8000fb6:	78bb      	ldrb	r3, [r7, #2]
 8000fb8:	f1a3 020a 	sub.w	r2, r3, #10
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4413      	add	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	231f      	movs	r3, #31
 8000fc8:	4093      	lsls	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 8000fd6:	78f9      	ldrb	r1, [r7, #3]
 8000fd8:	78bb      	ldrb	r3, [r7, #2]
 8000fda:	f1a3 020a 	sub.w	r2, r3, #10
 8000fde:	4613      	mov	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	639a      	str	r2, [r3, #56]	; 0x38
 8000ffa:	e024      	b.n	8001046 <ADC_RegularChannelConfig+0x156>
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001000:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 8001002:	78bb      	ldrb	r3, [r7, #2]
 8001004:	f1a3 020f 	sub.w	r2, r3, #15
 8001008:	4613      	mov	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	461a      	mov	r2, r3
 8001012:	231f      	movs	r3, #31
 8001014:	4093      	lsls	r3, r2
 8001016:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	43db      	mvns	r3, r3
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	4013      	ands	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 8001022:	78f9      	ldrb	r1, [r7, #3]
 8001024:	78bb      	ldrb	r3, [r7, #2]
 8001026:	f1a3 020f 	sub.w	r2, r3, #15
 800102a:	4613      	mov	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4413      	add	r3, r2
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001038:	68fa      	ldr	r2, [r7, #12]
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	4313      	orrs	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001046:	78fb      	ldrb	r3, [r7, #3]
 8001048:	2b09      	cmp	r3, #9
 800104a:	d923      	bls.n	8001094 <ADC_RegularChannelConfig+0x1a4>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 8001052:	78fb      	ldrb	r3, [r7, #3]
 8001054:	f1a3 020a 	sub.w	r2, r3, #10
 8001058:	4613      	mov	r3, r2
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	4413      	add	r3, r2
 800105e:	2207      	movs	r2, #7
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	699a      	ldr	r2, [r3, #24]
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	43db      	mvns	r3, r3
 800106e:	401a      	ands	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6999      	ldr	r1, [r3, #24]
 8001078:	7878      	ldrb	r0, [r7, #1]
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	f1a3 020a 	sub.w	r2, r3, #10
 8001080:	4613      	mov	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4413      	add	r3, r2
 8001086:	fa00 f303 	lsl.w	r3, r0, r3
 800108a:	ea41 0203 	orr.w	r2, r1, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	619a      	str	r2, [r3, #24]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
  }
}
 8001092:	e01f      	b.n	80010d4 <ADC_RegularChannelConfig+0x1e4>
    tmpreg1 = ADCx->SMPR1;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	60fb      	str	r3, [r7, #12]
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 800109a:	78fb      	ldrb	r3, [r7, #3]
 800109c:	1e5a      	subs	r2, r3, #1
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	2238      	movs	r2, #56	; 0x38
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	60bb      	str	r3, [r7, #8]
	ADCx->SMPR1 &= ~tmpreg2;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	695a      	ldr	r2, [r3, #20]
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	401a      	ands	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	615a      	str	r2, [r3, #20]
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6959      	ldr	r1, [r3, #20]
 80010be:	7878      	ldrb	r0, [r7, #1]
 80010c0:	78fa      	ldrb	r2, [r7, #3]
 80010c2:	4613      	mov	r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4413      	add	r3, r2
 80010c8:	fa00 f303 	lsl.w	r3, r0, r3
 80010cc:	ea41 0203 	orr.w	r2, r1, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	615a      	str	r2, [r3, #20]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <ADC_StartConversion>:
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f043 0204 	orr.w	r2, r3, #4
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	609a      	str	r2, [r3, #8]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	b29b      	uxth	r3, r3
}
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 800111a:	b480      	push	{r7}
 800111c:	b085      	sub	sp, #20
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	4013      	ands	r3, r2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d002      	beq.n	800113a <ADC_GetFlagStatus+0x20>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8001134:	2301      	movs	r3, #1
 8001136:	73fb      	strb	r3, [r7, #15]
 8001138:	e001      	b.n	800113e <ADC_GetFlagStatus+0x24>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 800113e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 800114c:	b480      	push	{r7}
 800114e:	b087      	sub	sp, #28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	e07c      	b.n	8001262 <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001168:	2201      	movs	r2, #1
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	429a      	cmp	r2, r3
 8001182:	d16b      	bne.n	800125c <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	791b      	ldrb	r3, [r3, #4]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d003      	beq.n	8001194 <GPIO_Init+0x48>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	791b      	ldrb	r3, [r3, #4]
 8001190:	2b02      	cmp	r3, #2
 8001192:	d134      	bne.n	80011fe <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	2103      	movs	r1, #3
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	401a      	ands	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	795b      	ldrb	r3, [r3, #5]
 80011b2:	4619      	mov	r1, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa01 f303 	lsl.w	r3, r1, r3
 80011bc:	431a      	orrs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	889b      	ldrh	r3, [r3, #4]
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	4619      	mov	r1, r3
 80011ce:	2301      	movs	r3, #1
 80011d0:	408b      	lsls	r3, r1
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	4013      	ands	r3, r2
 80011da:	b29a      	uxth	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	889b      	ldrh	r3, [r3, #4]
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	799b      	ldrb	r3, [r3, #6]
 80011ea:	4619      	mov	r1, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2103      	movs	r1, #3
 8001208:	fa01 f303 	lsl.w	r3, r1, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	401a      	ands	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	791b      	ldrb	r3, [r3, #4]
 800121c:	4619      	mov	r1, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	431a      	orrs	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68da      	ldr	r2, [r3, #12]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	b29b      	uxth	r3, r3
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2103      	movs	r1, #3
 8001238:	fa01 f303 	lsl.w	r3, r1, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	401a      	ands	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68da      	ldr	r2, [r3, #12]
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	79db      	ldrb	r3, [r3, #7]
 800124c:	4619      	mov	r1, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	3301      	adds	r3, #1
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	2b0f      	cmp	r3, #15
 8001266:	f67f af7f 	bls.w	8001168 <GPIO_Init+0x1c>
    }
  }
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	371c      	adds	r7, #28
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001286:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2202      	movs	r2, #2
 8001292:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	71da      	strb	r2, [r3, #7]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	807b      	strh	r3, [r7, #2]
 80012b8:	4613      	mov	r3, r2
 80012ba:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80012c4:	787a      	ldrb	r2, [r7, #1]
 80012c6:	887b      	ldrh	r3, [r7, #2]
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	08db      	lsrs	r3, r3, #3
 80012d8:	b29b      	uxth	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3208      	adds	r2, #8
 80012e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012e4:	887b      	ldrh	r3, [r7, #2]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	210f      	movs	r1, #15
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	8879      	ldrh	r1, [r7, #2]
 80012f6:	08c9      	lsrs	r1, r1, #3
 80012f8:	b289      	uxth	r1, r1
 80012fa:	4608      	mov	r0, r1
 80012fc:	ea02 0103 	and.w	r1, r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f100 0208 	add.w	r2, r0, #8
 8001306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	08db      	lsrs	r3, r3, #3
 800130e:	b29b      	uxth	r3, r3
 8001310:	461a      	mov	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3208      	adds	r2, #8
 8001316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	4313      	orrs	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001320:	887b      	ldrh	r3, [r7, #2]
 8001322:	08db      	lsrs	r3, r3, #3
 8001324:	b29b      	uxth	r3, r3
 8001326:	461a      	mov	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3208      	adds	r2, #8
 800132c:	68b9      	ldr	r1, [r7, #8]
 800132e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001332:	bf00      	nop
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001340:	b480      	push	{r7}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	230f      	movs	r3, #15
 8001352:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	78db      	ldrb	r3, [r3, #3]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d03a      	beq.n	80013d2 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800135c:	4b28      	ldr	r3, [pc, #160]	; (8001400 <NVIC_Init+0xc0>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	43db      	mvns	r3, r3
 8001362:	0a1b      	lsrs	r3, r3, #8
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f1c3 0304 	rsb	r3, r3, #4
 8001370:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa22 f303 	lsr.w	r3, r2, r3
 800137a:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	785b      	ldrb	r3, [r3, #1]
 8001380:	461a      	mov	r2, r3
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	789b      	ldrb	r3, [r3, #2]
 800138e:	461a      	mov	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4013      	ands	r3, r2
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	4313      	orrs	r3, r2
 8001398:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80013a0:	4a18      	ldr	r2, [pc, #96]	; (8001404 <NVIC_Init+0xc4>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	6979      	ldr	r1, [r7, #20]
 80013a8:	b2c9      	uxtb	r1, r1
 80013aa:	4413      	add	r3, r2
 80013ac:	460a      	mov	r2, r1
 80013ae:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80013ba:	4912      	ldr	r1, [pc, #72]	; (8001404 <NVIC_Init+0xc4>)
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	7812      	ldrb	r2, [r2, #0]
 80013c0:	0952      	lsrs	r2, r2, #5
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80013c6:	2201      	movs	r2, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80013cc:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80013d0:	e00f      	b.n	80013f2 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80013da:	490a      	ldr	r1, [pc, #40]	; (8001404 <NVIC_Init+0xc4>)
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	7812      	ldrb	r2, [r2, #0]
 80013e0:	0952      	lsrs	r2, r2, #5
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80013e6:	2201      	movs	r2, #1
 80013e8:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80013ea:	f100 0320 	add.w	r3, r0, #32
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013f2:	bf00      	nop
 80013f4:	371c      	adds	r7, #28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000ed00 	.word	0xe000ed00
 8001404:	e000e100 	.word	0xe000e100

08001408 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001408:	b480      	push	{r7}
 800140a:	b08b      	sub	sp, #44	; 0x2c
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	2300      	movs	r3, #0
 800141a:	61bb      	str	r3, [r7, #24]
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001430:	4b8b      	ldr	r3, [pc, #556]	; (8001660 <RCC_GetClocksFreq+0x258>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 030c 	and.w	r3, r3, #12
 8001438:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	2b08      	cmp	r3, #8
 800143e:	d011      	beq.n	8001464 <RCC_GetClocksFreq+0x5c>
 8001440:	6a3b      	ldr	r3, [r7, #32]
 8001442:	2b08      	cmp	r3, #8
 8001444:	d837      	bhi.n	80014b6 <RCC_GetClocksFreq+0xae>
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <RCC_GetClocksFreq+0x4c>
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	2b04      	cmp	r3, #4
 8001450:	d004      	beq.n	800145c <RCC_GetClocksFreq+0x54>
 8001452:	e030      	b.n	80014b6 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a83      	ldr	r2, [pc, #524]	; (8001664 <RCC_GetClocksFreq+0x25c>)
 8001458:	601a      	str	r2, [r3, #0]
      break;
 800145a:	e030      	b.n	80014be <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a81      	ldr	r2, [pc, #516]	; (8001664 <RCC_GetClocksFreq+0x25c>)
 8001460:	601a      	str	r2, [r3, #0]
      break;
 8001462:	e02c      	b.n	80014be <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8001464:	4b7e      	ldr	r3, [pc, #504]	; (8001660 <RCC_GetClocksFreq+0x258>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800146c:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800146e:	4b7c      	ldr	r3, [pc, #496]	; (8001660 <RCC_GetClocksFreq+0x258>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001476:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	0c9b      	lsrs	r3, r3, #18
 800147c:	3302      	adds	r3, #2
 800147e:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d105      	bne.n	8001492 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	4a77      	ldr	r2, [pc, #476]	; (8001668 <RCC_GetClocksFreq+0x260>)
 800148a:	fb02 f303 	mul.w	r3, r2, r3
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
 8001490:	e00d      	b.n	80014ae <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8001492:	4b73      	ldr	r3, [pc, #460]	; (8001660 <RCC_GetClocksFreq+0x258>)
 8001494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	3301      	adds	r3, #1
 800149c:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 800149e:	4a71      	ldr	r2, [pc, #452]	; (8001664 <RCC_GetClocksFreq+0x25c>)
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	fb02 f303 	mul.w	r3, r2, r3
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b2:	601a      	str	r2, [r3, #0]
      break;
 80014b4:	e003      	b.n	80014be <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a6a      	ldr	r2, [pc, #424]	; (8001664 <RCC_GetClocksFreq+0x25c>)
 80014ba:	601a      	str	r2, [r3, #0]
      break;
 80014bc:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80014be:	4b68      	ldr	r3, [pc, #416]	; (8001660 <RCC_GetClocksFreq+0x258>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014c6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	091b      	lsrs	r3, r3, #4
 80014cc:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 80014ce:	4a67      	ldr	r2, [pc, #412]	; (800166c <RCC_GetClocksFreq+0x264>)
 80014d0:	6a3b      	ldr	r3, [r7, #32]
 80014d2:	4413      	add	r3, r2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	40da      	lsrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80014e6:	4b5e      	ldr	r3, [pc, #376]	; (8001660 <RCC_GetClocksFreq+0x258>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80014ee:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 80014f0:	6a3b      	ldr	r3, [r7, #32]
 80014f2:	0a1b      	lsrs	r3, r3, #8
 80014f4:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80014f6:	4a5d      	ldr	r2, [pc, #372]	; (800166c <RCC_GetClocksFreq+0x264>)
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	4413      	add	r3, r2
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	40da      	lsrs	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800150e:	4b54      	ldr	r3, [pc, #336]	; (8001660 <RCC_GetClocksFreq+0x258>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001516:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	0adb      	lsrs	r3, r3, #11
 800151c:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 800151e:	4a53      	ldr	r2, [pc, #332]	; (800166c <RCC_GetClocksFreq+0x264>)
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	4413      	add	r3, r2
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	40da      	lsrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8001536:	4b4a      	ldr	r3, [pc, #296]	; (8001660 <RCC_GetClocksFreq+0x258>)
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800153e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8001540:	6a3b      	ldr	r3, [r7, #32]
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8001546:	4a4a      	ldr	r2, [pc, #296]	; (8001670 <RCC_GetClocksFreq+0x268>)
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800154e:	b29b      	uxth	r3, r3
 8001550:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	f003 0310 	and.w	r3, r3, #16
 8001558:	2b00      	cmp	r3, #0
 800155a:	d006      	beq.n	800156a <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 800155c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	fbb2 f2f3 	udiv	r2, r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	611a      	str	r2, [r3, #16]
 8001568:	e003      	b.n	8001572 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8001572:	4b3b      	ldr	r3, [pc, #236]	; (8001660 <RCC_GetClocksFreq+0x258>)
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 800157a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	0a5b      	lsrs	r3, r3, #9
 8001580:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8001582:	4a3b      	ldr	r2, [pc, #236]	; (8001670 <RCC_GetClocksFreq+0x268>)
 8001584:	6a3b      	ldr	r3, [r7, #32]
 8001586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800158a:	b29b      	uxth	r3, r3
 800158c:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	f003 0310 	and.w	r3, r3, #16
 8001594:	2b00      	cmp	r3, #0
 8001596:	d006      	beq.n	80015a6 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8001598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	fbb2 f2f3 	udiv	r2, r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	615a      	str	r2, [r3, #20]
 80015a4:	e003      	b.n	80015ae <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80015ae:	4b2c      	ldr	r3, [pc, #176]	; (8001660 <RCC_GetClocksFreq+0x258>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0310 	and.w	r3, r3, #16
 80015b6:	2b10      	cmp	r3, #16
 80015b8:	d003      	beq.n	80015c2 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a29      	ldr	r2, [pc, #164]	; (8001664 <RCC_GetClocksFreq+0x25c>)
 80015be:	619a      	str	r2, [r3, #24]
 80015c0:	e003      	b.n	80015ca <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 80015ca:	4b25      	ldr	r3, [pc, #148]	; (8001660 <RCC_GetClocksFreq+0x258>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0320 	and.w	r3, r3, #32
 80015d2:	2b20      	cmp	r3, #32
 80015d4:	d003      	beq.n	80015de <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a22      	ldr	r2, [pc, #136]	; (8001664 <RCC_GetClocksFreq+0x25c>)
 80015da:	61da      	str	r2, [r3, #28]
 80015dc:	e003      	b.n	80015e6 <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80015e6:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <RCC_GetClocksFreq+0x258>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015f2:	d10d      	bne.n	8001610 <RCC_GetClocksFreq+0x208>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d108      	bne.n	8001610 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	429a      	cmp	r2, r3
 8001604:	d104      	bne.n	8001610 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	005a      	lsls	r2, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	621a      	str	r2, [r3, #32]
 800160e:	e003      	b.n	8001618 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <RCC_GetClocksFreq+0x258>)
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001624:	d10d      	bne.n	8001642 <RCC_GetClocksFreq+0x23a>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800162c:	429a      	cmp	r2, r3
 800162e:	d108      	bne.n	8001642 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	429a      	cmp	r2, r3
 8001636:	d104      	bne.n	8001642 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	005a      	lsls	r2, r3, #1
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	625a      	str	r2, [r3, #36]	; 0x24
 8001640:	e003      	b.n	800164a <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68da      	ldr	r2, [r3, #12]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <RCC_GetClocksFreq+0x258>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10e      	bne.n	8001674 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68da      	ldr	r2, [r3, #12]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	629a      	str	r2, [r3, #40]	; 0x28
 800165e:	e028      	b.n	80016b2 <RCC_GetClocksFreq+0x2aa>
 8001660:	40021000 	.word	0x40021000
 8001664:	007a1200 	.word	0x007a1200
 8001668:	003d0900 	.word	0x003d0900
 800166c:	20000000 	.word	0x20000000
 8001670:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8001674:	4b6c      	ldr	r3, [pc, #432]	; (8001828 <RCC_GetClocksFreq+0x420>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b01      	cmp	r3, #1
 800167e:	d104      	bne.n	800168a <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	629a      	str	r2, [r3, #40]	; 0x28
 8001688:	e013      	b.n	80016b2 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 800168a:	4b67      	ldr	r3, [pc, #412]	; (8001828 <RCC_GetClocksFreq+0x420>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d104      	bne.n	80016a0 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800169c:	629a      	str	r2, [r3, #40]	; 0x28
 800169e:	e008      	b.n	80016b2 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 80016a0:	4b61      	ldr	r3, [pc, #388]	; (8001828 <RCC_GetClocksFreq+0x420>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	d102      	bne.n	80016b2 <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a5f      	ldr	r2, [pc, #380]	; (800182c <RCC_GetClocksFreq+0x424>)
 80016b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 80016b2:	4b5d      	ldr	r3, [pc, #372]	; (8001828 <RCC_GetClocksFreq+0x420>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d104      	bne.n	80016c8 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80016c6:	e021      	b.n	800170c <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 80016c8:	4b57      	ldr	r3, [pc, #348]	; (8001828 <RCC_GetClocksFreq+0x420>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d4:	d104      	bne.n	80016e0 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80016de:	e015      	b.n	800170c <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80016e0:	4b51      	ldr	r3, [pc, #324]	; (8001828 <RCC_GetClocksFreq+0x420>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016ec:	d104      	bne.n	80016f8 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80016f6:	e009      	b.n	800170c <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 80016f8:	4b4b      	ldr	r3, [pc, #300]	; (8001828 <RCC_GetClocksFreq+0x420>)
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001700:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001704:	d102      	bne.n	800170c <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a48      	ldr	r2, [pc, #288]	; (800182c <RCC_GetClocksFreq+0x424>)
 800170a:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 800170c:	4b46      	ldr	r3, [pc, #280]	; (8001828 <RCC_GetClocksFreq+0x420>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d104      	bne.n	8001722 <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	631a      	str	r2, [r3, #48]	; 0x30
 8001720:	e021      	b.n	8001766 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8001722:	4b41      	ldr	r3, [pc, #260]	; (8001828 <RCC_GetClocksFreq+0x420>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800172a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800172e:	d104      	bne.n	800173a <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	631a      	str	r2, [r3, #48]	; 0x30
 8001738:	e015      	b.n	8001766 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 800173a:	4b3b      	ldr	r3, [pc, #236]	; (8001828 <RCC_GetClocksFreq+0x420>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001742:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001746:	d104      	bne.n	8001752 <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800174e:	631a      	str	r2, [r3, #48]	; 0x30
 8001750:	e009      	b.n	8001766 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8001752:	4b35      	ldr	r3, [pc, #212]	; (8001828 <RCC_GetClocksFreq+0x420>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800175a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800175e:	d102      	bne.n	8001766 <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a32      	ldr	r2, [pc, #200]	; (800182c <RCC_GetClocksFreq+0x424>)
 8001764:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8001766:	4b30      	ldr	r3, [pc, #192]	; (8001828 <RCC_GetClocksFreq+0x420>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d104      	bne.n	800177c <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	635a      	str	r2, [r3, #52]	; 0x34
 800177a:	e021      	b.n	80017c0 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 800177c:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <RCC_GetClocksFreq+0x420>)
 800177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001780:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001784:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001788:	d104      	bne.n	8001794 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	635a      	str	r2, [r3, #52]	; 0x34
 8001792:	e015      	b.n	80017c0 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8001794:	4b24      	ldr	r3, [pc, #144]	; (8001828 <RCC_GetClocksFreq+0x420>)
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800179c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017a0:	d104      	bne.n	80017ac <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017a8:	635a      	str	r2, [r3, #52]	; 0x34
 80017aa:	e009      	b.n	80017c0 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 80017ac:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <RCC_GetClocksFreq+0x420>)
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80017b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80017b8:	d102      	bne.n	80017c0 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a1b      	ldr	r2, [pc, #108]	; (800182c <RCC_GetClocksFreq+0x424>)
 80017be:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <RCC_GetClocksFreq+0x420>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d104      	bne.n	80017d6 <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 80017d4:	e021      	b.n	800181a <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 80017d6:	4b14      	ldr	r3, [pc, #80]	; (8001828 <RCC_GetClocksFreq+0x420>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80017de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017e2:	d104      	bne.n	80017ee <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	639a      	str	r2, [r3, #56]	; 0x38
}
 80017ec:	e015      	b.n	800181a <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <RCC_GetClocksFreq+0x420>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80017f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80017fa:	d104      	bne.n	8001806 <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001802:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001804:	e009      	b.n	800181a <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <RCC_GetClocksFreq+0x420>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800180e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001812:	d102      	bne.n	800181a <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <RCC_GetClocksFreq+0x424>)
 8001818:	639a      	str	r2, [r3, #56]	; 0x38
}
 800181a:	bf00      	nop
 800181c:	372c      	adds	r7, #44	; 0x2c
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000
 800182c:	007a1200 	.word	0x007a1200

08001830 <RCC_ADCCLKConfig>:
  *     @arg RCC_ADC34PLLCLK_Div128: ADC34 clock = PLLCLK/128                                  
  *     @arg RCC_ADC34PLLCLK_Div256: ADC34 clock = PLLCLK/256
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PLLCLK)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PLLCLK));

  tmp = (RCC_PLLCLK >> 28);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	0f1b      	lsrs	r3, r3, #28
 8001840:	60fb      	str	r3, [r7, #12]
  
  /* Clears ADCPRE34 bits */
  if (tmp != 0)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d006      	beq.n	8001856 <RCC_ADCCLKConfig+0x26>
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE34;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <RCC_ADCCLKConfig+0x4c>)
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	4a0b      	ldr	r2, [pc, #44]	; (800187c <RCC_ADCCLKConfig+0x4c>)
 800184e:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8001852:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001854:	e005      	b.n	8001862 <RCC_ADCCLKConfig+0x32>
  }
   /* Clears ADCPRE12 bits */
  else
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12;
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <RCC_ADCCLKConfig+0x4c>)
 8001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185a:	4a08      	ldr	r2, [pc, #32]	; (800187c <RCC_ADCCLKConfig+0x4c>)
 800185c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001860:	62d3      	str	r3, [r2, #44]	; 0x2c
  }
  /* Set ADCPRE bits according to RCC_PLLCLK value */
  RCC->CFGR2 |= RCC_PLLCLK;
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <RCC_ADCCLKConfig+0x4c>)
 8001864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001866:	4905      	ldr	r1, [pc, #20]	; (800187c <RCC_ADCCLKConfig+0x4c>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4313      	orrs	r3, r2
 800186c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800186e:	bf00      	nop
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000

08001880 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d006      	beq.n	80018a0 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <RCC_AHBPeriphClockCmd+0x3c>)
 8001894:	695a      	ldr	r2, [r3, #20]
 8001896:	4909      	ldr	r1, [pc, #36]	; (80018bc <RCC_AHBPeriphClockCmd+0x3c>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4313      	orrs	r3, r2
 800189c:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 800189e:	e006      	b.n	80018ae <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <RCC_AHBPeriphClockCmd+0x3c>)
 80018a2:	695a      	ldr	r2, [r3, #20]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	4904      	ldr	r1, [pc, #16]	; (80018bc <RCC_AHBPeriphClockCmd+0x3c>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	614b      	str	r3, [r1, #20]
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000

080018c0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d006      	beq.n	80018e0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <RCC_APB2PeriphClockCmd+0x3c>)
 80018d4:	699a      	ldr	r2, [r3, #24]
 80018d6:	4909      	ldr	r1, [pc, #36]	; (80018fc <RCC_APB2PeriphClockCmd+0x3c>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4313      	orrs	r3, r2
 80018dc:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80018de:	e006      	b.n	80018ee <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <RCC_APB2PeriphClockCmd+0x3c>)
 80018e2:	699a      	ldr	r2, [r3, #24]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	43db      	mvns	r3, r3
 80018e8:	4904      	ldr	r1, [pc, #16]	; (80018fc <RCC_APB2PeriphClockCmd+0x3c>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	618b      	str	r3, [r1, #24]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000

08001900 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d006      	beq.n	8001920 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <RCC_APB1PeriphClockCmd+0x3c>)
 8001914:	69da      	ldr	r2, [r3, #28]
 8001916:	4909      	ldr	r1, [pc, #36]	; (800193c <RCC_APB1PeriphClockCmd+0x3c>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4313      	orrs	r3, r2
 800191c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800191e:	e006      	b.n	800192e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <RCC_APB1PeriphClockCmd+0x3c>)
 8001922:	69da      	ldr	r2, [r3, #28]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	43db      	mvns	r3, r3
 8001928:	4904      	ldr	r1, [pc, #16]	; (800193c <RCC_APB1PeriphClockCmd+0x3c>)
 800192a:	4013      	ands	r3, r2
 800192c:	61cb      	str	r3, [r1, #28]
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000

08001940 <SPI_SendData8>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	70fb      	strb	r3, [r7, #3]
  uint32_t spixbase = 0x00;
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	330c      	adds	r3, #12
 8001958:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	78fa      	ldrb	r2, [r7, #3]
 800195e:	701a      	strb	r2, [r3, #0]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001978:	2300      	movs	r3, #0
 800197a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	891b      	ldrh	r3, [r3, #8]
 8001980:	b29a      	uxth	r2, r3
 8001982:	887b      	ldrh	r3, [r7, #2]
 8001984:	4013      	ands	r3, r2
 8001986:	b29b      	uxth	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800198c:	2301      	movs	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
 8001990:	e001      	b.n	8001996 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001996:	7bfb      	ldrb	r3, [r7, #15]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a2d      	ldr	r2, [pc, #180]	; (8001a70 <TIM_TimeBaseInit+0xcc>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d00f      	beq.n	80019e0 <TIM_TimeBaseInit+0x3c>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a2c      	ldr	r2, [pc, #176]	; (8001a74 <TIM_TimeBaseInit+0xd0>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d00b      	beq.n	80019e0 <TIM_TimeBaseInit+0x3c>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ce:	d007      	beq.n	80019e0 <TIM_TimeBaseInit+0x3c>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a29      	ldr	r2, [pc, #164]	; (8001a78 <TIM_TimeBaseInit+0xd4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d003      	beq.n	80019e0 <TIM_TimeBaseInit+0x3c>
     (TIMx == TIM3)|| (TIMx == TIM4)) 
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a28      	ldr	r2, [pc, #160]	; (8001a7c <TIM_TimeBaseInit+0xd8>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d108      	bne.n	80019f2 <TIM_TimeBaseInit+0x4e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80019e0:	89fb      	ldrh	r3, [r7, #14]
 80019e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019e6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	885a      	ldrh	r2, [r3, #2]
 80019ec:	89fb      	ldrh	r3, [r7, #14]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <TIM_TimeBaseInit+0xdc>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d00c      	beq.n	8001a14 <TIM_TimeBaseInit+0x70>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a21      	ldr	r2, [pc, #132]	; (8001a84 <TIM_TimeBaseInit+0xe0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d008      	beq.n	8001a14 <TIM_TimeBaseInit+0x70>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001a02:	89fb      	ldrh	r3, [r7, #14]
 8001a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a08:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	891a      	ldrh	r2, [r3, #8]
 8001a0e:	89fb      	ldrh	r3, [r7, #14]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	89fa      	ldrh	r2, [r7, #14]
 8001a18:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	881a      	ldrh	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15) || 
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a10      	ldr	r2, [pc, #64]	; (8001a70 <TIM_TimeBaseInit+0xcc>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d00f      	beq.n	8001a52 <TIM_TimeBaseInit+0xae>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a0f      	ldr	r2, [pc, #60]	; (8001a74 <TIM_TimeBaseInit+0xd0>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d00b      	beq.n	8001a52 <TIM_TimeBaseInit+0xae>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <TIM_TimeBaseInit+0xe4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d007      	beq.n	8001a52 <TIM_TimeBaseInit+0xae>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a11      	ldr	r2, [pc, #68]	; (8001a8c <TIM_TimeBaseInit+0xe8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d003      	beq.n	8001a52 <TIM_TimeBaseInit+0xae>
      (TIMx == TIM16) || (TIMx == TIM17))  
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a10      	ldr	r2, [pc, #64]	; (8001a90 <TIM_TimeBaseInit+0xec>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d104      	bne.n	8001a5c <TIM_TimeBaseInit+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	7a9b      	ldrb	r3, [r3, #10]
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	615a      	str	r2, [r3, #20]
}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40012c00 	.word	0x40012c00
 8001a74:	40013400 	.word	0x40013400
 8001a78:	40000400 	.word	0x40000400
 8001a7c:	40000800 	.word	0x40000800
 8001a80:	40001000 	.word	0x40001000
 8001a84:	40001400 	.word	0x40001400
 8001a88:	40014000 	.word	0x40014000
 8001a8c:	40014400 	.word	0x40014400
 8001a90:	40014800 	.word	0x40014800

08001a94 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001aa2:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	729a      	strb	r2, [r3, #10]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d008      	beq.n	8001aec <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8001aea:	e007      	b.n	8001afc <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	f023 0301 	bic.w	r3, r3, #1
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	801a      	strh	r2, [r3, #0]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b087      	sub	sp, #28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	f023 0201 	bic.w	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC1M;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC1S;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f023 0303 	bic.w	r3, r3, #3
 8001b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC1P;
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f023 0302 	bic.w	r3, r3, #2
 8001b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	899b      	ldrh	r3, [r3, #12]
 8001b66:	461a      	mov	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	889b      	ldrh	r3, [r3, #4]
 8001b72:	461a      	mov	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a26      	ldr	r2, [pc, #152]	; (8001c18 <TIM_OC1Init+0x110>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d00f      	beq.n	8001ba2 <TIM_OC1Init+0x9a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a25      	ldr	r2, [pc, #148]	; (8001c1c <TIM_OC1Init+0x114>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00b      	beq.n	8001ba2 <TIM_OC1Init+0x9a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a24      	ldr	r2, [pc, #144]	; (8001c20 <TIM_OC1Init+0x118>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d007      	beq.n	8001ba2 <TIM_OC1Init+0x9a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a23      	ldr	r2, [pc, #140]	; (8001c24 <TIM_OC1Init+0x11c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d003      	beq.n	8001ba2 <TIM_OC1Init+0x9a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a22      	ldr	r2, [pc, #136]	; (8001c28 <TIM_OC1Init+0x120>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d127      	bne.n	8001bf2 <TIM_OC1Init+0xea>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f023 0308 	bic.w	r3, r3, #8
 8001ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	89db      	ldrh	r3, [r3, #14]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NE;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f023 0304 	bic.w	r3, r3, #4
 8001bbc:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	88db      	ldrh	r3, [r3, #6]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1;
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1N;
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	8a1b      	ldrh	r3, [r3, #16]
 8001bde:	461a      	mov	r2, r3
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	8a5b      	ldrh	r3, [r3, #18]
 8001bea:	461a      	mov	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	621a      	str	r2, [r3, #32]
}
 8001c0c:	bf00      	nop
 8001c0e:	371c      	adds	r7, #28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	40012c00 	.word	0x40012c00
 8001c1c:	40013400 	.word	0x40013400
 8001c20:	40014000 	.word	0x40014000
 8001c24:	40014400 	.word	0x40014400
 8001c28:	40014800 	.word	0x40014800

08001c2c <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	825a      	strh	r2, [r3, #18]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC1PE);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f023 0308 	bic.w	r3, r3, #8
 8001c8c:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001c8e:	887b      	ldrh	r3, [r7, #2]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	619a      	str	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d006      	beq.n	8001cc8 <TIM_CtrlPWMOutputs+0x20>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	645a      	str	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
  }  
}
 8001cc6:	e005      	b.n	8001cd4 <TIM_CtrlPWMOutputs+0x2c>
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ccc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
 8001cec:	4613      	mov	r3, r2
 8001cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001cf0:	787b      	ldrb	r3, [r7, #1]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <TIM_ITConfig+0x24>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	887b      	ldrh	r3, [r7, #2]
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	60da      	str	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001d02:	e007      	b.n	8001d14 <TIM_ITConfig+0x34>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	887a      	ldrh	r2, [r7, #2]
 8001d0a:	43d2      	mvns	r2, r2
 8001d0c:	b292      	uxth	r2, r2
 8001d0e:	401a      	ands	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	60da      	str	r2, [r3, #12]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	81bb      	strh	r3, [r7, #12]
 8001d34:	2300      	movs	r3, #0
 8001d36:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	887b      	ldrh	r3, [r7, #2]
 8001d40:	4013      	ands	r3, r2
 8001d42:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	887b      	ldrh	r3, [r7, #2]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001d50:	89bb      	ldrh	r3, [r7, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d005      	beq.n	8001d62 <TIM_GetITStatus+0x42>
 8001d56:	897b      	ldrh	r3, [r7, #10]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d002      	beq.n	8001d62 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	73fb      	strb	r3, [r7, #15]
 8001d60:	e001      	b.n	8001d66 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8001d62:	2300      	movs	r3, #0
 8001d64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001d80:	887b      	ldrh	r3, [r7, #2]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	611a      	str	r2, [r3, #16]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8001da4:	887b      	ldrh	r3, [r7, #2]
 8001da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	; 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	0a1b      	lsrs	r3, r3, #8
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8001dee:	2201      	movs	r2, #1
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d103      	bne.n	8001e06 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3304      	adds	r3, #4
 8001e02:	61fb      	str	r3, [r7, #28]
 8001e04:	e005      	b.n	8001e12 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d102      	bne.n	8001e12 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	3308      	adds	r3, #8
 8001e10:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d006      	beq.n	8001e26 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	6819      	ldr	r1, [r3, #0]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001e24:	e006      	b.n	8001e34 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	6819      	ldr	r1, [r3, #0]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	43da      	mvns	r2, r3
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	400a      	ands	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]
}
 8001e34:	bf00      	nop
 8001e36:	3724      	adds	r7, #36	; 0x24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69da      	ldr	r2, [r3, #28]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	73fb      	strb	r3, [r7, #15]
 8001e5e:	e001      	b.n	8001e64 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8001e60:	2300      	movs	r3, #0
 8001e62:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b087      	sub	sp, #28
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	0a1b      	lsrs	r3, r3, #8
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d105      	bne.n	8001eb8 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	e00d      	b.n	8001ed4 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d105      	bne.n	8001eca <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	e004      	b.n	8001ed4 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	0c1b      	lsrs	r3, r3, #16
 8001ed8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001eda:	2201      	movs	r2, #1
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4013      	ands	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <USART_GetITStatus+0x8e>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8001efa:	2301      	movs	r3, #1
 8001efc:	74fb      	strb	r3, [r7, #19]
 8001efe:	e001      	b.n	8001f04 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8001f00:	2300      	movs	r3, #0
 8001f02:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001f04:	7cfb      	ldrb	r3, [r7, #19]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	371c      	adds	r7, #28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	2201      	movs	r2, #1
 8001f26:	fa02 f103 	lsl.w	r1, r2, r3
 8001f2a:	4a06      	ldr	r2, [pc, #24]	; (8001f44 <NVIC_EnableIRQ+0x30>)
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f30:	095b      	lsrs	r3, r3, #5
 8001f32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000e100 	.word	0xe000e100

08001f48 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	4619      	mov	r1, r3
 8001f58:	4807      	ldr	r0, [pc, #28]	; (8001f78 <uart_put_char+0x30>)
 8001f5a:	f7ff ff1d 	bl	8001d98 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8001f5e:	bf00      	nop
 8001f60:	2180      	movs	r1, #128	; 0x80
 8001f62:	4805      	ldr	r0, [pc, #20]	; (8001f78 <uart_put_char+0x30>)
 8001f64:	f7ff ff6c 	bl	8001e40 <USART_GetFlagStatus>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f8      	beq.n	8001f60 <uart_put_char+0x18>
}
 8001f6e:	bf00      	nop
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40004400 	.word	0x40004400

08001f7c <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	e012      	b.n	8001fb6 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	4413      	add	r3, r2
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b0a      	cmp	r3, #10
 8001f9a:	d102      	bne.n	8001fa2 <_write_r+0x26>
            uart_put_char('\r');
 8001f9c:	200d      	movs	r0, #13
 8001f9e:	f7ff ffd3 	bl	8001f48 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff ffcc 	bl	8001f48 <uart_put_char>
    for (n = 0; n < len; n++) {
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	dbe8      	blt.n	8001f90 <_write_r+0x14>
    }

    return len;
 8001fbe:	683b      	ldr	r3, [r7, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8001fcc:	4915      	ldr	r1, [pc, #84]	; (8002024 <USART2_IRQHandler+0x5c>)
 8001fce:	4816      	ldr	r0, [pc, #88]	; (8002028 <USART2_IRQHandler+0x60>)
 8001fd0:	f7ff ff4f 	bl	8001e72 <USART_GetITStatus>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d021      	beq.n	800201e <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8001fda:	4b13      	ldr	r3, [pc, #76]	; (8002028 <USART2_IRQHandler+0x60>)
 8001fdc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001fde:	b299      	uxth	r1, r3
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <USART2_IRQHandler+0x64>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	b2d0      	uxtb	r0, r2
 8001fea:	4a10      	ldr	r2, [pc, #64]	; (800202c <USART2_IRQHandler+0x64>)
 8001fec:	7010      	strb	r0, [r2, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	b2c9      	uxtb	r1, r1
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <USART2_IRQHandler+0x68>)
 8001ff4:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8001ff6:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <USART2_IRQHandler+0x6c>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2bff      	cmp	r3, #255	; 0xff
 8001ffe:	d107      	bne.n	8002010 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8002000:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <USART2_IRQHandler+0x70>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	3301      	adds	r3, #1
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <USART2_IRQHandler+0x70>)
 800200c:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 800200e:	e006      	b.n	800201e <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <USART2_IRQHandler+0x6c>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	3301      	adds	r3, #1
 8002018:	b2da      	uxtb	r2, r3
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <USART2_IRQHandler+0x6c>)
 800201c:	701a      	strb	r2, [r3, #0]
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	00050105 	.word	0x00050105
 8002028:	40004400 	.word	0x40004400
 800202c:	20000318 	.word	0x20000318
 8002030:	20000218 	.word	0x20000218
 8002034:	2000031a 	.word	0x2000031a
 8002038:	20000319 	.word	0x20000319

0800203c <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 800203c:	b580      	push	{r7, lr}
 800203e:	b094      	sub	sp, #80	; 0x50
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8002044:	4b86      	ldr	r3, [pc, #536]	; (8002260 <uart_init+0x224>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f001 fd9f 	bl	8003b90 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8002052:	4b83      	ldr	r3, [pc, #524]	; (8002260 <uart_init+0x224>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f001 fd98 	bl	8003b90 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8002060:	4b80      	ldr	r3, [pc, #512]	; (8002264 <uart_init+0x228>)
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	4a7f      	ldr	r2, [pc, #508]	; (8002264 <uart_init+0x228>)
 8002066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800206a:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 800206c:	4b7d      	ldr	r3, [pc, #500]	; (8002264 <uart_init+0x228>)
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	4a7c      	ldr	r2, [pc, #496]	; (8002264 <uart_init+0x228>)
 8002072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002076:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8002078:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002082:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002086:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8002088:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002092:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002096:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8002098:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80020a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020a6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 80020a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80020b2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80020b6:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 80020b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80020c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020c6:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80020c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80020d2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80020d6:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 80020d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020dc:	889b      	ldrh	r3, [r3, #4]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80020e4:	f023 030c 	bic.w	r3, r3, #12
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80020ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80020f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020f4:	8892      	ldrh	r2, [r2, #4]
 80020f6:	b292      	uxth	r2, r2
 80020f8:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 80020fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002104:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002108:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 800210a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002114:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8002118:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 800211a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002124:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002128:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 800212a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002134:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8002138:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 800213a:	4b4b      	ldr	r3, [pc, #300]	; (8002268 <uart_init+0x22c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a4a      	ldr	r2, [pc, #296]	; (8002268 <uart_init+0x22c>)
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8002146:	4b48      	ldr	r3, [pc, #288]	; (8002268 <uart_init+0x22c>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4a47      	ldr	r2, [pc, #284]	; (8002268 <uart_init+0x22c>)
 800214c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002150:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8002152:	4b45      	ldr	r3, [pc, #276]	; (8002268 <uart_init+0x22c>)
 8002154:	4a44      	ldr	r2, [pc, #272]	; (8002268 <uart_init+0x22c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 800215a:	4b43      	ldr	r3, [pc, #268]	; (8002268 <uart_init+0x22c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a42      	ldr	r2, [pc, #264]	; (8002268 <uart_init+0x22c>)
 8002160:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002164:	f023 030c 	bic.w	r3, r3, #12
 8002168:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 800216a:	4b3f      	ldr	r3, [pc, #252]	; (8002268 <uart_init+0x22c>)
 800216c:	4a3e      	ldr	r2, [pc, #248]	; (8002268 <uart_init+0x22c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8002172:	4b3d      	ldr	r3, [pc, #244]	; (8002268 <uart_init+0x22c>)
 8002174:	4a3c      	ldr	r2, [pc, #240]	; (8002268 <uart_init+0x22c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 800217a:	4b3b      	ldr	r3, [pc, #236]	; (8002268 <uart_init+0x22c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a3a      	ldr	r2, [pc, #232]	; (8002268 <uart_init+0x22c>)
 8002180:	f043 030c 	orr.w	r3, r3, #12
 8002184:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8002186:	4b38      	ldr	r3, [pc, #224]	; (8002268 <uart_init+0x22c>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	4a37      	ldr	r2, [pc, #220]	; (8002268 <uart_init+0x22c>)
 800218c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002190:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8002192:	4b35      	ldr	r3, [pc, #212]	; (8002268 <uart_init+0x22c>)
 8002194:	4a34      	ldr	r2, [pc, #208]	; (8002268 <uart_init+0x22c>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800219e:	2300      	movs	r3, #0
 80021a0:	647b      	str	r3, [r7, #68]	; 0x44
 80021a2:	2300      	movs	r3, #0
 80021a4:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 80021a6:	f107 0308 	add.w	r3, r7, #8
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff f92c 	bl	8001408 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 80021b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b2:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 80021b4:	4b2c      	ldr	r3, [pc, #176]	; (8002268 <uart_init+0x22c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d010      	beq.n	80021e2 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 80021c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021c2:	005a      	lsls	r2, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 80021cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	fb01 f202 	mul.w	r2, r1, r2
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	64bb      	str	r3, [r7, #72]	; 0x48
 80021e0:	e00d      	b.n	80021fe <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 80021e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 80021ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	fb01 f202 	mul.w	r2, r1, r2
 80021fa:	1a9b      	subs	r3, r3, r2
 80021fc:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	085b      	lsrs	r3, r3, #1
 8002202:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002204:	429a      	cmp	r2, r3
 8002206:	d302      	bcc.n	800220e <uart_init+0x1d2>
        divider++;
 8002208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800220a:	3301      	adds	r3, #1
 800220c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 800220e:	4b16      	ldr	r3, [pc, #88]	; (8002268 <uart_init+0x22c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 800221a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800221c:	085b      	lsrs	r3, r3, #1
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8002224:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002226:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800222a:	4013      	ands	r3, r2
 800222c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800222e:	4313      	orrs	r3, r2
 8002230:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8002232:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <uart_init+0x22c>)
 8002234:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002236:	b292      	uxth	r2, r2
 8002238:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <uart_init+0x22c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a0a      	ldr	r2, [pc, #40]	; (8002268 <uart_init+0x22c>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8002246:	2201      	movs	r2, #1
 8002248:	4908      	ldr	r1, [pc, #32]	; (800226c <uart_init+0x230>)
 800224a:	4807      	ldr	r0, [pc, #28]	; (8002268 <uart_init+0x22c>)
 800224c:	f7ff fdb6 	bl	8001dbc <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8002250:	2026      	movs	r0, #38	; 0x26
 8002252:	f7ff fe5f 	bl	8001f14 <NVIC_EnableIRQ>
}
 8002256:	bf00      	nop
 8002258:	3750      	adds	r7, #80	; 0x50
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	2000002c 	.word	0x2000002c
 8002264:	40021000 	.word	0x40021000
 8002268:	40004400 	.word	0x40004400
 800226c:	00050105 	.word	0x00050105

08002270 <lcd_transmit_byte>:
#include "charset.h"

/*****************************/
/*** LCD Control Functions ***/
/*****************************/
void lcd_transmit_byte(uint8_t data) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
    GPIOB->ODR &= ~(0x0001 << 6); // CS = 0 - Start Transmission
 800227a:	4b14      	ldr	r3, [pc, #80]	; (80022cc <lcd_transmit_byte+0x5c>)
 800227c:	8a9b      	ldrh	r3, [r3, #20]
 800227e:	b29b      	uxth	r3, r3
 8002280:	4a12      	ldr	r2, [pc, #72]	; (80022cc <lcd_transmit_byte+0x5c>)
 8002282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002286:	b29b      	uxth	r3, r3
 8002288:	8293      	strh	r3, [r2, #20]
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 800228a:	bf00      	nop
 800228c:	2102      	movs	r1, #2
 800228e:	4810      	ldr	r0, [pc, #64]	; (80022d0 <lcd_transmit_byte+0x60>)
 8002290:	f7ff fb6c 	bl	800196c <SPI_I2S_GetFlagStatus>
 8002294:	4603      	mov	r3, r0
 8002296:	2b01      	cmp	r3, #1
 8002298:	d1f8      	bne.n	800228c <lcd_transmit_byte+0x1c>
    SPI_SendData8(SPI2, data);
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	4619      	mov	r1, r3
 800229e:	480c      	ldr	r0, [pc, #48]	; (80022d0 <lcd_transmit_byte+0x60>)
 80022a0:	f7ff fb4e 	bl	8001940 <SPI_SendData8>
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 80022a4:	bf00      	nop
 80022a6:	2102      	movs	r1, #2
 80022a8:	4809      	ldr	r0, [pc, #36]	; (80022d0 <lcd_transmit_byte+0x60>)
 80022aa:	f7ff fb5f 	bl	800196c <SPI_I2S_GetFlagStatus>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d1f8      	bne.n	80022a6 <lcd_transmit_byte+0x36>
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - End Transmission
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <lcd_transmit_byte+0x5c>)
 80022b6:	8a9b      	ldrh	r3, [r3, #20]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	4a04      	ldr	r2, [pc, #16]	; (80022cc <lcd_transmit_byte+0x5c>)
 80022bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	8293      	strh	r3, [r2, #20]
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	48000400 	.word	0x48000400
 80022d0:	40003800 	.word	0x40003800

080022d4 <lcd_push_buffer>:

void lcd_push_buffer(uint8_t* buffer)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
    int i = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]

    //page 0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80022e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80022e4:	8a9b      	ldrh	r3, [r3, #20]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80022ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 80022f4:	2000      	movs	r0, #0
 80022f6:	f7ff ffbb 	bl	8002270 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 80022fa:	2010      	movs	r0, #16
 80022fc:	f7ff ffb8 	bl	8002270 <lcd_transmit_byte>
    lcd_transmit_byte(0xB0);      // set page address  0
 8002300:	20b0      	movs	r0, #176	; 0xb0
 8002302:	f7ff ffb5 	bl	8002270 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8002306:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800230a:	8a9b      	ldrh	r3, [r3, #20]
 800230c:	b29b      	uxth	r3, r3
 800230e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002316:	b29b      	uxth	r3, r3
 8002318:	8293      	strh	r3, [r2, #20]
    for(i=0; i<128; i++) {
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	e009      	b.n	8002334 <lcd_push_buffer+0x60>
       lcd_transmit_byte(buffer[i]);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ffa1 	bl	8002270 <lcd_transmit_byte>
    for(i=0; i<128; i++) {
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	3301      	adds	r3, #1
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b7f      	cmp	r3, #127	; 0x7f
 8002338:	ddf2      	ble.n	8002320 <lcd_push_buffer+0x4c>
    }

    // page 1
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 800233a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800233e:	8a9b      	ldrh	r3, [r3, #20]
 8002340:	b29b      	uxth	r3, r3
 8002342:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002346:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800234a:	b29b      	uxth	r3, r3
 800234c:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 800234e:	2000      	movs	r0, #0
 8002350:	f7ff ff8e 	bl	8002270 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8002354:	2010      	movs	r0, #16
 8002356:	f7ff ff8b 	bl	8002270 <lcd_transmit_byte>
    lcd_transmit_byte(0xB1);      // set page address  1
 800235a:	20b1      	movs	r0, #177	; 0xb1
 800235c:	f7ff ff88 	bl	8002270 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8002360:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002364:	8a9b      	ldrh	r3, [r3, #20]
 8002366:	b29b      	uxth	r3, r3
 8002368:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800236c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002370:	b29b      	uxth	r3, r3
 8002372:	8293      	strh	r3, [r2, #20]
    for( i = 128 ; i < 256 ; i++ ) {
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	e009      	b.n	800238e <lcd_push_buffer+0xba>
       lcd_transmit_byte(buffer[i]);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	4413      	add	r3, r2
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ff74 	bl	8002270 <lcd_transmit_byte>
    for( i = 128 ; i < 256 ; i++ ) {
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	3301      	adds	r3, #1
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2bff      	cmp	r3, #255	; 0xff
 8002392:	ddf2      	ble.n	800237a <lcd_push_buffer+0xa6>
    }

    //page 2
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8002394:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002398:	8a9b      	ldrh	r3, [r3, #20]
 800239a:	b29b      	uxth	r3, r3
 800239c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80023a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 80023a8:	2000      	movs	r0, #0
 80023aa:	f7ff ff61 	bl	8002270 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 80023ae:	2010      	movs	r0, #16
 80023b0:	f7ff ff5e 	bl	8002270 <lcd_transmit_byte>
    lcd_transmit_byte(0xB2);      // set page address  2
 80023b4:	20b2      	movs	r0, #178	; 0xb2
 80023b6:	f7ff ff5b 	bl	8002270 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 80023ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80023be:	8a9b      	ldrh	r3, [r3, #20]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80023c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	8293      	strh	r3, [r2, #20]
    for(i=256; i<384; i++) {
 80023ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	e009      	b.n	80023ea <lcd_push_buffer+0x116>
       lcd_transmit_byte(buffer[i]);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	4413      	add	r3, r2
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ff46 	bl	8002270 <lcd_transmit_byte>
    for(i=256; i<384; i++) {
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3301      	adds	r3, #1
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80023f0:	dbf1      	blt.n	80023d6 <lcd_push_buffer+0x102>
    }

    //page 3
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80023f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80023f6:	8a9b      	ldrh	r3, [r3, #20]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80023fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002402:	b29b      	uxth	r3, r3
 8002404:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8002406:	2000      	movs	r0, #0
 8002408:	f7ff ff32 	bl	8002270 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 800240c:	2010      	movs	r0, #16
 800240e:	f7ff ff2f 	bl	8002270 <lcd_transmit_byte>
    lcd_transmit_byte(0xB3);      // set page address  3
 8002412:	20b3      	movs	r0, #179	; 0xb3
 8002414:	f7ff ff2c 	bl	8002270 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8002418:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800241c:	8a9b      	ldrh	r3, [r3, #20]
 800241e:	b29b      	uxth	r3, r3
 8002420:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002428:	b29b      	uxth	r3, r3
 800242a:	8293      	strh	r3, [r2, #20]
    for(i=384; i<512; i++) {
 800242c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	e009      	b.n	8002448 <lcd_push_buffer+0x174>
       lcd_transmit_byte(buffer[i]);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff17 	bl	8002270 <lcd_transmit_byte>
    for(i=384; i<512; i++) {
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	3301      	adds	r3, #1
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800244e:	dbf1      	blt.n	8002434 <lcd_push_buffer+0x160>
    }
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <lcd_reset>:

void lcd_reset()
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Reset Command/Data
 8002462:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002466:	8a9b      	ldrh	r3, [r3, #20]
 8002468:	b29b      	uxth	r3, r3
 800246a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800246e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002472:	b29b      	uxth	r3, r3
 8002474:	8293      	strh	r3, [r2, #20]
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - Reset C/S
 8002476:	4b2f      	ldr	r3, [pc, #188]	; (8002534 <lcd_reset+0xd8>)
 8002478:	8a9b      	ldrh	r3, [r3, #20]
 800247a:	b29b      	uxth	r3, r3
 800247c:	4a2d      	ldr	r2, [pc, #180]	; (8002534 <lcd_reset+0xd8>)
 800247e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002482:	b29b      	uxth	r3, r3
 8002484:	8293      	strh	r3, [r2, #20]

    GPIOB->ODR &= ~(0x0001 << 14); // RESET = 0 - Reset Display
 8002486:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <lcd_reset+0xd8>)
 8002488:	8a9b      	ldrh	r3, [r3, #20]
 800248a:	b29b      	uxth	r3, r3
 800248c:	4a29      	ldr	r2, [pc, #164]	; (8002534 <lcd_reset+0xd8>)
 800248e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002492:	b29b      	uxth	r3, r3
 8002494:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 4680 ; i++) { asm("nop"); }; // Wait
 8002496:	2300      	movs	r3, #0
 8002498:	607b      	str	r3, [r7, #4]
 800249a:	e003      	b.n	80024a4 <lcd_reset+0x48>
 800249c:	bf00      	nop
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3301      	adds	r3, #1
 80024a2:	607b      	str	r3, [r7, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f241 2247 	movw	r2, #4679	; 0x1247
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d9f6      	bls.n	800249c <lcd_reset+0x40>
    GPIOB->ODR |=  (0x0001 << 14); // RESET = 1 - Stop Reset
 80024ae:	4b21      	ldr	r3, [pc, #132]	; (8002534 <lcd_reset+0xd8>)
 80024b0:	8a9b      	ldrh	r3, [r3, #20]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	4a1f      	ldr	r2, [pc, #124]	; (8002534 <lcd_reset+0xd8>)
 80024b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 390000 ; i++) { asm("nop"); }; // Wait
 80024be:	2300      	movs	r3, #0
 80024c0:	603b      	str	r3, [r7, #0]
 80024c2:	e003      	b.n	80024cc <lcd_reset+0x70>
 80024c4:	bf00      	nop
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	3301      	adds	r3, #1
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	4a1a      	ldr	r2, [pc, #104]	; (8002538 <lcd_reset+0xdc>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d9f7      	bls.n	80024c4 <lcd_reset+0x68>

    // Configure Display
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80024d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024d8:	8a9b      	ldrh	r3, [r3, #20]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	8293      	strh	r3, [r2, #20]

    lcd_transmit_byte(0xAE);  // Turn off display
 80024e8:	20ae      	movs	r0, #174	; 0xae
 80024ea:	f7ff fec1 	bl	8002270 <lcd_transmit_byte>
    lcd_transmit_byte(0xA2);  // Set bias voltage to 1/9
 80024ee:	20a2      	movs	r0, #162	; 0xa2
 80024f0:	f7ff febe 	bl	8002270 <lcd_transmit_byte>

    lcd_transmit_byte(0xA0);  // Set display RAM address normal
 80024f4:	20a0      	movs	r0, #160	; 0xa0
 80024f6:	f7ff febb 	bl	8002270 <lcd_transmit_byte>
    lcd_transmit_byte(0xC8);  // Set update direction
 80024fa:	20c8      	movs	r0, #200	; 0xc8
 80024fc:	f7ff feb8 	bl	8002270 <lcd_transmit_byte>

    lcd_transmit_byte(0x22);  // Set internal resistor ratio
 8002500:	2022      	movs	r0, #34	; 0x22
 8002502:	f7ff feb5 	bl	8002270 <lcd_transmit_byte>
    lcd_transmit_byte(0x2F);  // Set operating mode
 8002506:	202f      	movs	r0, #47	; 0x2f
 8002508:	f7ff feb2 	bl	8002270 <lcd_transmit_byte>
    lcd_transmit_byte(0x40);  // Set start line address
 800250c:	2040      	movs	r0, #64	; 0x40
 800250e:	f7ff feaf 	bl	8002270 <lcd_transmit_byte>

    lcd_transmit_byte(0xAF);  // Turn on display
 8002512:	20af      	movs	r0, #175	; 0xaf
 8002514:	f7ff feac 	bl	8002270 <lcd_transmit_byte>

    lcd_transmit_byte(0x81);  // Set output voltage
 8002518:	2081      	movs	r0, #129	; 0x81
 800251a:	f7ff fea9 	bl	8002270 <lcd_transmit_byte>
    lcd_transmit_byte(0x17);  // Set contrast
 800251e:	2017      	movs	r0, #23
 8002520:	f7ff fea6 	bl	8002270 <lcd_transmit_byte>

    lcd_transmit_byte(0xA6);  // Set normal mode
 8002524:	20a6      	movs	r0, #166	; 0xa6
 8002526:	f7ff fea3 	bl	8002270 <lcd_transmit_byte>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	48000400 	.word	0x48000400
 8002538:	0005f36f 	.word	0x0005f36f

0800253c <init_spi_lcd>:

void init_spi_lcd() {
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
    // Enable Clocks
    RCC->AHBENR  |= 0x00020000 | 0x00040000;    // Enable Clock for GPIO Banks A and B
 8002540:	4b9d      	ldr	r3, [pc, #628]	; (80027b8 <init_spi_lcd+0x27c>)
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	4a9c      	ldr	r2, [pc, #624]	; (80027b8 <init_spi_lcd+0x27c>)
 8002546:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 800254a:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= 0x00004000;                 // Enable Clock for SPI2
 800254c:	4b9a      	ldr	r3, [pc, #616]	; (80027b8 <init_spi_lcd+0x27c>)
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	4a99      	ldr	r2, [pc, #612]	; (80027b8 <init_spi_lcd+0x27c>)
 8002552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002556:	61d3      	str	r3, [r2, #28]

    // Connect pins to SPI2
    GPIOB->AFR[13 >> 0x03] &= ~(0x0000000F << ((13 & 0x00000007) * 4)); // Clear alternate function for PB13
 8002558:	4b98      	ldr	r3, [pc, #608]	; (80027bc <init_spi_lcd+0x280>)
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	4a97      	ldr	r2, [pc, #604]	; (80027bc <init_spi_lcd+0x280>)
 800255e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002562:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[13 >> 0x03] |=  (0x00000005 << ((13 & 0x00000007) * 4)); // Set alternate 5 function for PB13 - SCLK
 8002564:	4b95      	ldr	r3, [pc, #596]	; (80027bc <init_spi_lcd+0x280>)
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	4a94      	ldr	r2, [pc, #592]	; (80027bc <init_spi_lcd+0x280>)
 800256a:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800256e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] &= ~(0x0000000F << ((15 & 0x00000007) * 4)); // Clear alternate function for PB15
 8002570:	4b92      	ldr	r3, [pc, #584]	; (80027bc <init_spi_lcd+0x280>)
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	4a91      	ldr	r2, [pc, #580]	; (80027bc <init_spi_lcd+0x280>)
 8002576:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800257a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] |=  (0x00000005 << ((15 & 0x00000007) * 4)); // Set alternate 5 function for PB15 - MOSI
 800257c:	4b8f      	ldr	r3, [pc, #572]	; (80027bc <init_spi_lcd+0x280>)
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	4a8e      	ldr	r2, [pc, #568]	; (80027bc <init_spi_lcd+0x280>)
 8002582:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8002586:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB13 and PB15 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear speed register
 8002588:	4b8c      	ldr	r3, [pc, #560]	; (80027bc <init_spi_lcd+0x280>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4a8b      	ldr	r2, [pc, #556]	; (80027bc <init_spi_lcd+0x280>)
 800258e:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8002592:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (13 * 2) | 0x00000001 << (15 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8002594:	4b89      	ldr	r3, [pc, #548]	; (80027bc <init_spi_lcd+0x280>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	4a88      	ldr	r2, [pc, #544]	; (80027bc <init_spi_lcd+0x280>)
 800259a:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 800259e:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (13)     | 0x0001     << (15));        // Clear output type register
 80025a0:	4b86      	ldr	r3, [pc, #536]	; (80027bc <init_spi_lcd+0x280>)
 80025a2:	889b      	ldrh	r3, [r3, #4]
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	4985      	ldr	r1, [pc, #532]	; (80027bc <init_spi_lcd+0x280>)
 80025a8:	f645 73ff 	movw	r3, #24575	; 0x5fff
 80025ac:	4013      	ands	r3, r2
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	808b      	strh	r3, [r1, #4]
    GPIOB->OTYPER  |=  (0x0000     << (13)     | 0x0000     << (15));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80025b2:	4a82      	ldr	r2, [pc, #520]	; (80027bc <init_spi_lcd+0x280>)
 80025b4:	4b81      	ldr	r3, [pc, #516]	; (80027bc <init_spi_lcd+0x280>)
 80025b6:	8892      	ldrh	r2, [r2, #4]
 80025b8:	b292      	uxth	r2, r2
 80025ba:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear mode register
 80025bc:	4b7f      	ldr	r3, [pc, #508]	; (80027bc <init_spi_lcd+0x280>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a7e      	ldr	r2, [pc, #504]	; (80027bc <init_spi_lcd+0x280>)
 80025c2:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 80025c6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (13 * 2) | 0x00000002 << (15 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80025c8:	4b7c      	ldr	r3, [pc, #496]	; (80027bc <init_spi_lcd+0x280>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a7b      	ldr	r2, [pc, #492]	; (80027bc <init_spi_lcd+0x280>)
 80025ce:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 80025d2:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear push/pull register
 80025d4:	4b79      	ldr	r3, [pc, #484]	; (80027bc <init_spi_lcd+0x280>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4a78      	ldr	r2, [pc, #480]	; (80027bc <init_spi_lcd+0x280>)
 80025da:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 80025de:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (13 * 2) | 0x00000000 << (15 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80025e0:	4b76      	ldr	r3, [pc, #472]	; (80027bc <init_spi_lcd+0x280>)
 80025e2:	4a76      	ldr	r2, [pc, #472]	; (80027bc <init_spi_lcd+0x280>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	60d3      	str	r3, [r2, #12]

    // Initialize REEST, nCS, and A0
    // Configure pins PB6 and PB14 for 10 MHz output
    GPIOB->OSPEEDR &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear speed register
 80025e8:	4b74      	ldr	r3, [pc, #464]	; (80027bc <init_spi_lcd+0x280>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	4a73      	ldr	r2, [pc, #460]	; (80027bc <init_spi_lcd+0x280>)
 80025ee:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 80025f2:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80025f4:	4b71      	ldr	r3, [pc, #452]	; (80027bc <init_spi_lcd+0x280>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	4a70      	ldr	r2, [pc, #448]	; (80027bc <init_spi_lcd+0x280>)
 80025fa:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 80025fe:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (6)     | 0x0001     << (14));        // Clear output type register
 8002600:	4b6e      	ldr	r3, [pc, #440]	; (80027bc <init_spi_lcd+0x280>)
 8002602:	889b      	ldrh	r3, [r3, #4]
 8002604:	b29b      	uxth	r3, r3
 8002606:	4a6d      	ldr	r2, [pc, #436]	; (80027bc <init_spi_lcd+0x280>)
 8002608:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800260c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002610:	b29b      	uxth	r3, r3
 8002612:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0000     << (6)     | 0x0000     << (14));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8002614:	4a69      	ldr	r2, [pc, #420]	; (80027bc <init_spi_lcd+0x280>)
 8002616:	4b69      	ldr	r3, [pc, #420]	; (80027bc <init_spi_lcd+0x280>)
 8002618:	8892      	ldrh	r2, [r2, #4]
 800261a:	b292      	uxth	r2, r2
 800261c:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear mode register
 800261e:	4b67      	ldr	r3, [pc, #412]	; (80027bc <init_spi_lcd+0x280>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a66      	ldr	r2, [pc, #408]	; (80027bc <init_spi_lcd+0x280>)
 8002624:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 8002628:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 800262a:	4b64      	ldr	r3, [pc, #400]	; (80027bc <init_spi_lcd+0x280>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a63      	ldr	r2, [pc, #396]	; (80027bc <init_spi_lcd+0x280>)
 8002630:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 8002634:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear push/pull register
 8002636:	4b61      	ldr	r3, [pc, #388]	; (80027bc <init_spi_lcd+0x280>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	4a60      	ldr	r2, [pc, #384]	; (80027bc <init_spi_lcd+0x280>)
 800263c:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 8002640:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (6 * 2) | 0x00000000 << (14 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8002642:	4b5e      	ldr	r3, [pc, #376]	; (80027bc <init_spi_lcd+0x280>)
 8002644:	4a5d      	ldr	r2, [pc, #372]	; (80027bc <init_spi_lcd+0x280>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	60d3      	str	r3, [r2, #12]
    // Configure pin PA8 for 10 MHz output
    GPIOA->OSPEEDR &= ~0x00000003 << (8 * 2);    // Clear speed register
 800264a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002654:	0c9b      	lsrs	r3, r3, #18
 8002656:	049b      	lsls	r3, r3, #18
 8002658:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  0x00000001 << (8 * 2);    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 800265a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002668:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~0x0001     << (8);        // Clear output type register
 800266a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800266e:	889b      	ldrh	r3, [r3, #4]
 8002670:	b29b      	uxth	r3, r3
 8002672:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002676:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	b29b      	uxth	r3, r3
 8002680:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  0x0000     << (8);        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8002682:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002686:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800268a:	8892      	ldrh	r2, [r2, #4]
 800268c:	b292      	uxth	r2, r2
 800268e:	809a      	strh	r2, [r3, #4]


    GPIOA->MODER   &= ~0x00000003 << (8 * 2);    // Clear mode register
 8002690:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800269a:	0c9b      	lsrs	r3, r3, #18
 800269c:	049b      	lsls	r3, r3, #18
 800269e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  0x00000001 << (8 * 2);    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80026a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80026aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ae:	6013      	str	r3, [r2, #0]

    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // This is needed for UART to work. It makes no sense.
 80026b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80026ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026be:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));
 80026c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80026ca:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80026ce:	6013      	str	r3, [r2, #0]

    GPIOA->PUPDR   &= ~0x00000003 << (8 * 2);    // Clear push/pull register
 80026d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80026da:	0c9b      	lsrs	r3, r3, #18
 80026dc:	049b      	lsls	r3, r3, #18
 80026de:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  0x00000000 << (8 * 2);    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80026e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80026e4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	60d3      	str	r3, [r2, #12]

    GPIOB->ODR |=  (0x0001 << 6); // CS = 1
 80026ec:	4b33      	ldr	r3, [pc, #204]	; (80027bc <init_spi_lcd+0x280>)
 80026ee:	8a9b      	ldrh	r3, [r3, #20]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	4a32      	ldr	r2, [pc, #200]	; (80027bc <init_spi_lcd+0x280>)
 80026f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	8293      	strh	r3, [r2, #20]

    // Configure SPI2
    SPI2->CR1 &= 0x3040; // Clear CR1 Register
 80026fc:	4b30      	ldr	r3, [pc, #192]	; (80027c0 <init_spi_lcd+0x284>)
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	b29b      	uxth	r3, r3
 8002702:	4a2f      	ldr	r2, [pc, #188]	; (80027c0 <init_spi_lcd+0x284>)
 8002704:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8002708:	b29b      	uxth	r3, r3
 800270a:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Configure direction (0x0000 - 2 Lines Full Duplex, 0x0400 - 2 Lines RX Only, 0x8000 - 1 Line RX, 0xC000 - 1 Line TX)
 800270c:	4a2c      	ldr	r2, [pc, #176]	; (80027c0 <init_spi_lcd+0x284>)
 800270e:	4b2c      	ldr	r3, [pc, #176]	; (80027c0 <init_spi_lcd+0x284>)
 8002710:	8812      	ldrh	r2, [r2, #0]
 8002712:	b292      	uxth	r2, r2
 8002714:	801a      	strh	r2, [r3, #0]
    SPI2->CR1 |= 0x0104; // Configure mode (0x0000 - Slave, 0x0104 - Master)
 8002716:	4b2a      	ldr	r3, [pc, #168]	; (80027c0 <init_spi_lcd+0x284>)
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	4a28      	ldr	r2, [pc, #160]	; (80027c0 <init_spi_lcd+0x284>)
 800271e:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 8002722:	b29b      	uxth	r3, r3
 8002724:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0002; // Configure clock polarity (0x0000 - Low, 0x0002 - High)
 8002726:	4b26      	ldr	r3, [pc, #152]	; (80027c0 <init_spi_lcd+0x284>)
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	b29b      	uxth	r3, r3
 800272c:	4a24      	ldr	r2, [pc, #144]	; (80027c0 <init_spi_lcd+0x284>)
 800272e:	f043 0302 	orr.w	r3, r3, #2
 8002732:	b29b      	uxth	r3, r3
 8002734:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0001; // Configure clock phase (0x0000 - 1 Edge, 0x0001 - 2 Edge)
 8002736:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <init_spi_lcd+0x284>)
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	b29b      	uxth	r3, r3
 800273c:	4a20      	ldr	r2, [pc, #128]	; (80027c0 <init_spi_lcd+0x284>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	b29b      	uxth	r3, r3
 8002744:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0200; // Configure chip select (0x0000 - Hardware based, 0x0200 - Software based)
 8002746:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <init_spi_lcd+0x284>)
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	4a1c      	ldr	r2, [pc, #112]	; (80027c0 <init_spi_lcd+0x284>)
 800274e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002752:	b29b      	uxth	r3, r3
 8002754:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0008; // Set Baud Rate Prescaler (0x0000 - 2, 0x0008 - 4, 0x0018 - 8, 0x0020 - 16, 0x0028 - 32, 0x0028 - 64, 0x0030 - 128, 0x0038 - 128)
 8002756:	4b1a      	ldr	r3, [pc, #104]	; (80027c0 <init_spi_lcd+0x284>)
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	4a18      	ldr	r2, [pc, #96]	; (80027c0 <init_spi_lcd+0x284>)
 800275e:	f043 0308 	orr.w	r3, r3, #8
 8002762:	b29b      	uxth	r3, r3
 8002764:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Set Bit Order (0x0000 - MSB First, 0x0080 - LSB First)
 8002766:	4a16      	ldr	r2, [pc, #88]	; (80027c0 <init_spi_lcd+0x284>)
 8002768:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <init_spi_lcd+0x284>)
 800276a:	8812      	ldrh	r2, [r2, #0]
 800276c:	b292      	uxth	r2, r2
 800276e:	801a      	strh	r2, [r3, #0]
    SPI2->CR2 &= ~0x0F00; // Clear CR2 Register
 8002770:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <init_spi_lcd+0x284>)
 8002772:	889b      	ldrh	r3, [r3, #4]
 8002774:	b29b      	uxth	r3, r3
 8002776:	4a12      	ldr	r2, [pc, #72]	; (80027c0 <init_spi_lcd+0x284>)
 8002778:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800277c:	b29b      	uxth	r3, r3
 800277e:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x0700; // Set Number of Bits (0x0300 - 4, 0x0400 - 5, 0x0500 - 6, ...);
 8002780:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <init_spi_lcd+0x284>)
 8002782:	889b      	ldrh	r3, [r3, #4]
 8002784:	b29b      	uxth	r3, r3
 8002786:	4a0e      	ldr	r2, [pc, #56]	; (80027c0 <init_spi_lcd+0x284>)
 8002788:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800278c:	b29b      	uxth	r3, r3
 800278e:	8093      	strh	r3, [r2, #4]
    SPI2->I2SCFGR &= ~0x0800; // Disable I2S
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <init_spi_lcd+0x284>)
 8002792:	8b9b      	ldrh	r3, [r3, #28]
 8002794:	b29b      	uxth	r3, r3
 8002796:	4a0a      	ldr	r2, [pc, #40]	; (80027c0 <init_spi_lcd+0x284>)
 8002798:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800279c:	b29b      	uxth	r3, r3
 800279e:	8393      	strh	r3, [r2, #28]
    SPI2->CRCPR = 7; // Set CRC polynomial order
 80027a0:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <init_spi_lcd+0x284>)
 80027a2:	2207      	movs	r2, #7
 80027a4:	821a      	strh	r2, [r3, #16]
    SPI2->CR2 &= ~0x1000;
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <init_spi_lcd+0x284>)
 80027a8:	889b      	ldrh	r3, [r3, #4]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <init_spi_lcd+0x284>)
 80027ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	e006      	b.n	80027c4 <init_spi_lcd+0x288>
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000
 80027bc:	48000400 	.word	0x48000400
 80027c0:	40003800 	.word	0x40003800
 80027c4:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x1000; // Configure RXFIFO return at (0x0000 - Half-full (16 bits), 0x1000 - Quarter-full (8 bits))
 80027c6:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <init_spi_lcd+0x2b4>)
 80027c8:	889b      	ldrh	r3, [r3, #4]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	4a08      	ldr	r2, [pc, #32]	; (80027f0 <init_spi_lcd+0x2b4>)
 80027ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	8093      	strh	r3, [r2, #4]
    SPI2->CR1 |= 0x0040; // Enable SPI2
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <init_spi_lcd+0x2b4>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <init_spi_lcd+0x2b4>)
 80027de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	8013      	strh	r3, [r2, #0]

    lcd_reset();
 80027e6:	f7ff fe39 	bl	800245c <lcd_reset>
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40003800 	.word	0x40003800

080027f4 <generate_line_buff>:

void generate_line_buff(uint8_t * str, uint8_t * linebuff, uint16_t bufflen){
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
    uint8_t idx;
    //convert each character to a 5+1 (CHAR_WIDTH) slices and add it to the line buffer
    for(int i = 0; i<bufflen; i++){
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	e06d      	b.n	80028e4 <generate_line_buff+0xf0>
        if (str[i] == '\0'){
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4413      	add	r3, r2
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d06c      	beq.n	80028ee <generate_line_buff+0xfa>
            break;
        }
        idx = CHAR_WIDTH*i;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	461a      	mov	r2, r3
 800281a:	0052      	lsls	r2, r2, #1
 800281c:	4413      	add	r3, r2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	74fb      	strb	r3, [r7, #19]
        linebuff[idx] = character_data[str[i]-0x20][0];
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4413      	add	r3, r2
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	f1a3 0220 	sub.w	r2, r3, #32
 800282e:	7cfb      	ldrb	r3, [r7, #19]
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	4419      	add	r1, r3
 8002834:	4831      	ldr	r0, [pc, #196]	; (80028fc <generate_line_buff+0x108>)
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	4403      	add	r3, r0
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	700b      	strb	r3, [r1, #0]
        linebuff[idx+1] = character_data[str[i]-0x20][1];
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4413      	add	r3, r2
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	f1a3 0220 	sub.w	r2, r3, #32
 800284e:	7cfb      	ldrb	r3, [r7, #19]
 8002850:	3301      	adds	r3, #1
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	4419      	add	r1, r3
 8002856:	4829      	ldr	r0, [pc, #164]	; (80028fc <generate_line_buff+0x108>)
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	4403      	add	r3, r0
 8002860:	3301      	adds	r3, #1
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	700b      	strb	r3, [r1, #0]
        linebuff[idx+2] = character_data[str[i]-0x20][2];
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4413      	add	r3, r2
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	f1a3 0220 	sub.w	r2, r3, #32
 8002872:	7cfb      	ldrb	r3, [r7, #19]
 8002874:	3302      	adds	r3, #2
 8002876:	68b9      	ldr	r1, [r7, #8]
 8002878:	4419      	add	r1, r3
 800287a:	4820      	ldr	r0, [pc, #128]	; (80028fc <generate_line_buff+0x108>)
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	4403      	add	r3, r0
 8002884:	3302      	adds	r3, #2
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	700b      	strb	r3, [r1, #0]
        linebuff[idx+3] = character_data[str[i]-0x20][3];
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4413      	add	r3, r2
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	f1a3 0220 	sub.w	r2, r3, #32
 8002896:	7cfb      	ldrb	r3, [r7, #19]
 8002898:	3303      	adds	r3, #3
 800289a:	68b9      	ldr	r1, [r7, #8]
 800289c:	4419      	add	r1, r3
 800289e:	4817      	ldr	r0, [pc, #92]	; (80028fc <generate_line_buff+0x108>)
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	4403      	add	r3, r0
 80028a8:	3303      	adds	r3, #3
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	700b      	strb	r3, [r1, #0]
        linebuff[idx+4] = character_data[str[i]-0x20][4];
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	f1a3 0220 	sub.w	r2, r3, #32
 80028ba:	7cfb      	ldrb	r3, [r7, #19]
 80028bc:	3304      	adds	r3, #4
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	4419      	add	r1, r3
 80028c2:	480e      	ldr	r0, [pc, #56]	; (80028fc <generate_line_buff+0x108>)
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	4403      	add	r3, r0
 80028cc:	3304      	adds	r3, #4
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	700b      	strb	r3, [r1, #0]
        linebuff[idx+5] = 0x00;
 80028d2:	7cfb      	ldrb	r3, [r7, #19]
 80028d4:	3305      	adds	r3, #5
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	4413      	add	r3, r2
 80028da:	2200      	movs	r2, #0
 80028dc:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i<bufflen; i++){
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	3301      	adds	r3, #1
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	db8d      	blt.n	8002808 <generate_line_buff+0x14>
    }
}
 80028ec:	e000      	b.n	80028f0 <generate_line_buff+0xfc>
            break;
 80028ee:	bf00      	nop
}
 80028f0:	bf00      	nop
 80028f2:	371c      	adds	r7, #28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	08006210 	.word	0x08006210

08002900 <write_line_buff>:

void write_line_buff(uint8_t * linebuff, uint8_t * lcdbuff, uint8_t xoffset, uint8_t yoffset, uint8_t scrollena){
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	4611      	mov	r1, r2
 800290c:	461a      	mov	r2, r3
 800290e:	460b      	mov	r3, r1
 8002910:	71fb      	strb	r3, [r7, #7]
 8002912:	4613      	mov	r3, r2
 8002914:	71bb      	strb	r3, [r7, #6]
    //  y offset refers to the line offset
    //note:     String will be capped, if it is longer than LCD_LINE_SIZE slices (i.e. 1 line)
    //note2:    String will be capped, if it exceeds size of lcdBuffer.
    //note3:    If scrolling is enabled, the LCD line will wrap around when xoffset is large enough.
    //          Otherwise, it will be capped.
    if (scrollena > 0){
 8002916:	f897 3020 	ldrb.w	r3, [r7, #32]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d019      	beq.n	8002952 <write_line_buff+0x52>
        for(uint8_t idx = 0; idx<LCD_LINE_SIZE; idx++){
 800291e:	2300      	movs	r3, #0
 8002920:	75fb      	strb	r3, [r7, #23]
 8002922:	e011      	b.n	8002948 <write_line_buff+0x48>
            lcdbuff[idx+yoffset*LCD_LINE_SIZE] = linebuff[(idx + xoffset) & LCD_LINE_BUFF_SIZE-1];
 8002924:	7dfa      	ldrb	r2, [r7, #23]
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	4413      	add	r3, r2
 800292a:	b2db      	uxtb	r3, r3
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	441a      	add	r2, r3
 8002930:	7df9      	ldrb	r1, [r7, #23]
 8002932:	79bb      	ldrb	r3, [r7, #6]
 8002934:	01db      	lsls	r3, r3, #7
 8002936:	440b      	add	r3, r1
 8002938:	4619      	mov	r1, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	440b      	add	r3, r1
 800293e:	7812      	ldrb	r2, [r2, #0]
 8002940:	701a      	strb	r2, [r3, #0]
        for(uint8_t idx = 0; idx<LCD_LINE_SIZE; idx++){
 8002942:	7dfb      	ldrb	r3, [r7, #23]
 8002944:	3301      	adds	r3, #1
 8002946:	75fb      	strb	r3, [r7, #23]
 8002948:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800294c:	2b00      	cmp	r3, #0
 800294e:	dae9      	bge.n	8002924 <write_line_buff+0x24>
        }
    }else{
        memcpy(lcdbuff + xoffset+yoffset*LCD_LINE_SIZE, linebuff, sizeof(uint8_t) * LCD_LINE_SIZE-xoffset);
    }

}
 8002950:	e00c      	b.n	800296c <write_line_buff+0x6c>
        memcpy(lcdbuff + xoffset+yoffset*LCD_LINE_SIZE, linebuff, sizeof(uint8_t) * LCD_LINE_SIZE-xoffset);
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	79ba      	ldrb	r2, [r7, #6]
 8002956:	01d2      	lsls	r2, r2, #7
 8002958:	4413      	add	r3, r2
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	18d0      	adds	r0, r2, r3
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002964:	461a      	mov	r2, r3
 8002966:	68f9      	ldr	r1, [r7, #12]
 8002968:	f000 fc92 	bl	8003290 <memcpy>
}
 800296c:	bf00      	nop
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <lcd_write_string>:

void lcd_write_string(uint8_t * str, uint8_t * lcdBuff, uint8_t xoffset, uint8_t yoffset){
 8002974:	b590      	push	{r4, r7, lr}
 8002976:	b0c7      	sub	sp, #284	; 0x11c
 8002978:	af02      	add	r7, sp, #8
 800297a:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800297e:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8002982:	6020      	str	r0, [r4, #0]
 8002984:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8002988:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 800298c:	6001      	str	r1, [r0, #0]
 800298e:	4619      	mov	r1, r3
 8002990:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002994:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800299e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80029a2:	460a      	mov	r2, r1
 80029a4:	701a      	strb	r2, [r3, #0]
    uint8_t lineBuff[256];
    memset(lineBuff,0x00,256);
 80029a6:	f107 0310 	add.w	r3, r7, #16
 80029aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 fc7b 	bl	80032ac <memset>
    //render a string and add to the line buffer (256 slices long)
    generate_line_buff(str, lineBuff, 255);
 80029b6:	f107 0110 	add.w	r1, r7, #16
 80029ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80029c2:	22ff      	movs	r2, #255	; 0xff
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	f7ff ff15 	bl	80027f4 <generate_line_buff>
    //add line buffer to LCD buffer at a specific x,y position
    //  (horizontal scrolling is always disabled!)
    write_line_buff(lineBuff, lcdBuff, xoffset, yoffset, 0);
 80029ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029ce:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80029d2:	781c      	ldrb	r4, [r3, #0]
 80029d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029d8:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80029dc:	781a      	ldrb	r2, [r3, #0]
 80029de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029e2:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 80029e6:	f107 0010 	add.w	r0, r7, #16
 80029ea:	2300      	movs	r3, #0
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	4623      	mov	r3, r4
 80029f0:	6809      	ldr	r1, [r1, #0]
 80029f2:	f7ff ff85 	bl	8002900 <write_line_buff>
}
 80029f6:	bf00      	nop
 80029f8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd90      	pop	{r4, r7, pc}

08002a00 <NVIC_EnableIRQ>:
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	2201      	movs	r2, #1
 8002a12:	fa02 f103 	lsl.w	r1, r2, r3
 8002a16:	4a06      	ldr	r2, [pc, #24]	; (8002a30 <NVIC_EnableIRQ+0x30>)
 8002a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	e000e100 	.word	0xe000e100

08002a34 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	6039      	str	r1, [r7, #0]
 8002a3e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8002a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	da0b      	bge.n	8002a60 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	490c      	ldr	r1, [pc, #48]	; (8002a80 <NVIC_SetPriority+0x4c>)
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	f003 030f 	and.w	r3, r3, #15
 8002a54:	3b04      	subs	r3, #4
 8002a56:	0112      	lsls	r2, r2, #4
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8002a5e:	e009      	b.n	8002a74 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	4907      	ldr	r1, [pc, #28]	; (8002a84 <NVIC_SetPriority+0x50>)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	0112      	lsls	r2, r2, #4
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	440b      	add	r3, r1
 8002a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00
 8002a84:	e000e100 	.word	0xe000e100

08002a88 <initTimer2>:
uint8_t fbuffer[512];
uint16_t volatile adc1;
uint16_t volatile adc2;
uint8_t volatile ADCupdate=0;

void initTimer2(void){
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
 8002a8e:	2101      	movs	r1, #1
 8002a90:	2001      	movs	r0, #1
 8002a92:	f7fe ff35 	bl	8001900 <RCC_APB1PeriphClockCmd>
	NVIC_InitTypeDef NVIC_InitStructure;
	// NVIC for timer
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8002a96:	231c      	movs	r3, #28
 8002a98:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStructure);
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fe fc49 	bl	8001340 <NVIC_Init>
	TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE);
 8002aae:	2201      	movs	r2, #1
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ab6:	f7ff f913 	bl	8001ce0 <TIM_ITConfig>
	TIM_Cmd(TIM2,ENABLE);
 8002aba:	2101      	movs	r1, #1
 8002abc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ac0:	f7ff f802 	bl	8001ac8 <TIM_Cmd>
	//Settings timer
	RCC->APB1ENR |= RCC_APB1Periph_TIM2; // Enable clock line to timer 2
 8002ac4:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <initTimer2+0x98>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	4a15      	ldr	r2, [pc, #84]	; (8002b20 <initTimer2+0x98>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	61d3      	str	r3, [r2, #28]
	TIM2->CR1=0xB01;
 8002ad0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ad4:	f640 3201 	movw	r2, #2817	; 0xb01
 8002ad8:	801a      	strh	r2, [r3, #0]
	TIM2->PSC=6399; //change pre-scaler frequency to 10kHz
 8002ada:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ade:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8002ae2:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->ARR=999; //count up to 100
 8002ae4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ae8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002aec:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->DIER |= 0x0001; // Enable timer 2 interrupts
 8002aee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	60d3      	str	r3, [r2, #12]
    //NVIC settings
	NVIC_SetPriority(TIM2_IRQn, 1); // Set interrupt priority interrupts
 8002afe:	2101      	movs	r1, #1
 8002b00:	201c      	movs	r0, #28
 8002b02:	f7ff ff97 	bl	8002a34 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn); // Enable interrupt
 8002b06:	201c      	movs	r0, #28
 8002b08:	f7ff ff7a 	bl	8002a00 <NVIC_EnableIRQ>
	TIM_Cmd(TIM2,DISABLE);
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002b12:	f7fe ffd9 	bl	8001ac8 <TIM_Cmd>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000

08002b24 <ADC_setup_pA>:

void ADC_setup_pA(void){
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08a      	sub	sp, #40	; 0x28
 8002b28:	af00      	add	r7, sp, #0
	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div8); //adc clk
 8002b2a:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002b2e:	f7fe fe7f 	bl	8001830 <RCC_ADCCLKConfig>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE); //enable adc
 8002b32:	2101      	movs	r1, #1
 8002b34:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002b38:	f7fe fea2 	bl	8001880 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE); //gpio clock
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002b42:	f7fe fe9d 	bl	8001880 <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructAll; // Define typedef struct for setting pins

	GPIO_StructInit(&GPIO_InitStructAll); // Initialize GPIO struct
 8002b46:	f107 0320 	add.w	r3, r7, #32
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fb94 	bl	8001278 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_AN; // Set as input
 8002b50:	2303      	movs	r3, #3
 8002b52:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN; // Set as pull down
 8002b56:	2302      	movs	r3, #2
 8002b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_0; // Set so the configuration is on pin 4
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	623b      	str	r3, [r7, #32]
	GPIO_Init(GPIOA, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 8002b60:	f107 0320 	add.w	r3, r7, #32
 8002b64:	4619      	mov	r1, r3
 8002b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b6a:	f7fe faef 	bl	800114c <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll); // Initialize GPIO struct
 8002b6e:	f107 0320 	add.w	r3, r7, #32
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe fb80 	bl	8001278 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_AN; // Set as input
 8002b78:	2303      	movs	r3, #3
 8002b7a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN; // Set as pull down
 8002b7e:	2302      	movs	r3, #2
 8002b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_1; // Set so the configuration is on pin 4
 8002b84:	2302      	movs	r3, #2
 8002b86:	623b      	str	r3, [r7, #32]
	GPIO_Init(GPIOA, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 8002b88:	f107 0320 	add.w	r3, r7, #32
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b92:	f7fe fadb 	bl	800114c <GPIO_Init>

	ADC_InitTypeDef ADC_InitStructAll; //struct for adc config

	ADC_StructInit(&ADC_InitStructAll); //settings for the adc
 8002b96:	463b      	mov	r3, r7
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fe f8b7 	bl	8000d0c <ADC_StructInit>
	ADC_InitStructAll.ADC_ContinuousConvMode = DISABLE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	603b      	str	r3, [r7, #0]
	ADC_InitStructAll.ADC_Resolution = ADC_Resolution_12b;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	607b      	str	r3, [r7, #4]
	ADC_InitStructAll.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
	ADC_InitStructAll.ADC_DataAlign = ADC_DataAlign_Right;
 8002baa:	2300      	movs	r3, #0
 8002bac:	613b      	str	r3, [r7, #16]
	ADC_InitStructAll.ADC_NbrOfRegChannel = 1;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	773b      	strb	r3, [r7, #28]
	ADC_Init(ADC1,&ADC_InitStructAll); // init the adc settings
 8002bb2:	463b      	mov	r3, r7
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002bba:	f7fe f865 	bl	8000c88 <ADC_Init>
	ADC_Cmd(ADC1,ENABLE); //enable adc
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002bc4:	f7fe f8c4 	bl	8000d50 <ADC_Cmd>
	// set internal reference voltage source and wait
}
 8002bc8:	bf00      	nop
 8002bca:	3728      	adds	r7, #40	; 0x28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <ADC_Calibrate>:

void ADC_Calibrate(){
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
	ADC_VoltageRegulatorCmd(ADC1,ENABLE);
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002bdc:	f7fe f929 	bl	8000e32 <ADC_VoltageRegulatorCmd>
	//Wait for at least 10uS before continuing...
	for(uint32_t i = 0; i<10000;i++);
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	e002      	b.n	8002bec <ADC_Calibrate+0x1c>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	3301      	adds	r3, #1
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f242 720f 	movw	r2, #9999	; 0x270f
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d9f7      	bls.n	8002be6 <ADC_Calibrate+0x16>

	ADC_Cmd(ADC1,DISABLE);
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002bfc:	f7fe f8a8 	bl	8000d50 <ADC_Cmd>
	while(ADC_GetDisableCmdStatus(ADC1)){} // wait for disable of ADC
 8002c00:	bf00      	nop
 8002c02:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c06:	f7fe f8fc 	bl	8000e02 <ADC_GetDisableCmdStatus>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1f8      	bne.n	8002c02 <ADC_Calibrate+0x32>

	ADC_SelectCalibrationMode(ADC1,ADC_CalibrationMode_Single); //select calibration mode
 8002c10:	2100      	movs	r1, #0
 8002c12:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c16:	f7fe f8c7 	bl	8000da8 <ADC_SelectCalibrationMode>
	ADC_StartCalibration(ADC1); //calibrate adc
 8002c1a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c1e:	f7fe f8b3 	bl	8000d88 <ADC_StartCalibration>
	while(ADC_GetCalibrationStatus(ADC1)){} //wait for calibration
 8002c22:	bf00      	nop
 8002c24:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c28:	f7fe f8d5 	bl	8000dd6 <ADC_GetCalibrationStatus>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f8      	bne.n	8002c24 <ADC_Calibrate+0x54>
	for(uint32_t i = 0; i<100;i++);//wait more
 8002c32:	2300      	movs	r3, #0
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	e002      	b.n	8002c3e <ADC_Calibrate+0x6e>
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b63      	cmp	r3, #99	; 0x63
 8002c42:	d9f9      	bls.n	8002c38 <ADC_Calibrate+0x68>

	ADC_VrefintCmd(ADC1,ENABLE); // setup ref voltage to channel 18
 8002c44:	2101      	movs	r1, #1
 8002c46:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c4a:	f7fe f915 	bl	8000e78 <ADC_VrefintCmd>
	for(uint32_t i = 0; i<10000;i++); // wait for some time
 8002c4e:	2300      	movs	r3, #0
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	e002      	b.n	8002c5a <ADC_Calibrate+0x8a>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3301      	adds	r3, #1
 8002c58:	607b      	str	r3, [r7, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d9f7      	bls.n	8002c54 <ADC_Calibrate+0x84>

	ADC_Cmd(ADC1,ENABLE);// turn on ADC
 8002c64:	2101      	movs	r1, #1
 8002c66:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c6a:	f7fe f871 	bl	8000d50 <ADC_Cmd>
	while((!ADC_GetFlagStatus(ADC1,ADC_FLAG_RDY))){	} //wait for adc to turn on
 8002c6e:	bf00      	nop
 8002c70:	2101      	movs	r1, #1
 8002c72:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c76:	f7fe fa50 	bl	800111a <ADC_GetFlagStatus>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0f7      	beq.n	8002c70 <ADC_Calibrate+0xa0>

	ADC_RegularChannelConfig(ADC1, ADC_Channel_18, 1, ADC_SampleTime_19Cycles5); //wait for 2.2us
 8002c80:	2304      	movs	r3, #4
 8002c82:	2201      	movs	r2, #1
 8002c84:	2112      	movs	r1, #18
 8002c86:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c8a:	f7fe f931 	bl	8000ef0 <ADC_RegularChannelConfig>
	ADC_StartConversion(ADC1); // Start ADC read
 8002c8e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c92:	f7fe fa25 	bl	80010e0 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 8002c96:	bf00      	nop
 8002c98:	2104      	movs	r1, #4
 8002c9a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c9e:	f7fe fa3c 	bl	800111a <ADC_GetFlagStatus>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f7      	beq.n	8002c98 <ADC_Calibrate+0xc8>

	uint16_t VREFINT_DATA = ADC_GetConversionValue(ADC1); // save measured data
 8002ca8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002cac:	f7fe fa28 	bl	8001100 <ADC_GetConversionValue>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	807b      	strh	r3, [r7, #2]
	V_ABS = ((3.3 * (VREFINT_CAL / VREFINT_DATA)) / 4095); // calculate the voltage/adc step
 8002cb4:	4b16      	ldr	r3, [pc, #88]	; (8002d10 <ADC_Calibrate+0x140>)
 8002cb6:	881a      	ldrh	r2, [r3, #0]
 8002cb8:	887b      	ldrh	r3, [r7, #2]
 8002cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fc2f 	bl	8000524 <__aeabi_i2d>
 8002cc6:	a30e      	add	r3, pc, #56	; (adr r3, 8002d00 <ADC_Calibrate+0x130>)
 8002cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ccc:	f7fd fc94 	bl	80005f8 <__aeabi_dmul>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	a30b      	add	r3, pc, #44	; (adr r3, 8002d08 <ADC_Calibrate+0x138>)
 8002cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cde:	f7fd fdb5 	bl	800084c <__aeabi_ddiv>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f7fd ff7d 	bl	8000be8 <__aeabi_d2f>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4a08      	ldr	r2, [pc, #32]	; (8002d14 <ADC_Calibrate+0x144>)
 8002cf2:	6013      	str	r3, [r2, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	f3af 8000 	nop.w
 8002d00:	66666666 	.word	0x66666666
 8002d04:	400a6666 	.word	0x400a6666
 8002d08:	00000000 	.word	0x00000000
 8002d0c:	40affe00 	.word	0x40affe00
 8002d10:	1ffff7ba 	.word	0x1ffff7ba
 8002d14:	2000031c 	.word	0x2000031c

08002d18 <ADC_measure_PA>:

uint16_t ADC_measure_PA(uint8_t channel){
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71fb      	strb	r3, [r7, #7]
	uint16_t x;
	ADC_RegularChannelConfig(ADC1, channel, 1, ADC_SampleTime_1Cycles5);
 8002d22:	79f9      	ldrb	r1, [r7, #7]
 8002d24:	2300      	movs	r3, #0
 8002d26:	2201      	movs	r2, #1
 8002d28:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002d2c:	f7fe f8e0 	bl	8000ef0 <ADC_RegularChannelConfig>
	ADC_StartConversion(ADC1); // Start ADC read
 8002d30:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002d34:	f7fe f9d4 	bl	80010e0 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 8002d38:	bf00      	nop
 8002d3a:	2104      	movs	r1, #4
 8002d3c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002d40:	f7fe f9eb 	bl	800111a <ADC_GetFlagStatus>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f7      	beq.n	8002d3a <ADC_measure_PA+0x22>
	x = ADC_GetConversionValue(ADC1) ; // savemeasured data
 8002d4a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002d4e:	f7fe f9d7 	bl	8001100 <ADC_GetConversionValue>
 8002d52:	4603      	mov	r3, r0
 8002d54:	81fb      	strh	r3, [r7, #14]
	return x;
 8002d56:	89fb      	ldrh	r3, [r7, #14]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) { //timer interrupt handler
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
	if(TIM_GetITStatus(TIM2,TIM_IT_Update) != RESET){ //if interrupt occurs
 8002d64:	2101      	movs	r1, #1
 8002d66:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d6a:	f7fe ffd9 	bl	8001d20 <TIM_GetITStatus>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d007      	beq.n	8002d84 <TIM2_IRQHandler+0x24>
		TIM_ClearITPendingBit(TIM2,TIM_IT_Update); // Clear interrupt bit
 8002d74:	2101      	movs	r1, #1
 8002d76:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d7a:	f7fe fffb 	bl	8001d74 <TIM_ClearITPendingBit>
		ADCupdate=1;
 8002d7e:	4b02      	ldr	r3, [pc, #8]	; (8002d88 <TIM2_IRQHandler+0x28>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	701a      	strb	r2, [r3, #0]
	}
}
 8002d84:	bf00      	nop
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	20000532 	.word	0x20000532
 8002d8c:	00000000 	.word	0x00000000

08002d90 <LCD_data_print>:

void LCD_data_print(void){
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
	lcd_write_string((uint8_t*)"ADC data", fbuffer, 20, 0);
 8002d94:	2300      	movs	r3, #0
 8002d96:	2214      	movs	r2, #20
 8002d98:	4911      	ldr	r1, [pc, #68]	; (8002de0 <LCD_data_print+0x50>)
 8002d9a:	4812      	ldr	r0, [pc, #72]	; (8002de4 <LCD_data_print+0x54>)
 8002d9c:	f7ff fdea 	bl	8002974 <lcd_write_string>
	//sprintf(str,"Pot1: %0.3f",(double)adc1* (double)V_ABS);
	sprintf(str,"Pot1: %0.3f",(uint32_t)adc1/4.1);
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <LCD_data_print+0x58>)
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fd fbac 	bl	8000504 <__aeabi_ui2d>
 8002dac:	a30a      	add	r3, pc, #40	; (adr r3, 8002dd8 <LCD_data_print+0x48>)
 8002dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db2:	f7fd fd4b 	bl	800084c <__aeabi_ddiv>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	490c      	ldr	r1, [pc, #48]	; (8002dec <LCD_data_print+0x5c>)
 8002dbc:	480c      	ldr	r0, [pc, #48]	; (8002df0 <LCD_data_print+0x60>)
 8002dbe:	f000 ffb5 	bl	8003d2c <siprintf>
	lcd_write_string(str, fbuffer, 20, 2);
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	2214      	movs	r2, #20
 8002dc6:	4906      	ldr	r1, [pc, #24]	; (8002de0 <LCD_data_print+0x50>)
 8002dc8:	4809      	ldr	r0, [pc, #36]	; (8002df0 <LCD_data_print+0x60>)
 8002dca:	f7ff fdd3 	bl	8002974 <lcd_write_string>
	//sprintf(str,"Pot2: %0.3f",(float)adc2* (float)V_ABS);
	//lcd_write_string(str, fbuffer, 20, 3);
	lcd_push_buffer(fbuffer);
 8002dce:	4804      	ldr	r0, [pc, #16]	; (8002de0 <LCD_data_print+0x50>)
 8002dd0:	f7ff fa80 	bl	80022d4 <lcd_push_buffer>
}
 8002dd4:	bf00      	nop
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	66666666 	.word	0x66666666
 8002ddc:	40106666 	.word	0x40106666
 8002de0:	20000330 	.word	0x20000330
 8002de4:	080061f8 	.word	0x080061f8
 8002de8:	20000530 	.word	0x20000530
 8002dec:	08006204 	.word	0x08006204
 8002df0:	20000320 	.word	0x20000320

08002df4 <timer16_pwm_init>:

void timer16_pwm_init(void){
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af00      	add	r7, sp, #0
	//step1
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM16, ENABLE);
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002e00:	f7fe fd5e 	bl	80018c0 <RCC_APB2PeriphClockCmd>

	//step3
	TIM_TimeBaseInitTypeDef TIM_InitStructure;
	TIM_TimeBaseStructInit(&TIM_InitStructure);
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe fe43 	bl	8001a94 <TIM_TimeBaseStructInit>
	TIM_InitStructure.TIM_ClockDivision = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	83bb      	strh	r3, [r7, #28]
	TIM_InitStructure.TIM_Period = 1000; //set the maximum period
 8002e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e16:	61bb      	str	r3, [r7, #24]
	TIM_InitStructure.TIM_Prescaler = 64; //for 1MHz counting frequency
 8002e18:	2340      	movs	r3, #64	; 0x40
 8002e1a:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseInit(TIM16,&TIM_InitStructure);
 8002e1c:	f107 0314 	add.w	r3, r7, #20
 8002e20:	4619      	mov	r1, r3
 8002e22:	4812      	ldr	r0, [pc, #72]	; (8002e6c <timer16_pwm_init+0x78>)
 8002e24:	f7fe fdbe 	bl	80019a4 <TIM_TimeBaseInit>

	//step4
	TIM_OCInitTypeDef TIM_OCInitStruct;
	TIM_OCStructInit(&TIM_OCInitStruct);
 8002e28:	463b      	mov	r3, r7
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fe fefe 	bl	8001c2c <TIM_OCStructInit>
	TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
 8002e30:	2360      	movs	r3, #96	; 0x60
 8002e32:	603b      	str	r3, [r7, #0]
	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 8002e34:	2301      	movs	r3, #1
 8002e36:	80bb      	strh	r3, [r7, #4]
	//TIM_OCInitStruct.TIM_Pulse = 0x01f4; // 0x0000 <-> 0xFFFF
	TIM_OCInitStruct.TIM_Pulse = 1000; // 0x0000 <-> 0xFFFF
 8002e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e3c:	60bb      	str	r3, [r7, #8]

	TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	81bb      	strh	r3, [r7, #12]

	//step5
	TIM_OC1Init(TIM16,&TIM_OCInitStruct);
 8002e42:	463b      	mov	r3, r7
 8002e44:	4619      	mov	r1, r3
 8002e46:	4809      	ldr	r0, [pc, #36]	; (8002e6c <timer16_pwm_init+0x78>)
 8002e48:	f7fe fe5e 	bl	8001b08 <TIM_OC1Init>

	//step6
	TIM_OC1PreloadConfig(TIM16,TIM_OCPreload_Enable);
 8002e4c:	2108      	movs	r1, #8
 8002e4e:	4807      	ldr	r0, [pc, #28]	; (8002e6c <timer16_pwm_init+0x78>)
 8002e50:	f7fe ff0e 	bl	8001c70 <TIM_OC1PreloadConfig>

	//step7
	TIM_CtrlPWMOutputs(TIM16, ENABLE);
 8002e54:	2101      	movs	r1, #1
 8002e56:	4805      	ldr	r0, [pc, #20]	; (8002e6c <timer16_pwm_init+0x78>)
 8002e58:	f7fe ff26 	bl	8001ca8 <TIM_CtrlPWMOutputs>
	TIM_Cmd(TIM16,ENABLE);
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	4803      	ldr	r0, [pc, #12]	; (8002e6c <timer16_pwm_init+0x78>)
 8002e60:	f7fe fe32 	bl	8001ac8 <TIM_Cmd>
}
 8002e64:	bf00      	nop
 8002e66:	3720      	adds	r7, #32
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40014400 	.word	0x40014400

08002e70 <GPIO_set_AF1_PA6>:

void GPIO_set_AF1_PA6(void){
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
	//step2
	//RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE); // Enable clock for GPIO Port B
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB,ENABLE); // Enable clock for GPIO Port B
 8002e76:	2101      	movs	r1, #1
 8002e78:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002e7c:	f7fe fd00 	bl	8001880 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructAll; // Define typedef struct for setting pins
	GPIO_StructInit(&GPIO_InitStructAll);
 8002e80:	463b      	mov	r3, r7
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe f9f8 	bl	8001278 <GPIO_StructInit>
	// Then set things that are not default.
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_AF;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	713b      	strb	r3, [r7, #4]
	//GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;
	//GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_6;
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4;
 8002e8c:	2310      	movs	r3, #16
 8002e8e:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_50MHz;
 8002e94:	2303      	movs	r3, #3
 8002e96:	717b      	strb	r3, [r7, #5]
	//GPIO_Init(GPIOA, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
	GPIO_Init(GPIOB, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 8002e98:	463b      	mov	r3, r7
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4805      	ldr	r0, [pc, #20]	; (8002eb4 <GPIO_set_AF1_PA6+0x44>)
 8002e9e:	f7fe f955 	bl	800114c <GPIO_Init>

	//GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_1);
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource4, GPIO_AF_1);
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	2104      	movs	r1, #4
 8002ea6:	4803      	ldr	r0, [pc, #12]	; (8002eb4 <GPIO_set_AF1_PA6+0x44>)
 8002ea8:	f7fe fa00 	bl	80012ac <GPIO_PinAFConfig>
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	48000400 	.word	0x48000400

08002eb8 <main>:

int main(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
	uart_init(9600);
 8002ebe:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8002ec2:	f7ff f8bb 	bl	800203c <uart_init>
	init_spi_lcd();
 8002ec6:	f7ff fb39 	bl	800253c <init_spi_lcd>
	memset(fbuffer,0x00,512); // Sets each element of the buffer to 0xAA
 8002eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ece:	2100      	movs	r1, #0
 8002ed0:	4827      	ldr	r0, [pc, #156]	; (8002f70 <main+0xb8>)
 8002ed2:	f000 f9eb 	bl	80032ac <memset>
	lcd_push_buffer(fbuffer);
 8002ed6:	4826      	ldr	r0, [pc, #152]	; (8002f70 <main+0xb8>)
 8002ed8:	f7ff f9fc 	bl	80022d4 <lcd_push_buffer>
	ADC_setup_pA();
 8002edc:	f7ff fe22 	bl	8002b24 <ADC_setup_pA>
	ADC_Calibrate();
 8002ee0:	f7ff fe76 	bl	8002bd0 <ADC_Calibrate>
	initTimer2();
 8002ee4:	f7ff fdd0 	bl	8002a88 <initTimer2>
	GPIO_set_AF1_PA6();
 8002ee8:	f7ff ffc2 	bl	8002e70 <GPIO_set_AF1_PA6>
	timer16_pwm_init();
 8002eec:	f7ff ff82 	bl	8002df4 <timer16_pwm_init>
	TIM_Cmd(TIM2,ENABLE);
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ef6:	f7fe fde7 	bl	8001ac8 <TIM_Cmd>
	TIM_OCInitTypeDef TIM_OCInitStruct;
	TIM_OCStructInit(&TIM_OCInitStruct);
 8002efa:	1d3b      	adds	r3, r7, #4
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fe fe95 	bl	8001c2c <TIM_OCStructInit>
		//for(int i=0;i<1000;i++){
			//for(int j=0;j<50000;j++);
			//TIM_OCInitStruct.TIM_Pulse = i;
			//TIM_OC1Init(TIM16,&TIM_OCInitStruct);
		//}
		if(ADCupdate == 1){
 8002f02:	4b1c      	ldr	r3, [pc, #112]	; (8002f74 <main+0xbc>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d1fa      	bne.n	8002f02 <main+0x4a>
			adc1 = ADC_measure_PA(1);
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	f7ff ff03 	bl	8002d18 <ADC_measure_PA>
 8002f12:	4603      	mov	r3, r0
 8002f14:	461a      	mov	r2, r3
 8002f16:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <main+0xc0>)
 8002f18:	801a      	strh	r2, [r3, #0]
			//adc2 = ADC_measure_PA(2);
			//step4
			//TIM_OCInitTypeDef TIM_OCInitStruct;
			//TIM_OCStructInit(&TIM_OCInitStruct);
			TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
 8002f1a:	2360      	movs	r3, #96	; 0x60
 8002f1c:	607b      	str	r3, [r7, #4]
			TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	813b      	strh	r3, [r7, #8]
			TIM_OCInitStruct.TIM_Pulse = (adc1/4.1); // 0x0000 <-> 0xFFFF
 8002f22:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <main+0xc0>)
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fd fafb 	bl	8000524 <__aeabi_i2d>
 8002f2e:	a30e      	add	r3, pc, #56	; (adr r3, 8002f68 <main+0xb0>)
 8002f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f34:	f7fd fc8a 	bl	800084c <__aeabi_ddiv>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f7fd fe32 	bl	8000ba8 <__aeabi_d2uiz>
 8002f44:	4603      	mov	r3, r0
 8002f46:	60fb      	str	r3, [r7, #12]
			TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	823b      	strh	r3, [r7, #16]
			TIM_OC1Init(TIM16,&TIM_OCInitStruct);
 8002f4c:	1d3b      	adds	r3, r7, #4
 8002f4e:	4619      	mov	r1, r3
 8002f50:	480a      	ldr	r0, [pc, #40]	; (8002f7c <main+0xc4>)
 8002f52:	f7fe fdd9 	bl	8001b08 <TIM_OC1Init>

			LCD_data_print();
 8002f56:	f7ff ff1b 	bl	8002d90 <LCD_data_print>
			ADCupdate=0;
 8002f5a:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <main+0xbc>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]
		if(ADCupdate == 1){
 8002f60:	e7cf      	b.n	8002f02 <main+0x4a>
 8002f62:	bf00      	nop
 8002f64:	f3af 8000 	nop.w
 8002f68:	66666666 	.word	0x66666666
 8002f6c:	40106666 	.word	0x40106666
 8002f70:	20000330 	.word	0x20000330
 8002f74:	20000532 	.word	0x20000532
 8002f78:	20000530 	.word	0x20000530
 8002f7c:	40014400 	.word	0x40014400

08002f80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
	return 1;
 8002f84:	2301      	movs	r3, #1
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <_kill>:

int _kill(int pid, int sig)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f9a:	f000 f94f 	bl	800323c <__errno>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2216      	movs	r2, #22
 8002fa2:	601a      	str	r2, [r3, #0]
	return -1;
 8002fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <_exit>:

void _exit (int status)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002fb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff ffe7 	bl	8002f90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002fc2:	e7fe      	b.n	8002fc2 <_exit+0x12>

08002fc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	e00a      	b.n	8002fec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002fd6:	f3af 8000 	nop.w
 8002fda:	4601      	mov	r1, r0
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	60ba      	str	r2, [r7, #8]
 8002fe2:	b2ca      	uxtb	r2, r1
 8002fe4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	dbf0      	blt.n	8002fd6 <_read+0x12>
	}

return len;
 8002ff4:	687b      	ldr	r3, [r7, #4]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <_close>:
	}
	return len;
}

int _close(int file)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
	return -1;
 8003006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800300a:	4618      	mov	r0, r3
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003026:	605a      	str	r2, [r3, #4]
	return 0;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <_isatty>:

int _isatty(int file)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
	return 1;
 800303e:	2301      	movs	r3, #1
}
 8003040:	4618      	mov	r0, r3
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
	return 0;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
	...

08003068 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003070:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <_sbrk+0x50>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d102      	bne.n	800307e <_sbrk+0x16>
		heap_end = &end;
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <_sbrk+0x50>)
 800307a:	4a10      	ldr	r2, [pc, #64]	; (80030bc <_sbrk+0x54>)
 800307c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800307e:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <_sbrk+0x50>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <_sbrk+0x50>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	466a      	mov	r2, sp
 800308e:	4293      	cmp	r3, r2
 8003090:	d907      	bls.n	80030a2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003092:	f000 f8d3 	bl	800323c <__errno>
 8003096:	4603      	mov	r3, r0
 8003098:	220c      	movs	r2, #12
 800309a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800309c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030a0:	e006      	b.n	80030b0 <_sbrk+0x48>
	}

	heap_end += incr;
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <_sbrk+0x50>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	4a03      	ldr	r2, [pc, #12]	; (80030b8 <_sbrk+0x50>)
 80030ac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80030ae:	68fb      	ldr	r3, [r7, #12]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20000534 	.word	0x20000534
 80030bc:	20000548 	.word	0x20000548

080030c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030c4:	4b1f      	ldr	r3, [pc, #124]	; (8003144 <SystemInit+0x84>)
 80030c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ca:	4a1e      	ldr	r2, [pc, #120]	; (8003144 <SystemInit+0x84>)
 80030cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80030d4:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <SystemInit+0x88>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <SystemInit+0x88>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80030e0:	4b19      	ldr	r3, [pc, #100]	; (8003148 <SystemInit+0x88>)
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	4918      	ldr	r1, [pc, #96]	; (8003148 <SystemInit+0x88>)
 80030e6:	4b19      	ldr	r3, [pc, #100]	; (800314c <SystemInit+0x8c>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80030ec:	4b16      	ldr	r3, [pc, #88]	; (8003148 <SystemInit+0x88>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a15      	ldr	r2, [pc, #84]	; (8003148 <SystemInit+0x88>)
 80030f2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80030f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80030fc:	4b12      	ldr	r3, [pc, #72]	; (8003148 <SystemInit+0x88>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a11      	ldr	r2, [pc, #68]	; (8003148 <SystemInit+0x88>)
 8003102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003106:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003108:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <SystemInit+0x88>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4a0e      	ldr	r2, [pc, #56]	; (8003148 <SystemInit+0x88>)
 800310e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003112:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8003114:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <SystemInit+0x88>)
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	4a0b      	ldr	r2, [pc, #44]	; (8003148 <SystemInit+0x88>)
 800311a:	f023 030f 	bic.w	r3, r3, #15
 800311e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8003120:	4b09      	ldr	r3, [pc, #36]	; (8003148 <SystemInit+0x88>)
 8003122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003124:	4908      	ldr	r1, [pc, #32]	; (8003148 <SystemInit+0x88>)
 8003126:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <SystemInit+0x90>)
 8003128:	4013      	ands	r3, r2
 800312a:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800312c:	4b06      	ldr	r3, [pc, #24]	; (8003148 <SystemInit+0x88>)
 800312e:	2200      	movs	r2, #0
 8003130:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003132:	f000 f80f 	bl	8003154 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003136:	4b03      	ldr	r3, [pc, #12]	; (8003144 <SystemInit+0x84>)
 8003138:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800313c:	609a      	str	r2, [r3, #8]
#endif  
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	e000ed00 	.word	0xe000ed00
 8003148:	40021000 	.word	0x40021000
 800314c:	f87fc00c 	.word	0xf87fc00c
 8003150:	ff00fccc 	.word	0xff00fccc

08003154 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8003158:	4b21      	ldr	r3, [pc, #132]	; (80031e0 <SetSysClock+0x8c>)
 800315a:	2212      	movs	r2, #18
 800315c:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800315e:	4b21      	ldr	r3, [pc, #132]	; (80031e4 <SetSysClock+0x90>)
 8003160:	4a20      	ldr	r2, [pc, #128]	; (80031e4 <SetSysClock+0x90>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8003166:	4b1f      	ldr	r3, [pc, #124]	; (80031e4 <SetSysClock+0x90>)
 8003168:	4a1e      	ldr	r2, [pc, #120]	; (80031e4 <SetSysClock+0x90>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800316e:	4b1d      	ldr	r3, [pc, #116]	; (80031e4 <SetSysClock+0x90>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4a1c      	ldr	r2, [pc, #112]	; (80031e4 <SetSysClock+0x90>)
 8003174:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003178:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800317a:	4b1a      	ldr	r3, [pc, #104]	; (80031e4 <SetSysClock+0x90>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4a19      	ldr	r2, [pc, #100]	; (80031e4 <SetSysClock+0x90>)
 8003180:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003184:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8003186:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <SetSysClock+0x90>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4a16      	ldr	r2, [pc, #88]	; (80031e4 <SetSysClock+0x90>)
 800318c:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8003190:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8003192:	4b14      	ldr	r3, [pc, #80]	; (80031e4 <SetSysClock+0x90>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a13      	ldr	r2, [pc, #76]	; (80031e4 <SetSysClock+0x90>)
 8003198:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800319c:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800319e:	bf00      	nop
 80031a0:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <SetSysClock+0x90>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f9      	beq.n	80031a0 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80031ac:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <SetSysClock+0x90>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	4a0c      	ldr	r2, [pc, #48]	; (80031e4 <SetSysClock+0x90>)
 80031b2:	f023 0303 	bic.w	r3, r3, #3
 80031b6:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80031b8:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <SetSysClock+0x90>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4a09      	ldr	r2, [pc, #36]	; (80031e4 <SetSysClock+0x90>)
 80031be:	f043 0302 	orr.w	r3, r3, #2
 80031c2:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80031c4:	bf00      	nop
 80031c6:	4b07      	ldr	r3, [pc, #28]	; (80031e4 <SetSysClock+0x90>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d1f9      	bne.n	80031c6 <SetSysClock+0x72>
  {
  }
}
 80031d2:	bf00      	nop
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40022000 	.word	0x40022000
 80031e4:	40021000 	.word	0x40021000

080031e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031e8:	480d      	ldr	r0, [pc, #52]	; (8003220 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031ec:	480d      	ldr	r0, [pc, #52]	; (8003224 <LoopForever+0x6>)
  ldr r1, =_edata
 80031ee:	490e      	ldr	r1, [pc, #56]	; (8003228 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031f0:	4a0e      	ldr	r2, [pc, #56]	; (800322c <LoopForever+0xe>)
  movs r3, #0
 80031f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031f4:	e002      	b.n	80031fc <LoopCopyDataInit>

080031f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031fa:	3304      	adds	r3, #4

080031fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003200:	d3f9      	bcc.n	80031f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003202:	4a0b      	ldr	r2, [pc, #44]	; (8003230 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003204:	4c0b      	ldr	r4, [pc, #44]	; (8003234 <LoopForever+0x16>)
  movs r3, #0
 8003206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003208:	e001      	b.n	800320e <LoopFillZerobss>

0800320a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800320a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800320c:	3204      	adds	r2, #4

0800320e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800320e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003210:	d3fb      	bcc.n	800320a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003212:	f7ff ff55 	bl	80030c0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003216:	f000 f817 	bl	8003248 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800321a:	f7ff fe4d 	bl	8002eb8 <main>

0800321e <LoopForever>:

LoopForever:
    b LoopForever
 800321e:	e7fe      	b.n	800321e <LoopForever>
  ldr   r0, =_estack
 8003220:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003228:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 800322c:	080067cc 	.word	0x080067cc
  ldr r2, =_sbss
 8003230:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8003234:	20000548 	.word	0x20000548

08003238 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003238:	e7fe      	b.n	8003238 <ADC1_2_IRQHandler>
	...

0800323c <__errno>:
 800323c:	4b01      	ldr	r3, [pc, #4]	; (8003244 <__errno+0x8>)
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	2000002c 	.word	0x2000002c

08003248 <__libc_init_array>:
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	4d0d      	ldr	r5, [pc, #52]	; (8003280 <__libc_init_array+0x38>)
 800324c:	4c0d      	ldr	r4, [pc, #52]	; (8003284 <__libc_init_array+0x3c>)
 800324e:	1b64      	subs	r4, r4, r5
 8003250:	10a4      	asrs	r4, r4, #2
 8003252:	2600      	movs	r6, #0
 8003254:	42a6      	cmp	r6, r4
 8003256:	d109      	bne.n	800326c <__libc_init_array+0x24>
 8003258:	4d0b      	ldr	r5, [pc, #44]	; (8003288 <__libc_init_array+0x40>)
 800325a:	4c0c      	ldr	r4, [pc, #48]	; (800328c <__libc_init_array+0x44>)
 800325c:	f002 ffc0 	bl	80061e0 <_init>
 8003260:	1b64      	subs	r4, r4, r5
 8003262:	10a4      	asrs	r4, r4, #2
 8003264:	2600      	movs	r6, #0
 8003266:	42a6      	cmp	r6, r4
 8003268:	d105      	bne.n	8003276 <__libc_init_array+0x2e>
 800326a:	bd70      	pop	{r4, r5, r6, pc}
 800326c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003270:	4798      	blx	r3
 8003272:	3601      	adds	r6, #1
 8003274:	e7ee      	b.n	8003254 <__libc_init_array+0xc>
 8003276:	f855 3b04 	ldr.w	r3, [r5], #4
 800327a:	4798      	blx	r3
 800327c:	3601      	adds	r6, #1
 800327e:	e7f2      	b.n	8003266 <__libc_init_array+0x1e>
 8003280:	080067c4 	.word	0x080067c4
 8003284:	080067c4 	.word	0x080067c4
 8003288:	080067c4 	.word	0x080067c4
 800328c:	080067c8 	.word	0x080067c8

08003290 <memcpy>:
 8003290:	440a      	add	r2, r1
 8003292:	4291      	cmp	r1, r2
 8003294:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003298:	d100      	bne.n	800329c <memcpy+0xc>
 800329a:	4770      	bx	lr
 800329c:	b510      	push	{r4, lr}
 800329e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032a6:	4291      	cmp	r1, r2
 80032a8:	d1f9      	bne.n	800329e <memcpy+0xe>
 80032aa:	bd10      	pop	{r4, pc}

080032ac <memset>:
 80032ac:	4402      	add	r2, r0
 80032ae:	4603      	mov	r3, r0
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d100      	bne.n	80032b6 <memset+0xa>
 80032b4:	4770      	bx	lr
 80032b6:	f803 1b01 	strb.w	r1, [r3], #1
 80032ba:	e7f9      	b.n	80032b0 <memset+0x4>

080032bc <__cvt>:
 80032bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032c0:	ec55 4b10 	vmov	r4, r5, d0
 80032c4:	2d00      	cmp	r5, #0
 80032c6:	460e      	mov	r6, r1
 80032c8:	4619      	mov	r1, r3
 80032ca:	462b      	mov	r3, r5
 80032cc:	bfbb      	ittet	lt
 80032ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80032d2:	461d      	movlt	r5, r3
 80032d4:	2300      	movge	r3, #0
 80032d6:	232d      	movlt	r3, #45	; 0x2d
 80032d8:	700b      	strb	r3, [r1, #0]
 80032da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80032e0:	4691      	mov	r9, r2
 80032e2:	f023 0820 	bic.w	r8, r3, #32
 80032e6:	bfbc      	itt	lt
 80032e8:	4622      	movlt	r2, r4
 80032ea:	4614      	movlt	r4, r2
 80032ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80032f0:	d005      	beq.n	80032fe <__cvt+0x42>
 80032f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80032f6:	d100      	bne.n	80032fa <__cvt+0x3e>
 80032f8:	3601      	adds	r6, #1
 80032fa:	2102      	movs	r1, #2
 80032fc:	e000      	b.n	8003300 <__cvt+0x44>
 80032fe:	2103      	movs	r1, #3
 8003300:	ab03      	add	r3, sp, #12
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	ab02      	add	r3, sp, #8
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	ec45 4b10 	vmov	d0, r4, r5
 800330c:	4653      	mov	r3, sl
 800330e:	4632      	mov	r2, r6
 8003310:	f000 fdba 	bl	8003e88 <_dtoa_r>
 8003314:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003318:	4607      	mov	r7, r0
 800331a:	d102      	bne.n	8003322 <__cvt+0x66>
 800331c:	f019 0f01 	tst.w	r9, #1
 8003320:	d022      	beq.n	8003368 <__cvt+0xac>
 8003322:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003326:	eb07 0906 	add.w	r9, r7, r6
 800332a:	d110      	bne.n	800334e <__cvt+0x92>
 800332c:	783b      	ldrb	r3, [r7, #0]
 800332e:	2b30      	cmp	r3, #48	; 0x30
 8003330:	d10a      	bne.n	8003348 <__cvt+0x8c>
 8003332:	2200      	movs	r2, #0
 8003334:	2300      	movs	r3, #0
 8003336:	4620      	mov	r0, r4
 8003338:	4629      	mov	r1, r5
 800333a:	f7fd fbc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800333e:	b918      	cbnz	r0, 8003348 <__cvt+0x8c>
 8003340:	f1c6 0601 	rsb	r6, r6, #1
 8003344:	f8ca 6000 	str.w	r6, [sl]
 8003348:	f8da 3000 	ldr.w	r3, [sl]
 800334c:	4499      	add	r9, r3
 800334e:	2200      	movs	r2, #0
 8003350:	2300      	movs	r3, #0
 8003352:	4620      	mov	r0, r4
 8003354:	4629      	mov	r1, r5
 8003356:	f7fd fbb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800335a:	b108      	cbz	r0, 8003360 <__cvt+0xa4>
 800335c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003360:	2230      	movs	r2, #48	; 0x30
 8003362:	9b03      	ldr	r3, [sp, #12]
 8003364:	454b      	cmp	r3, r9
 8003366:	d307      	bcc.n	8003378 <__cvt+0xbc>
 8003368:	9b03      	ldr	r3, [sp, #12]
 800336a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800336c:	1bdb      	subs	r3, r3, r7
 800336e:	4638      	mov	r0, r7
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	b004      	add	sp, #16
 8003374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003378:	1c59      	adds	r1, r3, #1
 800337a:	9103      	str	r1, [sp, #12]
 800337c:	701a      	strb	r2, [r3, #0]
 800337e:	e7f0      	b.n	8003362 <__cvt+0xa6>

08003380 <__exponent>:
 8003380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003382:	4603      	mov	r3, r0
 8003384:	2900      	cmp	r1, #0
 8003386:	bfb8      	it	lt
 8003388:	4249      	neglt	r1, r1
 800338a:	f803 2b02 	strb.w	r2, [r3], #2
 800338e:	bfb4      	ite	lt
 8003390:	222d      	movlt	r2, #45	; 0x2d
 8003392:	222b      	movge	r2, #43	; 0x2b
 8003394:	2909      	cmp	r1, #9
 8003396:	7042      	strb	r2, [r0, #1]
 8003398:	dd2a      	ble.n	80033f0 <__exponent+0x70>
 800339a:	f10d 0407 	add.w	r4, sp, #7
 800339e:	46a4      	mov	ip, r4
 80033a0:	270a      	movs	r7, #10
 80033a2:	46a6      	mov	lr, r4
 80033a4:	460a      	mov	r2, r1
 80033a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80033aa:	fb07 1516 	mls	r5, r7, r6, r1
 80033ae:	3530      	adds	r5, #48	; 0x30
 80033b0:	2a63      	cmp	r2, #99	; 0x63
 80033b2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80033b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80033ba:	4631      	mov	r1, r6
 80033bc:	dcf1      	bgt.n	80033a2 <__exponent+0x22>
 80033be:	3130      	adds	r1, #48	; 0x30
 80033c0:	f1ae 0502 	sub.w	r5, lr, #2
 80033c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80033c8:	1c44      	adds	r4, r0, #1
 80033ca:	4629      	mov	r1, r5
 80033cc:	4561      	cmp	r1, ip
 80033ce:	d30a      	bcc.n	80033e6 <__exponent+0x66>
 80033d0:	f10d 0209 	add.w	r2, sp, #9
 80033d4:	eba2 020e 	sub.w	r2, r2, lr
 80033d8:	4565      	cmp	r5, ip
 80033da:	bf88      	it	hi
 80033dc:	2200      	movhi	r2, #0
 80033de:	4413      	add	r3, r2
 80033e0:	1a18      	subs	r0, r3, r0
 80033e2:	b003      	add	sp, #12
 80033e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80033ee:	e7ed      	b.n	80033cc <__exponent+0x4c>
 80033f0:	2330      	movs	r3, #48	; 0x30
 80033f2:	3130      	adds	r1, #48	; 0x30
 80033f4:	7083      	strb	r3, [r0, #2]
 80033f6:	70c1      	strb	r1, [r0, #3]
 80033f8:	1d03      	adds	r3, r0, #4
 80033fa:	e7f1      	b.n	80033e0 <__exponent+0x60>

080033fc <_printf_float>:
 80033fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003400:	ed2d 8b02 	vpush	{d8}
 8003404:	b08d      	sub	sp, #52	; 0x34
 8003406:	460c      	mov	r4, r1
 8003408:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800340c:	4616      	mov	r6, r2
 800340e:	461f      	mov	r7, r3
 8003410:	4605      	mov	r5, r0
 8003412:	f001 fcdf 	bl	8004dd4 <_localeconv_r>
 8003416:	f8d0 a000 	ldr.w	sl, [r0]
 800341a:	4650      	mov	r0, sl
 800341c:	f7fc fed8 	bl	80001d0 <strlen>
 8003420:	2300      	movs	r3, #0
 8003422:	930a      	str	r3, [sp, #40]	; 0x28
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	9305      	str	r3, [sp, #20]
 8003428:	f8d8 3000 	ldr.w	r3, [r8]
 800342c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003430:	3307      	adds	r3, #7
 8003432:	f023 0307 	bic.w	r3, r3, #7
 8003436:	f103 0208 	add.w	r2, r3, #8
 800343a:	f8c8 2000 	str.w	r2, [r8]
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003446:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800344a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800344e:	9307      	str	r3, [sp, #28]
 8003450:	f8cd 8018 	str.w	r8, [sp, #24]
 8003454:	ee08 0a10 	vmov	s16, r0
 8003458:	4b9f      	ldr	r3, [pc, #636]	; (80036d8 <_printf_float+0x2dc>)
 800345a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800345e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003462:	f7fd fb63 	bl	8000b2c <__aeabi_dcmpun>
 8003466:	bb88      	cbnz	r0, 80034cc <_printf_float+0xd0>
 8003468:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800346c:	4b9a      	ldr	r3, [pc, #616]	; (80036d8 <_printf_float+0x2dc>)
 800346e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003472:	f7fd fb3d 	bl	8000af0 <__aeabi_dcmple>
 8003476:	bb48      	cbnz	r0, 80034cc <_printf_float+0xd0>
 8003478:	2200      	movs	r2, #0
 800347a:	2300      	movs	r3, #0
 800347c:	4640      	mov	r0, r8
 800347e:	4649      	mov	r1, r9
 8003480:	f7fd fb2c 	bl	8000adc <__aeabi_dcmplt>
 8003484:	b110      	cbz	r0, 800348c <_printf_float+0x90>
 8003486:	232d      	movs	r3, #45	; 0x2d
 8003488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800348c:	4b93      	ldr	r3, [pc, #588]	; (80036dc <_printf_float+0x2e0>)
 800348e:	4894      	ldr	r0, [pc, #592]	; (80036e0 <_printf_float+0x2e4>)
 8003490:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003494:	bf94      	ite	ls
 8003496:	4698      	movls	r8, r3
 8003498:	4680      	movhi	r8, r0
 800349a:	2303      	movs	r3, #3
 800349c:	6123      	str	r3, [r4, #16]
 800349e:	9b05      	ldr	r3, [sp, #20]
 80034a0:	f023 0204 	bic.w	r2, r3, #4
 80034a4:	6022      	str	r2, [r4, #0]
 80034a6:	f04f 0900 	mov.w	r9, #0
 80034aa:	9700      	str	r7, [sp, #0]
 80034ac:	4633      	mov	r3, r6
 80034ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80034b0:	4621      	mov	r1, r4
 80034b2:	4628      	mov	r0, r5
 80034b4:	f000 f9d8 	bl	8003868 <_printf_common>
 80034b8:	3001      	adds	r0, #1
 80034ba:	f040 8090 	bne.w	80035de <_printf_float+0x1e2>
 80034be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034c2:	b00d      	add	sp, #52	; 0x34
 80034c4:	ecbd 8b02 	vpop	{d8}
 80034c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034cc:	4642      	mov	r2, r8
 80034ce:	464b      	mov	r3, r9
 80034d0:	4640      	mov	r0, r8
 80034d2:	4649      	mov	r1, r9
 80034d4:	f7fd fb2a 	bl	8000b2c <__aeabi_dcmpun>
 80034d8:	b140      	cbz	r0, 80034ec <_printf_float+0xf0>
 80034da:	464b      	mov	r3, r9
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bfbc      	itt	lt
 80034e0:	232d      	movlt	r3, #45	; 0x2d
 80034e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80034e6:	487f      	ldr	r0, [pc, #508]	; (80036e4 <_printf_float+0x2e8>)
 80034e8:	4b7f      	ldr	r3, [pc, #508]	; (80036e8 <_printf_float+0x2ec>)
 80034ea:	e7d1      	b.n	8003490 <_printf_float+0x94>
 80034ec:	6863      	ldr	r3, [r4, #4]
 80034ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80034f2:	9206      	str	r2, [sp, #24]
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	d13f      	bne.n	8003578 <_printf_float+0x17c>
 80034f8:	2306      	movs	r3, #6
 80034fa:	6063      	str	r3, [r4, #4]
 80034fc:	9b05      	ldr	r3, [sp, #20]
 80034fe:	6861      	ldr	r1, [r4, #4]
 8003500:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003504:	2300      	movs	r3, #0
 8003506:	9303      	str	r3, [sp, #12]
 8003508:	ab0a      	add	r3, sp, #40	; 0x28
 800350a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800350e:	ab09      	add	r3, sp, #36	; 0x24
 8003510:	ec49 8b10 	vmov	d0, r8, r9
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	6022      	str	r2, [r4, #0]
 8003518:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800351c:	4628      	mov	r0, r5
 800351e:	f7ff fecd 	bl	80032bc <__cvt>
 8003522:	9b06      	ldr	r3, [sp, #24]
 8003524:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003526:	2b47      	cmp	r3, #71	; 0x47
 8003528:	4680      	mov	r8, r0
 800352a:	d108      	bne.n	800353e <_printf_float+0x142>
 800352c:	1cc8      	adds	r0, r1, #3
 800352e:	db02      	blt.n	8003536 <_printf_float+0x13a>
 8003530:	6863      	ldr	r3, [r4, #4]
 8003532:	4299      	cmp	r1, r3
 8003534:	dd41      	ble.n	80035ba <_printf_float+0x1be>
 8003536:	f1ab 0b02 	sub.w	fp, fp, #2
 800353a:	fa5f fb8b 	uxtb.w	fp, fp
 800353e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003542:	d820      	bhi.n	8003586 <_printf_float+0x18a>
 8003544:	3901      	subs	r1, #1
 8003546:	465a      	mov	r2, fp
 8003548:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800354c:	9109      	str	r1, [sp, #36]	; 0x24
 800354e:	f7ff ff17 	bl	8003380 <__exponent>
 8003552:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003554:	1813      	adds	r3, r2, r0
 8003556:	2a01      	cmp	r2, #1
 8003558:	4681      	mov	r9, r0
 800355a:	6123      	str	r3, [r4, #16]
 800355c:	dc02      	bgt.n	8003564 <_printf_float+0x168>
 800355e:	6822      	ldr	r2, [r4, #0]
 8003560:	07d2      	lsls	r2, r2, #31
 8003562:	d501      	bpl.n	8003568 <_printf_float+0x16c>
 8003564:	3301      	adds	r3, #1
 8003566:	6123      	str	r3, [r4, #16]
 8003568:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800356c:	2b00      	cmp	r3, #0
 800356e:	d09c      	beq.n	80034aa <_printf_float+0xae>
 8003570:	232d      	movs	r3, #45	; 0x2d
 8003572:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003576:	e798      	b.n	80034aa <_printf_float+0xae>
 8003578:	9a06      	ldr	r2, [sp, #24]
 800357a:	2a47      	cmp	r2, #71	; 0x47
 800357c:	d1be      	bne.n	80034fc <_printf_float+0x100>
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1bc      	bne.n	80034fc <_printf_float+0x100>
 8003582:	2301      	movs	r3, #1
 8003584:	e7b9      	b.n	80034fa <_printf_float+0xfe>
 8003586:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800358a:	d118      	bne.n	80035be <_printf_float+0x1c2>
 800358c:	2900      	cmp	r1, #0
 800358e:	6863      	ldr	r3, [r4, #4]
 8003590:	dd0b      	ble.n	80035aa <_printf_float+0x1ae>
 8003592:	6121      	str	r1, [r4, #16]
 8003594:	b913      	cbnz	r3, 800359c <_printf_float+0x1a0>
 8003596:	6822      	ldr	r2, [r4, #0]
 8003598:	07d0      	lsls	r0, r2, #31
 800359a:	d502      	bpl.n	80035a2 <_printf_float+0x1a6>
 800359c:	3301      	adds	r3, #1
 800359e:	440b      	add	r3, r1
 80035a0:	6123      	str	r3, [r4, #16]
 80035a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80035a4:	f04f 0900 	mov.w	r9, #0
 80035a8:	e7de      	b.n	8003568 <_printf_float+0x16c>
 80035aa:	b913      	cbnz	r3, 80035b2 <_printf_float+0x1b6>
 80035ac:	6822      	ldr	r2, [r4, #0]
 80035ae:	07d2      	lsls	r2, r2, #31
 80035b0:	d501      	bpl.n	80035b6 <_printf_float+0x1ba>
 80035b2:	3302      	adds	r3, #2
 80035b4:	e7f4      	b.n	80035a0 <_printf_float+0x1a4>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e7f2      	b.n	80035a0 <_printf_float+0x1a4>
 80035ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80035be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035c0:	4299      	cmp	r1, r3
 80035c2:	db05      	blt.n	80035d0 <_printf_float+0x1d4>
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	6121      	str	r1, [r4, #16]
 80035c8:	07d8      	lsls	r0, r3, #31
 80035ca:	d5ea      	bpl.n	80035a2 <_printf_float+0x1a6>
 80035cc:	1c4b      	adds	r3, r1, #1
 80035ce:	e7e7      	b.n	80035a0 <_printf_float+0x1a4>
 80035d0:	2900      	cmp	r1, #0
 80035d2:	bfd4      	ite	le
 80035d4:	f1c1 0202 	rsble	r2, r1, #2
 80035d8:	2201      	movgt	r2, #1
 80035da:	4413      	add	r3, r2
 80035dc:	e7e0      	b.n	80035a0 <_printf_float+0x1a4>
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	055a      	lsls	r2, r3, #21
 80035e2:	d407      	bmi.n	80035f4 <_printf_float+0x1f8>
 80035e4:	6923      	ldr	r3, [r4, #16]
 80035e6:	4642      	mov	r2, r8
 80035e8:	4631      	mov	r1, r6
 80035ea:	4628      	mov	r0, r5
 80035ec:	47b8      	blx	r7
 80035ee:	3001      	adds	r0, #1
 80035f0:	d12c      	bne.n	800364c <_printf_float+0x250>
 80035f2:	e764      	b.n	80034be <_printf_float+0xc2>
 80035f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80035f8:	f240 80e0 	bls.w	80037bc <_printf_float+0x3c0>
 80035fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003600:	2200      	movs	r2, #0
 8003602:	2300      	movs	r3, #0
 8003604:	f7fd fa60 	bl	8000ac8 <__aeabi_dcmpeq>
 8003608:	2800      	cmp	r0, #0
 800360a:	d034      	beq.n	8003676 <_printf_float+0x27a>
 800360c:	4a37      	ldr	r2, [pc, #220]	; (80036ec <_printf_float+0x2f0>)
 800360e:	2301      	movs	r3, #1
 8003610:	4631      	mov	r1, r6
 8003612:	4628      	mov	r0, r5
 8003614:	47b8      	blx	r7
 8003616:	3001      	adds	r0, #1
 8003618:	f43f af51 	beq.w	80034be <_printf_float+0xc2>
 800361c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003620:	429a      	cmp	r2, r3
 8003622:	db02      	blt.n	800362a <_printf_float+0x22e>
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	07d8      	lsls	r0, r3, #31
 8003628:	d510      	bpl.n	800364c <_printf_float+0x250>
 800362a:	ee18 3a10 	vmov	r3, s16
 800362e:	4652      	mov	r2, sl
 8003630:	4631      	mov	r1, r6
 8003632:	4628      	mov	r0, r5
 8003634:	47b8      	blx	r7
 8003636:	3001      	adds	r0, #1
 8003638:	f43f af41 	beq.w	80034be <_printf_float+0xc2>
 800363c:	f04f 0800 	mov.w	r8, #0
 8003640:	f104 091a 	add.w	r9, r4, #26
 8003644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003646:	3b01      	subs	r3, #1
 8003648:	4543      	cmp	r3, r8
 800364a:	dc09      	bgt.n	8003660 <_printf_float+0x264>
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	079b      	lsls	r3, r3, #30
 8003650:	f100 8105 	bmi.w	800385e <_printf_float+0x462>
 8003654:	68e0      	ldr	r0, [r4, #12]
 8003656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003658:	4298      	cmp	r0, r3
 800365a:	bfb8      	it	lt
 800365c:	4618      	movlt	r0, r3
 800365e:	e730      	b.n	80034c2 <_printf_float+0xc6>
 8003660:	2301      	movs	r3, #1
 8003662:	464a      	mov	r2, r9
 8003664:	4631      	mov	r1, r6
 8003666:	4628      	mov	r0, r5
 8003668:	47b8      	blx	r7
 800366a:	3001      	adds	r0, #1
 800366c:	f43f af27 	beq.w	80034be <_printf_float+0xc2>
 8003670:	f108 0801 	add.w	r8, r8, #1
 8003674:	e7e6      	b.n	8003644 <_printf_float+0x248>
 8003676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003678:	2b00      	cmp	r3, #0
 800367a:	dc39      	bgt.n	80036f0 <_printf_float+0x2f4>
 800367c:	4a1b      	ldr	r2, [pc, #108]	; (80036ec <_printf_float+0x2f0>)
 800367e:	2301      	movs	r3, #1
 8003680:	4631      	mov	r1, r6
 8003682:	4628      	mov	r0, r5
 8003684:	47b8      	blx	r7
 8003686:	3001      	adds	r0, #1
 8003688:	f43f af19 	beq.w	80034be <_printf_float+0xc2>
 800368c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003690:	4313      	orrs	r3, r2
 8003692:	d102      	bne.n	800369a <_printf_float+0x29e>
 8003694:	6823      	ldr	r3, [r4, #0]
 8003696:	07d9      	lsls	r1, r3, #31
 8003698:	d5d8      	bpl.n	800364c <_printf_float+0x250>
 800369a:	ee18 3a10 	vmov	r3, s16
 800369e:	4652      	mov	r2, sl
 80036a0:	4631      	mov	r1, r6
 80036a2:	4628      	mov	r0, r5
 80036a4:	47b8      	blx	r7
 80036a6:	3001      	adds	r0, #1
 80036a8:	f43f af09 	beq.w	80034be <_printf_float+0xc2>
 80036ac:	f04f 0900 	mov.w	r9, #0
 80036b0:	f104 0a1a 	add.w	sl, r4, #26
 80036b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036b6:	425b      	negs	r3, r3
 80036b8:	454b      	cmp	r3, r9
 80036ba:	dc01      	bgt.n	80036c0 <_printf_float+0x2c4>
 80036bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036be:	e792      	b.n	80035e6 <_printf_float+0x1ea>
 80036c0:	2301      	movs	r3, #1
 80036c2:	4652      	mov	r2, sl
 80036c4:	4631      	mov	r1, r6
 80036c6:	4628      	mov	r0, r5
 80036c8:	47b8      	blx	r7
 80036ca:	3001      	adds	r0, #1
 80036cc:	f43f aef7 	beq.w	80034be <_printf_float+0xc2>
 80036d0:	f109 0901 	add.w	r9, r9, #1
 80036d4:	e7ee      	b.n	80036b4 <_printf_float+0x2b8>
 80036d6:	bf00      	nop
 80036d8:	7fefffff 	.word	0x7fefffff
 80036dc:	080063f0 	.word	0x080063f0
 80036e0:	080063f4 	.word	0x080063f4
 80036e4:	080063fc 	.word	0x080063fc
 80036e8:	080063f8 	.word	0x080063f8
 80036ec:	08006400 	.word	0x08006400
 80036f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80036f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036f4:	429a      	cmp	r2, r3
 80036f6:	bfa8      	it	ge
 80036f8:	461a      	movge	r2, r3
 80036fa:	2a00      	cmp	r2, #0
 80036fc:	4691      	mov	r9, r2
 80036fe:	dc37      	bgt.n	8003770 <_printf_float+0x374>
 8003700:	f04f 0b00 	mov.w	fp, #0
 8003704:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003708:	f104 021a 	add.w	r2, r4, #26
 800370c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800370e:	9305      	str	r3, [sp, #20]
 8003710:	eba3 0309 	sub.w	r3, r3, r9
 8003714:	455b      	cmp	r3, fp
 8003716:	dc33      	bgt.n	8003780 <_printf_float+0x384>
 8003718:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800371c:	429a      	cmp	r2, r3
 800371e:	db3b      	blt.n	8003798 <_printf_float+0x39c>
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	07da      	lsls	r2, r3, #31
 8003724:	d438      	bmi.n	8003798 <_printf_float+0x39c>
 8003726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003728:	9a05      	ldr	r2, [sp, #20]
 800372a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800372c:	1a9a      	subs	r2, r3, r2
 800372e:	eba3 0901 	sub.w	r9, r3, r1
 8003732:	4591      	cmp	r9, r2
 8003734:	bfa8      	it	ge
 8003736:	4691      	movge	r9, r2
 8003738:	f1b9 0f00 	cmp.w	r9, #0
 800373c:	dc35      	bgt.n	80037aa <_printf_float+0x3ae>
 800373e:	f04f 0800 	mov.w	r8, #0
 8003742:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003746:	f104 0a1a 	add.w	sl, r4, #26
 800374a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	eba3 0309 	sub.w	r3, r3, r9
 8003754:	4543      	cmp	r3, r8
 8003756:	f77f af79 	ble.w	800364c <_printf_float+0x250>
 800375a:	2301      	movs	r3, #1
 800375c:	4652      	mov	r2, sl
 800375e:	4631      	mov	r1, r6
 8003760:	4628      	mov	r0, r5
 8003762:	47b8      	blx	r7
 8003764:	3001      	adds	r0, #1
 8003766:	f43f aeaa 	beq.w	80034be <_printf_float+0xc2>
 800376a:	f108 0801 	add.w	r8, r8, #1
 800376e:	e7ec      	b.n	800374a <_printf_float+0x34e>
 8003770:	4613      	mov	r3, r2
 8003772:	4631      	mov	r1, r6
 8003774:	4642      	mov	r2, r8
 8003776:	4628      	mov	r0, r5
 8003778:	47b8      	blx	r7
 800377a:	3001      	adds	r0, #1
 800377c:	d1c0      	bne.n	8003700 <_printf_float+0x304>
 800377e:	e69e      	b.n	80034be <_printf_float+0xc2>
 8003780:	2301      	movs	r3, #1
 8003782:	4631      	mov	r1, r6
 8003784:	4628      	mov	r0, r5
 8003786:	9205      	str	r2, [sp, #20]
 8003788:	47b8      	blx	r7
 800378a:	3001      	adds	r0, #1
 800378c:	f43f ae97 	beq.w	80034be <_printf_float+0xc2>
 8003790:	9a05      	ldr	r2, [sp, #20]
 8003792:	f10b 0b01 	add.w	fp, fp, #1
 8003796:	e7b9      	b.n	800370c <_printf_float+0x310>
 8003798:	ee18 3a10 	vmov	r3, s16
 800379c:	4652      	mov	r2, sl
 800379e:	4631      	mov	r1, r6
 80037a0:	4628      	mov	r0, r5
 80037a2:	47b8      	blx	r7
 80037a4:	3001      	adds	r0, #1
 80037a6:	d1be      	bne.n	8003726 <_printf_float+0x32a>
 80037a8:	e689      	b.n	80034be <_printf_float+0xc2>
 80037aa:	9a05      	ldr	r2, [sp, #20]
 80037ac:	464b      	mov	r3, r9
 80037ae:	4442      	add	r2, r8
 80037b0:	4631      	mov	r1, r6
 80037b2:	4628      	mov	r0, r5
 80037b4:	47b8      	blx	r7
 80037b6:	3001      	adds	r0, #1
 80037b8:	d1c1      	bne.n	800373e <_printf_float+0x342>
 80037ba:	e680      	b.n	80034be <_printf_float+0xc2>
 80037bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80037be:	2a01      	cmp	r2, #1
 80037c0:	dc01      	bgt.n	80037c6 <_printf_float+0x3ca>
 80037c2:	07db      	lsls	r3, r3, #31
 80037c4:	d538      	bpl.n	8003838 <_printf_float+0x43c>
 80037c6:	2301      	movs	r3, #1
 80037c8:	4642      	mov	r2, r8
 80037ca:	4631      	mov	r1, r6
 80037cc:	4628      	mov	r0, r5
 80037ce:	47b8      	blx	r7
 80037d0:	3001      	adds	r0, #1
 80037d2:	f43f ae74 	beq.w	80034be <_printf_float+0xc2>
 80037d6:	ee18 3a10 	vmov	r3, s16
 80037da:	4652      	mov	r2, sl
 80037dc:	4631      	mov	r1, r6
 80037de:	4628      	mov	r0, r5
 80037e0:	47b8      	blx	r7
 80037e2:	3001      	adds	r0, #1
 80037e4:	f43f ae6b 	beq.w	80034be <_printf_float+0xc2>
 80037e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037ec:	2200      	movs	r2, #0
 80037ee:	2300      	movs	r3, #0
 80037f0:	f7fd f96a 	bl	8000ac8 <__aeabi_dcmpeq>
 80037f4:	b9d8      	cbnz	r0, 800382e <_printf_float+0x432>
 80037f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037f8:	f108 0201 	add.w	r2, r8, #1
 80037fc:	3b01      	subs	r3, #1
 80037fe:	4631      	mov	r1, r6
 8003800:	4628      	mov	r0, r5
 8003802:	47b8      	blx	r7
 8003804:	3001      	adds	r0, #1
 8003806:	d10e      	bne.n	8003826 <_printf_float+0x42a>
 8003808:	e659      	b.n	80034be <_printf_float+0xc2>
 800380a:	2301      	movs	r3, #1
 800380c:	4652      	mov	r2, sl
 800380e:	4631      	mov	r1, r6
 8003810:	4628      	mov	r0, r5
 8003812:	47b8      	blx	r7
 8003814:	3001      	adds	r0, #1
 8003816:	f43f ae52 	beq.w	80034be <_printf_float+0xc2>
 800381a:	f108 0801 	add.w	r8, r8, #1
 800381e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003820:	3b01      	subs	r3, #1
 8003822:	4543      	cmp	r3, r8
 8003824:	dcf1      	bgt.n	800380a <_printf_float+0x40e>
 8003826:	464b      	mov	r3, r9
 8003828:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800382c:	e6dc      	b.n	80035e8 <_printf_float+0x1ec>
 800382e:	f04f 0800 	mov.w	r8, #0
 8003832:	f104 0a1a 	add.w	sl, r4, #26
 8003836:	e7f2      	b.n	800381e <_printf_float+0x422>
 8003838:	2301      	movs	r3, #1
 800383a:	4642      	mov	r2, r8
 800383c:	e7df      	b.n	80037fe <_printf_float+0x402>
 800383e:	2301      	movs	r3, #1
 8003840:	464a      	mov	r2, r9
 8003842:	4631      	mov	r1, r6
 8003844:	4628      	mov	r0, r5
 8003846:	47b8      	blx	r7
 8003848:	3001      	adds	r0, #1
 800384a:	f43f ae38 	beq.w	80034be <_printf_float+0xc2>
 800384e:	f108 0801 	add.w	r8, r8, #1
 8003852:	68e3      	ldr	r3, [r4, #12]
 8003854:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003856:	1a5b      	subs	r3, r3, r1
 8003858:	4543      	cmp	r3, r8
 800385a:	dcf0      	bgt.n	800383e <_printf_float+0x442>
 800385c:	e6fa      	b.n	8003654 <_printf_float+0x258>
 800385e:	f04f 0800 	mov.w	r8, #0
 8003862:	f104 0919 	add.w	r9, r4, #25
 8003866:	e7f4      	b.n	8003852 <_printf_float+0x456>

08003868 <_printf_common>:
 8003868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800386c:	4616      	mov	r6, r2
 800386e:	4699      	mov	r9, r3
 8003870:	688a      	ldr	r2, [r1, #8]
 8003872:	690b      	ldr	r3, [r1, #16]
 8003874:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003878:	4293      	cmp	r3, r2
 800387a:	bfb8      	it	lt
 800387c:	4613      	movlt	r3, r2
 800387e:	6033      	str	r3, [r6, #0]
 8003880:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003884:	4607      	mov	r7, r0
 8003886:	460c      	mov	r4, r1
 8003888:	b10a      	cbz	r2, 800388e <_printf_common+0x26>
 800388a:	3301      	adds	r3, #1
 800388c:	6033      	str	r3, [r6, #0]
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	0699      	lsls	r1, r3, #26
 8003892:	bf42      	ittt	mi
 8003894:	6833      	ldrmi	r3, [r6, #0]
 8003896:	3302      	addmi	r3, #2
 8003898:	6033      	strmi	r3, [r6, #0]
 800389a:	6825      	ldr	r5, [r4, #0]
 800389c:	f015 0506 	ands.w	r5, r5, #6
 80038a0:	d106      	bne.n	80038b0 <_printf_common+0x48>
 80038a2:	f104 0a19 	add.w	sl, r4, #25
 80038a6:	68e3      	ldr	r3, [r4, #12]
 80038a8:	6832      	ldr	r2, [r6, #0]
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	42ab      	cmp	r3, r5
 80038ae:	dc26      	bgt.n	80038fe <_printf_common+0x96>
 80038b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038b4:	1e13      	subs	r3, r2, #0
 80038b6:	6822      	ldr	r2, [r4, #0]
 80038b8:	bf18      	it	ne
 80038ba:	2301      	movne	r3, #1
 80038bc:	0692      	lsls	r2, r2, #26
 80038be:	d42b      	bmi.n	8003918 <_printf_common+0xb0>
 80038c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038c4:	4649      	mov	r1, r9
 80038c6:	4638      	mov	r0, r7
 80038c8:	47c0      	blx	r8
 80038ca:	3001      	adds	r0, #1
 80038cc:	d01e      	beq.n	800390c <_printf_common+0xa4>
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	68e5      	ldr	r5, [r4, #12]
 80038d2:	6832      	ldr	r2, [r6, #0]
 80038d4:	f003 0306 	and.w	r3, r3, #6
 80038d8:	2b04      	cmp	r3, #4
 80038da:	bf08      	it	eq
 80038dc:	1aad      	subeq	r5, r5, r2
 80038de:	68a3      	ldr	r3, [r4, #8]
 80038e0:	6922      	ldr	r2, [r4, #16]
 80038e2:	bf0c      	ite	eq
 80038e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038e8:	2500      	movne	r5, #0
 80038ea:	4293      	cmp	r3, r2
 80038ec:	bfc4      	itt	gt
 80038ee:	1a9b      	subgt	r3, r3, r2
 80038f0:	18ed      	addgt	r5, r5, r3
 80038f2:	2600      	movs	r6, #0
 80038f4:	341a      	adds	r4, #26
 80038f6:	42b5      	cmp	r5, r6
 80038f8:	d11a      	bne.n	8003930 <_printf_common+0xc8>
 80038fa:	2000      	movs	r0, #0
 80038fc:	e008      	b.n	8003910 <_printf_common+0xa8>
 80038fe:	2301      	movs	r3, #1
 8003900:	4652      	mov	r2, sl
 8003902:	4649      	mov	r1, r9
 8003904:	4638      	mov	r0, r7
 8003906:	47c0      	blx	r8
 8003908:	3001      	adds	r0, #1
 800390a:	d103      	bne.n	8003914 <_printf_common+0xac>
 800390c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003914:	3501      	adds	r5, #1
 8003916:	e7c6      	b.n	80038a6 <_printf_common+0x3e>
 8003918:	18e1      	adds	r1, r4, r3
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	2030      	movs	r0, #48	; 0x30
 800391e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003922:	4422      	add	r2, r4
 8003924:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003928:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800392c:	3302      	adds	r3, #2
 800392e:	e7c7      	b.n	80038c0 <_printf_common+0x58>
 8003930:	2301      	movs	r3, #1
 8003932:	4622      	mov	r2, r4
 8003934:	4649      	mov	r1, r9
 8003936:	4638      	mov	r0, r7
 8003938:	47c0      	blx	r8
 800393a:	3001      	adds	r0, #1
 800393c:	d0e6      	beq.n	800390c <_printf_common+0xa4>
 800393e:	3601      	adds	r6, #1
 8003940:	e7d9      	b.n	80038f6 <_printf_common+0x8e>
	...

08003944 <_printf_i>:
 8003944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003948:	7e0f      	ldrb	r7, [r1, #24]
 800394a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800394c:	2f78      	cmp	r7, #120	; 0x78
 800394e:	4691      	mov	r9, r2
 8003950:	4680      	mov	r8, r0
 8003952:	460c      	mov	r4, r1
 8003954:	469a      	mov	sl, r3
 8003956:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800395a:	d807      	bhi.n	800396c <_printf_i+0x28>
 800395c:	2f62      	cmp	r7, #98	; 0x62
 800395e:	d80a      	bhi.n	8003976 <_printf_i+0x32>
 8003960:	2f00      	cmp	r7, #0
 8003962:	f000 80d8 	beq.w	8003b16 <_printf_i+0x1d2>
 8003966:	2f58      	cmp	r7, #88	; 0x58
 8003968:	f000 80a3 	beq.w	8003ab2 <_printf_i+0x16e>
 800396c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003970:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003974:	e03a      	b.n	80039ec <_printf_i+0xa8>
 8003976:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800397a:	2b15      	cmp	r3, #21
 800397c:	d8f6      	bhi.n	800396c <_printf_i+0x28>
 800397e:	a101      	add	r1, pc, #4	; (adr r1, 8003984 <_printf_i+0x40>)
 8003980:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003984:	080039dd 	.word	0x080039dd
 8003988:	080039f1 	.word	0x080039f1
 800398c:	0800396d 	.word	0x0800396d
 8003990:	0800396d 	.word	0x0800396d
 8003994:	0800396d 	.word	0x0800396d
 8003998:	0800396d 	.word	0x0800396d
 800399c:	080039f1 	.word	0x080039f1
 80039a0:	0800396d 	.word	0x0800396d
 80039a4:	0800396d 	.word	0x0800396d
 80039a8:	0800396d 	.word	0x0800396d
 80039ac:	0800396d 	.word	0x0800396d
 80039b0:	08003afd 	.word	0x08003afd
 80039b4:	08003a21 	.word	0x08003a21
 80039b8:	08003adf 	.word	0x08003adf
 80039bc:	0800396d 	.word	0x0800396d
 80039c0:	0800396d 	.word	0x0800396d
 80039c4:	08003b1f 	.word	0x08003b1f
 80039c8:	0800396d 	.word	0x0800396d
 80039cc:	08003a21 	.word	0x08003a21
 80039d0:	0800396d 	.word	0x0800396d
 80039d4:	0800396d 	.word	0x0800396d
 80039d8:	08003ae7 	.word	0x08003ae7
 80039dc:	682b      	ldr	r3, [r5, #0]
 80039de:	1d1a      	adds	r2, r3, #4
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	602a      	str	r2, [r5, #0]
 80039e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0a3      	b.n	8003b38 <_printf_i+0x1f4>
 80039f0:	6820      	ldr	r0, [r4, #0]
 80039f2:	6829      	ldr	r1, [r5, #0]
 80039f4:	0606      	lsls	r6, r0, #24
 80039f6:	f101 0304 	add.w	r3, r1, #4
 80039fa:	d50a      	bpl.n	8003a12 <_printf_i+0xce>
 80039fc:	680e      	ldr	r6, [r1, #0]
 80039fe:	602b      	str	r3, [r5, #0]
 8003a00:	2e00      	cmp	r6, #0
 8003a02:	da03      	bge.n	8003a0c <_printf_i+0xc8>
 8003a04:	232d      	movs	r3, #45	; 0x2d
 8003a06:	4276      	negs	r6, r6
 8003a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a0c:	485e      	ldr	r0, [pc, #376]	; (8003b88 <_printf_i+0x244>)
 8003a0e:	230a      	movs	r3, #10
 8003a10:	e019      	b.n	8003a46 <_printf_i+0x102>
 8003a12:	680e      	ldr	r6, [r1, #0]
 8003a14:	602b      	str	r3, [r5, #0]
 8003a16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a1a:	bf18      	it	ne
 8003a1c:	b236      	sxthne	r6, r6
 8003a1e:	e7ef      	b.n	8003a00 <_printf_i+0xbc>
 8003a20:	682b      	ldr	r3, [r5, #0]
 8003a22:	6820      	ldr	r0, [r4, #0]
 8003a24:	1d19      	adds	r1, r3, #4
 8003a26:	6029      	str	r1, [r5, #0]
 8003a28:	0601      	lsls	r1, r0, #24
 8003a2a:	d501      	bpl.n	8003a30 <_printf_i+0xec>
 8003a2c:	681e      	ldr	r6, [r3, #0]
 8003a2e:	e002      	b.n	8003a36 <_printf_i+0xf2>
 8003a30:	0646      	lsls	r6, r0, #25
 8003a32:	d5fb      	bpl.n	8003a2c <_printf_i+0xe8>
 8003a34:	881e      	ldrh	r6, [r3, #0]
 8003a36:	4854      	ldr	r0, [pc, #336]	; (8003b88 <_printf_i+0x244>)
 8003a38:	2f6f      	cmp	r7, #111	; 0x6f
 8003a3a:	bf0c      	ite	eq
 8003a3c:	2308      	moveq	r3, #8
 8003a3e:	230a      	movne	r3, #10
 8003a40:	2100      	movs	r1, #0
 8003a42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a46:	6865      	ldr	r5, [r4, #4]
 8003a48:	60a5      	str	r5, [r4, #8]
 8003a4a:	2d00      	cmp	r5, #0
 8003a4c:	bfa2      	ittt	ge
 8003a4e:	6821      	ldrge	r1, [r4, #0]
 8003a50:	f021 0104 	bicge.w	r1, r1, #4
 8003a54:	6021      	strge	r1, [r4, #0]
 8003a56:	b90e      	cbnz	r6, 8003a5c <_printf_i+0x118>
 8003a58:	2d00      	cmp	r5, #0
 8003a5a:	d04d      	beq.n	8003af8 <_printf_i+0x1b4>
 8003a5c:	4615      	mov	r5, r2
 8003a5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a62:	fb03 6711 	mls	r7, r3, r1, r6
 8003a66:	5dc7      	ldrb	r7, [r0, r7]
 8003a68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a6c:	4637      	mov	r7, r6
 8003a6e:	42bb      	cmp	r3, r7
 8003a70:	460e      	mov	r6, r1
 8003a72:	d9f4      	bls.n	8003a5e <_printf_i+0x11a>
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d10b      	bne.n	8003a90 <_printf_i+0x14c>
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	07de      	lsls	r6, r3, #31
 8003a7c:	d508      	bpl.n	8003a90 <_printf_i+0x14c>
 8003a7e:	6923      	ldr	r3, [r4, #16]
 8003a80:	6861      	ldr	r1, [r4, #4]
 8003a82:	4299      	cmp	r1, r3
 8003a84:	bfde      	ittt	le
 8003a86:	2330      	movle	r3, #48	; 0x30
 8003a88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a8c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003a90:	1b52      	subs	r2, r2, r5
 8003a92:	6122      	str	r2, [r4, #16]
 8003a94:	f8cd a000 	str.w	sl, [sp]
 8003a98:	464b      	mov	r3, r9
 8003a9a:	aa03      	add	r2, sp, #12
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	4640      	mov	r0, r8
 8003aa0:	f7ff fee2 	bl	8003868 <_printf_common>
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	d14c      	bne.n	8003b42 <_printf_i+0x1fe>
 8003aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003aac:	b004      	add	sp, #16
 8003aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ab2:	4835      	ldr	r0, [pc, #212]	; (8003b88 <_printf_i+0x244>)
 8003ab4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ab8:	6829      	ldr	r1, [r5, #0]
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ac0:	6029      	str	r1, [r5, #0]
 8003ac2:	061d      	lsls	r5, r3, #24
 8003ac4:	d514      	bpl.n	8003af0 <_printf_i+0x1ac>
 8003ac6:	07df      	lsls	r7, r3, #31
 8003ac8:	bf44      	itt	mi
 8003aca:	f043 0320 	orrmi.w	r3, r3, #32
 8003ace:	6023      	strmi	r3, [r4, #0]
 8003ad0:	b91e      	cbnz	r6, 8003ada <_printf_i+0x196>
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	f023 0320 	bic.w	r3, r3, #32
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	2310      	movs	r3, #16
 8003adc:	e7b0      	b.n	8003a40 <_printf_i+0xfc>
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	f043 0320 	orr.w	r3, r3, #32
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	2378      	movs	r3, #120	; 0x78
 8003ae8:	4828      	ldr	r0, [pc, #160]	; (8003b8c <_printf_i+0x248>)
 8003aea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003aee:	e7e3      	b.n	8003ab8 <_printf_i+0x174>
 8003af0:	0659      	lsls	r1, r3, #25
 8003af2:	bf48      	it	mi
 8003af4:	b2b6      	uxthmi	r6, r6
 8003af6:	e7e6      	b.n	8003ac6 <_printf_i+0x182>
 8003af8:	4615      	mov	r5, r2
 8003afa:	e7bb      	b.n	8003a74 <_printf_i+0x130>
 8003afc:	682b      	ldr	r3, [r5, #0]
 8003afe:	6826      	ldr	r6, [r4, #0]
 8003b00:	6961      	ldr	r1, [r4, #20]
 8003b02:	1d18      	adds	r0, r3, #4
 8003b04:	6028      	str	r0, [r5, #0]
 8003b06:	0635      	lsls	r5, r6, #24
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	d501      	bpl.n	8003b10 <_printf_i+0x1cc>
 8003b0c:	6019      	str	r1, [r3, #0]
 8003b0e:	e002      	b.n	8003b16 <_printf_i+0x1d2>
 8003b10:	0670      	lsls	r0, r6, #25
 8003b12:	d5fb      	bpl.n	8003b0c <_printf_i+0x1c8>
 8003b14:	8019      	strh	r1, [r3, #0]
 8003b16:	2300      	movs	r3, #0
 8003b18:	6123      	str	r3, [r4, #16]
 8003b1a:	4615      	mov	r5, r2
 8003b1c:	e7ba      	b.n	8003a94 <_printf_i+0x150>
 8003b1e:	682b      	ldr	r3, [r5, #0]
 8003b20:	1d1a      	adds	r2, r3, #4
 8003b22:	602a      	str	r2, [r5, #0]
 8003b24:	681d      	ldr	r5, [r3, #0]
 8003b26:	6862      	ldr	r2, [r4, #4]
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	f7fc fb58 	bl	80001e0 <memchr>
 8003b30:	b108      	cbz	r0, 8003b36 <_printf_i+0x1f2>
 8003b32:	1b40      	subs	r0, r0, r5
 8003b34:	6060      	str	r0, [r4, #4]
 8003b36:	6863      	ldr	r3, [r4, #4]
 8003b38:	6123      	str	r3, [r4, #16]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b40:	e7a8      	b.n	8003a94 <_printf_i+0x150>
 8003b42:	6923      	ldr	r3, [r4, #16]
 8003b44:	462a      	mov	r2, r5
 8003b46:	4649      	mov	r1, r9
 8003b48:	4640      	mov	r0, r8
 8003b4a:	47d0      	blx	sl
 8003b4c:	3001      	adds	r0, #1
 8003b4e:	d0ab      	beq.n	8003aa8 <_printf_i+0x164>
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	079b      	lsls	r3, r3, #30
 8003b54:	d413      	bmi.n	8003b7e <_printf_i+0x23a>
 8003b56:	68e0      	ldr	r0, [r4, #12]
 8003b58:	9b03      	ldr	r3, [sp, #12]
 8003b5a:	4298      	cmp	r0, r3
 8003b5c:	bfb8      	it	lt
 8003b5e:	4618      	movlt	r0, r3
 8003b60:	e7a4      	b.n	8003aac <_printf_i+0x168>
 8003b62:	2301      	movs	r3, #1
 8003b64:	4632      	mov	r2, r6
 8003b66:	4649      	mov	r1, r9
 8003b68:	4640      	mov	r0, r8
 8003b6a:	47d0      	blx	sl
 8003b6c:	3001      	adds	r0, #1
 8003b6e:	d09b      	beq.n	8003aa8 <_printf_i+0x164>
 8003b70:	3501      	adds	r5, #1
 8003b72:	68e3      	ldr	r3, [r4, #12]
 8003b74:	9903      	ldr	r1, [sp, #12]
 8003b76:	1a5b      	subs	r3, r3, r1
 8003b78:	42ab      	cmp	r3, r5
 8003b7a:	dcf2      	bgt.n	8003b62 <_printf_i+0x21e>
 8003b7c:	e7eb      	b.n	8003b56 <_printf_i+0x212>
 8003b7e:	2500      	movs	r5, #0
 8003b80:	f104 0619 	add.w	r6, r4, #25
 8003b84:	e7f5      	b.n	8003b72 <_printf_i+0x22e>
 8003b86:	bf00      	nop
 8003b88:	08006402 	.word	0x08006402
 8003b8c:	08006413 	.word	0x08006413

08003b90 <setbuf>:
 8003b90:	2900      	cmp	r1, #0
 8003b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b96:	bf0c      	ite	eq
 8003b98:	2202      	moveq	r2, #2
 8003b9a:	2200      	movne	r2, #0
 8003b9c:	f000 b800 	b.w	8003ba0 <setvbuf>

08003ba0 <setvbuf>:
 8003ba0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003ba4:	461d      	mov	r5, r3
 8003ba6:	4b5d      	ldr	r3, [pc, #372]	; (8003d1c <setvbuf+0x17c>)
 8003ba8:	681f      	ldr	r7, [r3, #0]
 8003baa:	4604      	mov	r4, r0
 8003bac:	460e      	mov	r6, r1
 8003bae:	4690      	mov	r8, r2
 8003bb0:	b127      	cbz	r7, 8003bbc <setvbuf+0x1c>
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	b913      	cbnz	r3, 8003bbc <setvbuf+0x1c>
 8003bb6:	4638      	mov	r0, r7
 8003bb8:	f001 f86e 	bl	8004c98 <__sinit>
 8003bbc:	4b58      	ldr	r3, [pc, #352]	; (8003d20 <setvbuf+0x180>)
 8003bbe:	429c      	cmp	r4, r3
 8003bc0:	d167      	bne.n	8003c92 <setvbuf+0xf2>
 8003bc2:	687c      	ldr	r4, [r7, #4]
 8003bc4:	f1b8 0f02 	cmp.w	r8, #2
 8003bc8:	d006      	beq.n	8003bd8 <setvbuf+0x38>
 8003bca:	f1b8 0f01 	cmp.w	r8, #1
 8003bce:	f200 809f 	bhi.w	8003d10 <setvbuf+0x170>
 8003bd2:	2d00      	cmp	r5, #0
 8003bd4:	f2c0 809c 	blt.w	8003d10 <setvbuf+0x170>
 8003bd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bda:	07db      	lsls	r3, r3, #31
 8003bdc:	d405      	bmi.n	8003bea <setvbuf+0x4a>
 8003bde:	89a3      	ldrh	r3, [r4, #12]
 8003be0:	0598      	lsls	r0, r3, #22
 8003be2:	d402      	bmi.n	8003bea <setvbuf+0x4a>
 8003be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003be6:	f001 f8fa 	bl	8004dde <__retarget_lock_acquire_recursive>
 8003bea:	4621      	mov	r1, r4
 8003bec:	4638      	mov	r0, r7
 8003bee:	f000 ffbf 	bl	8004b70 <_fflush_r>
 8003bf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bf4:	b141      	cbz	r1, 8003c08 <setvbuf+0x68>
 8003bf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bfa:	4299      	cmp	r1, r3
 8003bfc:	d002      	beq.n	8003c04 <setvbuf+0x64>
 8003bfe:	4638      	mov	r0, r7
 8003c00:	f001 fcf6 	bl	80055f0 <_free_r>
 8003c04:	2300      	movs	r3, #0
 8003c06:	6363      	str	r3, [r4, #52]	; 0x34
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61a3      	str	r3, [r4, #24]
 8003c0c:	6063      	str	r3, [r4, #4]
 8003c0e:	89a3      	ldrh	r3, [r4, #12]
 8003c10:	0619      	lsls	r1, r3, #24
 8003c12:	d503      	bpl.n	8003c1c <setvbuf+0x7c>
 8003c14:	6921      	ldr	r1, [r4, #16]
 8003c16:	4638      	mov	r0, r7
 8003c18:	f001 fcea 	bl	80055f0 <_free_r>
 8003c1c:	89a3      	ldrh	r3, [r4, #12]
 8003c1e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003c22:	f023 0303 	bic.w	r3, r3, #3
 8003c26:	f1b8 0f02 	cmp.w	r8, #2
 8003c2a:	81a3      	strh	r3, [r4, #12]
 8003c2c:	d06c      	beq.n	8003d08 <setvbuf+0x168>
 8003c2e:	ab01      	add	r3, sp, #4
 8003c30:	466a      	mov	r2, sp
 8003c32:	4621      	mov	r1, r4
 8003c34:	4638      	mov	r0, r7
 8003c36:	f001 f8d4 	bl	8004de2 <__swhatbuf_r>
 8003c3a:	89a3      	ldrh	r3, [r4, #12]
 8003c3c:	4318      	orrs	r0, r3
 8003c3e:	81a0      	strh	r0, [r4, #12]
 8003c40:	2d00      	cmp	r5, #0
 8003c42:	d130      	bne.n	8003ca6 <setvbuf+0x106>
 8003c44:	9d00      	ldr	r5, [sp, #0]
 8003c46:	4628      	mov	r0, r5
 8003c48:	f001 f930 	bl	8004eac <malloc>
 8003c4c:	4606      	mov	r6, r0
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	d155      	bne.n	8003cfe <setvbuf+0x15e>
 8003c52:	f8dd 9000 	ldr.w	r9, [sp]
 8003c56:	45a9      	cmp	r9, r5
 8003c58:	d14a      	bne.n	8003cf0 <setvbuf+0x150>
 8003c5a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003c5e:	2200      	movs	r2, #0
 8003c60:	60a2      	str	r2, [r4, #8]
 8003c62:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003c66:	6022      	str	r2, [r4, #0]
 8003c68:	6122      	str	r2, [r4, #16]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c70:	6162      	str	r2, [r4, #20]
 8003c72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c74:	f043 0302 	orr.w	r3, r3, #2
 8003c78:	07d2      	lsls	r2, r2, #31
 8003c7a:	81a3      	strh	r3, [r4, #12]
 8003c7c:	d405      	bmi.n	8003c8a <setvbuf+0xea>
 8003c7e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003c82:	d102      	bne.n	8003c8a <setvbuf+0xea>
 8003c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c86:	f001 f8ab 	bl	8004de0 <__retarget_lock_release_recursive>
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	b003      	add	sp, #12
 8003c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c92:	4b24      	ldr	r3, [pc, #144]	; (8003d24 <setvbuf+0x184>)
 8003c94:	429c      	cmp	r4, r3
 8003c96:	d101      	bne.n	8003c9c <setvbuf+0xfc>
 8003c98:	68bc      	ldr	r4, [r7, #8]
 8003c9a:	e793      	b.n	8003bc4 <setvbuf+0x24>
 8003c9c:	4b22      	ldr	r3, [pc, #136]	; (8003d28 <setvbuf+0x188>)
 8003c9e:	429c      	cmp	r4, r3
 8003ca0:	bf08      	it	eq
 8003ca2:	68fc      	ldreq	r4, [r7, #12]
 8003ca4:	e78e      	b.n	8003bc4 <setvbuf+0x24>
 8003ca6:	2e00      	cmp	r6, #0
 8003ca8:	d0cd      	beq.n	8003c46 <setvbuf+0xa6>
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	b913      	cbnz	r3, 8003cb4 <setvbuf+0x114>
 8003cae:	4638      	mov	r0, r7
 8003cb0:	f000 fff2 	bl	8004c98 <__sinit>
 8003cb4:	f1b8 0f01 	cmp.w	r8, #1
 8003cb8:	bf08      	it	eq
 8003cba:	89a3      	ldrheq	r3, [r4, #12]
 8003cbc:	6026      	str	r6, [r4, #0]
 8003cbe:	bf04      	itt	eq
 8003cc0:	f043 0301 	orreq.w	r3, r3, #1
 8003cc4:	81a3      	strheq	r3, [r4, #12]
 8003cc6:	89a2      	ldrh	r2, [r4, #12]
 8003cc8:	f012 0308 	ands.w	r3, r2, #8
 8003ccc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003cd0:	d01c      	beq.n	8003d0c <setvbuf+0x16c>
 8003cd2:	07d3      	lsls	r3, r2, #31
 8003cd4:	bf41      	itttt	mi
 8003cd6:	2300      	movmi	r3, #0
 8003cd8:	426d      	negmi	r5, r5
 8003cda:	60a3      	strmi	r3, [r4, #8]
 8003cdc:	61a5      	strmi	r5, [r4, #24]
 8003cde:	bf58      	it	pl
 8003ce0:	60a5      	strpl	r5, [r4, #8]
 8003ce2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003ce4:	f015 0501 	ands.w	r5, r5, #1
 8003ce8:	d115      	bne.n	8003d16 <setvbuf+0x176>
 8003cea:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003cee:	e7c8      	b.n	8003c82 <setvbuf+0xe2>
 8003cf0:	4648      	mov	r0, r9
 8003cf2:	f001 f8db 	bl	8004eac <malloc>
 8003cf6:	4606      	mov	r6, r0
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d0ae      	beq.n	8003c5a <setvbuf+0xba>
 8003cfc:	464d      	mov	r5, r9
 8003cfe:	89a3      	ldrh	r3, [r4, #12]
 8003d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d04:	81a3      	strh	r3, [r4, #12]
 8003d06:	e7d0      	b.n	8003caa <setvbuf+0x10a>
 8003d08:	2500      	movs	r5, #0
 8003d0a:	e7a8      	b.n	8003c5e <setvbuf+0xbe>
 8003d0c:	60a3      	str	r3, [r4, #8]
 8003d0e:	e7e8      	b.n	8003ce2 <setvbuf+0x142>
 8003d10:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003d14:	e7b9      	b.n	8003c8a <setvbuf+0xea>
 8003d16:	2500      	movs	r5, #0
 8003d18:	e7b7      	b.n	8003c8a <setvbuf+0xea>
 8003d1a:	bf00      	nop
 8003d1c:	2000002c 	.word	0x2000002c
 8003d20:	080064d4 	.word	0x080064d4
 8003d24:	080064f4 	.word	0x080064f4
 8003d28:	080064b4 	.word	0x080064b4

08003d2c <siprintf>:
 8003d2c:	b40e      	push	{r1, r2, r3}
 8003d2e:	b500      	push	{lr}
 8003d30:	b09c      	sub	sp, #112	; 0x70
 8003d32:	ab1d      	add	r3, sp, #116	; 0x74
 8003d34:	9002      	str	r0, [sp, #8]
 8003d36:	9006      	str	r0, [sp, #24]
 8003d38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d3c:	4809      	ldr	r0, [pc, #36]	; (8003d64 <siprintf+0x38>)
 8003d3e:	9107      	str	r1, [sp, #28]
 8003d40:	9104      	str	r1, [sp, #16]
 8003d42:	4909      	ldr	r1, [pc, #36]	; (8003d68 <siprintf+0x3c>)
 8003d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d48:	9105      	str	r1, [sp, #20]
 8003d4a:	6800      	ldr	r0, [r0, #0]
 8003d4c:	9301      	str	r3, [sp, #4]
 8003d4e:	a902      	add	r1, sp, #8
 8003d50:	f001 fd8a 	bl	8005868 <_svfiprintf_r>
 8003d54:	9b02      	ldr	r3, [sp, #8]
 8003d56:	2200      	movs	r2, #0
 8003d58:	701a      	strb	r2, [r3, #0]
 8003d5a:	b01c      	add	sp, #112	; 0x70
 8003d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d60:	b003      	add	sp, #12
 8003d62:	4770      	bx	lr
 8003d64:	2000002c 	.word	0x2000002c
 8003d68:	ffff0208 	.word	0xffff0208

08003d6c <quorem>:
 8003d6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d70:	6903      	ldr	r3, [r0, #16]
 8003d72:	690c      	ldr	r4, [r1, #16]
 8003d74:	42a3      	cmp	r3, r4
 8003d76:	4607      	mov	r7, r0
 8003d78:	f2c0 8081 	blt.w	8003e7e <quorem+0x112>
 8003d7c:	3c01      	subs	r4, #1
 8003d7e:	f101 0814 	add.w	r8, r1, #20
 8003d82:	f100 0514 	add.w	r5, r0, #20
 8003d86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003d8a:	9301      	str	r3, [sp, #4]
 8003d8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003d90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003d94:	3301      	adds	r3, #1
 8003d96:	429a      	cmp	r2, r3
 8003d98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003d9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003da0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003da4:	d331      	bcc.n	8003e0a <quorem+0x9e>
 8003da6:	f04f 0e00 	mov.w	lr, #0
 8003daa:	4640      	mov	r0, r8
 8003dac:	46ac      	mov	ip, r5
 8003dae:	46f2      	mov	sl, lr
 8003db0:	f850 2b04 	ldr.w	r2, [r0], #4
 8003db4:	b293      	uxth	r3, r2
 8003db6:	fb06 e303 	mla	r3, r6, r3, lr
 8003dba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	ebaa 0303 	sub.w	r3, sl, r3
 8003dc4:	f8dc a000 	ldr.w	sl, [ip]
 8003dc8:	0c12      	lsrs	r2, r2, #16
 8003dca:	fa13 f38a 	uxtah	r3, r3, sl
 8003dce:	fb06 e202 	mla	r2, r6, r2, lr
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	9b00      	ldr	r3, [sp, #0]
 8003dd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003dda:	b292      	uxth	r2, r2
 8003ddc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003de0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003de4:	f8bd 3000 	ldrh.w	r3, [sp]
 8003de8:	4581      	cmp	r9, r0
 8003dea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003dee:	f84c 3b04 	str.w	r3, [ip], #4
 8003df2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003df6:	d2db      	bcs.n	8003db0 <quorem+0x44>
 8003df8:	f855 300b 	ldr.w	r3, [r5, fp]
 8003dfc:	b92b      	cbnz	r3, 8003e0a <quorem+0x9e>
 8003dfe:	9b01      	ldr	r3, [sp, #4]
 8003e00:	3b04      	subs	r3, #4
 8003e02:	429d      	cmp	r5, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	d32e      	bcc.n	8003e66 <quorem+0xfa>
 8003e08:	613c      	str	r4, [r7, #16]
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	f001 fad8 	bl	80053c0 <__mcmp>
 8003e10:	2800      	cmp	r0, #0
 8003e12:	db24      	blt.n	8003e5e <quorem+0xf2>
 8003e14:	3601      	adds	r6, #1
 8003e16:	4628      	mov	r0, r5
 8003e18:	f04f 0c00 	mov.w	ip, #0
 8003e1c:	f858 2b04 	ldr.w	r2, [r8], #4
 8003e20:	f8d0 e000 	ldr.w	lr, [r0]
 8003e24:	b293      	uxth	r3, r2
 8003e26:	ebac 0303 	sub.w	r3, ip, r3
 8003e2a:	0c12      	lsrs	r2, r2, #16
 8003e2c:	fa13 f38e 	uxtah	r3, r3, lr
 8003e30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003e34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e3e:	45c1      	cmp	r9, r8
 8003e40:	f840 3b04 	str.w	r3, [r0], #4
 8003e44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003e48:	d2e8      	bcs.n	8003e1c <quorem+0xb0>
 8003e4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003e4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003e52:	b922      	cbnz	r2, 8003e5e <quorem+0xf2>
 8003e54:	3b04      	subs	r3, #4
 8003e56:	429d      	cmp	r5, r3
 8003e58:	461a      	mov	r2, r3
 8003e5a:	d30a      	bcc.n	8003e72 <quorem+0x106>
 8003e5c:	613c      	str	r4, [r7, #16]
 8003e5e:	4630      	mov	r0, r6
 8003e60:	b003      	add	sp, #12
 8003e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e66:	6812      	ldr	r2, [r2, #0]
 8003e68:	3b04      	subs	r3, #4
 8003e6a:	2a00      	cmp	r2, #0
 8003e6c:	d1cc      	bne.n	8003e08 <quorem+0x9c>
 8003e6e:	3c01      	subs	r4, #1
 8003e70:	e7c7      	b.n	8003e02 <quorem+0x96>
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	3b04      	subs	r3, #4
 8003e76:	2a00      	cmp	r2, #0
 8003e78:	d1f0      	bne.n	8003e5c <quorem+0xf0>
 8003e7a:	3c01      	subs	r4, #1
 8003e7c:	e7eb      	b.n	8003e56 <quorem+0xea>
 8003e7e:	2000      	movs	r0, #0
 8003e80:	e7ee      	b.n	8003e60 <quorem+0xf4>
 8003e82:	0000      	movs	r0, r0
 8003e84:	0000      	movs	r0, r0
	...

08003e88 <_dtoa_r>:
 8003e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e8c:	ed2d 8b04 	vpush	{d8-d9}
 8003e90:	ec57 6b10 	vmov	r6, r7, d0
 8003e94:	b093      	sub	sp, #76	; 0x4c
 8003e96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003e98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003e9c:	9106      	str	r1, [sp, #24]
 8003e9e:	ee10 aa10 	vmov	sl, s0
 8003ea2:	4604      	mov	r4, r0
 8003ea4:	9209      	str	r2, [sp, #36]	; 0x24
 8003ea6:	930c      	str	r3, [sp, #48]	; 0x30
 8003ea8:	46bb      	mov	fp, r7
 8003eaa:	b975      	cbnz	r5, 8003eca <_dtoa_r+0x42>
 8003eac:	2010      	movs	r0, #16
 8003eae:	f000 fffd 	bl	8004eac <malloc>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	6260      	str	r0, [r4, #36]	; 0x24
 8003eb6:	b920      	cbnz	r0, 8003ec2 <_dtoa_r+0x3a>
 8003eb8:	4ba7      	ldr	r3, [pc, #668]	; (8004158 <_dtoa_r+0x2d0>)
 8003eba:	21ea      	movs	r1, #234	; 0xea
 8003ebc:	48a7      	ldr	r0, [pc, #668]	; (800415c <_dtoa_r+0x2d4>)
 8003ebe:	f001 fe27 	bl	8005b10 <__assert_func>
 8003ec2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003ec6:	6005      	str	r5, [r0, #0]
 8003ec8:	60c5      	str	r5, [r0, #12]
 8003eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ecc:	6819      	ldr	r1, [r3, #0]
 8003ece:	b151      	cbz	r1, 8003ee6 <_dtoa_r+0x5e>
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	604a      	str	r2, [r1, #4]
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	4093      	lsls	r3, r2
 8003ed8:	608b      	str	r3, [r1, #8]
 8003eda:	4620      	mov	r0, r4
 8003edc:	f001 f82e 	bl	8004f3c <_Bfree>
 8003ee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	1e3b      	subs	r3, r7, #0
 8003ee8:	bfaa      	itet	ge
 8003eea:	2300      	movge	r3, #0
 8003eec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8003ef0:	f8c8 3000 	strge.w	r3, [r8]
 8003ef4:	4b9a      	ldr	r3, [pc, #616]	; (8004160 <_dtoa_r+0x2d8>)
 8003ef6:	bfbc      	itt	lt
 8003ef8:	2201      	movlt	r2, #1
 8003efa:	f8c8 2000 	strlt.w	r2, [r8]
 8003efe:	ea33 030b 	bics.w	r3, r3, fp
 8003f02:	d11b      	bne.n	8003f3c <_dtoa_r+0xb4>
 8003f04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f06:	f242 730f 	movw	r3, #9999	; 0x270f
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003f10:	4333      	orrs	r3, r6
 8003f12:	f000 8592 	beq.w	8004a3a <_dtoa_r+0xbb2>
 8003f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f18:	b963      	cbnz	r3, 8003f34 <_dtoa_r+0xac>
 8003f1a:	4b92      	ldr	r3, [pc, #584]	; (8004164 <_dtoa_r+0x2dc>)
 8003f1c:	e022      	b.n	8003f64 <_dtoa_r+0xdc>
 8003f1e:	4b92      	ldr	r3, [pc, #584]	; (8004168 <_dtoa_r+0x2e0>)
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	3308      	adds	r3, #8
 8003f24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	9801      	ldr	r0, [sp, #4]
 8003f2a:	b013      	add	sp, #76	; 0x4c
 8003f2c:	ecbd 8b04 	vpop	{d8-d9}
 8003f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f34:	4b8b      	ldr	r3, [pc, #556]	; (8004164 <_dtoa_r+0x2dc>)
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	3303      	adds	r3, #3
 8003f3a:	e7f3      	b.n	8003f24 <_dtoa_r+0x9c>
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2300      	movs	r3, #0
 8003f40:	4650      	mov	r0, sl
 8003f42:	4659      	mov	r1, fp
 8003f44:	f7fc fdc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f48:	ec4b ab19 	vmov	d9, sl, fp
 8003f4c:	4680      	mov	r8, r0
 8003f4e:	b158      	cbz	r0, 8003f68 <_dtoa_r+0xe0>
 8003f50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f52:	2301      	movs	r3, #1
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 856b 	beq.w	8004a34 <_dtoa_r+0xbac>
 8003f5e:	4883      	ldr	r0, [pc, #524]	; (800416c <_dtoa_r+0x2e4>)
 8003f60:	6018      	str	r0, [r3, #0]
 8003f62:	1e43      	subs	r3, r0, #1
 8003f64:	9301      	str	r3, [sp, #4]
 8003f66:	e7df      	b.n	8003f28 <_dtoa_r+0xa0>
 8003f68:	ec4b ab10 	vmov	d0, sl, fp
 8003f6c:	aa10      	add	r2, sp, #64	; 0x40
 8003f6e:	a911      	add	r1, sp, #68	; 0x44
 8003f70:	4620      	mov	r0, r4
 8003f72:	f001 facb 	bl	800550c <__d2b>
 8003f76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8003f7a:	ee08 0a10 	vmov	s16, r0
 8003f7e:	2d00      	cmp	r5, #0
 8003f80:	f000 8084 	beq.w	800408c <_dtoa_r+0x204>
 8003f84:	ee19 3a90 	vmov	r3, s19
 8003f88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003f90:	4656      	mov	r6, sl
 8003f92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003f96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003f9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8003f9e:	4b74      	ldr	r3, [pc, #464]	; (8004170 <_dtoa_r+0x2e8>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	4639      	mov	r1, r7
 8003fa6:	f7fc f96f 	bl	8000288 <__aeabi_dsub>
 8003faa:	a365      	add	r3, pc, #404	; (adr r3, 8004140 <_dtoa_r+0x2b8>)
 8003fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb0:	f7fc fb22 	bl	80005f8 <__aeabi_dmul>
 8003fb4:	a364      	add	r3, pc, #400	; (adr r3, 8004148 <_dtoa_r+0x2c0>)
 8003fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fba:	f7fc f967 	bl	800028c <__adddf3>
 8003fbe:	4606      	mov	r6, r0
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	460f      	mov	r7, r1
 8003fc4:	f7fc faae 	bl	8000524 <__aeabi_i2d>
 8003fc8:	a361      	add	r3, pc, #388	; (adr r3, 8004150 <_dtoa_r+0x2c8>)
 8003fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fce:	f7fc fb13 	bl	80005f8 <__aeabi_dmul>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4630      	mov	r0, r6
 8003fd8:	4639      	mov	r1, r7
 8003fda:	f7fc f957 	bl	800028c <__adddf3>
 8003fde:	4606      	mov	r6, r0
 8003fe0:	460f      	mov	r7, r1
 8003fe2:	f7fc fdb9 	bl	8000b58 <__aeabi_d2iz>
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	9000      	str	r0, [sp, #0]
 8003fea:	2300      	movs	r3, #0
 8003fec:	4630      	mov	r0, r6
 8003fee:	4639      	mov	r1, r7
 8003ff0:	f7fc fd74 	bl	8000adc <__aeabi_dcmplt>
 8003ff4:	b150      	cbz	r0, 800400c <_dtoa_r+0x184>
 8003ff6:	9800      	ldr	r0, [sp, #0]
 8003ff8:	f7fc fa94 	bl	8000524 <__aeabi_i2d>
 8003ffc:	4632      	mov	r2, r6
 8003ffe:	463b      	mov	r3, r7
 8004000:	f7fc fd62 	bl	8000ac8 <__aeabi_dcmpeq>
 8004004:	b910      	cbnz	r0, 800400c <_dtoa_r+0x184>
 8004006:	9b00      	ldr	r3, [sp, #0]
 8004008:	3b01      	subs	r3, #1
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	9b00      	ldr	r3, [sp, #0]
 800400e:	2b16      	cmp	r3, #22
 8004010:	d85a      	bhi.n	80040c8 <_dtoa_r+0x240>
 8004012:	9a00      	ldr	r2, [sp, #0]
 8004014:	4b57      	ldr	r3, [pc, #348]	; (8004174 <_dtoa_r+0x2ec>)
 8004016:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800401a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401e:	ec51 0b19 	vmov	r0, r1, d9
 8004022:	f7fc fd5b 	bl	8000adc <__aeabi_dcmplt>
 8004026:	2800      	cmp	r0, #0
 8004028:	d050      	beq.n	80040cc <_dtoa_r+0x244>
 800402a:	9b00      	ldr	r3, [sp, #0]
 800402c:	3b01      	subs	r3, #1
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	2300      	movs	r3, #0
 8004032:	930b      	str	r3, [sp, #44]	; 0x2c
 8004034:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004036:	1b5d      	subs	r5, r3, r5
 8004038:	1e6b      	subs	r3, r5, #1
 800403a:	9305      	str	r3, [sp, #20]
 800403c:	bf45      	ittet	mi
 800403e:	f1c5 0301 	rsbmi	r3, r5, #1
 8004042:	9304      	strmi	r3, [sp, #16]
 8004044:	2300      	movpl	r3, #0
 8004046:	2300      	movmi	r3, #0
 8004048:	bf4c      	ite	mi
 800404a:	9305      	strmi	r3, [sp, #20]
 800404c:	9304      	strpl	r3, [sp, #16]
 800404e:	9b00      	ldr	r3, [sp, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	db3d      	blt.n	80040d0 <_dtoa_r+0x248>
 8004054:	9b05      	ldr	r3, [sp, #20]
 8004056:	9a00      	ldr	r2, [sp, #0]
 8004058:	920a      	str	r2, [sp, #40]	; 0x28
 800405a:	4413      	add	r3, r2
 800405c:	9305      	str	r3, [sp, #20]
 800405e:	2300      	movs	r3, #0
 8004060:	9307      	str	r3, [sp, #28]
 8004062:	9b06      	ldr	r3, [sp, #24]
 8004064:	2b09      	cmp	r3, #9
 8004066:	f200 8089 	bhi.w	800417c <_dtoa_r+0x2f4>
 800406a:	2b05      	cmp	r3, #5
 800406c:	bfc4      	itt	gt
 800406e:	3b04      	subgt	r3, #4
 8004070:	9306      	strgt	r3, [sp, #24]
 8004072:	9b06      	ldr	r3, [sp, #24]
 8004074:	f1a3 0302 	sub.w	r3, r3, #2
 8004078:	bfcc      	ite	gt
 800407a:	2500      	movgt	r5, #0
 800407c:	2501      	movle	r5, #1
 800407e:	2b03      	cmp	r3, #3
 8004080:	f200 8087 	bhi.w	8004192 <_dtoa_r+0x30a>
 8004084:	e8df f003 	tbb	[pc, r3]
 8004088:	59383a2d 	.word	0x59383a2d
 800408c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004090:	441d      	add	r5, r3
 8004092:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004096:	2b20      	cmp	r3, #32
 8004098:	bfc1      	itttt	gt
 800409a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800409e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80040a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80040a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80040aa:	bfda      	itte	le
 80040ac:	f1c3 0320 	rsble	r3, r3, #32
 80040b0:	fa06 f003 	lslle.w	r0, r6, r3
 80040b4:	4318      	orrgt	r0, r3
 80040b6:	f7fc fa25 	bl	8000504 <__aeabi_ui2d>
 80040ba:	2301      	movs	r3, #1
 80040bc:	4606      	mov	r6, r0
 80040be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80040c2:	3d01      	subs	r5, #1
 80040c4:	930e      	str	r3, [sp, #56]	; 0x38
 80040c6:	e76a      	b.n	8003f9e <_dtoa_r+0x116>
 80040c8:	2301      	movs	r3, #1
 80040ca:	e7b2      	b.n	8004032 <_dtoa_r+0x1aa>
 80040cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80040ce:	e7b1      	b.n	8004034 <_dtoa_r+0x1ac>
 80040d0:	9b04      	ldr	r3, [sp, #16]
 80040d2:	9a00      	ldr	r2, [sp, #0]
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	9304      	str	r3, [sp, #16]
 80040d8:	4253      	negs	r3, r2
 80040da:	9307      	str	r3, [sp, #28]
 80040dc:	2300      	movs	r3, #0
 80040de:	930a      	str	r3, [sp, #40]	; 0x28
 80040e0:	e7bf      	b.n	8004062 <_dtoa_r+0x1da>
 80040e2:	2300      	movs	r3, #0
 80040e4:	9308      	str	r3, [sp, #32]
 80040e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	dc55      	bgt.n	8004198 <_dtoa_r+0x310>
 80040ec:	2301      	movs	r3, #1
 80040ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80040f2:	461a      	mov	r2, r3
 80040f4:	9209      	str	r2, [sp, #36]	; 0x24
 80040f6:	e00c      	b.n	8004112 <_dtoa_r+0x28a>
 80040f8:	2301      	movs	r3, #1
 80040fa:	e7f3      	b.n	80040e4 <_dtoa_r+0x25c>
 80040fc:	2300      	movs	r3, #0
 80040fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004100:	9308      	str	r3, [sp, #32]
 8004102:	9b00      	ldr	r3, [sp, #0]
 8004104:	4413      	add	r3, r2
 8004106:	9302      	str	r3, [sp, #8]
 8004108:	3301      	adds	r3, #1
 800410a:	2b01      	cmp	r3, #1
 800410c:	9303      	str	r3, [sp, #12]
 800410e:	bfb8      	it	lt
 8004110:	2301      	movlt	r3, #1
 8004112:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004114:	2200      	movs	r2, #0
 8004116:	6042      	str	r2, [r0, #4]
 8004118:	2204      	movs	r2, #4
 800411a:	f102 0614 	add.w	r6, r2, #20
 800411e:	429e      	cmp	r6, r3
 8004120:	6841      	ldr	r1, [r0, #4]
 8004122:	d93d      	bls.n	80041a0 <_dtoa_r+0x318>
 8004124:	4620      	mov	r0, r4
 8004126:	f000 fec9 	bl	8004ebc <_Balloc>
 800412a:	9001      	str	r0, [sp, #4]
 800412c:	2800      	cmp	r0, #0
 800412e:	d13b      	bne.n	80041a8 <_dtoa_r+0x320>
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <_dtoa_r+0x2f0>)
 8004132:	4602      	mov	r2, r0
 8004134:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004138:	e6c0      	b.n	8003ebc <_dtoa_r+0x34>
 800413a:	2301      	movs	r3, #1
 800413c:	e7df      	b.n	80040fe <_dtoa_r+0x276>
 800413e:	bf00      	nop
 8004140:	636f4361 	.word	0x636f4361
 8004144:	3fd287a7 	.word	0x3fd287a7
 8004148:	8b60c8b3 	.word	0x8b60c8b3
 800414c:	3fc68a28 	.word	0x3fc68a28
 8004150:	509f79fb 	.word	0x509f79fb
 8004154:	3fd34413 	.word	0x3fd34413
 8004158:	08006431 	.word	0x08006431
 800415c:	08006448 	.word	0x08006448
 8004160:	7ff00000 	.word	0x7ff00000
 8004164:	0800642d 	.word	0x0800642d
 8004168:	08006424 	.word	0x08006424
 800416c:	08006401 	.word	0x08006401
 8004170:	3ff80000 	.word	0x3ff80000
 8004174:	08006598 	.word	0x08006598
 8004178:	080064a3 	.word	0x080064a3
 800417c:	2501      	movs	r5, #1
 800417e:	2300      	movs	r3, #0
 8004180:	9306      	str	r3, [sp, #24]
 8004182:	9508      	str	r5, [sp, #32]
 8004184:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004188:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800418c:	2200      	movs	r2, #0
 800418e:	2312      	movs	r3, #18
 8004190:	e7b0      	b.n	80040f4 <_dtoa_r+0x26c>
 8004192:	2301      	movs	r3, #1
 8004194:	9308      	str	r3, [sp, #32]
 8004196:	e7f5      	b.n	8004184 <_dtoa_r+0x2fc>
 8004198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800419a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800419e:	e7b8      	b.n	8004112 <_dtoa_r+0x28a>
 80041a0:	3101      	adds	r1, #1
 80041a2:	6041      	str	r1, [r0, #4]
 80041a4:	0052      	lsls	r2, r2, #1
 80041a6:	e7b8      	b.n	800411a <_dtoa_r+0x292>
 80041a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041aa:	9a01      	ldr	r2, [sp, #4]
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	9b03      	ldr	r3, [sp, #12]
 80041b0:	2b0e      	cmp	r3, #14
 80041b2:	f200 809d 	bhi.w	80042f0 <_dtoa_r+0x468>
 80041b6:	2d00      	cmp	r5, #0
 80041b8:	f000 809a 	beq.w	80042f0 <_dtoa_r+0x468>
 80041bc:	9b00      	ldr	r3, [sp, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	dd32      	ble.n	8004228 <_dtoa_r+0x3a0>
 80041c2:	4ab7      	ldr	r2, [pc, #732]	; (80044a0 <_dtoa_r+0x618>)
 80041c4:	f003 030f 	and.w	r3, r3, #15
 80041c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80041cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80041d0:	9b00      	ldr	r3, [sp, #0]
 80041d2:	05d8      	lsls	r0, r3, #23
 80041d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80041d8:	d516      	bpl.n	8004208 <_dtoa_r+0x380>
 80041da:	4bb2      	ldr	r3, [pc, #712]	; (80044a4 <_dtoa_r+0x61c>)
 80041dc:	ec51 0b19 	vmov	r0, r1, d9
 80041e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80041e4:	f7fc fb32 	bl	800084c <__aeabi_ddiv>
 80041e8:	f007 070f 	and.w	r7, r7, #15
 80041ec:	4682      	mov	sl, r0
 80041ee:	468b      	mov	fp, r1
 80041f0:	2503      	movs	r5, #3
 80041f2:	4eac      	ldr	r6, [pc, #688]	; (80044a4 <_dtoa_r+0x61c>)
 80041f4:	b957      	cbnz	r7, 800420c <_dtoa_r+0x384>
 80041f6:	4642      	mov	r2, r8
 80041f8:	464b      	mov	r3, r9
 80041fa:	4650      	mov	r0, sl
 80041fc:	4659      	mov	r1, fp
 80041fe:	f7fc fb25 	bl	800084c <__aeabi_ddiv>
 8004202:	4682      	mov	sl, r0
 8004204:	468b      	mov	fp, r1
 8004206:	e028      	b.n	800425a <_dtoa_r+0x3d2>
 8004208:	2502      	movs	r5, #2
 800420a:	e7f2      	b.n	80041f2 <_dtoa_r+0x36a>
 800420c:	07f9      	lsls	r1, r7, #31
 800420e:	d508      	bpl.n	8004222 <_dtoa_r+0x39a>
 8004210:	4640      	mov	r0, r8
 8004212:	4649      	mov	r1, r9
 8004214:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004218:	f7fc f9ee 	bl	80005f8 <__aeabi_dmul>
 800421c:	3501      	adds	r5, #1
 800421e:	4680      	mov	r8, r0
 8004220:	4689      	mov	r9, r1
 8004222:	107f      	asrs	r7, r7, #1
 8004224:	3608      	adds	r6, #8
 8004226:	e7e5      	b.n	80041f4 <_dtoa_r+0x36c>
 8004228:	f000 809b 	beq.w	8004362 <_dtoa_r+0x4da>
 800422c:	9b00      	ldr	r3, [sp, #0]
 800422e:	4f9d      	ldr	r7, [pc, #628]	; (80044a4 <_dtoa_r+0x61c>)
 8004230:	425e      	negs	r6, r3
 8004232:	4b9b      	ldr	r3, [pc, #620]	; (80044a0 <_dtoa_r+0x618>)
 8004234:	f006 020f 	and.w	r2, r6, #15
 8004238:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800423c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004240:	ec51 0b19 	vmov	r0, r1, d9
 8004244:	f7fc f9d8 	bl	80005f8 <__aeabi_dmul>
 8004248:	1136      	asrs	r6, r6, #4
 800424a:	4682      	mov	sl, r0
 800424c:	468b      	mov	fp, r1
 800424e:	2300      	movs	r3, #0
 8004250:	2502      	movs	r5, #2
 8004252:	2e00      	cmp	r6, #0
 8004254:	d17a      	bne.n	800434c <_dtoa_r+0x4c4>
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1d3      	bne.n	8004202 <_dtoa_r+0x37a>
 800425a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8082 	beq.w	8004366 <_dtoa_r+0x4de>
 8004262:	4b91      	ldr	r3, [pc, #580]	; (80044a8 <_dtoa_r+0x620>)
 8004264:	2200      	movs	r2, #0
 8004266:	4650      	mov	r0, sl
 8004268:	4659      	mov	r1, fp
 800426a:	f7fc fc37 	bl	8000adc <__aeabi_dcmplt>
 800426e:	2800      	cmp	r0, #0
 8004270:	d079      	beq.n	8004366 <_dtoa_r+0x4de>
 8004272:	9b03      	ldr	r3, [sp, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d076      	beq.n	8004366 <_dtoa_r+0x4de>
 8004278:	9b02      	ldr	r3, [sp, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	dd36      	ble.n	80042ec <_dtoa_r+0x464>
 800427e:	9b00      	ldr	r3, [sp, #0]
 8004280:	4650      	mov	r0, sl
 8004282:	4659      	mov	r1, fp
 8004284:	1e5f      	subs	r7, r3, #1
 8004286:	2200      	movs	r2, #0
 8004288:	4b88      	ldr	r3, [pc, #544]	; (80044ac <_dtoa_r+0x624>)
 800428a:	f7fc f9b5 	bl	80005f8 <__aeabi_dmul>
 800428e:	9e02      	ldr	r6, [sp, #8]
 8004290:	4682      	mov	sl, r0
 8004292:	468b      	mov	fp, r1
 8004294:	3501      	adds	r5, #1
 8004296:	4628      	mov	r0, r5
 8004298:	f7fc f944 	bl	8000524 <__aeabi_i2d>
 800429c:	4652      	mov	r2, sl
 800429e:	465b      	mov	r3, fp
 80042a0:	f7fc f9aa 	bl	80005f8 <__aeabi_dmul>
 80042a4:	4b82      	ldr	r3, [pc, #520]	; (80044b0 <_dtoa_r+0x628>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	f7fb fff0 	bl	800028c <__adddf3>
 80042ac:	46d0      	mov	r8, sl
 80042ae:	46d9      	mov	r9, fp
 80042b0:	4682      	mov	sl, r0
 80042b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80042b6:	2e00      	cmp	r6, #0
 80042b8:	d158      	bne.n	800436c <_dtoa_r+0x4e4>
 80042ba:	4b7e      	ldr	r3, [pc, #504]	; (80044b4 <_dtoa_r+0x62c>)
 80042bc:	2200      	movs	r2, #0
 80042be:	4640      	mov	r0, r8
 80042c0:	4649      	mov	r1, r9
 80042c2:	f7fb ffe1 	bl	8000288 <__aeabi_dsub>
 80042c6:	4652      	mov	r2, sl
 80042c8:	465b      	mov	r3, fp
 80042ca:	4680      	mov	r8, r0
 80042cc:	4689      	mov	r9, r1
 80042ce:	f7fc fc23 	bl	8000b18 <__aeabi_dcmpgt>
 80042d2:	2800      	cmp	r0, #0
 80042d4:	f040 8295 	bne.w	8004802 <_dtoa_r+0x97a>
 80042d8:	4652      	mov	r2, sl
 80042da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80042de:	4640      	mov	r0, r8
 80042e0:	4649      	mov	r1, r9
 80042e2:	f7fc fbfb 	bl	8000adc <__aeabi_dcmplt>
 80042e6:	2800      	cmp	r0, #0
 80042e8:	f040 8289 	bne.w	80047fe <_dtoa_r+0x976>
 80042ec:	ec5b ab19 	vmov	sl, fp, d9
 80042f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f2c0 8148 	blt.w	8004588 <_dtoa_r+0x700>
 80042f8:	9a00      	ldr	r2, [sp, #0]
 80042fa:	2a0e      	cmp	r2, #14
 80042fc:	f300 8144 	bgt.w	8004588 <_dtoa_r+0x700>
 8004300:	4b67      	ldr	r3, [pc, #412]	; (80044a0 <_dtoa_r+0x618>)
 8004302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004306:	e9d3 8900 	ldrd	r8, r9, [r3]
 800430a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800430c:	2b00      	cmp	r3, #0
 800430e:	f280 80d5 	bge.w	80044bc <_dtoa_r+0x634>
 8004312:	9b03      	ldr	r3, [sp, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	f300 80d1 	bgt.w	80044bc <_dtoa_r+0x634>
 800431a:	f040 826f 	bne.w	80047fc <_dtoa_r+0x974>
 800431e:	4b65      	ldr	r3, [pc, #404]	; (80044b4 <_dtoa_r+0x62c>)
 8004320:	2200      	movs	r2, #0
 8004322:	4640      	mov	r0, r8
 8004324:	4649      	mov	r1, r9
 8004326:	f7fc f967 	bl	80005f8 <__aeabi_dmul>
 800432a:	4652      	mov	r2, sl
 800432c:	465b      	mov	r3, fp
 800432e:	f7fc fbe9 	bl	8000b04 <__aeabi_dcmpge>
 8004332:	9e03      	ldr	r6, [sp, #12]
 8004334:	4637      	mov	r7, r6
 8004336:	2800      	cmp	r0, #0
 8004338:	f040 8245 	bne.w	80047c6 <_dtoa_r+0x93e>
 800433c:	9d01      	ldr	r5, [sp, #4]
 800433e:	2331      	movs	r3, #49	; 0x31
 8004340:	f805 3b01 	strb.w	r3, [r5], #1
 8004344:	9b00      	ldr	r3, [sp, #0]
 8004346:	3301      	adds	r3, #1
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	e240      	b.n	80047ce <_dtoa_r+0x946>
 800434c:	07f2      	lsls	r2, r6, #31
 800434e:	d505      	bpl.n	800435c <_dtoa_r+0x4d4>
 8004350:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004354:	f7fc f950 	bl	80005f8 <__aeabi_dmul>
 8004358:	3501      	adds	r5, #1
 800435a:	2301      	movs	r3, #1
 800435c:	1076      	asrs	r6, r6, #1
 800435e:	3708      	adds	r7, #8
 8004360:	e777      	b.n	8004252 <_dtoa_r+0x3ca>
 8004362:	2502      	movs	r5, #2
 8004364:	e779      	b.n	800425a <_dtoa_r+0x3d2>
 8004366:	9f00      	ldr	r7, [sp, #0]
 8004368:	9e03      	ldr	r6, [sp, #12]
 800436a:	e794      	b.n	8004296 <_dtoa_r+0x40e>
 800436c:	9901      	ldr	r1, [sp, #4]
 800436e:	4b4c      	ldr	r3, [pc, #304]	; (80044a0 <_dtoa_r+0x618>)
 8004370:	4431      	add	r1, r6
 8004372:	910d      	str	r1, [sp, #52]	; 0x34
 8004374:	9908      	ldr	r1, [sp, #32]
 8004376:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800437a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800437e:	2900      	cmp	r1, #0
 8004380:	d043      	beq.n	800440a <_dtoa_r+0x582>
 8004382:	494d      	ldr	r1, [pc, #308]	; (80044b8 <_dtoa_r+0x630>)
 8004384:	2000      	movs	r0, #0
 8004386:	f7fc fa61 	bl	800084c <__aeabi_ddiv>
 800438a:	4652      	mov	r2, sl
 800438c:	465b      	mov	r3, fp
 800438e:	f7fb ff7b 	bl	8000288 <__aeabi_dsub>
 8004392:	9d01      	ldr	r5, [sp, #4]
 8004394:	4682      	mov	sl, r0
 8004396:	468b      	mov	fp, r1
 8004398:	4649      	mov	r1, r9
 800439a:	4640      	mov	r0, r8
 800439c:	f7fc fbdc 	bl	8000b58 <__aeabi_d2iz>
 80043a0:	4606      	mov	r6, r0
 80043a2:	f7fc f8bf 	bl	8000524 <__aeabi_i2d>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	4640      	mov	r0, r8
 80043ac:	4649      	mov	r1, r9
 80043ae:	f7fb ff6b 	bl	8000288 <__aeabi_dsub>
 80043b2:	3630      	adds	r6, #48	; 0x30
 80043b4:	f805 6b01 	strb.w	r6, [r5], #1
 80043b8:	4652      	mov	r2, sl
 80043ba:	465b      	mov	r3, fp
 80043bc:	4680      	mov	r8, r0
 80043be:	4689      	mov	r9, r1
 80043c0:	f7fc fb8c 	bl	8000adc <__aeabi_dcmplt>
 80043c4:	2800      	cmp	r0, #0
 80043c6:	d163      	bne.n	8004490 <_dtoa_r+0x608>
 80043c8:	4642      	mov	r2, r8
 80043ca:	464b      	mov	r3, r9
 80043cc:	4936      	ldr	r1, [pc, #216]	; (80044a8 <_dtoa_r+0x620>)
 80043ce:	2000      	movs	r0, #0
 80043d0:	f7fb ff5a 	bl	8000288 <__aeabi_dsub>
 80043d4:	4652      	mov	r2, sl
 80043d6:	465b      	mov	r3, fp
 80043d8:	f7fc fb80 	bl	8000adc <__aeabi_dcmplt>
 80043dc:	2800      	cmp	r0, #0
 80043de:	f040 80b5 	bne.w	800454c <_dtoa_r+0x6c4>
 80043e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043e4:	429d      	cmp	r5, r3
 80043e6:	d081      	beq.n	80042ec <_dtoa_r+0x464>
 80043e8:	4b30      	ldr	r3, [pc, #192]	; (80044ac <_dtoa_r+0x624>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	4650      	mov	r0, sl
 80043ee:	4659      	mov	r1, fp
 80043f0:	f7fc f902 	bl	80005f8 <__aeabi_dmul>
 80043f4:	4b2d      	ldr	r3, [pc, #180]	; (80044ac <_dtoa_r+0x624>)
 80043f6:	4682      	mov	sl, r0
 80043f8:	468b      	mov	fp, r1
 80043fa:	4640      	mov	r0, r8
 80043fc:	4649      	mov	r1, r9
 80043fe:	2200      	movs	r2, #0
 8004400:	f7fc f8fa 	bl	80005f8 <__aeabi_dmul>
 8004404:	4680      	mov	r8, r0
 8004406:	4689      	mov	r9, r1
 8004408:	e7c6      	b.n	8004398 <_dtoa_r+0x510>
 800440a:	4650      	mov	r0, sl
 800440c:	4659      	mov	r1, fp
 800440e:	f7fc f8f3 	bl	80005f8 <__aeabi_dmul>
 8004412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004414:	9d01      	ldr	r5, [sp, #4]
 8004416:	930f      	str	r3, [sp, #60]	; 0x3c
 8004418:	4682      	mov	sl, r0
 800441a:	468b      	mov	fp, r1
 800441c:	4649      	mov	r1, r9
 800441e:	4640      	mov	r0, r8
 8004420:	f7fc fb9a 	bl	8000b58 <__aeabi_d2iz>
 8004424:	4606      	mov	r6, r0
 8004426:	f7fc f87d 	bl	8000524 <__aeabi_i2d>
 800442a:	3630      	adds	r6, #48	; 0x30
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4640      	mov	r0, r8
 8004432:	4649      	mov	r1, r9
 8004434:	f7fb ff28 	bl	8000288 <__aeabi_dsub>
 8004438:	f805 6b01 	strb.w	r6, [r5], #1
 800443c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800443e:	429d      	cmp	r5, r3
 8004440:	4680      	mov	r8, r0
 8004442:	4689      	mov	r9, r1
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	d124      	bne.n	8004494 <_dtoa_r+0x60c>
 800444a:	4b1b      	ldr	r3, [pc, #108]	; (80044b8 <_dtoa_r+0x630>)
 800444c:	4650      	mov	r0, sl
 800444e:	4659      	mov	r1, fp
 8004450:	f7fb ff1c 	bl	800028c <__adddf3>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4640      	mov	r0, r8
 800445a:	4649      	mov	r1, r9
 800445c:	f7fc fb5c 	bl	8000b18 <__aeabi_dcmpgt>
 8004460:	2800      	cmp	r0, #0
 8004462:	d173      	bne.n	800454c <_dtoa_r+0x6c4>
 8004464:	4652      	mov	r2, sl
 8004466:	465b      	mov	r3, fp
 8004468:	4913      	ldr	r1, [pc, #76]	; (80044b8 <_dtoa_r+0x630>)
 800446a:	2000      	movs	r0, #0
 800446c:	f7fb ff0c 	bl	8000288 <__aeabi_dsub>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4640      	mov	r0, r8
 8004476:	4649      	mov	r1, r9
 8004478:	f7fc fb30 	bl	8000adc <__aeabi_dcmplt>
 800447c:	2800      	cmp	r0, #0
 800447e:	f43f af35 	beq.w	80042ec <_dtoa_r+0x464>
 8004482:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004484:	1e6b      	subs	r3, r5, #1
 8004486:	930f      	str	r3, [sp, #60]	; 0x3c
 8004488:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800448c:	2b30      	cmp	r3, #48	; 0x30
 800448e:	d0f8      	beq.n	8004482 <_dtoa_r+0x5fa>
 8004490:	9700      	str	r7, [sp, #0]
 8004492:	e049      	b.n	8004528 <_dtoa_r+0x6a0>
 8004494:	4b05      	ldr	r3, [pc, #20]	; (80044ac <_dtoa_r+0x624>)
 8004496:	f7fc f8af 	bl	80005f8 <__aeabi_dmul>
 800449a:	4680      	mov	r8, r0
 800449c:	4689      	mov	r9, r1
 800449e:	e7bd      	b.n	800441c <_dtoa_r+0x594>
 80044a0:	08006598 	.word	0x08006598
 80044a4:	08006570 	.word	0x08006570
 80044a8:	3ff00000 	.word	0x3ff00000
 80044ac:	40240000 	.word	0x40240000
 80044b0:	401c0000 	.word	0x401c0000
 80044b4:	40140000 	.word	0x40140000
 80044b8:	3fe00000 	.word	0x3fe00000
 80044bc:	9d01      	ldr	r5, [sp, #4]
 80044be:	4656      	mov	r6, sl
 80044c0:	465f      	mov	r7, fp
 80044c2:	4642      	mov	r2, r8
 80044c4:	464b      	mov	r3, r9
 80044c6:	4630      	mov	r0, r6
 80044c8:	4639      	mov	r1, r7
 80044ca:	f7fc f9bf 	bl	800084c <__aeabi_ddiv>
 80044ce:	f7fc fb43 	bl	8000b58 <__aeabi_d2iz>
 80044d2:	4682      	mov	sl, r0
 80044d4:	f7fc f826 	bl	8000524 <__aeabi_i2d>
 80044d8:	4642      	mov	r2, r8
 80044da:	464b      	mov	r3, r9
 80044dc:	f7fc f88c 	bl	80005f8 <__aeabi_dmul>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4630      	mov	r0, r6
 80044e6:	4639      	mov	r1, r7
 80044e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80044ec:	f7fb fecc 	bl	8000288 <__aeabi_dsub>
 80044f0:	f805 6b01 	strb.w	r6, [r5], #1
 80044f4:	9e01      	ldr	r6, [sp, #4]
 80044f6:	9f03      	ldr	r7, [sp, #12]
 80044f8:	1bae      	subs	r6, r5, r6
 80044fa:	42b7      	cmp	r7, r6
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	d135      	bne.n	800456e <_dtoa_r+0x6e6>
 8004502:	f7fb fec3 	bl	800028c <__adddf3>
 8004506:	4642      	mov	r2, r8
 8004508:	464b      	mov	r3, r9
 800450a:	4606      	mov	r6, r0
 800450c:	460f      	mov	r7, r1
 800450e:	f7fc fb03 	bl	8000b18 <__aeabi_dcmpgt>
 8004512:	b9d0      	cbnz	r0, 800454a <_dtoa_r+0x6c2>
 8004514:	4642      	mov	r2, r8
 8004516:	464b      	mov	r3, r9
 8004518:	4630      	mov	r0, r6
 800451a:	4639      	mov	r1, r7
 800451c:	f7fc fad4 	bl	8000ac8 <__aeabi_dcmpeq>
 8004520:	b110      	cbz	r0, 8004528 <_dtoa_r+0x6a0>
 8004522:	f01a 0f01 	tst.w	sl, #1
 8004526:	d110      	bne.n	800454a <_dtoa_r+0x6c2>
 8004528:	4620      	mov	r0, r4
 800452a:	ee18 1a10 	vmov	r1, s16
 800452e:	f000 fd05 	bl	8004f3c <_Bfree>
 8004532:	2300      	movs	r3, #0
 8004534:	9800      	ldr	r0, [sp, #0]
 8004536:	702b      	strb	r3, [r5, #0]
 8004538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800453a:	3001      	adds	r0, #1
 800453c:	6018      	str	r0, [r3, #0]
 800453e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004540:	2b00      	cmp	r3, #0
 8004542:	f43f acf1 	beq.w	8003f28 <_dtoa_r+0xa0>
 8004546:	601d      	str	r5, [r3, #0]
 8004548:	e4ee      	b.n	8003f28 <_dtoa_r+0xa0>
 800454a:	9f00      	ldr	r7, [sp, #0]
 800454c:	462b      	mov	r3, r5
 800454e:	461d      	mov	r5, r3
 8004550:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004554:	2a39      	cmp	r2, #57	; 0x39
 8004556:	d106      	bne.n	8004566 <_dtoa_r+0x6de>
 8004558:	9a01      	ldr	r2, [sp, #4]
 800455a:	429a      	cmp	r2, r3
 800455c:	d1f7      	bne.n	800454e <_dtoa_r+0x6c6>
 800455e:	9901      	ldr	r1, [sp, #4]
 8004560:	2230      	movs	r2, #48	; 0x30
 8004562:	3701      	adds	r7, #1
 8004564:	700a      	strb	r2, [r1, #0]
 8004566:	781a      	ldrb	r2, [r3, #0]
 8004568:	3201      	adds	r2, #1
 800456a:	701a      	strb	r2, [r3, #0]
 800456c:	e790      	b.n	8004490 <_dtoa_r+0x608>
 800456e:	4ba6      	ldr	r3, [pc, #664]	; (8004808 <_dtoa_r+0x980>)
 8004570:	2200      	movs	r2, #0
 8004572:	f7fc f841 	bl	80005f8 <__aeabi_dmul>
 8004576:	2200      	movs	r2, #0
 8004578:	2300      	movs	r3, #0
 800457a:	4606      	mov	r6, r0
 800457c:	460f      	mov	r7, r1
 800457e:	f7fc faa3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004582:	2800      	cmp	r0, #0
 8004584:	d09d      	beq.n	80044c2 <_dtoa_r+0x63a>
 8004586:	e7cf      	b.n	8004528 <_dtoa_r+0x6a0>
 8004588:	9a08      	ldr	r2, [sp, #32]
 800458a:	2a00      	cmp	r2, #0
 800458c:	f000 80d7 	beq.w	800473e <_dtoa_r+0x8b6>
 8004590:	9a06      	ldr	r2, [sp, #24]
 8004592:	2a01      	cmp	r2, #1
 8004594:	f300 80ba 	bgt.w	800470c <_dtoa_r+0x884>
 8004598:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800459a:	2a00      	cmp	r2, #0
 800459c:	f000 80b2 	beq.w	8004704 <_dtoa_r+0x87c>
 80045a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80045a4:	9e07      	ldr	r6, [sp, #28]
 80045a6:	9d04      	ldr	r5, [sp, #16]
 80045a8:	9a04      	ldr	r2, [sp, #16]
 80045aa:	441a      	add	r2, r3
 80045ac:	9204      	str	r2, [sp, #16]
 80045ae:	9a05      	ldr	r2, [sp, #20]
 80045b0:	2101      	movs	r1, #1
 80045b2:	441a      	add	r2, r3
 80045b4:	4620      	mov	r0, r4
 80045b6:	9205      	str	r2, [sp, #20]
 80045b8:	f000 fd78 	bl	80050ac <__i2b>
 80045bc:	4607      	mov	r7, r0
 80045be:	2d00      	cmp	r5, #0
 80045c0:	dd0c      	ble.n	80045dc <_dtoa_r+0x754>
 80045c2:	9b05      	ldr	r3, [sp, #20]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	dd09      	ble.n	80045dc <_dtoa_r+0x754>
 80045c8:	42ab      	cmp	r3, r5
 80045ca:	9a04      	ldr	r2, [sp, #16]
 80045cc:	bfa8      	it	ge
 80045ce:	462b      	movge	r3, r5
 80045d0:	1ad2      	subs	r2, r2, r3
 80045d2:	9204      	str	r2, [sp, #16]
 80045d4:	9a05      	ldr	r2, [sp, #20]
 80045d6:	1aed      	subs	r5, r5, r3
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	9305      	str	r3, [sp, #20]
 80045dc:	9b07      	ldr	r3, [sp, #28]
 80045de:	b31b      	cbz	r3, 8004628 <_dtoa_r+0x7a0>
 80045e0:	9b08      	ldr	r3, [sp, #32]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 80af 	beq.w	8004746 <_dtoa_r+0x8be>
 80045e8:	2e00      	cmp	r6, #0
 80045ea:	dd13      	ble.n	8004614 <_dtoa_r+0x78c>
 80045ec:	4639      	mov	r1, r7
 80045ee:	4632      	mov	r2, r6
 80045f0:	4620      	mov	r0, r4
 80045f2:	f000 fe1b 	bl	800522c <__pow5mult>
 80045f6:	ee18 2a10 	vmov	r2, s16
 80045fa:	4601      	mov	r1, r0
 80045fc:	4607      	mov	r7, r0
 80045fe:	4620      	mov	r0, r4
 8004600:	f000 fd6a 	bl	80050d8 <__multiply>
 8004604:	ee18 1a10 	vmov	r1, s16
 8004608:	4680      	mov	r8, r0
 800460a:	4620      	mov	r0, r4
 800460c:	f000 fc96 	bl	8004f3c <_Bfree>
 8004610:	ee08 8a10 	vmov	s16, r8
 8004614:	9b07      	ldr	r3, [sp, #28]
 8004616:	1b9a      	subs	r2, r3, r6
 8004618:	d006      	beq.n	8004628 <_dtoa_r+0x7a0>
 800461a:	ee18 1a10 	vmov	r1, s16
 800461e:	4620      	mov	r0, r4
 8004620:	f000 fe04 	bl	800522c <__pow5mult>
 8004624:	ee08 0a10 	vmov	s16, r0
 8004628:	2101      	movs	r1, #1
 800462a:	4620      	mov	r0, r4
 800462c:	f000 fd3e 	bl	80050ac <__i2b>
 8004630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004632:	2b00      	cmp	r3, #0
 8004634:	4606      	mov	r6, r0
 8004636:	f340 8088 	ble.w	800474a <_dtoa_r+0x8c2>
 800463a:	461a      	mov	r2, r3
 800463c:	4601      	mov	r1, r0
 800463e:	4620      	mov	r0, r4
 8004640:	f000 fdf4 	bl	800522c <__pow5mult>
 8004644:	9b06      	ldr	r3, [sp, #24]
 8004646:	2b01      	cmp	r3, #1
 8004648:	4606      	mov	r6, r0
 800464a:	f340 8081 	ble.w	8004750 <_dtoa_r+0x8c8>
 800464e:	f04f 0800 	mov.w	r8, #0
 8004652:	6933      	ldr	r3, [r6, #16]
 8004654:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004658:	6918      	ldr	r0, [r3, #16]
 800465a:	f000 fcd7 	bl	800500c <__hi0bits>
 800465e:	f1c0 0020 	rsb	r0, r0, #32
 8004662:	9b05      	ldr	r3, [sp, #20]
 8004664:	4418      	add	r0, r3
 8004666:	f010 001f 	ands.w	r0, r0, #31
 800466a:	f000 8092 	beq.w	8004792 <_dtoa_r+0x90a>
 800466e:	f1c0 0320 	rsb	r3, r0, #32
 8004672:	2b04      	cmp	r3, #4
 8004674:	f340 808a 	ble.w	800478c <_dtoa_r+0x904>
 8004678:	f1c0 001c 	rsb	r0, r0, #28
 800467c:	9b04      	ldr	r3, [sp, #16]
 800467e:	4403      	add	r3, r0
 8004680:	9304      	str	r3, [sp, #16]
 8004682:	9b05      	ldr	r3, [sp, #20]
 8004684:	4403      	add	r3, r0
 8004686:	4405      	add	r5, r0
 8004688:	9305      	str	r3, [sp, #20]
 800468a:	9b04      	ldr	r3, [sp, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	dd07      	ble.n	80046a0 <_dtoa_r+0x818>
 8004690:	ee18 1a10 	vmov	r1, s16
 8004694:	461a      	mov	r2, r3
 8004696:	4620      	mov	r0, r4
 8004698:	f000 fe22 	bl	80052e0 <__lshift>
 800469c:	ee08 0a10 	vmov	s16, r0
 80046a0:	9b05      	ldr	r3, [sp, #20]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	dd05      	ble.n	80046b2 <_dtoa_r+0x82a>
 80046a6:	4631      	mov	r1, r6
 80046a8:	461a      	mov	r2, r3
 80046aa:	4620      	mov	r0, r4
 80046ac:	f000 fe18 	bl	80052e0 <__lshift>
 80046b0:	4606      	mov	r6, r0
 80046b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d06e      	beq.n	8004796 <_dtoa_r+0x90e>
 80046b8:	ee18 0a10 	vmov	r0, s16
 80046bc:	4631      	mov	r1, r6
 80046be:	f000 fe7f 	bl	80053c0 <__mcmp>
 80046c2:	2800      	cmp	r0, #0
 80046c4:	da67      	bge.n	8004796 <_dtoa_r+0x90e>
 80046c6:	9b00      	ldr	r3, [sp, #0]
 80046c8:	3b01      	subs	r3, #1
 80046ca:	ee18 1a10 	vmov	r1, s16
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	220a      	movs	r2, #10
 80046d2:	2300      	movs	r3, #0
 80046d4:	4620      	mov	r0, r4
 80046d6:	f000 fc53 	bl	8004f80 <__multadd>
 80046da:	9b08      	ldr	r3, [sp, #32]
 80046dc:	ee08 0a10 	vmov	s16, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 81b1 	beq.w	8004a48 <_dtoa_r+0xbc0>
 80046e6:	2300      	movs	r3, #0
 80046e8:	4639      	mov	r1, r7
 80046ea:	220a      	movs	r2, #10
 80046ec:	4620      	mov	r0, r4
 80046ee:	f000 fc47 	bl	8004f80 <__multadd>
 80046f2:	9b02      	ldr	r3, [sp, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	4607      	mov	r7, r0
 80046f8:	f300 808e 	bgt.w	8004818 <_dtoa_r+0x990>
 80046fc:	9b06      	ldr	r3, [sp, #24]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	dc51      	bgt.n	80047a6 <_dtoa_r+0x91e>
 8004702:	e089      	b.n	8004818 <_dtoa_r+0x990>
 8004704:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004706:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800470a:	e74b      	b.n	80045a4 <_dtoa_r+0x71c>
 800470c:	9b03      	ldr	r3, [sp, #12]
 800470e:	1e5e      	subs	r6, r3, #1
 8004710:	9b07      	ldr	r3, [sp, #28]
 8004712:	42b3      	cmp	r3, r6
 8004714:	bfbf      	itttt	lt
 8004716:	9b07      	ldrlt	r3, [sp, #28]
 8004718:	9607      	strlt	r6, [sp, #28]
 800471a:	1af2      	sublt	r2, r6, r3
 800471c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800471e:	bfb6      	itet	lt
 8004720:	189b      	addlt	r3, r3, r2
 8004722:	1b9e      	subge	r6, r3, r6
 8004724:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004726:	9b03      	ldr	r3, [sp, #12]
 8004728:	bfb8      	it	lt
 800472a:	2600      	movlt	r6, #0
 800472c:	2b00      	cmp	r3, #0
 800472e:	bfb7      	itett	lt
 8004730:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004734:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004738:	1a9d      	sublt	r5, r3, r2
 800473a:	2300      	movlt	r3, #0
 800473c:	e734      	b.n	80045a8 <_dtoa_r+0x720>
 800473e:	9e07      	ldr	r6, [sp, #28]
 8004740:	9d04      	ldr	r5, [sp, #16]
 8004742:	9f08      	ldr	r7, [sp, #32]
 8004744:	e73b      	b.n	80045be <_dtoa_r+0x736>
 8004746:	9a07      	ldr	r2, [sp, #28]
 8004748:	e767      	b.n	800461a <_dtoa_r+0x792>
 800474a:	9b06      	ldr	r3, [sp, #24]
 800474c:	2b01      	cmp	r3, #1
 800474e:	dc18      	bgt.n	8004782 <_dtoa_r+0x8fa>
 8004750:	f1ba 0f00 	cmp.w	sl, #0
 8004754:	d115      	bne.n	8004782 <_dtoa_r+0x8fa>
 8004756:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800475a:	b993      	cbnz	r3, 8004782 <_dtoa_r+0x8fa>
 800475c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004760:	0d1b      	lsrs	r3, r3, #20
 8004762:	051b      	lsls	r3, r3, #20
 8004764:	b183      	cbz	r3, 8004788 <_dtoa_r+0x900>
 8004766:	9b04      	ldr	r3, [sp, #16]
 8004768:	3301      	adds	r3, #1
 800476a:	9304      	str	r3, [sp, #16]
 800476c:	9b05      	ldr	r3, [sp, #20]
 800476e:	3301      	adds	r3, #1
 8004770:	9305      	str	r3, [sp, #20]
 8004772:	f04f 0801 	mov.w	r8, #1
 8004776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004778:	2b00      	cmp	r3, #0
 800477a:	f47f af6a 	bne.w	8004652 <_dtoa_r+0x7ca>
 800477e:	2001      	movs	r0, #1
 8004780:	e76f      	b.n	8004662 <_dtoa_r+0x7da>
 8004782:	f04f 0800 	mov.w	r8, #0
 8004786:	e7f6      	b.n	8004776 <_dtoa_r+0x8ee>
 8004788:	4698      	mov	r8, r3
 800478a:	e7f4      	b.n	8004776 <_dtoa_r+0x8ee>
 800478c:	f43f af7d 	beq.w	800468a <_dtoa_r+0x802>
 8004790:	4618      	mov	r0, r3
 8004792:	301c      	adds	r0, #28
 8004794:	e772      	b.n	800467c <_dtoa_r+0x7f4>
 8004796:	9b03      	ldr	r3, [sp, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	dc37      	bgt.n	800480c <_dtoa_r+0x984>
 800479c:	9b06      	ldr	r3, [sp, #24]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	dd34      	ble.n	800480c <_dtoa_r+0x984>
 80047a2:	9b03      	ldr	r3, [sp, #12]
 80047a4:	9302      	str	r3, [sp, #8]
 80047a6:	9b02      	ldr	r3, [sp, #8]
 80047a8:	b96b      	cbnz	r3, 80047c6 <_dtoa_r+0x93e>
 80047aa:	4631      	mov	r1, r6
 80047ac:	2205      	movs	r2, #5
 80047ae:	4620      	mov	r0, r4
 80047b0:	f000 fbe6 	bl	8004f80 <__multadd>
 80047b4:	4601      	mov	r1, r0
 80047b6:	4606      	mov	r6, r0
 80047b8:	ee18 0a10 	vmov	r0, s16
 80047bc:	f000 fe00 	bl	80053c0 <__mcmp>
 80047c0:	2800      	cmp	r0, #0
 80047c2:	f73f adbb 	bgt.w	800433c <_dtoa_r+0x4b4>
 80047c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047c8:	9d01      	ldr	r5, [sp, #4]
 80047ca:	43db      	mvns	r3, r3
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	f04f 0800 	mov.w	r8, #0
 80047d2:	4631      	mov	r1, r6
 80047d4:	4620      	mov	r0, r4
 80047d6:	f000 fbb1 	bl	8004f3c <_Bfree>
 80047da:	2f00      	cmp	r7, #0
 80047dc:	f43f aea4 	beq.w	8004528 <_dtoa_r+0x6a0>
 80047e0:	f1b8 0f00 	cmp.w	r8, #0
 80047e4:	d005      	beq.n	80047f2 <_dtoa_r+0x96a>
 80047e6:	45b8      	cmp	r8, r7
 80047e8:	d003      	beq.n	80047f2 <_dtoa_r+0x96a>
 80047ea:	4641      	mov	r1, r8
 80047ec:	4620      	mov	r0, r4
 80047ee:	f000 fba5 	bl	8004f3c <_Bfree>
 80047f2:	4639      	mov	r1, r7
 80047f4:	4620      	mov	r0, r4
 80047f6:	f000 fba1 	bl	8004f3c <_Bfree>
 80047fa:	e695      	b.n	8004528 <_dtoa_r+0x6a0>
 80047fc:	2600      	movs	r6, #0
 80047fe:	4637      	mov	r7, r6
 8004800:	e7e1      	b.n	80047c6 <_dtoa_r+0x93e>
 8004802:	9700      	str	r7, [sp, #0]
 8004804:	4637      	mov	r7, r6
 8004806:	e599      	b.n	800433c <_dtoa_r+0x4b4>
 8004808:	40240000 	.word	0x40240000
 800480c:	9b08      	ldr	r3, [sp, #32]
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 80ca 	beq.w	80049a8 <_dtoa_r+0xb20>
 8004814:	9b03      	ldr	r3, [sp, #12]
 8004816:	9302      	str	r3, [sp, #8]
 8004818:	2d00      	cmp	r5, #0
 800481a:	dd05      	ble.n	8004828 <_dtoa_r+0x9a0>
 800481c:	4639      	mov	r1, r7
 800481e:	462a      	mov	r2, r5
 8004820:	4620      	mov	r0, r4
 8004822:	f000 fd5d 	bl	80052e0 <__lshift>
 8004826:	4607      	mov	r7, r0
 8004828:	f1b8 0f00 	cmp.w	r8, #0
 800482c:	d05b      	beq.n	80048e6 <_dtoa_r+0xa5e>
 800482e:	6879      	ldr	r1, [r7, #4]
 8004830:	4620      	mov	r0, r4
 8004832:	f000 fb43 	bl	8004ebc <_Balloc>
 8004836:	4605      	mov	r5, r0
 8004838:	b928      	cbnz	r0, 8004846 <_dtoa_r+0x9be>
 800483a:	4b87      	ldr	r3, [pc, #540]	; (8004a58 <_dtoa_r+0xbd0>)
 800483c:	4602      	mov	r2, r0
 800483e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004842:	f7ff bb3b 	b.w	8003ebc <_dtoa_r+0x34>
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	3202      	adds	r2, #2
 800484a:	0092      	lsls	r2, r2, #2
 800484c:	f107 010c 	add.w	r1, r7, #12
 8004850:	300c      	adds	r0, #12
 8004852:	f7fe fd1d 	bl	8003290 <memcpy>
 8004856:	2201      	movs	r2, #1
 8004858:	4629      	mov	r1, r5
 800485a:	4620      	mov	r0, r4
 800485c:	f000 fd40 	bl	80052e0 <__lshift>
 8004860:	9b01      	ldr	r3, [sp, #4]
 8004862:	f103 0901 	add.w	r9, r3, #1
 8004866:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800486a:	4413      	add	r3, r2
 800486c:	9305      	str	r3, [sp, #20]
 800486e:	f00a 0301 	and.w	r3, sl, #1
 8004872:	46b8      	mov	r8, r7
 8004874:	9304      	str	r3, [sp, #16]
 8004876:	4607      	mov	r7, r0
 8004878:	4631      	mov	r1, r6
 800487a:	ee18 0a10 	vmov	r0, s16
 800487e:	f7ff fa75 	bl	8003d6c <quorem>
 8004882:	4641      	mov	r1, r8
 8004884:	9002      	str	r0, [sp, #8]
 8004886:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800488a:	ee18 0a10 	vmov	r0, s16
 800488e:	f000 fd97 	bl	80053c0 <__mcmp>
 8004892:	463a      	mov	r2, r7
 8004894:	9003      	str	r0, [sp, #12]
 8004896:	4631      	mov	r1, r6
 8004898:	4620      	mov	r0, r4
 800489a:	f000 fdad 	bl	80053f8 <__mdiff>
 800489e:	68c2      	ldr	r2, [r0, #12]
 80048a0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80048a4:	4605      	mov	r5, r0
 80048a6:	bb02      	cbnz	r2, 80048ea <_dtoa_r+0xa62>
 80048a8:	4601      	mov	r1, r0
 80048aa:	ee18 0a10 	vmov	r0, s16
 80048ae:	f000 fd87 	bl	80053c0 <__mcmp>
 80048b2:	4602      	mov	r2, r0
 80048b4:	4629      	mov	r1, r5
 80048b6:	4620      	mov	r0, r4
 80048b8:	9207      	str	r2, [sp, #28]
 80048ba:	f000 fb3f 	bl	8004f3c <_Bfree>
 80048be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80048c2:	ea43 0102 	orr.w	r1, r3, r2
 80048c6:	9b04      	ldr	r3, [sp, #16]
 80048c8:	430b      	orrs	r3, r1
 80048ca:	464d      	mov	r5, r9
 80048cc:	d10f      	bne.n	80048ee <_dtoa_r+0xa66>
 80048ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80048d2:	d02a      	beq.n	800492a <_dtoa_r+0xaa2>
 80048d4:	9b03      	ldr	r3, [sp, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	dd02      	ble.n	80048e0 <_dtoa_r+0xa58>
 80048da:	9b02      	ldr	r3, [sp, #8]
 80048dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80048e0:	f88b a000 	strb.w	sl, [fp]
 80048e4:	e775      	b.n	80047d2 <_dtoa_r+0x94a>
 80048e6:	4638      	mov	r0, r7
 80048e8:	e7ba      	b.n	8004860 <_dtoa_r+0x9d8>
 80048ea:	2201      	movs	r2, #1
 80048ec:	e7e2      	b.n	80048b4 <_dtoa_r+0xa2c>
 80048ee:	9b03      	ldr	r3, [sp, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	db04      	blt.n	80048fe <_dtoa_r+0xa76>
 80048f4:	9906      	ldr	r1, [sp, #24]
 80048f6:	430b      	orrs	r3, r1
 80048f8:	9904      	ldr	r1, [sp, #16]
 80048fa:	430b      	orrs	r3, r1
 80048fc:	d122      	bne.n	8004944 <_dtoa_r+0xabc>
 80048fe:	2a00      	cmp	r2, #0
 8004900:	ddee      	ble.n	80048e0 <_dtoa_r+0xa58>
 8004902:	ee18 1a10 	vmov	r1, s16
 8004906:	2201      	movs	r2, #1
 8004908:	4620      	mov	r0, r4
 800490a:	f000 fce9 	bl	80052e0 <__lshift>
 800490e:	4631      	mov	r1, r6
 8004910:	ee08 0a10 	vmov	s16, r0
 8004914:	f000 fd54 	bl	80053c0 <__mcmp>
 8004918:	2800      	cmp	r0, #0
 800491a:	dc03      	bgt.n	8004924 <_dtoa_r+0xa9c>
 800491c:	d1e0      	bne.n	80048e0 <_dtoa_r+0xa58>
 800491e:	f01a 0f01 	tst.w	sl, #1
 8004922:	d0dd      	beq.n	80048e0 <_dtoa_r+0xa58>
 8004924:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004928:	d1d7      	bne.n	80048da <_dtoa_r+0xa52>
 800492a:	2339      	movs	r3, #57	; 0x39
 800492c:	f88b 3000 	strb.w	r3, [fp]
 8004930:	462b      	mov	r3, r5
 8004932:	461d      	mov	r5, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800493a:	2a39      	cmp	r2, #57	; 0x39
 800493c:	d071      	beq.n	8004a22 <_dtoa_r+0xb9a>
 800493e:	3201      	adds	r2, #1
 8004940:	701a      	strb	r2, [r3, #0]
 8004942:	e746      	b.n	80047d2 <_dtoa_r+0x94a>
 8004944:	2a00      	cmp	r2, #0
 8004946:	dd07      	ble.n	8004958 <_dtoa_r+0xad0>
 8004948:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800494c:	d0ed      	beq.n	800492a <_dtoa_r+0xaa2>
 800494e:	f10a 0301 	add.w	r3, sl, #1
 8004952:	f88b 3000 	strb.w	r3, [fp]
 8004956:	e73c      	b.n	80047d2 <_dtoa_r+0x94a>
 8004958:	9b05      	ldr	r3, [sp, #20]
 800495a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800495e:	4599      	cmp	r9, r3
 8004960:	d047      	beq.n	80049f2 <_dtoa_r+0xb6a>
 8004962:	ee18 1a10 	vmov	r1, s16
 8004966:	2300      	movs	r3, #0
 8004968:	220a      	movs	r2, #10
 800496a:	4620      	mov	r0, r4
 800496c:	f000 fb08 	bl	8004f80 <__multadd>
 8004970:	45b8      	cmp	r8, r7
 8004972:	ee08 0a10 	vmov	s16, r0
 8004976:	f04f 0300 	mov.w	r3, #0
 800497a:	f04f 020a 	mov.w	r2, #10
 800497e:	4641      	mov	r1, r8
 8004980:	4620      	mov	r0, r4
 8004982:	d106      	bne.n	8004992 <_dtoa_r+0xb0a>
 8004984:	f000 fafc 	bl	8004f80 <__multadd>
 8004988:	4680      	mov	r8, r0
 800498a:	4607      	mov	r7, r0
 800498c:	f109 0901 	add.w	r9, r9, #1
 8004990:	e772      	b.n	8004878 <_dtoa_r+0x9f0>
 8004992:	f000 faf5 	bl	8004f80 <__multadd>
 8004996:	4639      	mov	r1, r7
 8004998:	4680      	mov	r8, r0
 800499a:	2300      	movs	r3, #0
 800499c:	220a      	movs	r2, #10
 800499e:	4620      	mov	r0, r4
 80049a0:	f000 faee 	bl	8004f80 <__multadd>
 80049a4:	4607      	mov	r7, r0
 80049a6:	e7f1      	b.n	800498c <_dtoa_r+0xb04>
 80049a8:	9b03      	ldr	r3, [sp, #12]
 80049aa:	9302      	str	r3, [sp, #8]
 80049ac:	9d01      	ldr	r5, [sp, #4]
 80049ae:	ee18 0a10 	vmov	r0, s16
 80049b2:	4631      	mov	r1, r6
 80049b4:	f7ff f9da 	bl	8003d6c <quorem>
 80049b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80049bc:	9b01      	ldr	r3, [sp, #4]
 80049be:	f805 ab01 	strb.w	sl, [r5], #1
 80049c2:	1aea      	subs	r2, r5, r3
 80049c4:	9b02      	ldr	r3, [sp, #8]
 80049c6:	4293      	cmp	r3, r2
 80049c8:	dd09      	ble.n	80049de <_dtoa_r+0xb56>
 80049ca:	ee18 1a10 	vmov	r1, s16
 80049ce:	2300      	movs	r3, #0
 80049d0:	220a      	movs	r2, #10
 80049d2:	4620      	mov	r0, r4
 80049d4:	f000 fad4 	bl	8004f80 <__multadd>
 80049d8:	ee08 0a10 	vmov	s16, r0
 80049dc:	e7e7      	b.n	80049ae <_dtoa_r+0xb26>
 80049de:	9b02      	ldr	r3, [sp, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	bfc8      	it	gt
 80049e4:	461d      	movgt	r5, r3
 80049e6:	9b01      	ldr	r3, [sp, #4]
 80049e8:	bfd8      	it	le
 80049ea:	2501      	movle	r5, #1
 80049ec:	441d      	add	r5, r3
 80049ee:	f04f 0800 	mov.w	r8, #0
 80049f2:	ee18 1a10 	vmov	r1, s16
 80049f6:	2201      	movs	r2, #1
 80049f8:	4620      	mov	r0, r4
 80049fa:	f000 fc71 	bl	80052e0 <__lshift>
 80049fe:	4631      	mov	r1, r6
 8004a00:	ee08 0a10 	vmov	s16, r0
 8004a04:	f000 fcdc 	bl	80053c0 <__mcmp>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	dc91      	bgt.n	8004930 <_dtoa_r+0xaa8>
 8004a0c:	d102      	bne.n	8004a14 <_dtoa_r+0xb8c>
 8004a0e:	f01a 0f01 	tst.w	sl, #1
 8004a12:	d18d      	bne.n	8004930 <_dtoa_r+0xaa8>
 8004a14:	462b      	mov	r3, r5
 8004a16:	461d      	mov	r5, r3
 8004a18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a1c:	2a30      	cmp	r2, #48	; 0x30
 8004a1e:	d0fa      	beq.n	8004a16 <_dtoa_r+0xb8e>
 8004a20:	e6d7      	b.n	80047d2 <_dtoa_r+0x94a>
 8004a22:	9a01      	ldr	r2, [sp, #4]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d184      	bne.n	8004932 <_dtoa_r+0xaaa>
 8004a28:	9b00      	ldr	r3, [sp, #0]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	2331      	movs	r3, #49	; 0x31
 8004a30:	7013      	strb	r3, [r2, #0]
 8004a32:	e6ce      	b.n	80047d2 <_dtoa_r+0x94a>
 8004a34:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <_dtoa_r+0xbd4>)
 8004a36:	f7ff ba95 	b.w	8003f64 <_dtoa_r+0xdc>
 8004a3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f47f aa6e 	bne.w	8003f1e <_dtoa_r+0x96>
 8004a42:	4b07      	ldr	r3, [pc, #28]	; (8004a60 <_dtoa_r+0xbd8>)
 8004a44:	f7ff ba8e 	b.w	8003f64 <_dtoa_r+0xdc>
 8004a48:	9b02      	ldr	r3, [sp, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	dcae      	bgt.n	80049ac <_dtoa_r+0xb24>
 8004a4e:	9b06      	ldr	r3, [sp, #24]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	f73f aea8 	bgt.w	80047a6 <_dtoa_r+0x91e>
 8004a56:	e7a9      	b.n	80049ac <_dtoa_r+0xb24>
 8004a58:	080064a3 	.word	0x080064a3
 8004a5c:	08006400 	.word	0x08006400
 8004a60:	08006424 	.word	0x08006424

08004a64 <__sflush_r>:
 8004a64:	898a      	ldrh	r2, [r1, #12]
 8004a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a6a:	4605      	mov	r5, r0
 8004a6c:	0710      	lsls	r0, r2, #28
 8004a6e:	460c      	mov	r4, r1
 8004a70:	d458      	bmi.n	8004b24 <__sflush_r+0xc0>
 8004a72:	684b      	ldr	r3, [r1, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	dc05      	bgt.n	8004a84 <__sflush_r+0x20>
 8004a78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	dc02      	bgt.n	8004a84 <__sflush_r+0x20>
 8004a7e:	2000      	movs	r0, #0
 8004a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a86:	2e00      	cmp	r6, #0
 8004a88:	d0f9      	beq.n	8004a7e <__sflush_r+0x1a>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a90:	682f      	ldr	r7, [r5, #0]
 8004a92:	602b      	str	r3, [r5, #0]
 8004a94:	d032      	beq.n	8004afc <__sflush_r+0x98>
 8004a96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a98:	89a3      	ldrh	r3, [r4, #12]
 8004a9a:	075a      	lsls	r2, r3, #29
 8004a9c:	d505      	bpl.n	8004aaa <__sflush_r+0x46>
 8004a9e:	6863      	ldr	r3, [r4, #4]
 8004aa0:	1ac0      	subs	r0, r0, r3
 8004aa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004aa4:	b10b      	cbz	r3, 8004aaa <__sflush_r+0x46>
 8004aa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004aa8:	1ac0      	subs	r0, r0, r3
 8004aaa:	2300      	movs	r3, #0
 8004aac:	4602      	mov	r2, r0
 8004aae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ab0:	6a21      	ldr	r1, [r4, #32]
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	47b0      	blx	r6
 8004ab6:	1c43      	adds	r3, r0, #1
 8004ab8:	89a3      	ldrh	r3, [r4, #12]
 8004aba:	d106      	bne.n	8004aca <__sflush_r+0x66>
 8004abc:	6829      	ldr	r1, [r5, #0]
 8004abe:	291d      	cmp	r1, #29
 8004ac0:	d82c      	bhi.n	8004b1c <__sflush_r+0xb8>
 8004ac2:	4a2a      	ldr	r2, [pc, #168]	; (8004b6c <__sflush_r+0x108>)
 8004ac4:	40ca      	lsrs	r2, r1
 8004ac6:	07d6      	lsls	r6, r2, #31
 8004ac8:	d528      	bpl.n	8004b1c <__sflush_r+0xb8>
 8004aca:	2200      	movs	r2, #0
 8004acc:	6062      	str	r2, [r4, #4]
 8004ace:	04d9      	lsls	r1, r3, #19
 8004ad0:	6922      	ldr	r2, [r4, #16]
 8004ad2:	6022      	str	r2, [r4, #0]
 8004ad4:	d504      	bpl.n	8004ae0 <__sflush_r+0x7c>
 8004ad6:	1c42      	adds	r2, r0, #1
 8004ad8:	d101      	bne.n	8004ade <__sflush_r+0x7a>
 8004ada:	682b      	ldr	r3, [r5, #0]
 8004adc:	b903      	cbnz	r3, 8004ae0 <__sflush_r+0x7c>
 8004ade:	6560      	str	r0, [r4, #84]	; 0x54
 8004ae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ae2:	602f      	str	r7, [r5, #0]
 8004ae4:	2900      	cmp	r1, #0
 8004ae6:	d0ca      	beq.n	8004a7e <__sflush_r+0x1a>
 8004ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004aec:	4299      	cmp	r1, r3
 8004aee:	d002      	beq.n	8004af6 <__sflush_r+0x92>
 8004af0:	4628      	mov	r0, r5
 8004af2:	f000 fd7d 	bl	80055f0 <_free_r>
 8004af6:	2000      	movs	r0, #0
 8004af8:	6360      	str	r0, [r4, #52]	; 0x34
 8004afa:	e7c1      	b.n	8004a80 <__sflush_r+0x1c>
 8004afc:	6a21      	ldr	r1, [r4, #32]
 8004afe:	2301      	movs	r3, #1
 8004b00:	4628      	mov	r0, r5
 8004b02:	47b0      	blx	r6
 8004b04:	1c41      	adds	r1, r0, #1
 8004b06:	d1c7      	bne.n	8004a98 <__sflush_r+0x34>
 8004b08:	682b      	ldr	r3, [r5, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0c4      	beq.n	8004a98 <__sflush_r+0x34>
 8004b0e:	2b1d      	cmp	r3, #29
 8004b10:	d001      	beq.n	8004b16 <__sflush_r+0xb2>
 8004b12:	2b16      	cmp	r3, #22
 8004b14:	d101      	bne.n	8004b1a <__sflush_r+0xb6>
 8004b16:	602f      	str	r7, [r5, #0]
 8004b18:	e7b1      	b.n	8004a7e <__sflush_r+0x1a>
 8004b1a:	89a3      	ldrh	r3, [r4, #12]
 8004b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b20:	81a3      	strh	r3, [r4, #12]
 8004b22:	e7ad      	b.n	8004a80 <__sflush_r+0x1c>
 8004b24:	690f      	ldr	r7, [r1, #16]
 8004b26:	2f00      	cmp	r7, #0
 8004b28:	d0a9      	beq.n	8004a7e <__sflush_r+0x1a>
 8004b2a:	0793      	lsls	r3, r2, #30
 8004b2c:	680e      	ldr	r6, [r1, #0]
 8004b2e:	bf08      	it	eq
 8004b30:	694b      	ldreq	r3, [r1, #20]
 8004b32:	600f      	str	r7, [r1, #0]
 8004b34:	bf18      	it	ne
 8004b36:	2300      	movne	r3, #0
 8004b38:	eba6 0807 	sub.w	r8, r6, r7
 8004b3c:	608b      	str	r3, [r1, #8]
 8004b3e:	f1b8 0f00 	cmp.w	r8, #0
 8004b42:	dd9c      	ble.n	8004a7e <__sflush_r+0x1a>
 8004b44:	6a21      	ldr	r1, [r4, #32]
 8004b46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b48:	4643      	mov	r3, r8
 8004b4a:	463a      	mov	r2, r7
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	47b0      	blx	r6
 8004b50:	2800      	cmp	r0, #0
 8004b52:	dc06      	bgt.n	8004b62 <__sflush_r+0xfe>
 8004b54:	89a3      	ldrh	r3, [r4, #12]
 8004b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b5a:	81a3      	strh	r3, [r4, #12]
 8004b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b60:	e78e      	b.n	8004a80 <__sflush_r+0x1c>
 8004b62:	4407      	add	r7, r0
 8004b64:	eba8 0800 	sub.w	r8, r8, r0
 8004b68:	e7e9      	b.n	8004b3e <__sflush_r+0xda>
 8004b6a:	bf00      	nop
 8004b6c:	20400001 	.word	0x20400001

08004b70 <_fflush_r>:
 8004b70:	b538      	push	{r3, r4, r5, lr}
 8004b72:	690b      	ldr	r3, [r1, #16]
 8004b74:	4605      	mov	r5, r0
 8004b76:	460c      	mov	r4, r1
 8004b78:	b913      	cbnz	r3, 8004b80 <_fflush_r+0x10>
 8004b7a:	2500      	movs	r5, #0
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	bd38      	pop	{r3, r4, r5, pc}
 8004b80:	b118      	cbz	r0, 8004b8a <_fflush_r+0x1a>
 8004b82:	6983      	ldr	r3, [r0, #24]
 8004b84:	b90b      	cbnz	r3, 8004b8a <_fflush_r+0x1a>
 8004b86:	f000 f887 	bl	8004c98 <__sinit>
 8004b8a:	4b14      	ldr	r3, [pc, #80]	; (8004bdc <_fflush_r+0x6c>)
 8004b8c:	429c      	cmp	r4, r3
 8004b8e:	d11b      	bne.n	8004bc8 <_fflush_r+0x58>
 8004b90:	686c      	ldr	r4, [r5, #4]
 8004b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0ef      	beq.n	8004b7a <_fflush_r+0xa>
 8004b9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b9c:	07d0      	lsls	r0, r2, #31
 8004b9e:	d404      	bmi.n	8004baa <_fflush_r+0x3a>
 8004ba0:	0599      	lsls	r1, r3, #22
 8004ba2:	d402      	bmi.n	8004baa <_fflush_r+0x3a>
 8004ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ba6:	f000 f91a 	bl	8004dde <__retarget_lock_acquire_recursive>
 8004baa:	4628      	mov	r0, r5
 8004bac:	4621      	mov	r1, r4
 8004bae:	f7ff ff59 	bl	8004a64 <__sflush_r>
 8004bb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bb4:	07da      	lsls	r2, r3, #31
 8004bb6:	4605      	mov	r5, r0
 8004bb8:	d4e0      	bmi.n	8004b7c <_fflush_r+0xc>
 8004bba:	89a3      	ldrh	r3, [r4, #12]
 8004bbc:	059b      	lsls	r3, r3, #22
 8004bbe:	d4dd      	bmi.n	8004b7c <_fflush_r+0xc>
 8004bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bc2:	f000 f90d 	bl	8004de0 <__retarget_lock_release_recursive>
 8004bc6:	e7d9      	b.n	8004b7c <_fflush_r+0xc>
 8004bc8:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <_fflush_r+0x70>)
 8004bca:	429c      	cmp	r4, r3
 8004bcc:	d101      	bne.n	8004bd2 <_fflush_r+0x62>
 8004bce:	68ac      	ldr	r4, [r5, #8]
 8004bd0:	e7df      	b.n	8004b92 <_fflush_r+0x22>
 8004bd2:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <_fflush_r+0x74>)
 8004bd4:	429c      	cmp	r4, r3
 8004bd6:	bf08      	it	eq
 8004bd8:	68ec      	ldreq	r4, [r5, #12]
 8004bda:	e7da      	b.n	8004b92 <_fflush_r+0x22>
 8004bdc:	080064d4 	.word	0x080064d4
 8004be0:	080064f4 	.word	0x080064f4
 8004be4:	080064b4 	.word	0x080064b4

08004be8 <std>:
 8004be8:	2300      	movs	r3, #0
 8004bea:	b510      	push	{r4, lr}
 8004bec:	4604      	mov	r4, r0
 8004bee:	e9c0 3300 	strd	r3, r3, [r0]
 8004bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bf6:	6083      	str	r3, [r0, #8]
 8004bf8:	8181      	strh	r1, [r0, #12]
 8004bfa:	6643      	str	r3, [r0, #100]	; 0x64
 8004bfc:	81c2      	strh	r2, [r0, #14]
 8004bfe:	6183      	str	r3, [r0, #24]
 8004c00:	4619      	mov	r1, r3
 8004c02:	2208      	movs	r2, #8
 8004c04:	305c      	adds	r0, #92	; 0x5c
 8004c06:	f7fe fb51 	bl	80032ac <memset>
 8004c0a:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <std+0x38>)
 8004c0c:	6263      	str	r3, [r4, #36]	; 0x24
 8004c0e:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <std+0x3c>)
 8004c10:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c12:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <std+0x40>)
 8004c14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c16:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <std+0x44>)
 8004c18:	6224      	str	r4, [r4, #32]
 8004c1a:	6323      	str	r3, [r4, #48]	; 0x30
 8004c1c:	bd10      	pop	{r4, pc}
 8004c1e:	bf00      	nop
 8004c20:	08005a89 	.word	0x08005a89
 8004c24:	08005aab 	.word	0x08005aab
 8004c28:	08005ae3 	.word	0x08005ae3
 8004c2c:	08005b07 	.word	0x08005b07

08004c30 <_cleanup_r>:
 8004c30:	4901      	ldr	r1, [pc, #4]	; (8004c38 <_cleanup_r+0x8>)
 8004c32:	f000 b8af 	b.w	8004d94 <_fwalk_reent>
 8004c36:	bf00      	nop
 8004c38:	08004b71 	.word	0x08004b71

08004c3c <__sfmoreglue>:
 8004c3c:	b570      	push	{r4, r5, r6, lr}
 8004c3e:	2268      	movs	r2, #104	; 0x68
 8004c40:	1e4d      	subs	r5, r1, #1
 8004c42:	4355      	muls	r5, r2
 8004c44:	460e      	mov	r6, r1
 8004c46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c4a:	f000 fd3d 	bl	80056c8 <_malloc_r>
 8004c4e:	4604      	mov	r4, r0
 8004c50:	b140      	cbz	r0, 8004c64 <__sfmoreglue+0x28>
 8004c52:	2100      	movs	r1, #0
 8004c54:	e9c0 1600 	strd	r1, r6, [r0]
 8004c58:	300c      	adds	r0, #12
 8004c5a:	60a0      	str	r0, [r4, #8]
 8004c5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c60:	f7fe fb24 	bl	80032ac <memset>
 8004c64:	4620      	mov	r0, r4
 8004c66:	bd70      	pop	{r4, r5, r6, pc}

08004c68 <__sfp_lock_acquire>:
 8004c68:	4801      	ldr	r0, [pc, #4]	; (8004c70 <__sfp_lock_acquire+0x8>)
 8004c6a:	f000 b8b8 	b.w	8004dde <__retarget_lock_acquire_recursive>
 8004c6e:	bf00      	nop
 8004c70:	20000539 	.word	0x20000539

08004c74 <__sfp_lock_release>:
 8004c74:	4801      	ldr	r0, [pc, #4]	; (8004c7c <__sfp_lock_release+0x8>)
 8004c76:	f000 b8b3 	b.w	8004de0 <__retarget_lock_release_recursive>
 8004c7a:	bf00      	nop
 8004c7c:	20000539 	.word	0x20000539

08004c80 <__sinit_lock_acquire>:
 8004c80:	4801      	ldr	r0, [pc, #4]	; (8004c88 <__sinit_lock_acquire+0x8>)
 8004c82:	f000 b8ac 	b.w	8004dde <__retarget_lock_acquire_recursive>
 8004c86:	bf00      	nop
 8004c88:	2000053a 	.word	0x2000053a

08004c8c <__sinit_lock_release>:
 8004c8c:	4801      	ldr	r0, [pc, #4]	; (8004c94 <__sinit_lock_release+0x8>)
 8004c8e:	f000 b8a7 	b.w	8004de0 <__retarget_lock_release_recursive>
 8004c92:	bf00      	nop
 8004c94:	2000053a 	.word	0x2000053a

08004c98 <__sinit>:
 8004c98:	b510      	push	{r4, lr}
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	f7ff fff0 	bl	8004c80 <__sinit_lock_acquire>
 8004ca0:	69a3      	ldr	r3, [r4, #24]
 8004ca2:	b11b      	cbz	r3, 8004cac <__sinit+0x14>
 8004ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ca8:	f7ff bff0 	b.w	8004c8c <__sinit_lock_release>
 8004cac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004cb0:	6523      	str	r3, [r4, #80]	; 0x50
 8004cb2:	4b13      	ldr	r3, [pc, #76]	; (8004d00 <__sinit+0x68>)
 8004cb4:	4a13      	ldr	r2, [pc, #76]	; (8004d04 <__sinit+0x6c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004cba:	42a3      	cmp	r3, r4
 8004cbc:	bf04      	itt	eq
 8004cbe:	2301      	moveq	r3, #1
 8004cc0:	61a3      	streq	r3, [r4, #24]
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	f000 f820 	bl	8004d08 <__sfp>
 8004cc8:	6060      	str	r0, [r4, #4]
 8004cca:	4620      	mov	r0, r4
 8004ccc:	f000 f81c 	bl	8004d08 <__sfp>
 8004cd0:	60a0      	str	r0, [r4, #8]
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	f000 f818 	bl	8004d08 <__sfp>
 8004cd8:	2200      	movs	r2, #0
 8004cda:	60e0      	str	r0, [r4, #12]
 8004cdc:	2104      	movs	r1, #4
 8004cde:	6860      	ldr	r0, [r4, #4]
 8004ce0:	f7ff ff82 	bl	8004be8 <std>
 8004ce4:	68a0      	ldr	r0, [r4, #8]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	2109      	movs	r1, #9
 8004cea:	f7ff ff7d 	bl	8004be8 <std>
 8004cee:	68e0      	ldr	r0, [r4, #12]
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	2112      	movs	r1, #18
 8004cf4:	f7ff ff78 	bl	8004be8 <std>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	61a3      	str	r3, [r4, #24]
 8004cfc:	e7d2      	b.n	8004ca4 <__sinit+0xc>
 8004cfe:	bf00      	nop
 8004d00:	080063ec 	.word	0x080063ec
 8004d04:	08004c31 	.word	0x08004c31

08004d08 <__sfp>:
 8004d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0a:	4607      	mov	r7, r0
 8004d0c:	f7ff ffac 	bl	8004c68 <__sfp_lock_acquire>
 8004d10:	4b1e      	ldr	r3, [pc, #120]	; (8004d8c <__sfp+0x84>)
 8004d12:	681e      	ldr	r6, [r3, #0]
 8004d14:	69b3      	ldr	r3, [r6, #24]
 8004d16:	b913      	cbnz	r3, 8004d1e <__sfp+0x16>
 8004d18:	4630      	mov	r0, r6
 8004d1a:	f7ff ffbd 	bl	8004c98 <__sinit>
 8004d1e:	3648      	adds	r6, #72	; 0x48
 8004d20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d24:	3b01      	subs	r3, #1
 8004d26:	d503      	bpl.n	8004d30 <__sfp+0x28>
 8004d28:	6833      	ldr	r3, [r6, #0]
 8004d2a:	b30b      	cbz	r3, 8004d70 <__sfp+0x68>
 8004d2c:	6836      	ldr	r6, [r6, #0]
 8004d2e:	e7f7      	b.n	8004d20 <__sfp+0x18>
 8004d30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d34:	b9d5      	cbnz	r5, 8004d6c <__sfp+0x64>
 8004d36:	4b16      	ldr	r3, [pc, #88]	; (8004d90 <__sfp+0x88>)
 8004d38:	60e3      	str	r3, [r4, #12]
 8004d3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d3e:	6665      	str	r5, [r4, #100]	; 0x64
 8004d40:	f000 f84c 	bl	8004ddc <__retarget_lock_init_recursive>
 8004d44:	f7ff ff96 	bl	8004c74 <__sfp_lock_release>
 8004d48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d50:	6025      	str	r5, [r4, #0]
 8004d52:	61a5      	str	r5, [r4, #24]
 8004d54:	2208      	movs	r2, #8
 8004d56:	4629      	mov	r1, r5
 8004d58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d5c:	f7fe faa6 	bl	80032ac <memset>
 8004d60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d68:	4620      	mov	r0, r4
 8004d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d6c:	3468      	adds	r4, #104	; 0x68
 8004d6e:	e7d9      	b.n	8004d24 <__sfp+0x1c>
 8004d70:	2104      	movs	r1, #4
 8004d72:	4638      	mov	r0, r7
 8004d74:	f7ff ff62 	bl	8004c3c <__sfmoreglue>
 8004d78:	4604      	mov	r4, r0
 8004d7a:	6030      	str	r0, [r6, #0]
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	d1d5      	bne.n	8004d2c <__sfp+0x24>
 8004d80:	f7ff ff78 	bl	8004c74 <__sfp_lock_release>
 8004d84:	230c      	movs	r3, #12
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	e7ee      	b.n	8004d68 <__sfp+0x60>
 8004d8a:	bf00      	nop
 8004d8c:	080063ec 	.word	0x080063ec
 8004d90:	ffff0001 	.word	0xffff0001

08004d94 <_fwalk_reent>:
 8004d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d98:	4606      	mov	r6, r0
 8004d9a:	4688      	mov	r8, r1
 8004d9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004da0:	2700      	movs	r7, #0
 8004da2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004da6:	f1b9 0901 	subs.w	r9, r9, #1
 8004daa:	d505      	bpl.n	8004db8 <_fwalk_reent+0x24>
 8004dac:	6824      	ldr	r4, [r4, #0]
 8004dae:	2c00      	cmp	r4, #0
 8004db0:	d1f7      	bne.n	8004da2 <_fwalk_reent+0xe>
 8004db2:	4638      	mov	r0, r7
 8004db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004db8:	89ab      	ldrh	r3, [r5, #12]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d907      	bls.n	8004dce <_fwalk_reent+0x3a>
 8004dbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	d003      	beq.n	8004dce <_fwalk_reent+0x3a>
 8004dc6:	4629      	mov	r1, r5
 8004dc8:	4630      	mov	r0, r6
 8004dca:	47c0      	blx	r8
 8004dcc:	4307      	orrs	r7, r0
 8004dce:	3568      	adds	r5, #104	; 0x68
 8004dd0:	e7e9      	b.n	8004da6 <_fwalk_reent+0x12>
	...

08004dd4 <_localeconv_r>:
 8004dd4:	4800      	ldr	r0, [pc, #0]	; (8004dd8 <_localeconv_r+0x4>)
 8004dd6:	4770      	bx	lr
 8004dd8:	20000180 	.word	0x20000180

08004ddc <__retarget_lock_init_recursive>:
 8004ddc:	4770      	bx	lr

08004dde <__retarget_lock_acquire_recursive>:
 8004dde:	4770      	bx	lr

08004de0 <__retarget_lock_release_recursive>:
 8004de0:	4770      	bx	lr

08004de2 <__swhatbuf_r>:
 8004de2:	b570      	push	{r4, r5, r6, lr}
 8004de4:	460e      	mov	r6, r1
 8004de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dea:	2900      	cmp	r1, #0
 8004dec:	b096      	sub	sp, #88	; 0x58
 8004dee:	4614      	mov	r4, r2
 8004df0:	461d      	mov	r5, r3
 8004df2:	da08      	bge.n	8004e06 <__swhatbuf_r+0x24>
 8004df4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	602a      	str	r2, [r5, #0]
 8004dfc:	061a      	lsls	r2, r3, #24
 8004dfe:	d410      	bmi.n	8004e22 <__swhatbuf_r+0x40>
 8004e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e04:	e00e      	b.n	8004e24 <__swhatbuf_r+0x42>
 8004e06:	466a      	mov	r2, sp
 8004e08:	f000 fec2 	bl	8005b90 <_fstat_r>
 8004e0c:	2800      	cmp	r0, #0
 8004e0e:	dbf1      	blt.n	8004df4 <__swhatbuf_r+0x12>
 8004e10:	9a01      	ldr	r2, [sp, #4]
 8004e12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e1a:	425a      	negs	r2, r3
 8004e1c:	415a      	adcs	r2, r3
 8004e1e:	602a      	str	r2, [r5, #0]
 8004e20:	e7ee      	b.n	8004e00 <__swhatbuf_r+0x1e>
 8004e22:	2340      	movs	r3, #64	; 0x40
 8004e24:	2000      	movs	r0, #0
 8004e26:	6023      	str	r3, [r4, #0]
 8004e28:	b016      	add	sp, #88	; 0x58
 8004e2a:	bd70      	pop	{r4, r5, r6, pc}

08004e2c <__smakebuf_r>:
 8004e2c:	898b      	ldrh	r3, [r1, #12]
 8004e2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e30:	079d      	lsls	r5, r3, #30
 8004e32:	4606      	mov	r6, r0
 8004e34:	460c      	mov	r4, r1
 8004e36:	d507      	bpl.n	8004e48 <__smakebuf_r+0x1c>
 8004e38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	6123      	str	r3, [r4, #16]
 8004e40:	2301      	movs	r3, #1
 8004e42:	6163      	str	r3, [r4, #20]
 8004e44:	b002      	add	sp, #8
 8004e46:	bd70      	pop	{r4, r5, r6, pc}
 8004e48:	ab01      	add	r3, sp, #4
 8004e4a:	466a      	mov	r2, sp
 8004e4c:	f7ff ffc9 	bl	8004de2 <__swhatbuf_r>
 8004e50:	9900      	ldr	r1, [sp, #0]
 8004e52:	4605      	mov	r5, r0
 8004e54:	4630      	mov	r0, r6
 8004e56:	f000 fc37 	bl	80056c8 <_malloc_r>
 8004e5a:	b948      	cbnz	r0, 8004e70 <__smakebuf_r+0x44>
 8004e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e60:	059a      	lsls	r2, r3, #22
 8004e62:	d4ef      	bmi.n	8004e44 <__smakebuf_r+0x18>
 8004e64:	f023 0303 	bic.w	r3, r3, #3
 8004e68:	f043 0302 	orr.w	r3, r3, #2
 8004e6c:	81a3      	strh	r3, [r4, #12]
 8004e6e:	e7e3      	b.n	8004e38 <__smakebuf_r+0xc>
 8004e70:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <__smakebuf_r+0x7c>)
 8004e72:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e74:	89a3      	ldrh	r3, [r4, #12]
 8004e76:	6020      	str	r0, [r4, #0]
 8004e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e7c:	81a3      	strh	r3, [r4, #12]
 8004e7e:	9b00      	ldr	r3, [sp, #0]
 8004e80:	6163      	str	r3, [r4, #20]
 8004e82:	9b01      	ldr	r3, [sp, #4]
 8004e84:	6120      	str	r0, [r4, #16]
 8004e86:	b15b      	cbz	r3, 8004ea0 <__smakebuf_r+0x74>
 8004e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e8c:	4630      	mov	r0, r6
 8004e8e:	f000 fe91 	bl	8005bb4 <_isatty_r>
 8004e92:	b128      	cbz	r0, 8004ea0 <__smakebuf_r+0x74>
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	f023 0303 	bic.w	r3, r3, #3
 8004e9a:	f043 0301 	orr.w	r3, r3, #1
 8004e9e:	81a3      	strh	r3, [r4, #12]
 8004ea0:	89a0      	ldrh	r0, [r4, #12]
 8004ea2:	4305      	orrs	r5, r0
 8004ea4:	81a5      	strh	r5, [r4, #12]
 8004ea6:	e7cd      	b.n	8004e44 <__smakebuf_r+0x18>
 8004ea8:	08004c31 	.word	0x08004c31

08004eac <malloc>:
 8004eac:	4b02      	ldr	r3, [pc, #8]	; (8004eb8 <malloc+0xc>)
 8004eae:	4601      	mov	r1, r0
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	f000 bc09 	b.w	80056c8 <_malloc_r>
 8004eb6:	bf00      	nop
 8004eb8:	2000002c 	.word	0x2000002c

08004ebc <_Balloc>:
 8004ebc:	b570      	push	{r4, r5, r6, lr}
 8004ebe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	460d      	mov	r5, r1
 8004ec4:	b976      	cbnz	r6, 8004ee4 <_Balloc+0x28>
 8004ec6:	2010      	movs	r0, #16
 8004ec8:	f7ff fff0 	bl	8004eac <malloc>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	6260      	str	r0, [r4, #36]	; 0x24
 8004ed0:	b920      	cbnz	r0, 8004edc <_Balloc+0x20>
 8004ed2:	4b18      	ldr	r3, [pc, #96]	; (8004f34 <_Balloc+0x78>)
 8004ed4:	4818      	ldr	r0, [pc, #96]	; (8004f38 <_Balloc+0x7c>)
 8004ed6:	2166      	movs	r1, #102	; 0x66
 8004ed8:	f000 fe1a 	bl	8005b10 <__assert_func>
 8004edc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ee0:	6006      	str	r6, [r0, #0]
 8004ee2:	60c6      	str	r6, [r0, #12]
 8004ee4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004ee6:	68f3      	ldr	r3, [r6, #12]
 8004ee8:	b183      	cbz	r3, 8004f0c <_Balloc+0x50>
 8004eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004ef2:	b9b8      	cbnz	r0, 8004f24 <_Balloc+0x68>
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	fa01 f605 	lsl.w	r6, r1, r5
 8004efa:	1d72      	adds	r2, r6, #5
 8004efc:	0092      	lsls	r2, r2, #2
 8004efe:	4620      	mov	r0, r4
 8004f00:	f000 fb60 	bl	80055c4 <_calloc_r>
 8004f04:	b160      	cbz	r0, 8004f20 <_Balloc+0x64>
 8004f06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004f0a:	e00e      	b.n	8004f2a <_Balloc+0x6e>
 8004f0c:	2221      	movs	r2, #33	; 0x21
 8004f0e:	2104      	movs	r1, #4
 8004f10:	4620      	mov	r0, r4
 8004f12:	f000 fb57 	bl	80055c4 <_calloc_r>
 8004f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f18:	60f0      	str	r0, [r6, #12]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e4      	bne.n	8004eea <_Balloc+0x2e>
 8004f20:	2000      	movs	r0, #0
 8004f22:	bd70      	pop	{r4, r5, r6, pc}
 8004f24:	6802      	ldr	r2, [r0, #0]
 8004f26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004f30:	e7f7      	b.n	8004f22 <_Balloc+0x66>
 8004f32:	bf00      	nop
 8004f34:	08006431 	.word	0x08006431
 8004f38:	08006514 	.word	0x08006514

08004f3c <_Bfree>:
 8004f3c:	b570      	push	{r4, r5, r6, lr}
 8004f3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004f40:	4605      	mov	r5, r0
 8004f42:	460c      	mov	r4, r1
 8004f44:	b976      	cbnz	r6, 8004f64 <_Bfree+0x28>
 8004f46:	2010      	movs	r0, #16
 8004f48:	f7ff ffb0 	bl	8004eac <malloc>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	6268      	str	r0, [r5, #36]	; 0x24
 8004f50:	b920      	cbnz	r0, 8004f5c <_Bfree+0x20>
 8004f52:	4b09      	ldr	r3, [pc, #36]	; (8004f78 <_Bfree+0x3c>)
 8004f54:	4809      	ldr	r0, [pc, #36]	; (8004f7c <_Bfree+0x40>)
 8004f56:	218a      	movs	r1, #138	; 0x8a
 8004f58:	f000 fdda 	bl	8005b10 <__assert_func>
 8004f5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f60:	6006      	str	r6, [r0, #0]
 8004f62:	60c6      	str	r6, [r0, #12]
 8004f64:	b13c      	cbz	r4, 8004f76 <_Bfree+0x3a>
 8004f66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004f68:	6862      	ldr	r2, [r4, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f70:	6021      	str	r1, [r4, #0]
 8004f72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004f76:	bd70      	pop	{r4, r5, r6, pc}
 8004f78:	08006431 	.word	0x08006431
 8004f7c:	08006514 	.word	0x08006514

08004f80 <__multadd>:
 8004f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f84:	690d      	ldr	r5, [r1, #16]
 8004f86:	4607      	mov	r7, r0
 8004f88:	460c      	mov	r4, r1
 8004f8a:	461e      	mov	r6, r3
 8004f8c:	f101 0c14 	add.w	ip, r1, #20
 8004f90:	2000      	movs	r0, #0
 8004f92:	f8dc 3000 	ldr.w	r3, [ip]
 8004f96:	b299      	uxth	r1, r3
 8004f98:	fb02 6101 	mla	r1, r2, r1, r6
 8004f9c:	0c1e      	lsrs	r6, r3, #16
 8004f9e:	0c0b      	lsrs	r3, r1, #16
 8004fa0:	fb02 3306 	mla	r3, r2, r6, r3
 8004fa4:	b289      	uxth	r1, r1
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004fac:	4285      	cmp	r5, r0
 8004fae:	f84c 1b04 	str.w	r1, [ip], #4
 8004fb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004fb6:	dcec      	bgt.n	8004f92 <__multadd+0x12>
 8004fb8:	b30e      	cbz	r6, 8004ffe <__multadd+0x7e>
 8004fba:	68a3      	ldr	r3, [r4, #8]
 8004fbc:	42ab      	cmp	r3, r5
 8004fbe:	dc19      	bgt.n	8004ff4 <__multadd+0x74>
 8004fc0:	6861      	ldr	r1, [r4, #4]
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	3101      	adds	r1, #1
 8004fc6:	f7ff ff79 	bl	8004ebc <_Balloc>
 8004fca:	4680      	mov	r8, r0
 8004fcc:	b928      	cbnz	r0, 8004fda <__multadd+0x5a>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	4b0c      	ldr	r3, [pc, #48]	; (8005004 <__multadd+0x84>)
 8004fd2:	480d      	ldr	r0, [pc, #52]	; (8005008 <__multadd+0x88>)
 8004fd4:	21b5      	movs	r1, #181	; 0xb5
 8004fd6:	f000 fd9b 	bl	8005b10 <__assert_func>
 8004fda:	6922      	ldr	r2, [r4, #16]
 8004fdc:	3202      	adds	r2, #2
 8004fde:	f104 010c 	add.w	r1, r4, #12
 8004fe2:	0092      	lsls	r2, r2, #2
 8004fe4:	300c      	adds	r0, #12
 8004fe6:	f7fe f953 	bl	8003290 <memcpy>
 8004fea:	4621      	mov	r1, r4
 8004fec:	4638      	mov	r0, r7
 8004fee:	f7ff ffa5 	bl	8004f3c <_Bfree>
 8004ff2:	4644      	mov	r4, r8
 8004ff4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004ff8:	3501      	adds	r5, #1
 8004ffa:	615e      	str	r6, [r3, #20]
 8004ffc:	6125      	str	r5, [r4, #16]
 8004ffe:	4620      	mov	r0, r4
 8005000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005004:	080064a3 	.word	0x080064a3
 8005008:	08006514 	.word	0x08006514

0800500c <__hi0bits>:
 800500c:	0c03      	lsrs	r3, r0, #16
 800500e:	041b      	lsls	r3, r3, #16
 8005010:	b9d3      	cbnz	r3, 8005048 <__hi0bits+0x3c>
 8005012:	0400      	lsls	r0, r0, #16
 8005014:	2310      	movs	r3, #16
 8005016:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800501a:	bf04      	itt	eq
 800501c:	0200      	lsleq	r0, r0, #8
 800501e:	3308      	addeq	r3, #8
 8005020:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005024:	bf04      	itt	eq
 8005026:	0100      	lsleq	r0, r0, #4
 8005028:	3304      	addeq	r3, #4
 800502a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800502e:	bf04      	itt	eq
 8005030:	0080      	lsleq	r0, r0, #2
 8005032:	3302      	addeq	r3, #2
 8005034:	2800      	cmp	r0, #0
 8005036:	db05      	blt.n	8005044 <__hi0bits+0x38>
 8005038:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800503c:	f103 0301 	add.w	r3, r3, #1
 8005040:	bf08      	it	eq
 8005042:	2320      	moveq	r3, #32
 8005044:	4618      	mov	r0, r3
 8005046:	4770      	bx	lr
 8005048:	2300      	movs	r3, #0
 800504a:	e7e4      	b.n	8005016 <__hi0bits+0xa>

0800504c <__lo0bits>:
 800504c:	6803      	ldr	r3, [r0, #0]
 800504e:	f013 0207 	ands.w	r2, r3, #7
 8005052:	4601      	mov	r1, r0
 8005054:	d00b      	beq.n	800506e <__lo0bits+0x22>
 8005056:	07da      	lsls	r2, r3, #31
 8005058:	d423      	bmi.n	80050a2 <__lo0bits+0x56>
 800505a:	0798      	lsls	r0, r3, #30
 800505c:	bf49      	itett	mi
 800505e:	085b      	lsrmi	r3, r3, #1
 8005060:	089b      	lsrpl	r3, r3, #2
 8005062:	2001      	movmi	r0, #1
 8005064:	600b      	strmi	r3, [r1, #0]
 8005066:	bf5c      	itt	pl
 8005068:	600b      	strpl	r3, [r1, #0]
 800506a:	2002      	movpl	r0, #2
 800506c:	4770      	bx	lr
 800506e:	b298      	uxth	r0, r3
 8005070:	b9a8      	cbnz	r0, 800509e <__lo0bits+0x52>
 8005072:	0c1b      	lsrs	r3, r3, #16
 8005074:	2010      	movs	r0, #16
 8005076:	b2da      	uxtb	r2, r3
 8005078:	b90a      	cbnz	r2, 800507e <__lo0bits+0x32>
 800507a:	3008      	adds	r0, #8
 800507c:	0a1b      	lsrs	r3, r3, #8
 800507e:	071a      	lsls	r2, r3, #28
 8005080:	bf04      	itt	eq
 8005082:	091b      	lsreq	r3, r3, #4
 8005084:	3004      	addeq	r0, #4
 8005086:	079a      	lsls	r2, r3, #30
 8005088:	bf04      	itt	eq
 800508a:	089b      	lsreq	r3, r3, #2
 800508c:	3002      	addeq	r0, #2
 800508e:	07da      	lsls	r2, r3, #31
 8005090:	d403      	bmi.n	800509a <__lo0bits+0x4e>
 8005092:	085b      	lsrs	r3, r3, #1
 8005094:	f100 0001 	add.w	r0, r0, #1
 8005098:	d005      	beq.n	80050a6 <__lo0bits+0x5a>
 800509a:	600b      	str	r3, [r1, #0]
 800509c:	4770      	bx	lr
 800509e:	4610      	mov	r0, r2
 80050a0:	e7e9      	b.n	8005076 <__lo0bits+0x2a>
 80050a2:	2000      	movs	r0, #0
 80050a4:	4770      	bx	lr
 80050a6:	2020      	movs	r0, #32
 80050a8:	4770      	bx	lr
	...

080050ac <__i2b>:
 80050ac:	b510      	push	{r4, lr}
 80050ae:	460c      	mov	r4, r1
 80050b0:	2101      	movs	r1, #1
 80050b2:	f7ff ff03 	bl	8004ebc <_Balloc>
 80050b6:	4602      	mov	r2, r0
 80050b8:	b928      	cbnz	r0, 80050c6 <__i2b+0x1a>
 80050ba:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <__i2b+0x24>)
 80050bc:	4805      	ldr	r0, [pc, #20]	; (80050d4 <__i2b+0x28>)
 80050be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80050c2:	f000 fd25 	bl	8005b10 <__assert_func>
 80050c6:	2301      	movs	r3, #1
 80050c8:	6144      	str	r4, [r0, #20]
 80050ca:	6103      	str	r3, [r0, #16]
 80050cc:	bd10      	pop	{r4, pc}
 80050ce:	bf00      	nop
 80050d0:	080064a3 	.word	0x080064a3
 80050d4:	08006514 	.word	0x08006514

080050d8 <__multiply>:
 80050d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050dc:	4691      	mov	r9, r2
 80050de:	690a      	ldr	r2, [r1, #16]
 80050e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	bfb8      	it	lt
 80050e8:	460b      	movlt	r3, r1
 80050ea:	460c      	mov	r4, r1
 80050ec:	bfbc      	itt	lt
 80050ee:	464c      	movlt	r4, r9
 80050f0:	4699      	movlt	r9, r3
 80050f2:	6927      	ldr	r7, [r4, #16]
 80050f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80050f8:	68a3      	ldr	r3, [r4, #8]
 80050fa:	6861      	ldr	r1, [r4, #4]
 80050fc:	eb07 060a 	add.w	r6, r7, sl
 8005100:	42b3      	cmp	r3, r6
 8005102:	b085      	sub	sp, #20
 8005104:	bfb8      	it	lt
 8005106:	3101      	addlt	r1, #1
 8005108:	f7ff fed8 	bl	8004ebc <_Balloc>
 800510c:	b930      	cbnz	r0, 800511c <__multiply+0x44>
 800510e:	4602      	mov	r2, r0
 8005110:	4b44      	ldr	r3, [pc, #272]	; (8005224 <__multiply+0x14c>)
 8005112:	4845      	ldr	r0, [pc, #276]	; (8005228 <__multiply+0x150>)
 8005114:	f240 115d 	movw	r1, #349	; 0x15d
 8005118:	f000 fcfa 	bl	8005b10 <__assert_func>
 800511c:	f100 0514 	add.w	r5, r0, #20
 8005120:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005124:	462b      	mov	r3, r5
 8005126:	2200      	movs	r2, #0
 8005128:	4543      	cmp	r3, r8
 800512a:	d321      	bcc.n	8005170 <__multiply+0x98>
 800512c:	f104 0314 	add.w	r3, r4, #20
 8005130:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005134:	f109 0314 	add.w	r3, r9, #20
 8005138:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800513c:	9202      	str	r2, [sp, #8]
 800513e:	1b3a      	subs	r2, r7, r4
 8005140:	3a15      	subs	r2, #21
 8005142:	f022 0203 	bic.w	r2, r2, #3
 8005146:	3204      	adds	r2, #4
 8005148:	f104 0115 	add.w	r1, r4, #21
 800514c:	428f      	cmp	r7, r1
 800514e:	bf38      	it	cc
 8005150:	2204      	movcc	r2, #4
 8005152:	9201      	str	r2, [sp, #4]
 8005154:	9a02      	ldr	r2, [sp, #8]
 8005156:	9303      	str	r3, [sp, #12]
 8005158:	429a      	cmp	r2, r3
 800515a:	d80c      	bhi.n	8005176 <__multiply+0x9e>
 800515c:	2e00      	cmp	r6, #0
 800515e:	dd03      	ble.n	8005168 <__multiply+0x90>
 8005160:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005164:	2b00      	cmp	r3, #0
 8005166:	d05a      	beq.n	800521e <__multiply+0x146>
 8005168:	6106      	str	r6, [r0, #16]
 800516a:	b005      	add	sp, #20
 800516c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005170:	f843 2b04 	str.w	r2, [r3], #4
 8005174:	e7d8      	b.n	8005128 <__multiply+0x50>
 8005176:	f8b3 a000 	ldrh.w	sl, [r3]
 800517a:	f1ba 0f00 	cmp.w	sl, #0
 800517e:	d024      	beq.n	80051ca <__multiply+0xf2>
 8005180:	f104 0e14 	add.w	lr, r4, #20
 8005184:	46a9      	mov	r9, r5
 8005186:	f04f 0c00 	mov.w	ip, #0
 800518a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800518e:	f8d9 1000 	ldr.w	r1, [r9]
 8005192:	fa1f fb82 	uxth.w	fp, r2
 8005196:	b289      	uxth	r1, r1
 8005198:	fb0a 110b 	mla	r1, sl, fp, r1
 800519c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80051a0:	f8d9 2000 	ldr.w	r2, [r9]
 80051a4:	4461      	add	r1, ip
 80051a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80051aa:	fb0a c20b 	mla	r2, sl, fp, ip
 80051ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80051b2:	b289      	uxth	r1, r1
 80051b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80051b8:	4577      	cmp	r7, lr
 80051ba:	f849 1b04 	str.w	r1, [r9], #4
 80051be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80051c2:	d8e2      	bhi.n	800518a <__multiply+0xb2>
 80051c4:	9a01      	ldr	r2, [sp, #4]
 80051c6:	f845 c002 	str.w	ip, [r5, r2]
 80051ca:	9a03      	ldr	r2, [sp, #12]
 80051cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80051d0:	3304      	adds	r3, #4
 80051d2:	f1b9 0f00 	cmp.w	r9, #0
 80051d6:	d020      	beq.n	800521a <__multiply+0x142>
 80051d8:	6829      	ldr	r1, [r5, #0]
 80051da:	f104 0c14 	add.w	ip, r4, #20
 80051de:	46ae      	mov	lr, r5
 80051e0:	f04f 0a00 	mov.w	sl, #0
 80051e4:	f8bc b000 	ldrh.w	fp, [ip]
 80051e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80051ec:	fb09 220b 	mla	r2, r9, fp, r2
 80051f0:	4492      	add	sl, r2
 80051f2:	b289      	uxth	r1, r1
 80051f4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80051f8:	f84e 1b04 	str.w	r1, [lr], #4
 80051fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005200:	f8be 1000 	ldrh.w	r1, [lr]
 8005204:	0c12      	lsrs	r2, r2, #16
 8005206:	fb09 1102 	mla	r1, r9, r2, r1
 800520a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800520e:	4567      	cmp	r7, ip
 8005210:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005214:	d8e6      	bhi.n	80051e4 <__multiply+0x10c>
 8005216:	9a01      	ldr	r2, [sp, #4]
 8005218:	50a9      	str	r1, [r5, r2]
 800521a:	3504      	adds	r5, #4
 800521c:	e79a      	b.n	8005154 <__multiply+0x7c>
 800521e:	3e01      	subs	r6, #1
 8005220:	e79c      	b.n	800515c <__multiply+0x84>
 8005222:	bf00      	nop
 8005224:	080064a3 	.word	0x080064a3
 8005228:	08006514 	.word	0x08006514

0800522c <__pow5mult>:
 800522c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005230:	4615      	mov	r5, r2
 8005232:	f012 0203 	ands.w	r2, r2, #3
 8005236:	4606      	mov	r6, r0
 8005238:	460f      	mov	r7, r1
 800523a:	d007      	beq.n	800524c <__pow5mult+0x20>
 800523c:	4c25      	ldr	r4, [pc, #148]	; (80052d4 <__pow5mult+0xa8>)
 800523e:	3a01      	subs	r2, #1
 8005240:	2300      	movs	r3, #0
 8005242:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005246:	f7ff fe9b 	bl	8004f80 <__multadd>
 800524a:	4607      	mov	r7, r0
 800524c:	10ad      	asrs	r5, r5, #2
 800524e:	d03d      	beq.n	80052cc <__pow5mult+0xa0>
 8005250:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005252:	b97c      	cbnz	r4, 8005274 <__pow5mult+0x48>
 8005254:	2010      	movs	r0, #16
 8005256:	f7ff fe29 	bl	8004eac <malloc>
 800525a:	4602      	mov	r2, r0
 800525c:	6270      	str	r0, [r6, #36]	; 0x24
 800525e:	b928      	cbnz	r0, 800526c <__pow5mult+0x40>
 8005260:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <__pow5mult+0xac>)
 8005262:	481e      	ldr	r0, [pc, #120]	; (80052dc <__pow5mult+0xb0>)
 8005264:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005268:	f000 fc52 	bl	8005b10 <__assert_func>
 800526c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005270:	6004      	str	r4, [r0, #0]
 8005272:	60c4      	str	r4, [r0, #12]
 8005274:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005278:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800527c:	b94c      	cbnz	r4, 8005292 <__pow5mult+0x66>
 800527e:	f240 2171 	movw	r1, #625	; 0x271
 8005282:	4630      	mov	r0, r6
 8005284:	f7ff ff12 	bl	80050ac <__i2b>
 8005288:	2300      	movs	r3, #0
 800528a:	f8c8 0008 	str.w	r0, [r8, #8]
 800528e:	4604      	mov	r4, r0
 8005290:	6003      	str	r3, [r0, #0]
 8005292:	f04f 0900 	mov.w	r9, #0
 8005296:	07eb      	lsls	r3, r5, #31
 8005298:	d50a      	bpl.n	80052b0 <__pow5mult+0x84>
 800529a:	4639      	mov	r1, r7
 800529c:	4622      	mov	r2, r4
 800529e:	4630      	mov	r0, r6
 80052a0:	f7ff ff1a 	bl	80050d8 <__multiply>
 80052a4:	4639      	mov	r1, r7
 80052a6:	4680      	mov	r8, r0
 80052a8:	4630      	mov	r0, r6
 80052aa:	f7ff fe47 	bl	8004f3c <_Bfree>
 80052ae:	4647      	mov	r7, r8
 80052b0:	106d      	asrs	r5, r5, #1
 80052b2:	d00b      	beq.n	80052cc <__pow5mult+0xa0>
 80052b4:	6820      	ldr	r0, [r4, #0]
 80052b6:	b938      	cbnz	r0, 80052c8 <__pow5mult+0x9c>
 80052b8:	4622      	mov	r2, r4
 80052ba:	4621      	mov	r1, r4
 80052bc:	4630      	mov	r0, r6
 80052be:	f7ff ff0b 	bl	80050d8 <__multiply>
 80052c2:	6020      	str	r0, [r4, #0]
 80052c4:	f8c0 9000 	str.w	r9, [r0]
 80052c8:	4604      	mov	r4, r0
 80052ca:	e7e4      	b.n	8005296 <__pow5mult+0x6a>
 80052cc:	4638      	mov	r0, r7
 80052ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052d2:	bf00      	nop
 80052d4:	08006660 	.word	0x08006660
 80052d8:	08006431 	.word	0x08006431
 80052dc:	08006514 	.word	0x08006514

080052e0 <__lshift>:
 80052e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052e4:	460c      	mov	r4, r1
 80052e6:	6849      	ldr	r1, [r1, #4]
 80052e8:	6923      	ldr	r3, [r4, #16]
 80052ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80052ee:	68a3      	ldr	r3, [r4, #8]
 80052f0:	4607      	mov	r7, r0
 80052f2:	4691      	mov	r9, r2
 80052f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80052f8:	f108 0601 	add.w	r6, r8, #1
 80052fc:	42b3      	cmp	r3, r6
 80052fe:	db0b      	blt.n	8005318 <__lshift+0x38>
 8005300:	4638      	mov	r0, r7
 8005302:	f7ff fddb 	bl	8004ebc <_Balloc>
 8005306:	4605      	mov	r5, r0
 8005308:	b948      	cbnz	r0, 800531e <__lshift+0x3e>
 800530a:	4602      	mov	r2, r0
 800530c:	4b2a      	ldr	r3, [pc, #168]	; (80053b8 <__lshift+0xd8>)
 800530e:	482b      	ldr	r0, [pc, #172]	; (80053bc <__lshift+0xdc>)
 8005310:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005314:	f000 fbfc 	bl	8005b10 <__assert_func>
 8005318:	3101      	adds	r1, #1
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	e7ee      	b.n	80052fc <__lshift+0x1c>
 800531e:	2300      	movs	r3, #0
 8005320:	f100 0114 	add.w	r1, r0, #20
 8005324:	f100 0210 	add.w	r2, r0, #16
 8005328:	4618      	mov	r0, r3
 800532a:	4553      	cmp	r3, sl
 800532c:	db37      	blt.n	800539e <__lshift+0xbe>
 800532e:	6920      	ldr	r0, [r4, #16]
 8005330:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005334:	f104 0314 	add.w	r3, r4, #20
 8005338:	f019 091f 	ands.w	r9, r9, #31
 800533c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005340:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005344:	d02f      	beq.n	80053a6 <__lshift+0xc6>
 8005346:	f1c9 0e20 	rsb	lr, r9, #32
 800534a:	468a      	mov	sl, r1
 800534c:	f04f 0c00 	mov.w	ip, #0
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	fa02 f209 	lsl.w	r2, r2, r9
 8005356:	ea42 020c 	orr.w	r2, r2, ip
 800535a:	f84a 2b04 	str.w	r2, [sl], #4
 800535e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005362:	4298      	cmp	r0, r3
 8005364:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005368:	d8f2      	bhi.n	8005350 <__lshift+0x70>
 800536a:	1b03      	subs	r3, r0, r4
 800536c:	3b15      	subs	r3, #21
 800536e:	f023 0303 	bic.w	r3, r3, #3
 8005372:	3304      	adds	r3, #4
 8005374:	f104 0215 	add.w	r2, r4, #21
 8005378:	4290      	cmp	r0, r2
 800537a:	bf38      	it	cc
 800537c:	2304      	movcc	r3, #4
 800537e:	f841 c003 	str.w	ip, [r1, r3]
 8005382:	f1bc 0f00 	cmp.w	ip, #0
 8005386:	d001      	beq.n	800538c <__lshift+0xac>
 8005388:	f108 0602 	add.w	r6, r8, #2
 800538c:	3e01      	subs	r6, #1
 800538e:	4638      	mov	r0, r7
 8005390:	612e      	str	r6, [r5, #16]
 8005392:	4621      	mov	r1, r4
 8005394:	f7ff fdd2 	bl	8004f3c <_Bfree>
 8005398:	4628      	mov	r0, r5
 800539a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800539e:	f842 0f04 	str.w	r0, [r2, #4]!
 80053a2:	3301      	adds	r3, #1
 80053a4:	e7c1      	b.n	800532a <__lshift+0x4a>
 80053a6:	3904      	subs	r1, #4
 80053a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80053ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80053b0:	4298      	cmp	r0, r3
 80053b2:	d8f9      	bhi.n	80053a8 <__lshift+0xc8>
 80053b4:	e7ea      	b.n	800538c <__lshift+0xac>
 80053b6:	bf00      	nop
 80053b8:	080064a3 	.word	0x080064a3
 80053bc:	08006514 	.word	0x08006514

080053c0 <__mcmp>:
 80053c0:	b530      	push	{r4, r5, lr}
 80053c2:	6902      	ldr	r2, [r0, #16]
 80053c4:	690c      	ldr	r4, [r1, #16]
 80053c6:	1b12      	subs	r2, r2, r4
 80053c8:	d10e      	bne.n	80053e8 <__mcmp+0x28>
 80053ca:	f100 0314 	add.w	r3, r0, #20
 80053ce:	3114      	adds	r1, #20
 80053d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80053d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80053d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80053dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80053e0:	42a5      	cmp	r5, r4
 80053e2:	d003      	beq.n	80053ec <__mcmp+0x2c>
 80053e4:	d305      	bcc.n	80053f2 <__mcmp+0x32>
 80053e6:	2201      	movs	r2, #1
 80053e8:	4610      	mov	r0, r2
 80053ea:	bd30      	pop	{r4, r5, pc}
 80053ec:	4283      	cmp	r3, r0
 80053ee:	d3f3      	bcc.n	80053d8 <__mcmp+0x18>
 80053f0:	e7fa      	b.n	80053e8 <__mcmp+0x28>
 80053f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053f6:	e7f7      	b.n	80053e8 <__mcmp+0x28>

080053f8 <__mdiff>:
 80053f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fc:	460c      	mov	r4, r1
 80053fe:	4606      	mov	r6, r0
 8005400:	4611      	mov	r1, r2
 8005402:	4620      	mov	r0, r4
 8005404:	4690      	mov	r8, r2
 8005406:	f7ff ffdb 	bl	80053c0 <__mcmp>
 800540a:	1e05      	subs	r5, r0, #0
 800540c:	d110      	bne.n	8005430 <__mdiff+0x38>
 800540e:	4629      	mov	r1, r5
 8005410:	4630      	mov	r0, r6
 8005412:	f7ff fd53 	bl	8004ebc <_Balloc>
 8005416:	b930      	cbnz	r0, 8005426 <__mdiff+0x2e>
 8005418:	4b3a      	ldr	r3, [pc, #232]	; (8005504 <__mdiff+0x10c>)
 800541a:	4602      	mov	r2, r0
 800541c:	f240 2132 	movw	r1, #562	; 0x232
 8005420:	4839      	ldr	r0, [pc, #228]	; (8005508 <__mdiff+0x110>)
 8005422:	f000 fb75 	bl	8005b10 <__assert_func>
 8005426:	2301      	movs	r3, #1
 8005428:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800542c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005430:	bfa4      	itt	ge
 8005432:	4643      	movge	r3, r8
 8005434:	46a0      	movge	r8, r4
 8005436:	4630      	mov	r0, r6
 8005438:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800543c:	bfa6      	itte	ge
 800543e:	461c      	movge	r4, r3
 8005440:	2500      	movge	r5, #0
 8005442:	2501      	movlt	r5, #1
 8005444:	f7ff fd3a 	bl	8004ebc <_Balloc>
 8005448:	b920      	cbnz	r0, 8005454 <__mdiff+0x5c>
 800544a:	4b2e      	ldr	r3, [pc, #184]	; (8005504 <__mdiff+0x10c>)
 800544c:	4602      	mov	r2, r0
 800544e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005452:	e7e5      	b.n	8005420 <__mdiff+0x28>
 8005454:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005458:	6926      	ldr	r6, [r4, #16]
 800545a:	60c5      	str	r5, [r0, #12]
 800545c:	f104 0914 	add.w	r9, r4, #20
 8005460:	f108 0514 	add.w	r5, r8, #20
 8005464:	f100 0e14 	add.w	lr, r0, #20
 8005468:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800546c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005470:	f108 0210 	add.w	r2, r8, #16
 8005474:	46f2      	mov	sl, lr
 8005476:	2100      	movs	r1, #0
 8005478:	f859 3b04 	ldr.w	r3, [r9], #4
 800547c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005480:	fa1f f883 	uxth.w	r8, r3
 8005484:	fa11 f18b 	uxtah	r1, r1, fp
 8005488:	0c1b      	lsrs	r3, r3, #16
 800548a:	eba1 0808 	sub.w	r8, r1, r8
 800548e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005492:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005496:	fa1f f888 	uxth.w	r8, r8
 800549a:	1419      	asrs	r1, r3, #16
 800549c:	454e      	cmp	r6, r9
 800549e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80054a2:	f84a 3b04 	str.w	r3, [sl], #4
 80054a6:	d8e7      	bhi.n	8005478 <__mdiff+0x80>
 80054a8:	1b33      	subs	r3, r6, r4
 80054aa:	3b15      	subs	r3, #21
 80054ac:	f023 0303 	bic.w	r3, r3, #3
 80054b0:	3304      	adds	r3, #4
 80054b2:	3415      	adds	r4, #21
 80054b4:	42a6      	cmp	r6, r4
 80054b6:	bf38      	it	cc
 80054b8:	2304      	movcc	r3, #4
 80054ba:	441d      	add	r5, r3
 80054bc:	4473      	add	r3, lr
 80054be:	469e      	mov	lr, r3
 80054c0:	462e      	mov	r6, r5
 80054c2:	4566      	cmp	r6, ip
 80054c4:	d30e      	bcc.n	80054e4 <__mdiff+0xec>
 80054c6:	f10c 0203 	add.w	r2, ip, #3
 80054ca:	1b52      	subs	r2, r2, r5
 80054cc:	f022 0203 	bic.w	r2, r2, #3
 80054d0:	3d03      	subs	r5, #3
 80054d2:	45ac      	cmp	ip, r5
 80054d4:	bf38      	it	cc
 80054d6:	2200      	movcc	r2, #0
 80054d8:	441a      	add	r2, r3
 80054da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80054de:	b17b      	cbz	r3, 8005500 <__mdiff+0x108>
 80054e0:	6107      	str	r7, [r0, #16]
 80054e2:	e7a3      	b.n	800542c <__mdiff+0x34>
 80054e4:	f856 8b04 	ldr.w	r8, [r6], #4
 80054e8:	fa11 f288 	uxtah	r2, r1, r8
 80054ec:	1414      	asrs	r4, r2, #16
 80054ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80054f2:	b292      	uxth	r2, r2
 80054f4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80054f8:	f84e 2b04 	str.w	r2, [lr], #4
 80054fc:	1421      	asrs	r1, r4, #16
 80054fe:	e7e0      	b.n	80054c2 <__mdiff+0xca>
 8005500:	3f01      	subs	r7, #1
 8005502:	e7ea      	b.n	80054da <__mdiff+0xe2>
 8005504:	080064a3 	.word	0x080064a3
 8005508:	08006514 	.word	0x08006514

0800550c <__d2b>:
 800550c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005510:	4689      	mov	r9, r1
 8005512:	2101      	movs	r1, #1
 8005514:	ec57 6b10 	vmov	r6, r7, d0
 8005518:	4690      	mov	r8, r2
 800551a:	f7ff fccf 	bl	8004ebc <_Balloc>
 800551e:	4604      	mov	r4, r0
 8005520:	b930      	cbnz	r0, 8005530 <__d2b+0x24>
 8005522:	4602      	mov	r2, r0
 8005524:	4b25      	ldr	r3, [pc, #148]	; (80055bc <__d2b+0xb0>)
 8005526:	4826      	ldr	r0, [pc, #152]	; (80055c0 <__d2b+0xb4>)
 8005528:	f240 310a 	movw	r1, #778	; 0x30a
 800552c:	f000 faf0 	bl	8005b10 <__assert_func>
 8005530:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005534:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005538:	bb35      	cbnz	r5, 8005588 <__d2b+0x7c>
 800553a:	2e00      	cmp	r6, #0
 800553c:	9301      	str	r3, [sp, #4]
 800553e:	d028      	beq.n	8005592 <__d2b+0x86>
 8005540:	4668      	mov	r0, sp
 8005542:	9600      	str	r6, [sp, #0]
 8005544:	f7ff fd82 	bl	800504c <__lo0bits>
 8005548:	9900      	ldr	r1, [sp, #0]
 800554a:	b300      	cbz	r0, 800558e <__d2b+0x82>
 800554c:	9a01      	ldr	r2, [sp, #4]
 800554e:	f1c0 0320 	rsb	r3, r0, #32
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	430b      	orrs	r3, r1
 8005558:	40c2      	lsrs	r2, r0
 800555a:	6163      	str	r3, [r4, #20]
 800555c:	9201      	str	r2, [sp, #4]
 800555e:	9b01      	ldr	r3, [sp, #4]
 8005560:	61a3      	str	r3, [r4, #24]
 8005562:	2b00      	cmp	r3, #0
 8005564:	bf14      	ite	ne
 8005566:	2202      	movne	r2, #2
 8005568:	2201      	moveq	r2, #1
 800556a:	6122      	str	r2, [r4, #16]
 800556c:	b1d5      	cbz	r5, 80055a4 <__d2b+0x98>
 800556e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005572:	4405      	add	r5, r0
 8005574:	f8c9 5000 	str.w	r5, [r9]
 8005578:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800557c:	f8c8 0000 	str.w	r0, [r8]
 8005580:	4620      	mov	r0, r4
 8005582:	b003      	add	sp, #12
 8005584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800558c:	e7d5      	b.n	800553a <__d2b+0x2e>
 800558e:	6161      	str	r1, [r4, #20]
 8005590:	e7e5      	b.n	800555e <__d2b+0x52>
 8005592:	a801      	add	r0, sp, #4
 8005594:	f7ff fd5a 	bl	800504c <__lo0bits>
 8005598:	9b01      	ldr	r3, [sp, #4]
 800559a:	6163      	str	r3, [r4, #20]
 800559c:	2201      	movs	r2, #1
 800559e:	6122      	str	r2, [r4, #16]
 80055a0:	3020      	adds	r0, #32
 80055a2:	e7e3      	b.n	800556c <__d2b+0x60>
 80055a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80055a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80055ac:	f8c9 0000 	str.w	r0, [r9]
 80055b0:	6918      	ldr	r0, [r3, #16]
 80055b2:	f7ff fd2b 	bl	800500c <__hi0bits>
 80055b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80055ba:	e7df      	b.n	800557c <__d2b+0x70>
 80055bc:	080064a3 	.word	0x080064a3
 80055c0:	08006514 	.word	0x08006514

080055c4 <_calloc_r>:
 80055c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055c6:	fba1 2402 	umull	r2, r4, r1, r2
 80055ca:	b94c      	cbnz	r4, 80055e0 <_calloc_r+0x1c>
 80055cc:	4611      	mov	r1, r2
 80055ce:	9201      	str	r2, [sp, #4]
 80055d0:	f000 f87a 	bl	80056c8 <_malloc_r>
 80055d4:	9a01      	ldr	r2, [sp, #4]
 80055d6:	4605      	mov	r5, r0
 80055d8:	b930      	cbnz	r0, 80055e8 <_calloc_r+0x24>
 80055da:	4628      	mov	r0, r5
 80055dc:	b003      	add	sp, #12
 80055de:	bd30      	pop	{r4, r5, pc}
 80055e0:	220c      	movs	r2, #12
 80055e2:	6002      	str	r2, [r0, #0]
 80055e4:	2500      	movs	r5, #0
 80055e6:	e7f8      	b.n	80055da <_calloc_r+0x16>
 80055e8:	4621      	mov	r1, r4
 80055ea:	f7fd fe5f 	bl	80032ac <memset>
 80055ee:	e7f4      	b.n	80055da <_calloc_r+0x16>

080055f0 <_free_r>:
 80055f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055f2:	2900      	cmp	r1, #0
 80055f4:	d044      	beq.n	8005680 <_free_r+0x90>
 80055f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055fa:	9001      	str	r0, [sp, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f1a1 0404 	sub.w	r4, r1, #4
 8005602:	bfb8      	it	lt
 8005604:	18e4      	addlt	r4, r4, r3
 8005606:	f000 fb23 	bl	8005c50 <__malloc_lock>
 800560a:	4a1e      	ldr	r2, [pc, #120]	; (8005684 <_free_r+0x94>)
 800560c:	9801      	ldr	r0, [sp, #4]
 800560e:	6813      	ldr	r3, [r2, #0]
 8005610:	b933      	cbnz	r3, 8005620 <_free_r+0x30>
 8005612:	6063      	str	r3, [r4, #4]
 8005614:	6014      	str	r4, [r2, #0]
 8005616:	b003      	add	sp, #12
 8005618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800561c:	f000 bb1e 	b.w	8005c5c <__malloc_unlock>
 8005620:	42a3      	cmp	r3, r4
 8005622:	d908      	bls.n	8005636 <_free_r+0x46>
 8005624:	6825      	ldr	r5, [r4, #0]
 8005626:	1961      	adds	r1, r4, r5
 8005628:	428b      	cmp	r3, r1
 800562a:	bf01      	itttt	eq
 800562c:	6819      	ldreq	r1, [r3, #0]
 800562e:	685b      	ldreq	r3, [r3, #4]
 8005630:	1949      	addeq	r1, r1, r5
 8005632:	6021      	streq	r1, [r4, #0]
 8005634:	e7ed      	b.n	8005612 <_free_r+0x22>
 8005636:	461a      	mov	r2, r3
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	b10b      	cbz	r3, 8005640 <_free_r+0x50>
 800563c:	42a3      	cmp	r3, r4
 800563e:	d9fa      	bls.n	8005636 <_free_r+0x46>
 8005640:	6811      	ldr	r1, [r2, #0]
 8005642:	1855      	adds	r5, r2, r1
 8005644:	42a5      	cmp	r5, r4
 8005646:	d10b      	bne.n	8005660 <_free_r+0x70>
 8005648:	6824      	ldr	r4, [r4, #0]
 800564a:	4421      	add	r1, r4
 800564c:	1854      	adds	r4, r2, r1
 800564e:	42a3      	cmp	r3, r4
 8005650:	6011      	str	r1, [r2, #0]
 8005652:	d1e0      	bne.n	8005616 <_free_r+0x26>
 8005654:	681c      	ldr	r4, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	6053      	str	r3, [r2, #4]
 800565a:	4421      	add	r1, r4
 800565c:	6011      	str	r1, [r2, #0]
 800565e:	e7da      	b.n	8005616 <_free_r+0x26>
 8005660:	d902      	bls.n	8005668 <_free_r+0x78>
 8005662:	230c      	movs	r3, #12
 8005664:	6003      	str	r3, [r0, #0]
 8005666:	e7d6      	b.n	8005616 <_free_r+0x26>
 8005668:	6825      	ldr	r5, [r4, #0]
 800566a:	1961      	adds	r1, r4, r5
 800566c:	428b      	cmp	r3, r1
 800566e:	bf04      	itt	eq
 8005670:	6819      	ldreq	r1, [r3, #0]
 8005672:	685b      	ldreq	r3, [r3, #4]
 8005674:	6063      	str	r3, [r4, #4]
 8005676:	bf04      	itt	eq
 8005678:	1949      	addeq	r1, r1, r5
 800567a:	6021      	streq	r1, [r4, #0]
 800567c:	6054      	str	r4, [r2, #4]
 800567e:	e7ca      	b.n	8005616 <_free_r+0x26>
 8005680:	b003      	add	sp, #12
 8005682:	bd30      	pop	{r4, r5, pc}
 8005684:	2000053c 	.word	0x2000053c

08005688 <sbrk_aligned>:
 8005688:	b570      	push	{r4, r5, r6, lr}
 800568a:	4e0e      	ldr	r6, [pc, #56]	; (80056c4 <sbrk_aligned+0x3c>)
 800568c:	460c      	mov	r4, r1
 800568e:	6831      	ldr	r1, [r6, #0]
 8005690:	4605      	mov	r5, r0
 8005692:	b911      	cbnz	r1, 800569a <sbrk_aligned+0x12>
 8005694:	f000 f9e8 	bl	8005a68 <_sbrk_r>
 8005698:	6030      	str	r0, [r6, #0]
 800569a:	4621      	mov	r1, r4
 800569c:	4628      	mov	r0, r5
 800569e:	f000 f9e3 	bl	8005a68 <_sbrk_r>
 80056a2:	1c43      	adds	r3, r0, #1
 80056a4:	d00a      	beq.n	80056bc <sbrk_aligned+0x34>
 80056a6:	1cc4      	adds	r4, r0, #3
 80056a8:	f024 0403 	bic.w	r4, r4, #3
 80056ac:	42a0      	cmp	r0, r4
 80056ae:	d007      	beq.n	80056c0 <sbrk_aligned+0x38>
 80056b0:	1a21      	subs	r1, r4, r0
 80056b2:	4628      	mov	r0, r5
 80056b4:	f000 f9d8 	bl	8005a68 <_sbrk_r>
 80056b8:	3001      	adds	r0, #1
 80056ba:	d101      	bne.n	80056c0 <sbrk_aligned+0x38>
 80056bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80056c0:	4620      	mov	r0, r4
 80056c2:	bd70      	pop	{r4, r5, r6, pc}
 80056c4:	20000540 	.word	0x20000540

080056c8 <_malloc_r>:
 80056c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056cc:	1ccd      	adds	r5, r1, #3
 80056ce:	f025 0503 	bic.w	r5, r5, #3
 80056d2:	3508      	adds	r5, #8
 80056d4:	2d0c      	cmp	r5, #12
 80056d6:	bf38      	it	cc
 80056d8:	250c      	movcc	r5, #12
 80056da:	2d00      	cmp	r5, #0
 80056dc:	4607      	mov	r7, r0
 80056de:	db01      	blt.n	80056e4 <_malloc_r+0x1c>
 80056e0:	42a9      	cmp	r1, r5
 80056e2:	d905      	bls.n	80056f0 <_malloc_r+0x28>
 80056e4:	230c      	movs	r3, #12
 80056e6:	603b      	str	r3, [r7, #0]
 80056e8:	2600      	movs	r6, #0
 80056ea:	4630      	mov	r0, r6
 80056ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f0:	4e2e      	ldr	r6, [pc, #184]	; (80057ac <_malloc_r+0xe4>)
 80056f2:	f000 faad 	bl	8005c50 <__malloc_lock>
 80056f6:	6833      	ldr	r3, [r6, #0]
 80056f8:	461c      	mov	r4, r3
 80056fa:	bb34      	cbnz	r4, 800574a <_malloc_r+0x82>
 80056fc:	4629      	mov	r1, r5
 80056fe:	4638      	mov	r0, r7
 8005700:	f7ff ffc2 	bl	8005688 <sbrk_aligned>
 8005704:	1c43      	adds	r3, r0, #1
 8005706:	4604      	mov	r4, r0
 8005708:	d14d      	bne.n	80057a6 <_malloc_r+0xde>
 800570a:	6834      	ldr	r4, [r6, #0]
 800570c:	4626      	mov	r6, r4
 800570e:	2e00      	cmp	r6, #0
 8005710:	d140      	bne.n	8005794 <_malloc_r+0xcc>
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	4631      	mov	r1, r6
 8005716:	4638      	mov	r0, r7
 8005718:	eb04 0803 	add.w	r8, r4, r3
 800571c:	f000 f9a4 	bl	8005a68 <_sbrk_r>
 8005720:	4580      	cmp	r8, r0
 8005722:	d13a      	bne.n	800579a <_malloc_r+0xd2>
 8005724:	6821      	ldr	r1, [r4, #0]
 8005726:	3503      	adds	r5, #3
 8005728:	1a6d      	subs	r5, r5, r1
 800572a:	f025 0503 	bic.w	r5, r5, #3
 800572e:	3508      	adds	r5, #8
 8005730:	2d0c      	cmp	r5, #12
 8005732:	bf38      	it	cc
 8005734:	250c      	movcc	r5, #12
 8005736:	4629      	mov	r1, r5
 8005738:	4638      	mov	r0, r7
 800573a:	f7ff ffa5 	bl	8005688 <sbrk_aligned>
 800573e:	3001      	adds	r0, #1
 8005740:	d02b      	beq.n	800579a <_malloc_r+0xd2>
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	442b      	add	r3, r5
 8005746:	6023      	str	r3, [r4, #0]
 8005748:	e00e      	b.n	8005768 <_malloc_r+0xa0>
 800574a:	6822      	ldr	r2, [r4, #0]
 800574c:	1b52      	subs	r2, r2, r5
 800574e:	d41e      	bmi.n	800578e <_malloc_r+0xc6>
 8005750:	2a0b      	cmp	r2, #11
 8005752:	d916      	bls.n	8005782 <_malloc_r+0xba>
 8005754:	1961      	adds	r1, r4, r5
 8005756:	42a3      	cmp	r3, r4
 8005758:	6025      	str	r5, [r4, #0]
 800575a:	bf18      	it	ne
 800575c:	6059      	strne	r1, [r3, #4]
 800575e:	6863      	ldr	r3, [r4, #4]
 8005760:	bf08      	it	eq
 8005762:	6031      	streq	r1, [r6, #0]
 8005764:	5162      	str	r2, [r4, r5]
 8005766:	604b      	str	r3, [r1, #4]
 8005768:	4638      	mov	r0, r7
 800576a:	f104 060b 	add.w	r6, r4, #11
 800576e:	f000 fa75 	bl	8005c5c <__malloc_unlock>
 8005772:	f026 0607 	bic.w	r6, r6, #7
 8005776:	1d23      	adds	r3, r4, #4
 8005778:	1af2      	subs	r2, r6, r3
 800577a:	d0b6      	beq.n	80056ea <_malloc_r+0x22>
 800577c:	1b9b      	subs	r3, r3, r6
 800577e:	50a3      	str	r3, [r4, r2]
 8005780:	e7b3      	b.n	80056ea <_malloc_r+0x22>
 8005782:	6862      	ldr	r2, [r4, #4]
 8005784:	42a3      	cmp	r3, r4
 8005786:	bf0c      	ite	eq
 8005788:	6032      	streq	r2, [r6, #0]
 800578a:	605a      	strne	r2, [r3, #4]
 800578c:	e7ec      	b.n	8005768 <_malloc_r+0xa0>
 800578e:	4623      	mov	r3, r4
 8005790:	6864      	ldr	r4, [r4, #4]
 8005792:	e7b2      	b.n	80056fa <_malloc_r+0x32>
 8005794:	4634      	mov	r4, r6
 8005796:	6876      	ldr	r6, [r6, #4]
 8005798:	e7b9      	b.n	800570e <_malloc_r+0x46>
 800579a:	230c      	movs	r3, #12
 800579c:	603b      	str	r3, [r7, #0]
 800579e:	4638      	mov	r0, r7
 80057a0:	f000 fa5c 	bl	8005c5c <__malloc_unlock>
 80057a4:	e7a1      	b.n	80056ea <_malloc_r+0x22>
 80057a6:	6025      	str	r5, [r4, #0]
 80057a8:	e7de      	b.n	8005768 <_malloc_r+0xa0>
 80057aa:	bf00      	nop
 80057ac:	2000053c 	.word	0x2000053c

080057b0 <__ssputs_r>:
 80057b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057b4:	688e      	ldr	r6, [r1, #8]
 80057b6:	429e      	cmp	r6, r3
 80057b8:	4682      	mov	sl, r0
 80057ba:	460c      	mov	r4, r1
 80057bc:	4690      	mov	r8, r2
 80057be:	461f      	mov	r7, r3
 80057c0:	d838      	bhi.n	8005834 <__ssputs_r+0x84>
 80057c2:	898a      	ldrh	r2, [r1, #12]
 80057c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057c8:	d032      	beq.n	8005830 <__ssputs_r+0x80>
 80057ca:	6825      	ldr	r5, [r4, #0]
 80057cc:	6909      	ldr	r1, [r1, #16]
 80057ce:	eba5 0901 	sub.w	r9, r5, r1
 80057d2:	6965      	ldr	r5, [r4, #20]
 80057d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057dc:	3301      	adds	r3, #1
 80057de:	444b      	add	r3, r9
 80057e0:	106d      	asrs	r5, r5, #1
 80057e2:	429d      	cmp	r5, r3
 80057e4:	bf38      	it	cc
 80057e6:	461d      	movcc	r5, r3
 80057e8:	0553      	lsls	r3, r2, #21
 80057ea:	d531      	bpl.n	8005850 <__ssputs_r+0xa0>
 80057ec:	4629      	mov	r1, r5
 80057ee:	f7ff ff6b 	bl	80056c8 <_malloc_r>
 80057f2:	4606      	mov	r6, r0
 80057f4:	b950      	cbnz	r0, 800580c <__ssputs_r+0x5c>
 80057f6:	230c      	movs	r3, #12
 80057f8:	f8ca 3000 	str.w	r3, [sl]
 80057fc:	89a3      	ldrh	r3, [r4, #12]
 80057fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005802:	81a3      	strh	r3, [r4, #12]
 8005804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800580c:	6921      	ldr	r1, [r4, #16]
 800580e:	464a      	mov	r2, r9
 8005810:	f7fd fd3e 	bl	8003290 <memcpy>
 8005814:	89a3      	ldrh	r3, [r4, #12]
 8005816:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800581a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800581e:	81a3      	strh	r3, [r4, #12]
 8005820:	6126      	str	r6, [r4, #16]
 8005822:	6165      	str	r5, [r4, #20]
 8005824:	444e      	add	r6, r9
 8005826:	eba5 0509 	sub.w	r5, r5, r9
 800582a:	6026      	str	r6, [r4, #0]
 800582c:	60a5      	str	r5, [r4, #8]
 800582e:	463e      	mov	r6, r7
 8005830:	42be      	cmp	r6, r7
 8005832:	d900      	bls.n	8005836 <__ssputs_r+0x86>
 8005834:	463e      	mov	r6, r7
 8005836:	6820      	ldr	r0, [r4, #0]
 8005838:	4632      	mov	r2, r6
 800583a:	4641      	mov	r1, r8
 800583c:	f000 f9ee 	bl	8005c1c <memmove>
 8005840:	68a3      	ldr	r3, [r4, #8]
 8005842:	1b9b      	subs	r3, r3, r6
 8005844:	60a3      	str	r3, [r4, #8]
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	4433      	add	r3, r6
 800584a:	6023      	str	r3, [r4, #0]
 800584c:	2000      	movs	r0, #0
 800584e:	e7db      	b.n	8005808 <__ssputs_r+0x58>
 8005850:	462a      	mov	r2, r5
 8005852:	f000 fa09 	bl	8005c68 <_realloc_r>
 8005856:	4606      	mov	r6, r0
 8005858:	2800      	cmp	r0, #0
 800585a:	d1e1      	bne.n	8005820 <__ssputs_r+0x70>
 800585c:	6921      	ldr	r1, [r4, #16]
 800585e:	4650      	mov	r0, sl
 8005860:	f7ff fec6 	bl	80055f0 <_free_r>
 8005864:	e7c7      	b.n	80057f6 <__ssputs_r+0x46>
	...

08005868 <_svfiprintf_r>:
 8005868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800586c:	4698      	mov	r8, r3
 800586e:	898b      	ldrh	r3, [r1, #12]
 8005870:	061b      	lsls	r3, r3, #24
 8005872:	b09d      	sub	sp, #116	; 0x74
 8005874:	4607      	mov	r7, r0
 8005876:	460d      	mov	r5, r1
 8005878:	4614      	mov	r4, r2
 800587a:	d50e      	bpl.n	800589a <_svfiprintf_r+0x32>
 800587c:	690b      	ldr	r3, [r1, #16]
 800587e:	b963      	cbnz	r3, 800589a <_svfiprintf_r+0x32>
 8005880:	2140      	movs	r1, #64	; 0x40
 8005882:	f7ff ff21 	bl	80056c8 <_malloc_r>
 8005886:	6028      	str	r0, [r5, #0]
 8005888:	6128      	str	r0, [r5, #16]
 800588a:	b920      	cbnz	r0, 8005896 <_svfiprintf_r+0x2e>
 800588c:	230c      	movs	r3, #12
 800588e:	603b      	str	r3, [r7, #0]
 8005890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005894:	e0d1      	b.n	8005a3a <_svfiprintf_r+0x1d2>
 8005896:	2340      	movs	r3, #64	; 0x40
 8005898:	616b      	str	r3, [r5, #20]
 800589a:	2300      	movs	r3, #0
 800589c:	9309      	str	r3, [sp, #36]	; 0x24
 800589e:	2320      	movs	r3, #32
 80058a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80058a8:	2330      	movs	r3, #48	; 0x30
 80058aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005a54 <_svfiprintf_r+0x1ec>
 80058ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058b2:	f04f 0901 	mov.w	r9, #1
 80058b6:	4623      	mov	r3, r4
 80058b8:	469a      	mov	sl, r3
 80058ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058be:	b10a      	cbz	r2, 80058c4 <_svfiprintf_r+0x5c>
 80058c0:	2a25      	cmp	r2, #37	; 0x25
 80058c2:	d1f9      	bne.n	80058b8 <_svfiprintf_r+0x50>
 80058c4:	ebba 0b04 	subs.w	fp, sl, r4
 80058c8:	d00b      	beq.n	80058e2 <_svfiprintf_r+0x7a>
 80058ca:	465b      	mov	r3, fp
 80058cc:	4622      	mov	r2, r4
 80058ce:	4629      	mov	r1, r5
 80058d0:	4638      	mov	r0, r7
 80058d2:	f7ff ff6d 	bl	80057b0 <__ssputs_r>
 80058d6:	3001      	adds	r0, #1
 80058d8:	f000 80aa 	beq.w	8005a30 <_svfiprintf_r+0x1c8>
 80058dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058de:	445a      	add	r2, fp
 80058e0:	9209      	str	r2, [sp, #36]	; 0x24
 80058e2:	f89a 3000 	ldrb.w	r3, [sl]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 80a2 	beq.w	8005a30 <_svfiprintf_r+0x1c8>
 80058ec:	2300      	movs	r3, #0
 80058ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058f6:	f10a 0a01 	add.w	sl, sl, #1
 80058fa:	9304      	str	r3, [sp, #16]
 80058fc:	9307      	str	r3, [sp, #28]
 80058fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005902:	931a      	str	r3, [sp, #104]	; 0x68
 8005904:	4654      	mov	r4, sl
 8005906:	2205      	movs	r2, #5
 8005908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800590c:	4851      	ldr	r0, [pc, #324]	; (8005a54 <_svfiprintf_r+0x1ec>)
 800590e:	f7fa fc67 	bl	80001e0 <memchr>
 8005912:	9a04      	ldr	r2, [sp, #16]
 8005914:	b9d8      	cbnz	r0, 800594e <_svfiprintf_r+0xe6>
 8005916:	06d0      	lsls	r0, r2, #27
 8005918:	bf44      	itt	mi
 800591a:	2320      	movmi	r3, #32
 800591c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005920:	0711      	lsls	r1, r2, #28
 8005922:	bf44      	itt	mi
 8005924:	232b      	movmi	r3, #43	; 0x2b
 8005926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800592a:	f89a 3000 	ldrb.w	r3, [sl]
 800592e:	2b2a      	cmp	r3, #42	; 0x2a
 8005930:	d015      	beq.n	800595e <_svfiprintf_r+0xf6>
 8005932:	9a07      	ldr	r2, [sp, #28]
 8005934:	4654      	mov	r4, sl
 8005936:	2000      	movs	r0, #0
 8005938:	f04f 0c0a 	mov.w	ip, #10
 800593c:	4621      	mov	r1, r4
 800593e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005942:	3b30      	subs	r3, #48	; 0x30
 8005944:	2b09      	cmp	r3, #9
 8005946:	d94e      	bls.n	80059e6 <_svfiprintf_r+0x17e>
 8005948:	b1b0      	cbz	r0, 8005978 <_svfiprintf_r+0x110>
 800594a:	9207      	str	r2, [sp, #28]
 800594c:	e014      	b.n	8005978 <_svfiprintf_r+0x110>
 800594e:	eba0 0308 	sub.w	r3, r0, r8
 8005952:	fa09 f303 	lsl.w	r3, r9, r3
 8005956:	4313      	orrs	r3, r2
 8005958:	9304      	str	r3, [sp, #16]
 800595a:	46a2      	mov	sl, r4
 800595c:	e7d2      	b.n	8005904 <_svfiprintf_r+0x9c>
 800595e:	9b03      	ldr	r3, [sp, #12]
 8005960:	1d19      	adds	r1, r3, #4
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	9103      	str	r1, [sp, #12]
 8005966:	2b00      	cmp	r3, #0
 8005968:	bfbb      	ittet	lt
 800596a:	425b      	neglt	r3, r3
 800596c:	f042 0202 	orrlt.w	r2, r2, #2
 8005970:	9307      	strge	r3, [sp, #28]
 8005972:	9307      	strlt	r3, [sp, #28]
 8005974:	bfb8      	it	lt
 8005976:	9204      	strlt	r2, [sp, #16]
 8005978:	7823      	ldrb	r3, [r4, #0]
 800597a:	2b2e      	cmp	r3, #46	; 0x2e
 800597c:	d10c      	bne.n	8005998 <_svfiprintf_r+0x130>
 800597e:	7863      	ldrb	r3, [r4, #1]
 8005980:	2b2a      	cmp	r3, #42	; 0x2a
 8005982:	d135      	bne.n	80059f0 <_svfiprintf_r+0x188>
 8005984:	9b03      	ldr	r3, [sp, #12]
 8005986:	1d1a      	adds	r2, r3, #4
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	9203      	str	r2, [sp, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	bfb8      	it	lt
 8005990:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005994:	3402      	adds	r4, #2
 8005996:	9305      	str	r3, [sp, #20]
 8005998:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005a64 <_svfiprintf_r+0x1fc>
 800599c:	7821      	ldrb	r1, [r4, #0]
 800599e:	2203      	movs	r2, #3
 80059a0:	4650      	mov	r0, sl
 80059a2:	f7fa fc1d 	bl	80001e0 <memchr>
 80059a6:	b140      	cbz	r0, 80059ba <_svfiprintf_r+0x152>
 80059a8:	2340      	movs	r3, #64	; 0x40
 80059aa:	eba0 000a 	sub.w	r0, r0, sl
 80059ae:	fa03 f000 	lsl.w	r0, r3, r0
 80059b2:	9b04      	ldr	r3, [sp, #16]
 80059b4:	4303      	orrs	r3, r0
 80059b6:	3401      	adds	r4, #1
 80059b8:	9304      	str	r3, [sp, #16]
 80059ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059be:	4826      	ldr	r0, [pc, #152]	; (8005a58 <_svfiprintf_r+0x1f0>)
 80059c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059c4:	2206      	movs	r2, #6
 80059c6:	f7fa fc0b 	bl	80001e0 <memchr>
 80059ca:	2800      	cmp	r0, #0
 80059cc:	d038      	beq.n	8005a40 <_svfiprintf_r+0x1d8>
 80059ce:	4b23      	ldr	r3, [pc, #140]	; (8005a5c <_svfiprintf_r+0x1f4>)
 80059d0:	bb1b      	cbnz	r3, 8005a1a <_svfiprintf_r+0x1b2>
 80059d2:	9b03      	ldr	r3, [sp, #12]
 80059d4:	3307      	adds	r3, #7
 80059d6:	f023 0307 	bic.w	r3, r3, #7
 80059da:	3308      	adds	r3, #8
 80059dc:	9303      	str	r3, [sp, #12]
 80059de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e0:	4433      	add	r3, r6
 80059e2:	9309      	str	r3, [sp, #36]	; 0x24
 80059e4:	e767      	b.n	80058b6 <_svfiprintf_r+0x4e>
 80059e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80059ea:	460c      	mov	r4, r1
 80059ec:	2001      	movs	r0, #1
 80059ee:	e7a5      	b.n	800593c <_svfiprintf_r+0xd4>
 80059f0:	2300      	movs	r3, #0
 80059f2:	3401      	adds	r4, #1
 80059f4:	9305      	str	r3, [sp, #20]
 80059f6:	4619      	mov	r1, r3
 80059f8:	f04f 0c0a 	mov.w	ip, #10
 80059fc:	4620      	mov	r0, r4
 80059fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a02:	3a30      	subs	r2, #48	; 0x30
 8005a04:	2a09      	cmp	r2, #9
 8005a06:	d903      	bls.n	8005a10 <_svfiprintf_r+0x1a8>
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0c5      	beq.n	8005998 <_svfiprintf_r+0x130>
 8005a0c:	9105      	str	r1, [sp, #20]
 8005a0e:	e7c3      	b.n	8005998 <_svfiprintf_r+0x130>
 8005a10:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a14:	4604      	mov	r4, r0
 8005a16:	2301      	movs	r3, #1
 8005a18:	e7f0      	b.n	80059fc <_svfiprintf_r+0x194>
 8005a1a:	ab03      	add	r3, sp, #12
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	462a      	mov	r2, r5
 8005a20:	4b0f      	ldr	r3, [pc, #60]	; (8005a60 <_svfiprintf_r+0x1f8>)
 8005a22:	a904      	add	r1, sp, #16
 8005a24:	4638      	mov	r0, r7
 8005a26:	f7fd fce9 	bl	80033fc <_printf_float>
 8005a2a:	1c42      	adds	r2, r0, #1
 8005a2c:	4606      	mov	r6, r0
 8005a2e:	d1d6      	bne.n	80059de <_svfiprintf_r+0x176>
 8005a30:	89ab      	ldrh	r3, [r5, #12]
 8005a32:	065b      	lsls	r3, r3, #25
 8005a34:	f53f af2c 	bmi.w	8005890 <_svfiprintf_r+0x28>
 8005a38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a3a:	b01d      	add	sp, #116	; 0x74
 8005a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a40:	ab03      	add	r3, sp, #12
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	462a      	mov	r2, r5
 8005a46:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <_svfiprintf_r+0x1f8>)
 8005a48:	a904      	add	r1, sp, #16
 8005a4a:	4638      	mov	r0, r7
 8005a4c:	f7fd ff7a 	bl	8003944 <_printf_i>
 8005a50:	e7eb      	b.n	8005a2a <_svfiprintf_r+0x1c2>
 8005a52:	bf00      	nop
 8005a54:	0800666c 	.word	0x0800666c
 8005a58:	08006676 	.word	0x08006676
 8005a5c:	080033fd 	.word	0x080033fd
 8005a60:	080057b1 	.word	0x080057b1
 8005a64:	08006672 	.word	0x08006672

08005a68 <_sbrk_r>:
 8005a68:	b538      	push	{r3, r4, r5, lr}
 8005a6a:	4d06      	ldr	r5, [pc, #24]	; (8005a84 <_sbrk_r+0x1c>)
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	4604      	mov	r4, r0
 8005a70:	4608      	mov	r0, r1
 8005a72:	602b      	str	r3, [r5, #0]
 8005a74:	f7fd faf8 	bl	8003068 <_sbrk>
 8005a78:	1c43      	adds	r3, r0, #1
 8005a7a:	d102      	bne.n	8005a82 <_sbrk_r+0x1a>
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	b103      	cbz	r3, 8005a82 <_sbrk_r+0x1a>
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	bd38      	pop	{r3, r4, r5, pc}
 8005a84:	20000544 	.word	0x20000544

08005a88 <__sread>:
 8005a88:	b510      	push	{r4, lr}
 8005a8a:	460c      	mov	r4, r1
 8005a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a90:	f000 fa72 	bl	8005f78 <_read_r>
 8005a94:	2800      	cmp	r0, #0
 8005a96:	bfab      	itete	ge
 8005a98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a9a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a9c:	181b      	addge	r3, r3, r0
 8005a9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005aa2:	bfac      	ite	ge
 8005aa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005aa6:	81a3      	strhlt	r3, [r4, #12]
 8005aa8:	bd10      	pop	{r4, pc}

08005aaa <__swrite>:
 8005aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aae:	461f      	mov	r7, r3
 8005ab0:	898b      	ldrh	r3, [r1, #12]
 8005ab2:	05db      	lsls	r3, r3, #23
 8005ab4:	4605      	mov	r5, r0
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	4616      	mov	r6, r2
 8005aba:	d505      	bpl.n	8005ac8 <__swrite+0x1e>
 8005abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f000 f886 	bl	8005bd4 <_lseek_r>
 8005ac8:	89a3      	ldrh	r3, [r4, #12]
 8005aca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ace:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ad2:	81a3      	strh	r3, [r4, #12]
 8005ad4:	4632      	mov	r2, r6
 8005ad6:	463b      	mov	r3, r7
 8005ad8:	4628      	mov	r0, r5
 8005ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ade:	f7fc ba4d 	b.w	8001f7c <_write_r>

08005ae2 <__sseek>:
 8005ae2:	b510      	push	{r4, lr}
 8005ae4:	460c      	mov	r4, r1
 8005ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aea:	f000 f873 	bl	8005bd4 <_lseek_r>
 8005aee:	1c43      	adds	r3, r0, #1
 8005af0:	89a3      	ldrh	r3, [r4, #12]
 8005af2:	bf15      	itete	ne
 8005af4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005af6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005afa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005afe:	81a3      	strheq	r3, [r4, #12]
 8005b00:	bf18      	it	ne
 8005b02:	81a3      	strhne	r3, [r4, #12]
 8005b04:	bd10      	pop	{r4, pc}

08005b06 <__sclose>:
 8005b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b0a:	f000 b81f 	b.w	8005b4c <_close_r>
	...

08005b10 <__assert_func>:
 8005b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b12:	4614      	mov	r4, r2
 8005b14:	461a      	mov	r2, r3
 8005b16:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <__assert_func+0x2c>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4605      	mov	r5, r0
 8005b1c:	68d8      	ldr	r0, [r3, #12]
 8005b1e:	b14c      	cbz	r4, 8005b34 <__assert_func+0x24>
 8005b20:	4b07      	ldr	r3, [pc, #28]	; (8005b40 <__assert_func+0x30>)
 8005b22:	9100      	str	r1, [sp, #0]
 8005b24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005b28:	4906      	ldr	r1, [pc, #24]	; (8005b44 <__assert_func+0x34>)
 8005b2a:	462b      	mov	r3, r5
 8005b2c:	f000 f81e 	bl	8005b6c <fiprintf>
 8005b30:	f000 fb02 	bl	8006138 <abort>
 8005b34:	4b04      	ldr	r3, [pc, #16]	; (8005b48 <__assert_func+0x38>)
 8005b36:	461c      	mov	r4, r3
 8005b38:	e7f3      	b.n	8005b22 <__assert_func+0x12>
 8005b3a:	bf00      	nop
 8005b3c:	2000002c 	.word	0x2000002c
 8005b40:	0800667d 	.word	0x0800667d
 8005b44:	0800668a 	.word	0x0800668a
 8005b48:	080066b8 	.word	0x080066b8

08005b4c <_close_r>:
 8005b4c:	b538      	push	{r3, r4, r5, lr}
 8005b4e:	4d06      	ldr	r5, [pc, #24]	; (8005b68 <_close_r+0x1c>)
 8005b50:	2300      	movs	r3, #0
 8005b52:	4604      	mov	r4, r0
 8005b54:	4608      	mov	r0, r1
 8005b56:	602b      	str	r3, [r5, #0]
 8005b58:	f7fd fa51 	bl	8002ffe <_close>
 8005b5c:	1c43      	adds	r3, r0, #1
 8005b5e:	d102      	bne.n	8005b66 <_close_r+0x1a>
 8005b60:	682b      	ldr	r3, [r5, #0]
 8005b62:	b103      	cbz	r3, 8005b66 <_close_r+0x1a>
 8005b64:	6023      	str	r3, [r4, #0]
 8005b66:	bd38      	pop	{r3, r4, r5, pc}
 8005b68:	20000544 	.word	0x20000544

08005b6c <fiprintf>:
 8005b6c:	b40e      	push	{r1, r2, r3}
 8005b6e:	b503      	push	{r0, r1, lr}
 8005b70:	4601      	mov	r1, r0
 8005b72:	ab03      	add	r3, sp, #12
 8005b74:	4805      	ldr	r0, [pc, #20]	; (8005b8c <fiprintf+0x20>)
 8005b76:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b7a:	6800      	ldr	r0, [r0, #0]
 8005b7c:	9301      	str	r3, [sp, #4]
 8005b7e:	f000 f8cb 	bl	8005d18 <_vfiprintf_r>
 8005b82:	b002      	add	sp, #8
 8005b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b88:	b003      	add	sp, #12
 8005b8a:	4770      	bx	lr
 8005b8c:	2000002c 	.word	0x2000002c

08005b90 <_fstat_r>:
 8005b90:	b538      	push	{r3, r4, r5, lr}
 8005b92:	4d07      	ldr	r5, [pc, #28]	; (8005bb0 <_fstat_r+0x20>)
 8005b94:	2300      	movs	r3, #0
 8005b96:	4604      	mov	r4, r0
 8005b98:	4608      	mov	r0, r1
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	602b      	str	r3, [r5, #0]
 8005b9e:	f7fd fa3a 	bl	8003016 <_fstat>
 8005ba2:	1c43      	adds	r3, r0, #1
 8005ba4:	d102      	bne.n	8005bac <_fstat_r+0x1c>
 8005ba6:	682b      	ldr	r3, [r5, #0]
 8005ba8:	b103      	cbz	r3, 8005bac <_fstat_r+0x1c>
 8005baa:	6023      	str	r3, [r4, #0]
 8005bac:	bd38      	pop	{r3, r4, r5, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000544 	.word	0x20000544

08005bb4 <_isatty_r>:
 8005bb4:	b538      	push	{r3, r4, r5, lr}
 8005bb6:	4d06      	ldr	r5, [pc, #24]	; (8005bd0 <_isatty_r+0x1c>)
 8005bb8:	2300      	movs	r3, #0
 8005bba:	4604      	mov	r4, r0
 8005bbc:	4608      	mov	r0, r1
 8005bbe:	602b      	str	r3, [r5, #0]
 8005bc0:	f7fd fa39 	bl	8003036 <_isatty>
 8005bc4:	1c43      	adds	r3, r0, #1
 8005bc6:	d102      	bne.n	8005bce <_isatty_r+0x1a>
 8005bc8:	682b      	ldr	r3, [r5, #0]
 8005bca:	b103      	cbz	r3, 8005bce <_isatty_r+0x1a>
 8005bcc:	6023      	str	r3, [r4, #0]
 8005bce:	bd38      	pop	{r3, r4, r5, pc}
 8005bd0:	20000544 	.word	0x20000544

08005bd4 <_lseek_r>:
 8005bd4:	b538      	push	{r3, r4, r5, lr}
 8005bd6:	4d07      	ldr	r5, [pc, #28]	; (8005bf4 <_lseek_r+0x20>)
 8005bd8:	4604      	mov	r4, r0
 8005bda:	4608      	mov	r0, r1
 8005bdc:	4611      	mov	r1, r2
 8005bde:	2200      	movs	r2, #0
 8005be0:	602a      	str	r2, [r5, #0]
 8005be2:	461a      	mov	r2, r3
 8005be4:	f7fd fa32 	bl	800304c <_lseek>
 8005be8:	1c43      	adds	r3, r0, #1
 8005bea:	d102      	bne.n	8005bf2 <_lseek_r+0x1e>
 8005bec:	682b      	ldr	r3, [r5, #0]
 8005bee:	b103      	cbz	r3, 8005bf2 <_lseek_r+0x1e>
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	bd38      	pop	{r3, r4, r5, pc}
 8005bf4:	20000544 	.word	0x20000544

08005bf8 <__ascii_mbtowc>:
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	b901      	cbnz	r1, 8005bfe <__ascii_mbtowc+0x6>
 8005bfc:	a901      	add	r1, sp, #4
 8005bfe:	b142      	cbz	r2, 8005c12 <__ascii_mbtowc+0x1a>
 8005c00:	b14b      	cbz	r3, 8005c16 <__ascii_mbtowc+0x1e>
 8005c02:	7813      	ldrb	r3, [r2, #0]
 8005c04:	600b      	str	r3, [r1, #0]
 8005c06:	7812      	ldrb	r2, [r2, #0]
 8005c08:	1e10      	subs	r0, r2, #0
 8005c0a:	bf18      	it	ne
 8005c0c:	2001      	movne	r0, #1
 8005c0e:	b002      	add	sp, #8
 8005c10:	4770      	bx	lr
 8005c12:	4610      	mov	r0, r2
 8005c14:	e7fb      	b.n	8005c0e <__ascii_mbtowc+0x16>
 8005c16:	f06f 0001 	mvn.w	r0, #1
 8005c1a:	e7f8      	b.n	8005c0e <__ascii_mbtowc+0x16>

08005c1c <memmove>:
 8005c1c:	4288      	cmp	r0, r1
 8005c1e:	b510      	push	{r4, lr}
 8005c20:	eb01 0402 	add.w	r4, r1, r2
 8005c24:	d902      	bls.n	8005c2c <memmove+0x10>
 8005c26:	4284      	cmp	r4, r0
 8005c28:	4623      	mov	r3, r4
 8005c2a:	d807      	bhi.n	8005c3c <memmove+0x20>
 8005c2c:	1e43      	subs	r3, r0, #1
 8005c2e:	42a1      	cmp	r1, r4
 8005c30:	d008      	beq.n	8005c44 <memmove+0x28>
 8005c32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c3a:	e7f8      	b.n	8005c2e <memmove+0x12>
 8005c3c:	4402      	add	r2, r0
 8005c3e:	4601      	mov	r1, r0
 8005c40:	428a      	cmp	r2, r1
 8005c42:	d100      	bne.n	8005c46 <memmove+0x2a>
 8005c44:	bd10      	pop	{r4, pc}
 8005c46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c4e:	e7f7      	b.n	8005c40 <memmove+0x24>

08005c50 <__malloc_lock>:
 8005c50:	4801      	ldr	r0, [pc, #4]	; (8005c58 <__malloc_lock+0x8>)
 8005c52:	f7ff b8c4 	b.w	8004dde <__retarget_lock_acquire_recursive>
 8005c56:	bf00      	nop
 8005c58:	20000538 	.word	0x20000538

08005c5c <__malloc_unlock>:
 8005c5c:	4801      	ldr	r0, [pc, #4]	; (8005c64 <__malloc_unlock+0x8>)
 8005c5e:	f7ff b8bf 	b.w	8004de0 <__retarget_lock_release_recursive>
 8005c62:	bf00      	nop
 8005c64:	20000538 	.word	0x20000538

08005c68 <_realloc_r>:
 8005c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c6c:	4680      	mov	r8, r0
 8005c6e:	4614      	mov	r4, r2
 8005c70:	460e      	mov	r6, r1
 8005c72:	b921      	cbnz	r1, 8005c7e <_realloc_r+0x16>
 8005c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c78:	4611      	mov	r1, r2
 8005c7a:	f7ff bd25 	b.w	80056c8 <_malloc_r>
 8005c7e:	b92a      	cbnz	r2, 8005c8c <_realloc_r+0x24>
 8005c80:	f7ff fcb6 	bl	80055f0 <_free_r>
 8005c84:	4625      	mov	r5, r4
 8005c86:	4628      	mov	r0, r5
 8005c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c8c:	f000 fa5b 	bl	8006146 <_malloc_usable_size_r>
 8005c90:	4284      	cmp	r4, r0
 8005c92:	4607      	mov	r7, r0
 8005c94:	d802      	bhi.n	8005c9c <_realloc_r+0x34>
 8005c96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c9a:	d812      	bhi.n	8005cc2 <_realloc_r+0x5a>
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	4640      	mov	r0, r8
 8005ca0:	f7ff fd12 	bl	80056c8 <_malloc_r>
 8005ca4:	4605      	mov	r5, r0
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	d0ed      	beq.n	8005c86 <_realloc_r+0x1e>
 8005caa:	42bc      	cmp	r4, r7
 8005cac:	4622      	mov	r2, r4
 8005cae:	4631      	mov	r1, r6
 8005cb0:	bf28      	it	cs
 8005cb2:	463a      	movcs	r2, r7
 8005cb4:	f7fd faec 	bl	8003290 <memcpy>
 8005cb8:	4631      	mov	r1, r6
 8005cba:	4640      	mov	r0, r8
 8005cbc:	f7ff fc98 	bl	80055f0 <_free_r>
 8005cc0:	e7e1      	b.n	8005c86 <_realloc_r+0x1e>
 8005cc2:	4635      	mov	r5, r6
 8005cc4:	e7df      	b.n	8005c86 <_realloc_r+0x1e>

08005cc6 <__sfputc_r>:
 8005cc6:	6893      	ldr	r3, [r2, #8]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	b410      	push	{r4}
 8005cce:	6093      	str	r3, [r2, #8]
 8005cd0:	da08      	bge.n	8005ce4 <__sfputc_r+0x1e>
 8005cd2:	6994      	ldr	r4, [r2, #24]
 8005cd4:	42a3      	cmp	r3, r4
 8005cd6:	db01      	blt.n	8005cdc <__sfputc_r+0x16>
 8005cd8:	290a      	cmp	r1, #10
 8005cda:	d103      	bne.n	8005ce4 <__sfputc_r+0x1e>
 8005cdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ce0:	f000 b95c 	b.w	8005f9c <__swbuf_r>
 8005ce4:	6813      	ldr	r3, [r2, #0]
 8005ce6:	1c58      	adds	r0, r3, #1
 8005ce8:	6010      	str	r0, [r2, #0]
 8005cea:	7019      	strb	r1, [r3, #0]
 8005cec:	4608      	mov	r0, r1
 8005cee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <__sfputs_r>:
 8005cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	460f      	mov	r7, r1
 8005cfa:	4614      	mov	r4, r2
 8005cfc:	18d5      	adds	r5, r2, r3
 8005cfe:	42ac      	cmp	r4, r5
 8005d00:	d101      	bne.n	8005d06 <__sfputs_r+0x12>
 8005d02:	2000      	movs	r0, #0
 8005d04:	e007      	b.n	8005d16 <__sfputs_r+0x22>
 8005d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d0a:	463a      	mov	r2, r7
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	f7ff ffda 	bl	8005cc6 <__sfputc_r>
 8005d12:	1c43      	adds	r3, r0, #1
 8005d14:	d1f3      	bne.n	8005cfe <__sfputs_r+0xa>
 8005d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d18 <_vfiprintf_r>:
 8005d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d1c:	460d      	mov	r5, r1
 8005d1e:	b09d      	sub	sp, #116	; 0x74
 8005d20:	4614      	mov	r4, r2
 8005d22:	4698      	mov	r8, r3
 8005d24:	4606      	mov	r6, r0
 8005d26:	b118      	cbz	r0, 8005d30 <_vfiprintf_r+0x18>
 8005d28:	6983      	ldr	r3, [r0, #24]
 8005d2a:	b90b      	cbnz	r3, 8005d30 <_vfiprintf_r+0x18>
 8005d2c:	f7fe ffb4 	bl	8004c98 <__sinit>
 8005d30:	4b89      	ldr	r3, [pc, #548]	; (8005f58 <_vfiprintf_r+0x240>)
 8005d32:	429d      	cmp	r5, r3
 8005d34:	d11b      	bne.n	8005d6e <_vfiprintf_r+0x56>
 8005d36:	6875      	ldr	r5, [r6, #4]
 8005d38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d3a:	07d9      	lsls	r1, r3, #31
 8005d3c:	d405      	bmi.n	8005d4a <_vfiprintf_r+0x32>
 8005d3e:	89ab      	ldrh	r3, [r5, #12]
 8005d40:	059a      	lsls	r2, r3, #22
 8005d42:	d402      	bmi.n	8005d4a <_vfiprintf_r+0x32>
 8005d44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d46:	f7ff f84a 	bl	8004dde <__retarget_lock_acquire_recursive>
 8005d4a:	89ab      	ldrh	r3, [r5, #12]
 8005d4c:	071b      	lsls	r3, r3, #28
 8005d4e:	d501      	bpl.n	8005d54 <_vfiprintf_r+0x3c>
 8005d50:	692b      	ldr	r3, [r5, #16]
 8005d52:	b9eb      	cbnz	r3, 8005d90 <_vfiprintf_r+0x78>
 8005d54:	4629      	mov	r1, r5
 8005d56:	4630      	mov	r0, r6
 8005d58:	f000 f980 	bl	800605c <__swsetup_r>
 8005d5c:	b1c0      	cbz	r0, 8005d90 <_vfiprintf_r+0x78>
 8005d5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d60:	07dc      	lsls	r4, r3, #31
 8005d62:	d50e      	bpl.n	8005d82 <_vfiprintf_r+0x6a>
 8005d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d68:	b01d      	add	sp, #116	; 0x74
 8005d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d6e:	4b7b      	ldr	r3, [pc, #492]	; (8005f5c <_vfiprintf_r+0x244>)
 8005d70:	429d      	cmp	r5, r3
 8005d72:	d101      	bne.n	8005d78 <_vfiprintf_r+0x60>
 8005d74:	68b5      	ldr	r5, [r6, #8]
 8005d76:	e7df      	b.n	8005d38 <_vfiprintf_r+0x20>
 8005d78:	4b79      	ldr	r3, [pc, #484]	; (8005f60 <_vfiprintf_r+0x248>)
 8005d7a:	429d      	cmp	r5, r3
 8005d7c:	bf08      	it	eq
 8005d7e:	68f5      	ldreq	r5, [r6, #12]
 8005d80:	e7da      	b.n	8005d38 <_vfiprintf_r+0x20>
 8005d82:	89ab      	ldrh	r3, [r5, #12]
 8005d84:	0598      	lsls	r0, r3, #22
 8005d86:	d4ed      	bmi.n	8005d64 <_vfiprintf_r+0x4c>
 8005d88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d8a:	f7ff f829 	bl	8004de0 <__retarget_lock_release_recursive>
 8005d8e:	e7e9      	b.n	8005d64 <_vfiprintf_r+0x4c>
 8005d90:	2300      	movs	r3, #0
 8005d92:	9309      	str	r3, [sp, #36]	; 0x24
 8005d94:	2320      	movs	r3, #32
 8005d96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d9e:	2330      	movs	r3, #48	; 0x30
 8005da0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005f64 <_vfiprintf_r+0x24c>
 8005da4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005da8:	f04f 0901 	mov.w	r9, #1
 8005dac:	4623      	mov	r3, r4
 8005dae:	469a      	mov	sl, r3
 8005db0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005db4:	b10a      	cbz	r2, 8005dba <_vfiprintf_r+0xa2>
 8005db6:	2a25      	cmp	r2, #37	; 0x25
 8005db8:	d1f9      	bne.n	8005dae <_vfiprintf_r+0x96>
 8005dba:	ebba 0b04 	subs.w	fp, sl, r4
 8005dbe:	d00b      	beq.n	8005dd8 <_vfiprintf_r+0xc0>
 8005dc0:	465b      	mov	r3, fp
 8005dc2:	4622      	mov	r2, r4
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	f7ff ff94 	bl	8005cf4 <__sfputs_r>
 8005dcc:	3001      	adds	r0, #1
 8005dce:	f000 80aa 	beq.w	8005f26 <_vfiprintf_r+0x20e>
 8005dd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dd4:	445a      	add	r2, fp
 8005dd6:	9209      	str	r2, [sp, #36]	; 0x24
 8005dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 80a2 	beq.w	8005f26 <_vfiprintf_r+0x20e>
 8005de2:	2300      	movs	r3, #0
 8005de4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005de8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dec:	f10a 0a01 	add.w	sl, sl, #1
 8005df0:	9304      	str	r3, [sp, #16]
 8005df2:	9307      	str	r3, [sp, #28]
 8005df4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005df8:	931a      	str	r3, [sp, #104]	; 0x68
 8005dfa:	4654      	mov	r4, sl
 8005dfc:	2205      	movs	r2, #5
 8005dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e02:	4858      	ldr	r0, [pc, #352]	; (8005f64 <_vfiprintf_r+0x24c>)
 8005e04:	f7fa f9ec 	bl	80001e0 <memchr>
 8005e08:	9a04      	ldr	r2, [sp, #16]
 8005e0a:	b9d8      	cbnz	r0, 8005e44 <_vfiprintf_r+0x12c>
 8005e0c:	06d1      	lsls	r1, r2, #27
 8005e0e:	bf44      	itt	mi
 8005e10:	2320      	movmi	r3, #32
 8005e12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e16:	0713      	lsls	r3, r2, #28
 8005e18:	bf44      	itt	mi
 8005e1a:	232b      	movmi	r3, #43	; 0x2b
 8005e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e20:	f89a 3000 	ldrb.w	r3, [sl]
 8005e24:	2b2a      	cmp	r3, #42	; 0x2a
 8005e26:	d015      	beq.n	8005e54 <_vfiprintf_r+0x13c>
 8005e28:	9a07      	ldr	r2, [sp, #28]
 8005e2a:	4654      	mov	r4, sl
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	f04f 0c0a 	mov.w	ip, #10
 8005e32:	4621      	mov	r1, r4
 8005e34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e38:	3b30      	subs	r3, #48	; 0x30
 8005e3a:	2b09      	cmp	r3, #9
 8005e3c:	d94e      	bls.n	8005edc <_vfiprintf_r+0x1c4>
 8005e3e:	b1b0      	cbz	r0, 8005e6e <_vfiprintf_r+0x156>
 8005e40:	9207      	str	r2, [sp, #28]
 8005e42:	e014      	b.n	8005e6e <_vfiprintf_r+0x156>
 8005e44:	eba0 0308 	sub.w	r3, r0, r8
 8005e48:	fa09 f303 	lsl.w	r3, r9, r3
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	9304      	str	r3, [sp, #16]
 8005e50:	46a2      	mov	sl, r4
 8005e52:	e7d2      	b.n	8005dfa <_vfiprintf_r+0xe2>
 8005e54:	9b03      	ldr	r3, [sp, #12]
 8005e56:	1d19      	adds	r1, r3, #4
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	9103      	str	r1, [sp, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	bfbb      	ittet	lt
 8005e60:	425b      	neglt	r3, r3
 8005e62:	f042 0202 	orrlt.w	r2, r2, #2
 8005e66:	9307      	strge	r3, [sp, #28]
 8005e68:	9307      	strlt	r3, [sp, #28]
 8005e6a:	bfb8      	it	lt
 8005e6c:	9204      	strlt	r2, [sp, #16]
 8005e6e:	7823      	ldrb	r3, [r4, #0]
 8005e70:	2b2e      	cmp	r3, #46	; 0x2e
 8005e72:	d10c      	bne.n	8005e8e <_vfiprintf_r+0x176>
 8005e74:	7863      	ldrb	r3, [r4, #1]
 8005e76:	2b2a      	cmp	r3, #42	; 0x2a
 8005e78:	d135      	bne.n	8005ee6 <_vfiprintf_r+0x1ce>
 8005e7a:	9b03      	ldr	r3, [sp, #12]
 8005e7c:	1d1a      	adds	r2, r3, #4
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	9203      	str	r2, [sp, #12]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	bfb8      	it	lt
 8005e86:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005e8a:	3402      	adds	r4, #2
 8005e8c:	9305      	str	r3, [sp, #20]
 8005e8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005f74 <_vfiprintf_r+0x25c>
 8005e92:	7821      	ldrb	r1, [r4, #0]
 8005e94:	2203      	movs	r2, #3
 8005e96:	4650      	mov	r0, sl
 8005e98:	f7fa f9a2 	bl	80001e0 <memchr>
 8005e9c:	b140      	cbz	r0, 8005eb0 <_vfiprintf_r+0x198>
 8005e9e:	2340      	movs	r3, #64	; 0x40
 8005ea0:	eba0 000a 	sub.w	r0, r0, sl
 8005ea4:	fa03 f000 	lsl.w	r0, r3, r0
 8005ea8:	9b04      	ldr	r3, [sp, #16]
 8005eaa:	4303      	orrs	r3, r0
 8005eac:	3401      	adds	r4, #1
 8005eae:	9304      	str	r3, [sp, #16]
 8005eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eb4:	482c      	ldr	r0, [pc, #176]	; (8005f68 <_vfiprintf_r+0x250>)
 8005eb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005eba:	2206      	movs	r2, #6
 8005ebc:	f7fa f990 	bl	80001e0 <memchr>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	d03f      	beq.n	8005f44 <_vfiprintf_r+0x22c>
 8005ec4:	4b29      	ldr	r3, [pc, #164]	; (8005f6c <_vfiprintf_r+0x254>)
 8005ec6:	bb1b      	cbnz	r3, 8005f10 <_vfiprintf_r+0x1f8>
 8005ec8:	9b03      	ldr	r3, [sp, #12]
 8005eca:	3307      	adds	r3, #7
 8005ecc:	f023 0307 	bic.w	r3, r3, #7
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	9303      	str	r3, [sp, #12]
 8005ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ed6:	443b      	add	r3, r7
 8005ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8005eda:	e767      	b.n	8005dac <_vfiprintf_r+0x94>
 8005edc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	2001      	movs	r0, #1
 8005ee4:	e7a5      	b.n	8005e32 <_vfiprintf_r+0x11a>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	3401      	adds	r4, #1
 8005eea:	9305      	str	r3, [sp, #20]
 8005eec:	4619      	mov	r1, r3
 8005eee:	f04f 0c0a 	mov.w	ip, #10
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ef8:	3a30      	subs	r2, #48	; 0x30
 8005efa:	2a09      	cmp	r2, #9
 8005efc:	d903      	bls.n	8005f06 <_vfiprintf_r+0x1ee>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0c5      	beq.n	8005e8e <_vfiprintf_r+0x176>
 8005f02:	9105      	str	r1, [sp, #20]
 8005f04:	e7c3      	b.n	8005e8e <_vfiprintf_r+0x176>
 8005f06:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e7f0      	b.n	8005ef2 <_vfiprintf_r+0x1da>
 8005f10:	ab03      	add	r3, sp, #12
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	462a      	mov	r2, r5
 8005f16:	4b16      	ldr	r3, [pc, #88]	; (8005f70 <_vfiprintf_r+0x258>)
 8005f18:	a904      	add	r1, sp, #16
 8005f1a:	4630      	mov	r0, r6
 8005f1c:	f7fd fa6e 	bl	80033fc <_printf_float>
 8005f20:	4607      	mov	r7, r0
 8005f22:	1c78      	adds	r0, r7, #1
 8005f24:	d1d6      	bne.n	8005ed4 <_vfiprintf_r+0x1bc>
 8005f26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f28:	07d9      	lsls	r1, r3, #31
 8005f2a:	d405      	bmi.n	8005f38 <_vfiprintf_r+0x220>
 8005f2c:	89ab      	ldrh	r3, [r5, #12]
 8005f2e:	059a      	lsls	r2, r3, #22
 8005f30:	d402      	bmi.n	8005f38 <_vfiprintf_r+0x220>
 8005f32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f34:	f7fe ff54 	bl	8004de0 <__retarget_lock_release_recursive>
 8005f38:	89ab      	ldrh	r3, [r5, #12]
 8005f3a:	065b      	lsls	r3, r3, #25
 8005f3c:	f53f af12 	bmi.w	8005d64 <_vfiprintf_r+0x4c>
 8005f40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f42:	e711      	b.n	8005d68 <_vfiprintf_r+0x50>
 8005f44:	ab03      	add	r3, sp, #12
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	462a      	mov	r2, r5
 8005f4a:	4b09      	ldr	r3, [pc, #36]	; (8005f70 <_vfiprintf_r+0x258>)
 8005f4c:	a904      	add	r1, sp, #16
 8005f4e:	4630      	mov	r0, r6
 8005f50:	f7fd fcf8 	bl	8003944 <_printf_i>
 8005f54:	e7e4      	b.n	8005f20 <_vfiprintf_r+0x208>
 8005f56:	bf00      	nop
 8005f58:	080064d4 	.word	0x080064d4
 8005f5c:	080064f4 	.word	0x080064f4
 8005f60:	080064b4 	.word	0x080064b4
 8005f64:	0800666c 	.word	0x0800666c
 8005f68:	08006676 	.word	0x08006676
 8005f6c:	080033fd 	.word	0x080033fd
 8005f70:	08005cf5 	.word	0x08005cf5
 8005f74:	08006672 	.word	0x08006672

08005f78 <_read_r>:
 8005f78:	b538      	push	{r3, r4, r5, lr}
 8005f7a:	4d07      	ldr	r5, [pc, #28]	; (8005f98 <_read_r+0x20>)
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	4608      	mov	r0, r1
 8005f80:	4611      	mov	r1, r2
 8005f82:	2200      	movs	r2, #0
 8005f84:	602a      	str	r2, [r5, #0]
 8005f86:	461a      	mov	r2, r3
 8005f88:	f7fd f81c 	bl	8002fc4 <_read>
 8005f8c:	1c43      	adds	r3, r0, #1
 8005f8e:	d102      	bne.n	8005f96 <_read_r+0x1e>
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	b103      	cbz	r3, 8005f96 <_read_r+0x1e>
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	bd38      	pop	{r3, r4, r5, pc}
 8005f98:	20000544 	.word	0x20000544

08005f9c <__swbuf_r>:
 8005f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9e:	460e      	mov	r6, r1
 8005fa0:	4614      	mov	r4, r2
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	b118      	cbz	r0, 8005fae <__swbuf_r+0x12>
 8005fa6:	6983      	ldr	r3, [r0, #24]
 8005fa8:	b90b      	cbnz	r3, 8005fae <__swbuf_r+0x12>
 8005faa:	f7fe fe75 	bl	8004c98 <__sinit>
 8005fae:	4b21      	ldr	r3, [pc, #132]	; (8006034 <__swbuf_r+0x98>)
 8005fb0:	429c      	cmp	r4, r3
 8005fb2:	d12b      	bne.n	800600c <__swbuf_r+0x70>
 8005fb4:	686c      	ldr	r4, [r5, #4]
 8005fb6:	69a3      	ldr	r3, [r4, #24]
 8005fb8:	60a3      	str	r3, [r4, #8]
 8005fba:	89a3      	ldrh	r3, [r4, #12]
 8005fbc:	071a      	lsls	r2, r3, #28
 8005fbe:	d52f      	bpl.n	8006020 <__swbuf_r+0x84>
 8005fc0:	6923      	ldr	r3, [r4, #16]
 8005fc2:	b36b      	cbz	r3, 8006020 <__swbuf_r+0x84>
 8005fc4:	6923      	ldr	r3, [r4, #16]
 8005fc6:	6820      	ldr	r0, [r4, #0]
 8005fc8:	1ac0      	subs	r0, r0, r3
 8005fca:	6963      	ldr	r3, [r4, #20]
 8005fcc:	b2f6      	uxtb	r6, r6
 8005fce:	4283      	cmp	r3, r0
 8005fd0:	4637      	mov	r7, r6
 8005fd2:	dc04      	bgt.n	8005fde <__swbuf_r+0x42>
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f7fe fdca 	bl	8004b70 <_fflush_r>
 8005fdc:	bb30      	cbnz	r0, 800602c <__swbuf_r+0x90>
 8005fde:	68a3      	ldr	r3, [r4, #8]
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	60a3      	str	r3, [r4, #8]
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	6022      	str	r2, [r4, #0]
 8005fea:	701e      	strb	r6, [r3, #0]
 8005fec:	6963      	ldr	r3, [r4, #20]
 8005fee:	3001      	adds	r0, #1
 8005ff0:	4283      	cmp	r3, r0
 8005ff2:	d004      	beq.n	8005ffe <__swbuf_r+0x62>
 8005ff4:	89a3      	ldrh	r3, [r4, #12]
 8005ff6:	07db      	lsls	r3, r3, #31
 8005ff8:	d506      	bpl.n	8006008 <__swbuf_r+0x6c>
 8005ffa:	2e0a      	cmp	r6, #10
 8005ffc:	d104      	bne.n	8006008 <__swbuf_r+0x6c>
 8005ffe:	4621      	mov	r1, r4
 8006000:	4628      	mov	r0, r5
 8006002:	f7fe fdb5 	bl	8004b70 <_fflush_r>
 8006006:	b988      	cbnz	r0, 800602c <__swbuf_r+0x90>
 8006008:	4638      	mov	r0, r7
 800600a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800600c:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <__swbuf_r+0x9c>)
 800600e:	429c      	cmp	r4, r3
 8006010:	d101      	bne.n	8006016 <__swbuf_r+0x7a>
 8006012:	68ac      	ldr	r4, [r5, #8]
 8006014:	e7cf      	b.n	8005fb6 <__swbuf_r+0x1a>
 8006016:	4b09      	ldr	r3, [pc, #36]	; (800603c <__swbuf_r+0xa0>)
 8006018:	429c      	cmp	r4, r3
 800601a:	bf08      	it	eq
 800601c:	68ec      	ldreq	r4, [r5, #12]
 800601e:	e7ca      	b.n	8005fb6 <__swbuf_r+0x1a>
 8006020:	4621      	mov	r1, r4
 8006022:	4628      	mov	r0, r5
 8006024:	f000 f81a 	bl	800605c <__swsetup_r>
 8006028:	2800      	cmp	r0, #0
 800602a:	d0cb      	beq.n	8005fc4 <__swbuf_r+0x28>
 800602c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006030:	e7ea      	b.n	8006008 <__swbuf_r+0x6c>
 8006032:	bf00      	nop
 8006034:	080064d4 	.word	0x080064d4
 8006038:	080064f4 	.word	0x080064f4
 800603c:	080064b4 	.word	0x080064b4

08006040 <__ascii_wctomb>:
 8006040:	b149      	cbz	r1, 8006056 <__ascii_wctomb+0x16>
 8006042:	2aff      	cmp	r2, #255	; 0xff
 8006044:	bf85      	ittet	hi
 8006046:	238a      	movhi	r3, #138	; 0x8a
 8006048:	6003      	strhi	r3, [r0, #0]
 800604a:	700a      	strbls	r2, [r1, #0]
 800604c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006050:	bf98      	it	ls
 8006052:	2001      	movls	r0, #1
 8006054:	4770      	bx	lr
 8006056:	4608      	mov	r0, r1
 8006058:	4770      	bx	lr
	...

0800605c <__swsetup_r>:
 800605c:	4b32      	ldr	r3, [pc, #200]	; (8006128 <__swsetup_r+0xcc>)
 800605e:	b570      	push	{r4, r5, r6, lr}
 8006060:	681d      	ldr	r5, [r3, #0]
 8006062:	4606      	mov	r6, r0
 8006064:	460c      	mov	r4, r1
 8006066:	b125      	cbz	r5, 8006072 <__swsetup_r+0x16>
 8006068:	69ab      	ldr	r3, [r5, #24]
 800606a:	b913      	cbnz	r3, 8006072 <__swsetup_r+0x16>
 800606c:	4628      	mov	r0, r5
 800606e:	f7fe fe13 	bl	8004c98 <__sinit>
 8006072:	4b2e      	ldr	r3, [pc, #184]	; (800612c <__swsetup_r+0xd0>)
 8006074:	429c      	cmp	r4, r3
 8006076:	d10f      	bne.n	8006098 <__swsetup_r+0x3c>
 8006078:	686c      	ldr	r4, [r5, #4]
 800607a:	89a3      	ldrh	r3, [r4, #12]
 800607c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006080:	0719      	lsls	r1, r3, #28
 8006082:	d42c      	bmi.n	80060de <__swsetup_r+0x82>
 8006084:	06dd      	lsls	r5, r3, #27
 8006086:	d411      	bmi.n	80060ac <__swsetup_r+0x50>
 8006088:	2309      	movs	r3, #9
 800608a:	6033      	str	r3, [r6, #0]
 800608c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006090:	81a3      	strh	r3, [r4, #12]
 8006092:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006096:	e03e      	b.n	8006116 <__swsetup_r+0xba>
 8006098:	4b25      	ldr	r3, [pc, #148]	; (8006130 <__swsetup_r+0xd4>)
 800609a:	429c      	cmp	r4, r3
 800609c:	d101      	bne.n	80060a2 <__swsetup_r+0x46>
 800609e:	68ac      	ldr	r4, [r5, #8]
 80060a0:	e7eb      	b.n	800607a <__swsetup_r+0x1e>
 80060a2:	4b24      	ldr	r3, [pc, #144]	; (8006134 <__swsetup_r+0xd8>)
 80060a4:	429c      	cmp	r4, r3
 80060a6:	bf08      	it	eq
 80060a8:	68ec      	ldreq	r4, [r5, #12]
 80060aa:	e7e6      	b.n	800607a <__swsetup_r+0x1e>
 80060ac:	0758      	lsls	r0, r3, #29
 80060ae:	d512      	bpl.n	80060d6 <__swsetup_r+0x7a>
 80060b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060b2:	b141      	cbz	r1, 80060c6 <__swsetup_r+0x6a>
 80060b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060b8:	4299      	cmp	r1, r3
 80060ba:	d002      	beq.n	80060c2 <__swsetup_r+0x66>
 80060bc:	4630      	mov	r0, r6
 80060be:	f7ff fa97 	bl	80055f0 <_free_r>
 80060c2:	2300      	movs	r3, #0
 80060c4:	6363      	str	r3, [r4, #52]	; 0x34
 80060c6:	89a3      	ldrh	r3, [r4, #12]
 80060c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060cc:	81a3      	strh	r3, [r4, #12]
 80060ce:	2300      	movs	r3, #0
 80060d0:	6063      	str	r3, [r4, #4]
 80060d2:	6923      	ldr	r3, [r4, #16]
 80060d4:	6023      	str	r3, [r4, #0]
 80060d6:	89a3      	ldrh	r3, [r4, #12]
 80060d8:	f043 0308 	orr.w	r3, r3, #8
 80060dc:	81a3      	strh	r3, [r4, #12]
 80060de:	6923      	ldr	r3, [r4, #16]
 80060e0:	b94b      	cbnz	r3, 80060f6 <__swsetup_r+0x9a>
 80060e2:	89a3      	ldrh	r3, [r4, #12]
 80060e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060ec:	d003      	beq.n	80060f6 <__swsetup_r+0x9a>
 80060ee:	4621      	mov	r1, r4
 80060f0:	4630      	mov	r0, r6
 80060f2:	f7fe fe9b 	bl	8004e2c <__smakebuf_r>
 80060f6:	89a0      	ldrh	r0, [r4, #12]
 80060f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060fc:	f010 0301 	ands.w	r3, r0, #1
 8006100:	d00a      	beq.n	8006118 <__swsetup_r+0xbc>
 8006102:	2300      	movs	r3, #0
 8006104:	60a3      	str	r3, [r4, #8]
 8006106:	6963      	ldr	r3, [r4, #20]
 8006108:	425b      	negs	r3, r3
 800610a:	61a3      	str	r3, [r4, #24]
 800610c:	6923      	ldr	r3, [r4, #16]
 800610e:	b943      	cbnz	r3, 8006122 <__swsetup_r+0xc6>
 8006110:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006114:	d1ba      	bne.n	800608c <__swsetup_r+0x30>
 8006116:	bd70      	pop	{r4, r5, r6, pc}
 8006118:	0781      	lsls	r1, r0, #30
 800611a:	bf58      	it	pl
 800611c:	6963      	ldrpl	r3, [r4, #20]
 800611e:	60a3      	str	r3, [r4, #8]
 8006120:	e7f4      	b.n	800610c <__swsetup_r+0xb0>
 8006122:	2000      	movs	r0, #0
 8006124:	e7f7      	b.n	8006116 <__swsetup_r+0xba>
 8006126:	bf00      	nop
 8006128:	2000002c 	.word	0x2000002c
 800612c:	080064d4 	.word	0x080064d4
 8006130:	080064f4 	.word	0x080064f4
 8006134:	080064b4 	.word	0x080064b4

08006138 <abort>:
 8006138:	b508      	push	{r3, lr}
 800613a:	2006      	movs	r0, #6
 800613c:	f000 f834 	bl	80061a8 <raise>
 8006140:	2001      	movs	r0, #1
 8006142:	f7fc ff35 	bl	8002fb0 <_exit>

08006146 <_malloc_usable_size_r>:
 8006146:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800614a:	1f18      	subs	r0, r3, #4
 800614c:	2b00      	cmp	r3, #0
 800614e:	bfbc      	itt	lt
 8006150:	580b      	ldrlt	r3, [r1, r0]
 8006152:	18c0      	addlt	r0, r0, r3
 8006154:	4770      	bx	lr

08006156 <_raise_r>:
 8006156:	291f      	cmp	r1, #31
 8006158:	b538      	push	{r3, r4, r5, lr}
 800615a:	4604      	mov	r4, r0
 800615c:	460d      	mov	r5, r1
 800615e:	d904      	bls.n	800616a <_raise_r+0x14>
 8006160:	2316      	movs	r3, #22
 8006162:	6003      	str	r3, [r0, #0]
 8006164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006168:	bd38      	pop	{r3, r4, r5, pc}
 800616a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800616c:	b112      	cbz	r2, 8006174 <_raise_r+0x1e>
 800616e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006172:	b94b      	cbnz	r3, 8006188 <_raise_r+0x32>
 8006174:	4620      	mov	r0, r4
 8006176:	f000 f831 	bl	80061dc <_getpid_r>
 800617a:	462a      	mov	r2, r5
 800617c:	4601      	mov	r1, r0
 800617e:	4620      	mov	r0, r4
 8006180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006184:	f000 b818 	b.w	80061b8 <_kill_r>
 8006188:	2b01      	cmp	r3, #1
 800618a:	d00a      	beq.n	80061a2 <_raise_r+0x4c>
 800618c:	1c59      	adds	r1, r3, #1
 800618e:	d103      	bne.n	8006198 <_raise_r+0x42>
 8006190:	2316      	movs	r3, #22
 8006192:	6003      	str	r3, [r0, #0]
 8006194:	2001      	movs	r0, #1
 8006196:	e7e7      	b.n	8006168 <_raise_r+0x12>
 8006198:	2400      	movs	r4, #0
 800619a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800619e:	4628      	mov	r0, r5
 80061a0:	4798      	blx	r3
 80061a2:	2000      	movs	r0, #0
 80061a4:	e7e0      	b.n	8006168 <_raise_r+0x12>
	...

080061a8 <raise>:
 80061a8:	4b02      	ldr	r3, [pc, #8]	; (80061b4 <raise+0xc>)
 80061aa:	4601      	mov	r1, r0
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	f7ff bfd2 	b.w	8006156 <_raise_r>
 80061b2:	bf00      	nop
 80061b4:	2000002c 	.word	0x2000002c

080061b8 <_kill_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4d07      	ldr	r5, [pc, #28]	; (80061d8 <_kill_r+0x20>)
 80061bc:	2300      	movs	r3, #0
 80061be:	4604      	mov	r4, r0
 80061c0:	4608      	mov	r0, r1
 80061c2:	4611      	mov	r1, r2
 80061c4:	602b      	str	r3, [r5, #0]
 80061c6:	f7fc fee3 	bl	8002f90 <_kill>
 80061ca:	1c43      	adds	r3, r0, #1
 80061cc:	d102      	bne.n	80061d4 <_kill_r+0x1c>
 80061ce:	682b      	ldr	r3, [r5, #0]
 80061d0:	b103      	cbz	r3, 80061d4 <_kill_r+0x1c>
 80061d2:	6023      	str	r3, [r4, #0]
 80061d4:	bd38      	pop	{r3, r4, r5, pc}
 80061d6:	bf00      	nop
 80061d8:	20000544 	.word	0x20000544

080061dc <_getpid_r>:
 80061dc:	f7fc bed0 	b.w	8002f80 <_getpid>

080061e0 <_init>:
 80061e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e2:	bf00      	nop
 80061e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061e6:	bc08      	pop	{r3}
 80061e8:	469e      	mov	lr, r3
 80061ea:	4770      	bx	lr

080061ec <_fini>:
 80061ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ee:	bf00      	nop
 80061f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061f2:	bc08      	pop	{r3}
 80061f4:	469e      	mov	lr, r3
 80061f6:	4770      	bx	lr
